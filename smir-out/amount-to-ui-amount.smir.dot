digraph {
  label="pinocchio_token_program";
  node [shape=rectangle];
  Xb6cd6f60b3fbc602_0 [label="Intr: \nsimd_reduce_all", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X11f225f18df60610_0 [label="_ZN4core5slice6memchr14me\nmchr_aligned17h9271c4044b\n731152E", color=red];
  X308a72169d16c218_0 [label="Intr: \nsimd_bitmask", color=red];
  X3772d65821e1463b_0 [label="Intr: \nsimd_or", color=red];
  X308a72169d16c218_0 [label="Intr: \nsimd_bitmask", color=red];
  Xf85b79c5bd16f087_0 [label="_ZN4core3cmp6min_by17h26e\n6c12f90697119E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xfd88df1009b24094_0 [label="Intr: \nptr_offset_from_unsigned", color=red];
  X5740f420bf9fe2ca_0 [label="_ZN25pinocchio_token_inte\nrface5error140_$LT$impl$u\n20$core..convert..From$LT\n$pinocchio_token_interfac\ne..error..TokenError$GT$$\nu20$for$u20$pinocchio..pr\nogram_error..ProgramError\n$GT$4from17hc1cb1962b9bbc\nd3cE", color=red];
  X589d41d6375532a6_0 [label="_ZN9pinocchio12account_in\nfo11AccountInfo8data_ptr1\n7hfaf55f23b57345a5E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X31a239ce3d11fff8_0 [label="Intr: \nsimd_eq", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  Xa5ca904ae82432b1_0 [label="_ZN79_$LT$core..result..R\nesult$LT$T$C$E$GT$$u20$as\n$u20$core..ops..try_trait\n..Try$GT$6branch17hc4c209\ncdb7928292E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xfffaab11503b9894_0 [label="_ZN4core9panicking9panic_\nfmt17h3df1a4d3dd80ed56E", color=red];
  X9b498145f7dc0efa_0 [label="_ZN4core6option13unwrap_f\nailed17hb0fa9493deab9974E", color=red];
  X308a72169d16c218_0 [label="Intr: \nsimd_bitmask", color=red];
  Xb7bf8399f7d46827_0 [label="_ZN4core5slice5index26sli\nce_start_index_len_fail17\nhc3d07dac3414cccaE", color=red];
  X737432dcfae07d65_0 [label="Intr: \nsaturating_sub", color=red];
  X3e41fe755ef8b4ae_0 [label="_ZN50_$LT$T$u20$as$u20$co\nre..convert..Into$LT$U$GT\n$$GT$4into17h6518d1eb9a13\n190fE", color=red];
  X71e84b9ee31f72d5_0 [label="_ZN9pinocchio13program_er\nror99_$LT$impl$u20$core..\nconvert..From$LT$pinocchi\no..program_error..Program\nError$GT$$u20$for$u20$u64\n$GT$4from17h628e79062cddf\n645E", color=red];
  X31a239ce3d11fff8_0 [label="Intr: \nsimd_eq", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X3c6542d96320ad67_0 [label="Intr: \nblack_box", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  Xb00517a14aa1c357_0 [label="_ZN4core3cmp5impls69_$LT$\nimpl$u20$core..cmp..Parti\nalEq$LT$$RF$B$GT$$u20$for\n$u20$$RF$A$GT$2ne17h95160\n796eaf5ca1aE", color=red];
  X26beb3c664659c46_0 [label="_ZN91_$LT$core..slice..it\ner..Iter$LT$T$GT$$u20$as$\nu20$core..iter..traits..i\nterator..Iterator$GT$4nex\nt17hfabbad9b1be1531fE", color=red];
  X13437086877d9cb7_0 [label="_ZN4core5slice5index24sli\nce_end_index_len_fail17h7\ne6f2137e7855a34E", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  Xcfb99dd5dbeb355e_0 [label="_ZN4core9panicking14panic\n_nounwind17h3a5ca15c20002\n51eE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X5ea6c111b835a80f_0 [label="Intr: \nctpop", color=red];
  X8fc2060ad58510d8_0 [label="Intr: \ncold_path", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  X2d9fe09564a4e03f_0 [label="_ZN4core3str7pattern11Str\nSearcher3new17h6924ff32bd\n5373edE", color=red];
  X18cbc2f348c9e06e_0 [label="_ZN4core4char7methods15en\ncode_utf8_raw8do_panic7ru\nntime17hfcf9039fad5d7f05E", color=red];
  Xc370cd96d12e6547_0 [label="_ZN4core3str16slice_error\n_fail17h42f5d0919ad1d136E", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  X1d0677a8f15bd47_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u32$GT$3fmt\n17hb987357f13dc6cc8E", color=red];
  X5a2a5b478e9b33b_0 [label="_ZN4core6option13expect_f\nailed17hd7df5d6a621d92cbE", color=red];
  Xfa60cf51be3f9fb1_0 [label="_ZN4core4hint9black_box17\nh17818df06b351acdE", color=red];
  Xdd778da4886cf626_0 [label="_ZN4core6result13unwrap_f\nailed17h698bf754bc36b600E", color=red];
  X67d151235d77b301_0 [label="_ZN4core3fmt3num3imp52_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u32$GT$3\nfmt17hec74c53b91325b16E", color=red];
  X9972a2e514221fba_0 [label="_ZN98_$LT$pinocchio_token\n_interface..error..TokenE\nrror$u20$as$u20$core..con\nvert..TryFrom$LT$u32$GT$$\nGT$8try_from17h41e590df6f\n40ca02E", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  X5b44578fd65a3909_0 [label="_ZN4core3fmt9Formatter3pa\nd17hc1359c14f299250aE", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  Xca95a9d6f7061805_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u32$GT$3fmt\n17h7baa47f3e5cbe44cE", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  X308a72169d16c218_0 [label="Intr: \nsimd_bitmask", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X85724fedaf4a5444_0 [label="_ZN4core3fmt9Formatter25d\nebug_tuple_field1_finish1\n7h9a57a6e5dd04f319E", color=red];
  X1eb9e8a223d962a5_0 [label="_ZN4core9panicking19asser\nt_failed_inner17h1d286061\nca0adfe7E", color=red];
  X5a1b7e395be91c95_0 [label="_ZN153_$LT$core..result..\nResult$LT$T$C$F$GT$$u20$a\ns$u20$core..ops..try_trai\nt..FromResidual$LT$core..\nresult..Result$LT$core..c\nonvert..Infallible$C$E$GT\n$$GT$$GT$13from_residual1\n7hd37a7ce3c291888dE", color=red];
  Xb93f0288e0006b54_0 [label="_ZN4core3fmt9Formatter9wr\nite_str17h79222ac07baf2d9\n8E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X2bbf04117b29714a_0 [label="_ZN4core5slice3raw14from_\nraw_parts17h23812cc5d2ae4\n610E", color=red];
  X43ad75e732d0e131_0 [label="Intr: \nraw_eq", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8c408aef692d50b8_0 [label="Intr: \nsimd_and", color=red];
  X3d825c4445d1baca_0 [label="_ZN4core5slice5index22sli\nce_index_order_fail17h640\n68df90ca47128E", color=red];
  Xac08878333d72e42_0 [label="_ZN4core9panicking5panic1\n7h941160ead03e2d54E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9d8f98d3704e8fd6_0 [label="_ZN73_$LT$$u5b$A$u5d$$u20\n$as$u20$core..slice..cmp.\n.SlicePartialEq$LT$B$GT$$\nGT$5equal17h9ee8f0d2588e1\n705E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xde5364326654de35_0 [label="Intr: \ncttz", color=red];
  X1336184f2954778f_0 [label="Intr: \nsimd_shuffle", color=red];
  subgraph cluster_0 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::ExactSizeIter\nator>::len";
    style="filled";
    color=lightgray;
    node_1 [label="LOCALS\l0 = usize\l1 = &core::slice::Iter<'_, u8>\l2 = usize\l3 = *const u8\l4 = core::ptr::NonNull<u8>\l5 = *const core::ptr::NonNull<u8>\l6 = *const *const u8\l7 = core::ptr::NonNull<u8>\l8 = *const u8\l9 = *const u8\l10 = bool\l11 = ()\l12 = *const ()\l13 = *const ()\l14 = usize\l15 = bool\l16 = bool\l17 = !\l", style="filled", color=palegreen3];
    Xd05a555747cd5aa8_0 -> Xd05a555747cd5aa8_2 [label="0"];
    Xd05a555747cd5aa8_0 -> Xd05a555747cd5aa8_1 [label="other"];
    Xd05a555747cd5aa8_0 [label="SwitchInt const bool\l"];
    Xd05a555747cd5aa8_1 -> Xd05a555747cd5aa8_3;
    Xd05a555747cd5aa8_1 [label="3 <- Use(cp((*1).1))\l2 <- Cast-Transmute cp(3)\l0 <- Use(cp(2))\lGoto\l"];
    Xd05a555747cd5aa8_2 -> Xd05a555747cd5aa8_7 [label="0"];
    Xd05a555747cd5aa8_2 -> Xd05a555747cd5aa8_5 [label="other"];
    Xd05a555747cd5aa8_2 [label="Storage Live _5\lStorage Live _6\l6 <- &raw (*1).1\l5 <- Cast-PtrToPtr cp(6)\lStorage Dead _6\l4 <- Use(cp((*5)))\lStorage Dead _5\lStorage Live _7\l7 <- Use(cp((*1).0))\lStorage Live _8\l8 <- Use(cp(4.0))\lStorage Live _9\l9 <- Use(cp(7.0))\lStorage Live _14\lStorage Live _10\l10 <- UbChecks :: bool\lSwitchInt mv(10)\l"];
    Xd05a555747cd5aa8_3 [label="Return\l"];
    Xd05a555747cd5aa8_4 -> Xd05a555747cd5aa8_3;
    Xd05a555747cd5aa8_4 [label="Storage Dead _14\lStorage Dead _9\lStorage Dead _8\lStorage Dead _7\lGoto\l"];
    Xd05a555747cd5aa8_5 -> Xd05a555747cd5aa8_6 [label="11"];
    Xd05a555747cd5aa8_5 [label="Storage Live _12\l12 <- Cast-PtrToPtr cp(8)\lStorage Live _13\l13 <- Cast-PtrToPtr cp(9)\lCall\l"];
    Xd05a555747cd5aa8_6 -> Xd05a555747cd5aa8_7;
    Xd05a555747cd5aa8_6 [label="Storage Dead _13\lStorage Dead _12\lGoto\l"];
    Xd05a555747cd5aa8_7 -> Xd05a555747cd5aa8_10 [label="0"];
    Xd05a555747cd5aa8_7 -> Xd05a555747cd5aa8_8 [label="other"];
    Xd05a555747cd5aa8_7 [label="Storage Dead _10\l14 <- SizeOf :: u8\lStorage Live _15\l15 <- Lt(const ?_usize, cp(14))\lSwitchInt mv(15)\l"];
    Xd05a555747cd5aa8_8 -> Xd05a555747cd5aa8_10 [label="0"];
    Xd05a555747cd5aa8_8 -> Xd05a555747cd5aa8_9 [label="other"];
    Xd05a555747cd5aa8_8 [label="Storage Live _16\l16 <- Le(cp(14), const ?_usize)\lSwitchInt mv(16)\l"];
    Xd05a555747cd5aa8_9 -> Xd05a555747cd5aa8_4 [label="0"];
    Xd05a555747cd5aa8_9 [label="Storage Dead _16\lStorage Dead _15\lCall\l"];
    Xd05a555747cd5aa8_10 [label="Call\l"];
  }
  Xd05a555747cd5aa8_5 -> Xfccd6b940db3d5e8_0 [label="mv(12),mv(13)"];
  Xd05a555747cd5aa8_9 -> Xfd88df1009b24094_0 [label="mv(8),mv(9)"];
  Xd05a555747cd5aa8_10 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_2 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_3 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::Range<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xe35bd60b7bbdbba4_0 -> Xe35bd60b7bbdbba4_3 [label="0"];
    Xe35bd60b7bbdbba4_0 -> Xe35bd60b7bbdbba4_1 [label="other"];
    Xe35bd60b7bbdbba4_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xe35bd60b7bbdbba4_1 -> Xe35bd60b7bbdbba4_2 [label="4"];
    Xe35bd60b7bbdbba4_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xe35bd60b7bbdbba4_2 -> Xe35bd60b7bbdbba4_3;
    Xe35bd60b7bbdbba4_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xe35bd60b7bbdbba4_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([pinocchio::account_info::AccountInfo]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xe35bd60b7bbdbba4_1 -> X37e6c077af20a501_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_4 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_5 [label="LOCALS\l0 = *const [u8]\l1 = core::ops::Range<usize>\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const u8\l12 = *const u8\l", style="filled", color=palegreen3];
    Xc1e109de9d1a8745_0 -> Xc1e109de9d1a8745_3 [label="0"];
    Xc1e109de9d1a8745_0 -> Xc1e109de9d1a8745_1 [label="other"];
    Xc1e109de9d1a8745_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xc1e109de9d1a8745_1 -> Xc1e109de9d1a8745_2 [label="4"];
    Xc1e109de9d1a8745_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xc1e109de9d1a8745_2 -> Xc1e109de9d1a8745_3;
    Xc1e109de9d1a8745_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xc1e109de9d1a8745_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([u8]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xc1e109de9d1a8745_1 -> X37e6c077af20a501_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_6 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_7 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X37e6c077af20a501_0 -> X37e6c077af20a501_3 [label="0"];
    X37e6c077af20a501_0 -> X37e6c077af20a501_1 [label="other"];
    X37e6c077af20a501_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X37e6c077af20a501_1 -> X37e6c077af20a501_3 [label="0"];
    X37e6c077af20a501_1 -> X37e6c077af20a501_2 [label="other"];
    X37e6c077af20a501_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X37e6c077af20a501_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X37e6c077af20a501_3 [label="Call\l"];
  }
  X37e6c077af20a501_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_8 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked_mut::\nprecondition_check";
    style="filled";
    color=lightgray;
    node_9 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    Xf6d2e6b89d8c0f98_0 -> Xf6d2e6b89d8c0f98_3 [label="0"];
    Xf6d2e6b89d8c0f98_0 -> Xf6d2e6b89d8c0f98_1 [label="other"];
    Xf6d2e6b89d8c0f98_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    Xf6d2e6b89d8c0f98_1 -> Xf6d2e6b89d8c0f98_3 [label="0"];
    Xf6d2e6b89d8c0f98_1 -> Xf6d2e6b89d8c0f98_2 [label="other"];
    Xf6d2e6b89d8c0f98_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    Xf6d2e6b89d8c0f98_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    Xf6d2e6b89d8c0f98_3 [label="Call\l"];
  }
  Xf6d2e6b89d8c0f98_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_10 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_11 [label="LOCALS\l0 = &[u8]\l1 = core::ops::Range<usize>\l2 = &[u8]\l3 = !\l4 = usize\l5 = core::option::Option<usize>\l6 = usize\l7 = usize\l8 = bool\l9 = usize\l10 = !\l11 = *const [u8]\l12 = *const [u8]\l13 = bool\l14 = usize\l15 = *const u8\l16 = *const u8\l", style="filled", color=palegreen3];
    X386b02aeacd40e86_0 -> X386b02aeacd40e86_4 [label="0"];
    X386b02aeacd40e86_0 -> X386b02aeacd40e86_3 [label="other"];
    X386b02aeacd40e86_0 [label="Storage Live _5\l6 <- Use(cp(1.1))\l7 <- Use(cp(1.0))\lStorage Live _13\l13 <- Lt(cp(6), cp(7))\lSwitchInt mv(13)\l"];
    X386b02aeacd40e86_1 [label="Call\l"];
    X386b02aeacd40e86_2 [label="Storage Dead _8\lStorage Live _11\lStorage Live _12\l12 <- &raw (*2)\lStorage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(12)\l15 <- Offset(cp(16), cp(7))\lStorage Dead _16\l11 <- *([u8]) (cp(15), cp(4))\lStorage Dead _15\lStorage Dead _12\l0 <- & (*11)\lStorage Dead _11\lReturn\l"];
    X386b02aeacd40e86_3 [label="Storage Dead _13\lStorage Dead _5\lCall\l"];
    X386b02aeacd40e86_4 -> X386b02aeacd40e86_2 [label="0"];
    X386b02aeacd40e86_4 -> X386b02aeacd40e86_1 [label="other"];
    X386b02aeacd40e86_4 [label="Storage Live _14\l14 <- SubUnchecked(cp(6), cp(7))\l5 <- Adt{1} (mv(14))\lStorage Dead _14\lStorage Dead _13\l4 <- Use(cp((5 as variant 1).0))\lStorage Dead _5\lStorage Live _8\l9 <- PtrMetadata(cp(2))\l8 <- Gt(cp(6), cp(9))\lSwitchInt mv(8)\l"];
  }
  X386b02aeacd40e86_1 -> X13437086877d9cb7_0 [label="mv(6),mv(9)"];
  X386b02aeacd40e86_3 -> X3d825c4445d1baca_0 [label="mv(7),mv(6)"];
  subgraph cluster_12 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::DoubleEndedIt\nerator>::next_back";
    style="filled";
    color=lightgray;
    node_13 [label="LOCALS\l0 = core::option::Option<&u8>\l1 = &mut core::slice::Iter<'_, u8>\l2 = bool\l3 = usize\l4 = *const u8\l5 = core::ptr::NonNull<u8>\l6 = *const core::ptr::NonNull<u8>\l7 = *const *const u8\l8 = &core::ptr::NonNull<u8>\l9 = &core::ptr::NonNull<u8>\l10 = &u8\l11 = core::ptr::NonNull<u8>\l12 = *const u8\l13 = *const u8\l14 = &core::ptr::NonNull<u8>\l15 = core::ptr::NonNull<u8>\l16 = *mut usize\l17 = *mut *const u8\l18 = usize\l19 = usize\l20 = *mut core::ptr::NonNull<u8>\l21 = *mut *const u8\l22 = core::ptr::NonNull<u8>\l23 = core::ptr::NonNull<u8>\l24 = bool\l25 = ()\l26 = *const u8\l27 = *const u8\l28 = *mut u8\l29 = core::ptr::NonNull<u8>\l30 = *const u8\l", style="filled", color=palegreen3];
    X40f037eb7ab6abf7_0 -> X40f037eb7ab6abf7_2 [label="0"];
    X40f037eb7ab6abf7_0 -> X40f037eb7ab6abf7_1 [label="other"];
    X40f037eb7ab6abf7_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_1 -> X40f037eb7ab6abf7_3;
    X40f037eb7ab6abf7_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Eq(cp(3), const ?_usize)\lGoto\l"];
    X40f037eb7ab6abf7_2 -> X40f037eb7ab6abf7_3;
    X40f037eb7ab6abf7_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- & (*1).0\lStorage Live _9\l9 <- & 5\lStorage Live _12\lStorage Live _13\lStorage Live _11\l11 <- Use(cp((*1).0))\l12 <- Use(cp(11.0))\lStorage Dead _11\l13 <- Use(cp(5.0))\l2 <- Eq(cp(12), cp(13))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\lGoto\l"];
    X40f037eb7ab6abf7_3 -> X40f037eb7ab6abf7_5 [label="0"];
    X40f037eb7ab6abf7_3 -> X40f037eb7ab6abf7_4 [label="other"];
    X40f037eb7ab6abf7_3 [label="SwitchInt mv(2)\l"];
    X40f037eb7ab6abf7_4 -> X40f037eb7ab6abf7_6;
    X40f037eb7ab6abf7_4 [label="0 <- Use(const core::option::Option<&u8>)\lGoto\l"];
    X40f037eb7ab6abf7_5 -> X40f037eb7ab6abf7_9 [label="0"];
    X40f037eb7ab6abf7_5 -> X40f037eb7ab6abf7_8 [label="other"];
    X40f037eb7ab6abf7_5 [label="Storage Live _14\lStorage Live _15\lStorage Live _16\lStorage Live _20\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_6 [label="Storage Dead _2\lReturn\l"];
    X40f037eb7ab6abf7_7 -> X40f037eb7ab6abf7_6;
    X40f037eb7ab6abf7_7 [label="Storage Dead _20\lStorage Dead _16\l14 <- & 15\lStorage Live _30\lStorage Live _28\lStorage Live _29\l29 <- Use(cp(15))\l30 <- Use(cp(29.0))\l28 <- Cast-PtrToPtr cp(30)\lStorage Dead _29\lStorage Dead _28\l10 <- & (*30)\lStorage Dead _30\lStorage Dead _14\lStorage Dead _15\l0 <- Adt{1} (cp(10))\lGoto\l"];
    X40f037eb7ab6abf7_8 -> X40f037eb7ab6abf7_7;
    X40f037eb7ab6abf7_8 [label="Storage Live _17\l17 <- &raw mut (*1).1\l16 <- Cast-PtrToPtr cp(17)\lStorage Dead _17\lStorage Live _18\lStorage Live _19\l19 <- Use(cp((*16)))\l18 <- SubUnchecked(mv(19), const ?_usize)\lStorage Dead _19\l(*16) <- Use(mv(18))\lStorage Dead _18\l15 <- Use(cp((*1).0))\lGoto\l"];
    X40f037eb7ab6abf7_9 -> X40f037eb7ab6abf7_12 [label="0"];
    X40f037eb7ab6abf7_9 -> X40f037eb7ab6abf7_11 [label="other"];
    X40f037eb7ab6abf7_9 [label="Storage Live _21\l21 <- &raw mut (*1).1\l20 <- Cast-PtrToPtr cp(21)\lStorage Dead _21\lStorage Live _22\l23 <- Use(cp((*20)))\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_10 -> X40f037eb7ab6abf7_7;
    X40f037eb7ab6abf7_10 [label="(*20) <- Use(mv(22))\lStorage Dead _22\l15 <- Use(cp((*20)))\lGoto\l"];
    X40f037eb7ab6abf7_11 -> X40f037eb7ab6abf7_10;
    X40f037eb7ab6abf7_11 [label="22 <- Use(cp(23))\lGoto\l"];
    X40f037eb7ab6abf7_12 -> X40f037eb7ab6abf7_14 [label="0"];
    X40f037eb7ab6abf7_12 -> X40f037eb7ab6abf7_13 [label="other"];
    X40f037eb7ab6abf7_12 [label="Storage Live _24\l24 <- UbChecks :: bool\lSwitchInt mv(24)\l"];
    X40f037eb7ab6abf7_13 -> X40f037eb7ab6abf7_14 [label="25"];
    X40f037eb7ab6abf7_13 [label="Call\l"];
    X40f037eb7ab6abf7_14 -> X40f037eb7ab6abf7_10;
    X40f037eb7ab6abf7_14 [label="Storage Dead _24\lStorage Live _26\lStorage Live _27\l27 <- Use(cp(23.0))\l26 <- Offset(mv(27), const ?_isize)\lStorage Dead _27\l22 <- Adt{0} (mv(26))\lStorage Dead _26\lGoto\l"];
  }
  X40f037eb7ab6abf7_13 -> X44b1b4235fabb732_0 [label="const ?_isize"];
  subgraph cluster_14 {
    label="<core::ops::RangeTo<usize\n> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_15 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeTo<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = core::ops::Range<usize>\l4 = usize\l", style="filled", color=palegreen3];
    Xf36307cdfb4d1bcc_0 -> Xf36307cdfb4d1bcc_1 [label="0"];
    Xf36307cdfb4d1bcc_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(1.0))\l3 <- Adt{0} (const ?_usize, mv(4))\lStorage Dead _4\lCall\l"];
    Xf36307cdfb4d1bcc_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xf36307cdfb4d1bcc_0 -> Xe35bd60b7bbdbba4_0 [label="mv(3),mv(2)"];
  subgraph cluster_16 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_17 [label="LOCALS\l0 = &[u8]\l1 = core::ops::RangeFrom<usize>\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [u8]\l8 = *const [u8]\l9 = bool\l10 = ()\l11 = usize\l12 = *const u8\l13 = *const u8\l", style="filled", color=palegreen3];
    Xbf13fd323824b7e4_0 -> Xbf13fd323824b7e4_2 [label="0"];
    Xbf13fd323824b7e4_0 -> Xbf13fd323824b7e4_1 [label="other"];
    Xbf13fd323824b7e4_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xbf13fd323824b7e4_1 [label="Call\l"];
    Xbf13fd323824b7e4_2 -> Xbf13fd323824b7e4_4 [label="0"];
    Xbf13fd323824b7e4_2 -> Xbf13fd323824b7e4_3 [label="other"];
    Xbf13fd323824b7e4_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xbf13fd323824b7e4_3 -> Xbf13fd323824b7e4_4 [label="10"];
    Xbf13fd323824b7e4_3 [label="Call\l"];
    Xbf13fd323824b7e4_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([u8]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xbf13fd323824b7e4_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xbf13fd323824b7e4_3 -> X37e6c077af20a501_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_18 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::index";
    style="filled";
    color=lightgray;
    node_19 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeFrom<usize>\l2 = &[pinocchio::account_info::AccountInfo]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [pinocchio::account_info::AccountInfo]\l8 = *const [pinocchio::account_info::AccountInfo]\l9 = bool\l10 = ()\l11 = usize\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xa7ac216995a185b1_0 -> Xa7ac216995a185b1_2 [label="0"];
    Xa7ac216995a185b1_0 -> Xa7ac216995a185b1_1 [label="other"];
    Xa7ac216995a185b1_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xa7ac216995a185b1_1 [label="Call\l"];
    Xa7ac216995a185b1_2 -> Xa7ac216995a185b1_4 [label="0"];
    Xa7ac216995a185b1_2 -> Xa7ac216995a185b1_3 [label="other"];
    Xa7ac216995a185b1_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xa7ac216995a185b1_3 -> Xa7ac216995a185b1_4 [label="10"];
    Xa7ac216995a185b1_3 [label="Call\l"];
    Xa7ac216995a185b1_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([pinocchio::account_info::AccountInfo]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xa7ac216995a185b1_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xa7ac216995a185b1_3 -> X37e6c077af20a501_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_20 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\ncore::mem::MaybeUninit<u8\n>]>>::index_mut";
    style="filled";
    color=lightgray;
    node_21 [label="LOCALS\l0 = &mut [core::mem::MaybeUninit<u8>]\l1 = core::ops::RangeFrom<usize>\l2 = &mut [core::mem::MaybeUninit<u8>]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *mut [core::mem::MaybeUninit<u8>]\l8 = *mut [core::mem::MaybeUninit<u8>]\l9 = *const [core::mem::MaybeUninit<u8>]\l10 = bool\l11 = ()\l12 = usize\l13 = *mut core::mem::MaybeUninit<u8>\l14 = *mut core::mem::MaybeUninit<u8>\l", style="filled", color=palegreen3];
    X69095e180aaa69cc_0 -> X69095e180aaa69cc_2 [label="0"];
    X69095e180aaa69cc_0 -> X69095e180aaa69cc_1 [label="other"];
    X69095e180aaa69cc_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    X69095e180aaa69cc_1 [label="Call\l"];
    X69095e180aaa69cc_2 -> X69095e180aaa69cc_4 [label="0"];
    X69095e180aaa69cc_2 -> X69095e180aaa69cc_3 [label="other"];
    X69095e180aaa69cc_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw mut (*2)\lStorage Live _9\l9 <- Cast-PtrToPtr cp(8)\lStorage Live _12\lStorage Live _10\l10 <- UbChecks :: bool\lSwitchInt mv(10)\l"];
    X69095e180aaa69cc_3 -> X69095e180aaa69cc_4 [label="11"];
    X69095e180aaa69cc_3 [label="Call\l"];
    X69095e180aaa69cc_4 [label="Storage Dead _10\l12 <- SubUnchecked(cp(5), cp(4))\lStorage Live _13\lStorage Live _14\l14 <- Cast-PtrToPtr cp(8)\l13 <- Offset(cp(14), cp(4))\lStorage Dead _14\l7 <- *mut ([core::mem::MaybeUninit<u8>]) (cp(13), cp(12))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\l0 <- &mut (*7)\lStorage Dead _7\lReturn\l"];
  }
  X69095e180aaa69cc_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  X69095e180aaa69cc_3 -> Xf6d2e6b89d8c0f98_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_22 {
    label="<core::iter::Zip<core::sl\nice::Iter<'_, \nu8>, \ncore::slice::Iter<'_, \nu8>> \nas \ncore::iter::adapters::zip\n::ZipImpl<core::slice::It\ner<'_, \nu8>, \ncore::slice::Iter<'_, \nu8>>>::new";
    style="filled";
    color=lightgray;
    node_23 [label="LOCALS\l0 = core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l1 = core::slice::Iter<'_, u8>\l2 = core::slice::Iter<'_, u8>\l3 = usize\l4 = &core::slice::Iter<'_, u8>\l5 = usize\l6 = usize\l7 = &core::slice::Iter<'_, u8>\l8 = core::slice::Iter<'_, u8>\l9 = core::slice::Iter<'_, u8>\l", style="filled", color=palegreen3];
    X5f2c783b3c15a203_0 -> X5f2c783b3c15a203_3 [label="Cleanup"];
    X5f2c783b3c15a203_0 -> X5f2c783b3c15a203_1 [label="3"];
    X5f2c783b3c15a203_0 [label="Storage Live _4\l4 <- & 1\lCall\l"];
    X5f2c783b3c15a203_1 -> X5f2c783b3c15a203_3 [label="Cleanup"];
    X5f2c783b3c15a203_1 -> X5f2c783b3c15a203_2 [label="6"];
    X5f2c783b3c15a203_1 [label="Storage Dead _4\lStorage Live _6\lStorage Live _7\l7 <- & 2\lCall\l"];
    X5f2c783b3c15a203_2 -> X5f2c783b3c15a203_3 [label="Cleanup"];
    X5f2c783b3c15a203_2 -> X5f2c783b3c15a203_6 [label="5"];
    X5f2c783b3c15a203_2 [label="Storage Dead _7\lCall\l"];
    X5f2c783b3c15a203_3 -> X5f2c783b3c15a203_4;
    X5f2c783b3c15a203_3 [label="Drop 2\l"];
    X5f2c783b3c15a203_4 -> X5f2c783b3c15a203_5;
    X5f2c783b3c15a203_4 [label="Drop 1\l"];
    X5f2c783b3c15a203_5 [label="Resume\l"];
    X5f2c783b3c15a203_6 [label="Storage Dead _6\lStorage Live _8\l8 <- Use(mv(1))\lStorage Live _9\l9 <- Use(mv(2))\l0 <- Adt{0} (mv(8), mv(9), const ?_usize, cp(5), cp(3))\lStorage Dead _9\lStorage Dead _8\lReturn\l"];
  }
  X5f2c783b3c15a203_0 -> X8c62c323f8ae3452_0 [label="mv(4)"];
  X5f2c783b3c15a203_1 -> X8c62c323f8ae3452_0 [label="mv(7)"];
  X5f2c783b3c15a203_2 -> Xf85b79c5bd16f087_0 [label="cp(3),mv(6),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_24 {
    label="<core::iter::Zip<core::sl\nice::Iter<'_, \nu8>, \ncore::slice::Iter<'_, \nu8>> \nas \ncore::iter::adapters::zip\n::ZipImpl<core::slice::It\ner<'_, \nu8>, \ncore::slice::Iter<'_, \nu8>>>::next";
    style="filled";
    color=lightgray;
    node_25 [label="LOCALS\l0 = core::option::Option<(&u8, &u8)>\l1 = &mut core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l2 = bool\l3 = usize\l4 = usize\l5 = usize\l6 = (&u8, &u8)\l7 = &u8\l8 = &mut core::slice::Iter<'_, u8>\l9 = &u8\l10 = &mut core::slice::Iter<'_, u8>\l11 = bool\l12 = usize\l13 = usize\l14 = usize\l15 = &u8\l16 = &mut core::slice::Iter<'_, u8>\l", style="filled", color=palegreen3];
    Xb1291a0276d3f880_0 -> Xb1291a0276d3f880_4 [label="0"];
    Xb1291a0276d3f880_0 -> Xb1291a0276d3f880_1 [label="other"];
    Xb1291a0276d3f880_0 [label="Storage Live _2\lStorage Live _3\l3 <- Use(cp((*1).2))\lStorage Live _4\l4 <- Use(cp((*1).3))\l2 <- Lt(mv(3), mv(4))\lSwitchInt mv(2)\l"];
    Xb1291a0276d3f880_1 -> Xb1291a0276d3f880_2 [label="7"];
    Xb1291a0276d3f880_1 [label="Storage Dead _4\lStorage Dead _3\l5 <- Use(cp((*1).2))\l(*1).2 <- Add(cp((*1).2), const ?_usize)\lStorage Live _6\lStorage Live _7\lStorage Live _8\l8 <- &mut (*1).0\lCall\l"];
    Xb1291a0276d3f880_2 -> Xb1291a0276d3f880_13 [label="Cleanup"];
    Xb1291a0276d3f880_2 -> Xb1291a0276d3f880_3 [label="9"];
    Xb1291a0276d3f880_2 [label="Storage Dead _8\lStorage Live _9\lStorage Live _10\l10 <- &mut (*1).1\lCall\l"];
    Xb1291a0276d3f880_3 -> Xb1291a0276d3f880_12;
    Xb1291a0276d3f880_3 [label="Storage Dead _10\l6 <- Tuple (mv(7), mv(9))\lStorage Dead _9\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    Xb1291a0276d3f880_4 -> Xb1291a0276d3f880_10 [label="0"];
    Xb1291a0276d3f880_4 -> Xb1291a0276d3f880_5 [label="other"];
    Xb1291a0276d3f880_4 [label="Storage Dead _4\lStorage Dead _3\lSwitchInt const bool\l"];
    Xb1291a0276d3f880_5 -> Xb1291a0276d3f880_9 [label="0"];
    Xb1291a0276d3f880_5 -> Xb1291a0276d3f880_6 [label="other"];
    Xb1291a0276d3f880_5 [label="Storage Live _11\lStorage Live _12\l12 <- Use(cp((*1).2))\lStorage Live _13\l13 <- Use(cp((*1).4))\l11 <- Lt(mv(12), mv(13))\lSwitchInt mv(11)\l"];
    Xb1291a0276d3f880_6 -> Xb1291a0276d3f880_7 [label="15"];
    Xb1291a0276d3f880_6 [label="Storage Dead _13\lStorage Dead _12\l14 <- Use(cp((*1).2))\l(*1).2 <- Add(cp((*1).2), const ?_usize)\l(*1).3 <- Add(cp((*1).3), const ?_usize)\lStorage Live _15\lStorage Live _16\l16 <- &mut (*1).0\lCall\l"];
    Xb1291a0276d3f880_7 -> Xb1291a0276d3f880_8;
    Xb1291a0276d3f880_7 [label="Storage Dead _16\lDrop 15\l"];
    Xb1291a0276d3f880_8 -> Xb1291a0276d3f880_11;
    Xb1291a0276d3f880_8 [label="Storage Dead _15\l0 <- Adt{0} ()\lGoto\l"];
    Xb1291a0276d3f880_9 -> Xb1291a0276d3f880_10;
    Xb1291a0276d3f880_9 [label="Storage Dead _13\lStorage Dead _12\lGoto\l"];
    Xb1291a0276d3f880_10 -> Xb1291a0276d3f880_11;
    Xb1291a0276d3f880_10 [label="0 <- Adt{0} ()\lGoto\l"];
    Xb1291a0276d3f880_11 -> Xb1291a0276d3f880_12;
    Xb1291a0276d3f880_11 [label="Storage Dead _11\lGoto\l"];
    Xb1291a0276d3f880_12 [label="Storage Dead _2\lReturn\l"];
    Xb1291a0276d3f880_13 -> Xb1291a0276d3f880_14;
    Xb1291a0276d3f880_13 [label="Drop 7\l"];
    Xb1291a0276d3f880_14 [label="Resume\l"];
  }
  Xb1291a0276d3f880_1 -> X2b864de05d14a2e4_0 [label="mv(8),cp(5)"];
  Xb1291a0276d3f880_2 -> X2b864de05d14a2e4_0 [label="mv(10),mv(5)"];
  Xb1291a0276d3f880_6 -> X2b864de05d14a2e4_0 [label="mv(16),mv(14)"];
  subgraph cluster_26 {
    label="<pinocchio_token_interfac\ne::state::mint::Mint \nas \npinocchio_token_interface\n::state::Initializable>::\nis_initialized";
    style="filled";
    color=lightgray;
    node_27 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &pinocchio_token_interface::state::mint::Mint\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_3 [label="0"];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_2 [label="1"];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_1 [label="other"];
    X81eb37da80f6fb85_0 [label="SwitchInt cp((*1).3)\l"];
    X81eb37da80f6fb85_1 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    X81eb37da80f6fb85_2 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    X81eb37da80f6fb85_3 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    X81eb37da80f6fb85_4 [label="Return\l"];
  }
  subgraph cluster_28 {
    label="pinocchio_log::logger::Lo\ngger::<257>::append_with_\nargs::<u64>";
    style="filled";
    color=lightgray;
    node_29 [label="LOCALS\l0 = &mut pinocchio_log::logger::Logger<257>\l1 = &mut pinocchio_log::logger::Logger<257>\l2 = u64\l3 = &[pinocchio_log::logger::Argument]\l4 = bool\l5 = &pinocchio_log::logger::Logger<257>\l6 = bool\l7 = &mut core::mem::MaybeUninit<u8>\l8 = &mut [core::mem::MaybeUninit<u8>]\l9 = &mut [core::mem::MaybeUninit<u8>; 257]\l10 = usize\l11 = (usize, bool)\l12 = &mut u8\l13 = usize\l14 = &u64\l15 = &mut [core::mem::MaybeUninit<u8>]\l16 = &mut [core::mem::MaybeUninit<u8>; 257]\l17 = core::ops::RangeFrom<usize>\l18 = usize\l19 = (usize, bool)\l20 = bool\l21 = usize\l22 = &mut core::mem::MaybeUninit<u8>\l23 = &mut [core::mem::MaybeUninit<u8>]\l24 = &mut [core::mem::MaybeUninit<u8>; 257]\l25 = usize\l26 = (usize, bool)\l27 = &mut u8\l", style="filled", color=palegreen3];
    X60a52f7949dac7eb_0 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_0 -> X60a52f7949dac7eb_1 [label="4"];
    X60a52f7949dac7eb_0 [label="5 <- & (*1)\lCall\l"];
    X60a52f7949dac7eb_1 -> X60a52f7949dac7eb_6 [label="0"];
    X60a52f7949dac7eb_1 -> X60a52f7949dac7eb_2 [label="other"];
    X60a52f7949dac7eb_1 [label="SwitchInt mv(4)\l"];
    X60a52f7949dac7eb_2 -> X60a52f7949dac7eb_13 [label="0"];
    X60a52f7949dac7eb_2 -> X60a52f7949dac7eb_3 [label="other"];
    X60a52f7949dac7eb_2 [label="6 <- Gt(const ?_usize, const ?_usize)\lSwitchInt mv(6)\l"];
    X60a52f7949dac7eb_3 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_3 -> X60a52f7949dac7eb_4;
    X60a52f7949dac7eb_3 [label="9 <- &mut (*1).0\l8 <- Cast-PointerCoercion(Unsize) mv(9)\l11 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(11.1) == false\l"];
    X60a52f7949dac7eb_4 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_4 -> X60a52f7949dac7eb_5 [label="7"];
    X60a52f7949dac7eb_4 [label="10 <- Use(mv(11.0))\lCall\l"];
    X60a52f7949dac7eb_5 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_5 -> X60a52f7949dac7eb_17 [label="12"];
    X60a52f7949dac7eb_5 [label="Call\l"];
    X60a52f7949dac7eb_6 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_6 -> X60a52f7949dac7eb_7 [label="15"];
    X60a52f7949dac7eb_6 [label="14 <- & 2\l16 <- &mut (*1).0\l18 <- Use(cp((*1).1))\l17 <- Adt{0} (mv(18))\lCall\l"];
    X60a52f7949dac7eb_7 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_7 -> X60a52f7949dac7eb_8 [label="13"];
    X60a52f7949dac7eb_7 [label="Call\l"];
    X60a52f7949dac7eb_8 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_8 -> X60a52f7949dac7eb_9;
    X60a52f7949dac7eb_8 [label="19 <- chkd-Add(cp((*1).1), cp(13))\lAssert mv(19.1) == false\l"];
    X60a52f7949dac7eb_9 -> X60a52f7949dac7eb_13 [label="0"];
    X60a52f7949dac7eb_9 -> X60a52f7949dac7eb_10 [label="other"];
    X60a52f7949dac7eb_9 [label="(*1).1 <- Use(mv(19.0))\l21 <- Use(cp((*1).1))\l20 <- Gt(mv(21), const ?_usize)\lSwitchInt mv(20)\l"];
    X60a52f7949dac7eb_10 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_10 -> X60a52f7949dac7eb_11;
    X60a52f7949dac7eb_10 [label="(*1).1 <- Use(const ?_usize)\l24 <- &mut (*1).0\l23 <- Cast-PointerCoercion(Unsize) mv(24)\l26 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(26.1) == false\l"];
    X60a52f7949dac7eb_11 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_11 -> X60a52f7949dac7eb_12 [label="22"];
    X60a52f7949dac7eb_11 [label="25 <- Use(mv(26.0))\lCall\l"];
    X60a52f7949dac7eb_12 -> X60a52f7949dac7eb_15 [label="Cleanup"];
    X60a52f7949dac7eb_12 -> X60a52f7949dac7eb_18 [label="27"];
    X60a52f7949dac7eb_12 [label="Call\l"];
    X60a52f7949dac7eb_13 -> X60a52f7949dac7eb_14;
    X60a52f7949dac7eb_13 [label="0 <- Use(cp(1))\lDrop 2\l"];
    X60a52f7949dac7eb_14 [label="Return\l"];
    X60a52f7949dac7eb_15 -> X60a52f7949dac7eb_16;
    X60a52f7949dac7eb_15 [label="Drop 2\l"];
    X60a52f7949dac7eb_16 [label="Resume\l"];
    X60a52f7949dac7eb_17 -> X60a52f7949dac7eb_13;
    X60a52f7949dac7eb_17 [label="Goto\l"];
    X60a52f7949dac7eb_18 -> X60a52f7949dac7eb_13;
    X60a52f7949dac7eb_18 [label="Goto\l"];
  }
  X60a52f7949dac7eb_0 -> X587de6287d0b439e_0 [label="mv(5)"];
  X60a52f7949dac7eb_4 -> X9168001a8578bae9_0 [label="mv(8),mv(10)"];
  X60a52f7949dac7eb_5 -> X106fa85414871cf3_0 [label="cp(7),const ?_u8"];
  X60a52f7949dac7eb_6 -> X5af4eaf0105356ba_0 [label="mv(16),mv(17)"];
  X60a52f7949dac7eb_7 -> Xc87d3a4f0f28cd2_0 [label="mv(14),cp(15),cp(3)"];
  X60a52f7949dac7eb_11 -> X9168001a8578bae9_0 [label="mv(23),mv(25)"];
  X60a52f7949dac7eb_12 -> X106fa85414871cf3_0 [label="cp(22),const ?_u8"];
  subgraph cluster_30 {
    label="pinocchio_log::logger::Lo\ngger::<257>::is_full";
    style="filled";
    color=lightgray;
    node_31 [label="LOCALS\l0 = bool\l1 = &pinocchio_log::logger::Logger<257>\l2 = usize\l", style="filled", color=palegreen3];
    X587de6287d0b439e_0 [label="2 <- Use(cp((*1).1))\l0 <- Eq(mv(2), const ?_usize)\lReturn\l"];
  }
  subgraph cluster_32 {
    label="<core::result::Result<&pi\nnocchio_token_interface::\nstate::mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_33 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xdaa446e4ac3a609b_0 -> Xdaa446e4ac3a609b_1 [label="3"];
    Xdaa446e4ac3a609b_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    Xdaa446e4ac3a609b_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xdaa446e4ac3a609b_0 -> Xa0efa4cbcb423f13_0 [label="mv(2)"];
  subgraph cluster_34 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio_token_interface\n::error::TokenError>>>::f\nrom_residual";
    style="filled";
    color=lightgray;
    node_35 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l2 = pinocchio_token_interface::error::TokenError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X2463e75e08f1acde_0 -> X2463e75e08f1acde_1 [label="3"];
    X2463e75e08f1acde_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X2463e75e08f1acde_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X2463e75e08f1acde_0 -> X5740f420bf9fe2ca_0 [label="mv(2)"];
  subgraph cluster_36 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::FromResidual<c\nore::ops::ControlFlow<(),\n \ncore::convert::Infallible\n>>>::from_residual";
    style="filled";
    color=lightgray;
    node_37 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = core::ops::ControlFlow<(), core::convert::Infallible>\l2 = ()\l", style="filled", color=palegreen3];
    Xdbc4cc7f242d80ee_0 [label="2 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(2))\lReturn\l"];
  }
  subgraph cluster_38 {
    label="<core::ops::ControlFlow<u\nsize> \nas \ncore::ops::FromResidual<c\nore::ops::ControlFlow<usi\nze, \ncore::convert::Infallible\n>>>::from_residual";
    style="filled";
    color=lightgray;
    node_39 [label="LOCALS\l0 = core::ops::ControlFlow<usize>\l1 = core::ops::ControlFlow<usize, core::convert::Infallible>\l2 = usize\l", style="filled", color=palegreen3];
    X8ed325407300fe1c_0 [label="2 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(2))\lReturn\l"];
  }
  subgraph cluster_40 {
    label="entrypoint::process_instr\nuction";
    style="filled";
    color=lightgray;
    node_41 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &[pinocchio::account_info::AccountInfo]\l3 = &[u8]\l4 = pinocchio::program_error::ProgramError\l5 = pinocchio_token_interface::error::TokenError\l6 = &u8\l7 = &[u8]\l8 = usize\l9 = bool\l10 = core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = u8\l12 = core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X6c5f82dfbe192777_0 -> X6c5f82dfbe192777_3 [label="0"];
    X6c5f82dfbe192777_0 -> X6c5f82dfbe192777_2 [label="other"];
    X6c5f82dfbe192777_0 [label="8 <- Len((*3))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    X6c5f82dfbe192777_1 -> X6c5f82dfbe192777_7;
    X6c5f82dfbe192777_1 [label="0 <- Adt{1} (mv(4))\lGoto\l"];
    X6c5f82dfbe192777_2 -> X6c5f82dfbe192777_4 [label="255"];
    X6c5f82dfbe192777_2 -> X6c5f82dfbe192777_5 [label="other"];
    X6c5f82dfbe192777_2 [label="6 <- & (*3)[0]\l7 <- & (*3)[1..-0]\l11 <- Use(cp((*6)))\lSwitchInt mv(11)\l"];
    X6c5f82dfbe192777_3 -> X6c5f82dfbe192777_1 [label="4"];
    X6c5f82dfbe192777_3 [label="5 <- Adt{12} ()\lCall\l"];
    X6c5f82dfbe192777_4 -> X6c5f82dfbe192777_6 [label="10"];
    X6c5f82dfbe192777_4 [label="Call\l"];
    X6c5f82dfbe192777_5 -> X6c5f82dfbe192777_6 [label="10"];
    X6c5f82dfbe192777_5 [label="Call\l"];
    X6c5f82dfbe192777_6 -> X6c5f82dfbe192777_7 [label="0"];
    X6c5f82dfbe192777_6 [label="12 <- Use(mv(10))\lCall\l"];
    X6c5f82dfbe192777_7 [label="Return\l"];
  }
  X6c5f82dfbe192777_3 -> X3e41fe755ef8b4ae_0 [label="mv(5)"];
  X6c5f82dfbe192777_4 -> X15962aa79900eb2f_0 [label="cp(2),cp(7)"];
  X6c5f82dfbe192777_5 -> X9595629189257c54_0 [label="cp(2),cp(3)"];
  X6c5f82dfbe192777_6 -> Xba531265f22fa7ac_0 [label="mv(12),const for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}"];
  subgraph cluster_42 {
    label="entrypoint::inner_process\n_instruction";
    style="filled";
    color=lightgray;
    node_43 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = pinocchio::program_error::ProgramError\l4 = pinocchio_token_interface::error::TokenError\l5 = &u8\l6 = &[u8]\l7 = usize\l8 = bool\l9 = u8\l", style="filled", color=palegreen3];
    X9595629189257c54_0 -> X9595629189257c54_3 [label="0"];
    X9595629189257c54_0 -> X9595629189257c54_2 [label="other"];
    X9595629189257c54_0 [label="7 <- Len((*2))\l8 <- Ge(mv(7), const ?_usize)\lSwitchInt mv(8)\l"];
    X9595629189257c54_1 -> X9595629189257c54_4;
    X9595629189257c54_1 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    X9595629189257c54_2 -> X9595629189257c54_4 [label="0"];
    X9595629189257c54_2 [label="5 <- & (*2)[0]\l6 <- & (*2)[1..-0]\l9 <- Use(cp((*5)))\lCall\l"];
    X9595629189257c54_3 -> X9595629189257c54_1 [label="3"];
    X9595629189257c54_3 [label="4 <- Adt{12} ()\lCall\l"];
    X9595629189257c54_4 [label="Return\l"];
  }
  X9595629189257c54_2 -> Xda53248c0718102a_0 [label="cp(1),cp(6),cp(9)"];
  X9595629189257c54_3 -> X3e41fe755ef8b4ae_0 [label="mv(4)"];
  subgraph cluster_44 {
    label="entrypoint::test_process_\namount_to_ui_amount";
    style="filled";
    color=lightgray;
    node_45 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 1]\l2 = &[u8; 8]\l3 = {closure@p-token/src/entrypoint.rs:1334:20: 1334:48}\l4 = core::result::Result<(), pinocchio::program_error::ProgramError>\l5 = &[pinocchio::account_info::AccountInfo]\l6 = &[u8]\l7 = bool\l8 = usize\l9 = &[u8]\l10 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l11 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l12 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l13 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l14 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l15 = bool\l16 = core::panicking::AssertKind\l17 = !\l18 = core::option::Option<core::fmt::Arguments<'_>>\l19 = bool\l20 = usize\l21 = &[pinocchio::account_info::AccountInfo]\l22 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l23 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l24 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l25 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l26 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l27 = bool\l28 = core::panicking::AssertKind\l29 = !\l30 = core::option::Option<core::fmt::Arguments<'_>>\l31 = bool\l32 = &&[u8; 32]\l33 = &[u8; 32]\l34 = &pinocchio::account_info::AccountInfo\l35 = usize\l36 = usize\l37 = bool\l38 = &&[u8; 32]\l39 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l40 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l41 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l42 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l43 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l44 = bool\l45 = core::panicking::AssertKind\l46 = !\l47 = core::option::Option<core::fmt::Arguments<'_>>\l48 = bool\l49 = usize\l50 = &pinocchio::account_info::AccountInfo\l51 = usize\l52 = usize\l53 = bool\l54 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l55 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l56 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l57 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l58 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l59 = bool\l60 = core::panicking::AssertKind\l61 = !\l62 = core::option::Option<core::fmt::Arguments<'_>>\l63 = bool\l64 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l65 = &pinocchio_token_interface::state::mint::Mint\l66 = pinocchio_token_interface::state::mint::Mint\l67 = &{closure@p-token/src/entrypoint.rs:1334:20: 1334:48}\l68 = (&pinocchio::account_info::AccountInfo,)\l69 = &pinocchio::account_info::AccountInfo\l70 = usize\l71 = usize\l72 = bool\l73 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l74 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l75 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l76 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l77 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l78 = bool\l79 = core::panicking::AssertKind\l80 = !\l81 = core::option::Option<core::fmt::Arguments<'_>>\l82 = bool\l83 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l84 = !\l", style="filled", color=palegreen3];
    X1aaf704c50f44152_0 -> X1aaf704c50f44152_1 [label="4"];
    X1aaf704c50f44152_0 [label="5 <- Cast-PointerCoercion(Unsize) cp(1)\l6 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X1aaf704c50f44152_1 -> X1aaf704c50f44152_5 [label="0"];
    X1aaf704c50f44152_1 -> X1aaf704c50f44152_2 [label="other"];
    X1aaf704c50f44152_1 [label="9 <- Cast-PointerCoercion(Unsize) cp(2)\l8 <- PtrMetadata(mv(9))\l7 <- Lt(mv(8), const ?_usize)\lSwitchInt mv(7)\l"];
    X1aaf704c50f44152_2 -> X1aaf704c50f44152_3 [label="15"];
    X1aaf704c50f44152_2 [label="11 <- & 4\l12 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l10 <- Tuple (mv(11), mv(12))\l13 <- Use(cp(10.0))\l14 <- Use(cp(10.1))\lCall\l"];
    X1aaf704c50f44152_3 -> X1aaf704c50f44152_4 [label="0"];
    X1aaf704c50f44152_3 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_3 [label="SwitchInt mv(15)\l"];
    X1aaf704c50f44152_4 [label="16 <- Adt{0} ()\l18 <- Adt{0} ()\lCall\l"];
    X1aaf704c50f44152_5 -> X1aaf704c50f44152_9 [label="0"];
    X1aaf704c50f44152_5 -> X1aaf704c50f44152_6 [label="other"];
    X1aaf704c50f44152_5 [label="21 <- Cast-PointerCoercion(Unsize) cp(1)\l20 <- PtrMetadata(mv(21))\l19 <- Lt(mv(20), const ?_usize)\lSwitchInt mv(19)\l"];
    X1aaf704c50f44152_6 -> X1aaf704c50f44152_7 [label="27"];
    X1aaf704c50f44152_6 [label="23 <- & 4\l24 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l22 <- Tuple (mv(23), mv(24))\l25 <- Use(cp(22.0))\l26 <- Use(cp(22.1))\lCall\l"];
    X1aaf704c50f44152_7 -> X1aaf704c50f44152_8 [label="0"];
    X1aaf704c50f44152_7 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_7 [label="SwitchInt mv(27)\l"];
    X1aaf704c50f44152_8 [label="28 <- Adt{0} ()\l30 <- Adt{0} ()\lCall\l"];
    X1aaf704c50f44152_9 -> X1aaf704c50f44152_10;
    X1aaf704c50f44152_9 [label="35 <- Use(const ?_usize)\l36 <- Use(const ?_usize)\l37 <- Lt(cp(35), cp(36))\lAssert mv(37) == true\l"];
    X1aaf704c50f44152_10 -> X1aaf704c50f44152_11 [label="33"];
    X1aaf704c50f44152_10 [label="34 <- & (*1)[_35]\lCall\l"];
    X1aaf704c50f44152_11 -> X1aaf704c50f44152_12 [label="31"];
    X1aaf704c50f44152_11 [label="32 <- & 33\l38 <- Use(const &&[u8; 32])\lCall\l"];
    X1aaf704c50f44152_12 -> X1aaf704c50f44152_16 [label="0"];
    X1aaf704c50f44152_12 -> X1aaf704c50f44152_13 [label="other"];
    X1aaf704c50f44152_12 [label="SwitchInt mv(31)\l"];
    X1aaf704c50f44152_13 -> X1aaf704c50f44152_14 [label="44"];
    X1aaf704c50f44152_13 [label="40 <- & 4\l41 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l39 <- Tuple (mv(40), mv(41))\l42 <- Use(cp(39.0))\l43 <- Use(cp(39.1))\lCall\l"];
    X1aaf704c50f44152_14 -> X1aaf704c50f44152_15 [label="0"];
    X1aaf704c50f44152_14 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_14 [label="SwitchInt mv(44)\l"];
    X1aaf704c50f44152_15 [label="45 <- Adt{0} ()\l47 <- Adt{0} ()\lCall\l"];
    X1aaf704c50f44152_16 -> X1aaf704c50f44152_17;
    X1aaf704c50f44152_16 [label="51 <- Use(const ?_usize)\l52 <- Use(const ?_usize)\l53 <- Lt(cp(51), cp(52))\lAssert mv(53) == true\l"];
    X1aaf704c50f44152_17 -> X1aaf704c50f44152_18 [label="49"];
    X1aaf704c50f44152_17 [label="50 <- & (*1)[_51]\lCall\l"];
    X1aaf704c50f44152_18 -> X1aaf704c50f44152_22 [label="0"];
    X1aaf704c50f44152_18 -> X1aaf704c50f44152_19 [label="other"];
    X1aaf704c50f44152_18 [label="48 <- Ne(mv(49), const ?_usize)\lSwitchInt mv(48)\l"];
    X1aaf704c50f44152_19 -> X1aaf704c50f44152_20 [label="59"];
    X1aaf704c50f44152_19 [label="55 <- & 4\l56 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l54 <- Tuple (mv(55), mv(56))\l57 <- Use(cp(54.0))\l58 <- Use(cp(54.1))\lCall\l"];
    X1aaf704c50f44152_20 -> X1aaf704c50f44152_21 [label="0"];
    X1aaf704c50f44152_20 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_20 [label="SwitchInt mv(59)\l"];
    X1aaf704c50f44152_21 [label="60 <- Adt{0} ()\l62 <- Adt{0} ()\lCall\l"];
    X1aaf704c50f44152_22 -> X1aaf704c50f44152_23;
    X1aaf704c50f44152_22 [label="67 <- & 3\l70 <- Use(const ?_usize)\l71 <- Use(const ?_usize)\l72 <- Lt(cp(70), cp(71))\lAssert mv(72) == true\l"];
    X1aaf704c50f44152_23 -> X1aaf704c50f44152_24 [label="66"];
    X1aaf704c50f44152_23 [label="69 <- & (*1)[_70]\l68 <- Tuple (cp(69))\lCall\l"];
    X1aaf704c50f44152_24 -> X1aaf704c50f44152_25 [label="64"];
    X1aaf704c50f44152_24 [label="65 <- & 66\lCall\l"];
    X1aaf704c50f44152_25 -> X1aaf704c50f44152_26 [label="63"];
    X1aaf704c50f44152_25 [label="Call\l"];
    X1aaf704c50f44152_26 -> X1aaf704c50f44152_28 [label="0"];
    X1aaf704c50f44152_26 -> X1aaf704c50f44152_27 [label="other"];
    X1aaf704c50f44152_26 [label="SwitchInt mv(63)\l"];
    X1aaf704c50f44152_27 -> X1aaf704c50f44152_31 [label="82"];
    X1aaf704c50f44152_27 [label="83 <- & 4\lCall\l"];
    X1aaf704c50f44152_28 -> X1aaf704c50f44152_29 [label="78"];
    X1aaf704c50f44152_28 [label="74 <- & 4\l75 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l73 <- Tuple (mv(74), mv(75))\l76 <- Use(cp(73.0))\l77 <- Use(cp(73.1))\lCall\l"];
    X1aaf704c50f44152_29 -> X1aaf704c50f44152_30 [label="0"];
    X1aaf704c50f44152_29 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_29 [label="SwitchInt mv(78)\l"];
    X1aaf704c50f44152_30 [label="79 <- Adt{0} ()\l81 <- Adt{0} ()\lCall\l"];
    X1aaf704c50f44152_31 -> X1aaf704c50f44152_32 [label="0"];
    X1aaf704c50f44152_31 -> X1aaf704c50f44152_33 [label="other"];
    X1aaf704c50f44152_31 [label="SwitchInt mv(82)\l"];
    X1aaf704c50f44152_32 [label="Call\l"];
    X1aaf704c50f44152_33 [label="0 <- Use(mv(4))\lReturn\l"];
  }
  X1aaf704c50f44152_0 -> Xd906d322bcc28b32_0 [label="mv(5),mv(6)"];
  X1aaf704c50f44152_2 -> X9e1a89bd60e7c0af_0 [label="cp(13),cp(14)"];
  X1aaf704c50f44152_4 -> X9b376999e062dfdd_0 [label="mv(16),cp(13),cp(14),mv(18)"];
  X1aaf704c50f44152_6 -> X9e1a89bd60e7c0af_0 [label="cp(25),cp(26)"];
  X1aaf704c50f44152_8 -> X9b376999e062dfdd_0 [label="mv(28),cp(25),cp(26),mv(30)"];
  X1aaf704c50f44152_10 -> Xdc861846860b6105_0 [label="mv(34)"];
  X1aaf704c50f44152_11 -> Xb00517a14aa1c357_0 [label="mv(32),mv(38)"];
  X1aaf704c50f44152_13 -> X9e1a89bd60e7c0af_0 [label="cp(42),cp(43)"];
  X1aaf704c50f44152_15 -> X9b376999e062dfdd_0 [label="mv(45),cp(42),cp(43),mv(47)"];
  X1aaf704c50f44152_17 -> Xc4d065469025948c_0 [label="mv(50)"];
  X1aaf704c50f44152_19 -> X9e1a89bd60e7c0af_0 [label="cp(57),cp(58)"];
  X1aaf704c50f44152_21 -> X9b376999e062dfdd_0 [label="mv(60),cp(57),cp(58),mv(62)"];
  X1aaf704c50f44152_23 -> X3dec7bffc2b41d21_0 [label="mv(67),mv(68)"];
  X1aaf704c50f44152_24 -> X81eb37da80f6fb85_0 [label="mv(65)"];
  X1aaf704c50f44152_25 -> X4808404a084b92a1_0 [label="mv(64)"];
  X1aaf704c50f44152_27 -> X5bb54cf35e56a69b_0 [label="mv(83)"];
  X1aaf704c50f44152_28 -> X9e1a89bd60e7c0af_0 [label="cp(76),cp(77)"];
  X1aaf704c50f44152_30 -> X9b376999e062dfdd_0 [label="mv(79),cp(76),cp(77),mv(81)"];
  X1aaf704c50f44152_32 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_46 {
    label="entrypoint::test_process_\namount_to_ui_amount::{clo\nsure#0}";
    style="filled";
    color=lightgray;
    node_47 [label="LOCALS\l0 = pinocchio_token_interface::state::mint::Mint\l1 = &{closure@p-token/src/entrypoint.rs:1334:20: 1334:48}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const pinocchio_token_interface::state::mint::Mint\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    X3dec7bffc2b41d21_0 -> X3dec7bffc2b41d21_1 [label="5"];
    X3dec7bffc2b41d21_0 [label="Call\l"];
    X3dec7bffc2b41d21_1 -> X3dec7bffc2b41d21_2 [label="4"];
    X3dec7bffc2b41d21_1 [label="Call\l"];
    X3dec7bffc2b41d21_2 -> X3dec7bffc2b41d21_3 [label="0"];
    X3dec7bffc2b41d21_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    X3dec7bffc2b41d21_3 [label="Return\l"];
  }
  X3dec7bffc2b41d21_0 -> X18b054a9564b373a_0 [label="cp(2)"];
  X3dec7bffc2b41d21_1 -> X9e6ee8713e773f38_0 [label="cp(5)"];
  X3dec7bffc2b41d21_2 -> Xe54069678bfda177_0 [label="mv(3)"];
  subgraph cluster_48 {
    label="entrypoint::inner_process\n_remaining_instruction";
    style="filled";
    color=lightgray;
    node_49 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = u8\l4 = &[pinocchio::account_info::AccountInfo; 1]\l5 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l6 = &[u8; 8]\l7 = core::option::Option<&[u8; 8]>\l", style="filled", color=palegreen3];
    Xda53248c0718102a_0 -> Xda53248c0718102a_2 [label="23"];
    Xda53248c0718102a_0 -> Xda53248c0718102a_1 [label="other"];
    Xda53248c0718102a_0 [label="SwitchInt cp(3)\l"];
    Xda53248c0718102a_1 -> Xda53248c0718102a_7;
    Xda53248c0718102a_1 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xda53248c0718102a_2 -> Xda53248c0718102a_3 [label="5"];
    Xda53248c0718102a_2 [label="Call\l"];
    Xda53248c0718102a_3 -> Xda53248c0718102a_4 [label="4"];
    Xda53248c0718102a_3 [label="Call\l"];
    Xda53248c0718102a_4 -> Xda53248c0718102a_5 [label="7"];
    Xda53248c0718102a_4 [label="Call\l"];
    Xda53248c0718102a_5 -> Xda53248c0718102a_6 [label="6"];
    Xda53248c0718102a_5 [label="Call\l"];
    Xda53248c0718102a_6 -> Xda53248c0718102a_7 [label="0"];
    Xda53248c0718102a_6 [label="Call\l"];
    Xda53248c0718102a_7 [label="Return\l"];
  }
  Xda53248c0718102a_2 -> Xfc3dc8b7260a8e64_0 [label="cp(1)"];
  Xda53248c0718102a_3 -> X5d66149d59dd555d_0 [label="mv(5)"];
  Xda53248c0718102a_4 -> X9b6fa2c662436654_0 [label="cp(2)"];
  Xda53248c0718102a_5 -> X37e025db98323361_0 [label="mv(7)"];
  Xda53248c0718102a_6 -> X1aaf704c50f44152_0 [label="cp(4),cp(6)"];
  subgraph cluster_50 {
    label="entrypoint::log_error";
    style="filled";
    color=lightgray;
    node_51 [label="LOCALS\l0 = ()\l1 = &pinocchio::program_error::ProgramError\l2 = ()\l3 = &str\l", style="filled", color=palegreen3];
    X874533c11eb9abdb_0 -> X874533c11eb9abdb_1 [label="3"];
    X874533c11eb9abdb_0 [label="Call\l"];
    X874533c11eb9abdb_1 -> X874533c11eb9abdb_2 [label="2"];
    X874533c11eb9abdb_1 [label="Call\l"];
    X874533c11eb9abdb_2 [label="Return\l"];
  }
  X874533c11eb9abdb_0 -> Xa3178b9ab8d38373_0 [label="cp(1)"];
  X874533c11eb9abdb_1 -> Xf793977e1a6d5f00_0 [label="cp(3)"];
  subgraph cluster_52 {
    label="processor::unpack_amount";
    style="filled";
    color=lightgray;
    node_53 [label="LOCALS\l0 = core::result::Result<u64, pinocchio_token_interface::error::TokenError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = u64\l5 = [u8; 8]\l6 = *const [u8; 8]\l7 = *const u8\l8 = pinocchio_token_interface::error::TokenError\l", style="filled", color=palegreen3];
    X79ef61c00d8bf9e7_0 -> X79ef61c00d8bf9e7_4 [label="0"];
    X79ef61c00d8bf9e7_0 -> X79ef61c00d8bf9e7_1 [label="other"];
    X79ef61c00d8bf9e7_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ge(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X79ef61c00d8bf9e7_1 -> X79ef61c00d8bf9e7_2 [label="7"];
    X79ef61c00d8bf9e7_1 [label="Call\l"];
    X79ef61c00d8bf9e7_2 -> X79ef61c00d8bf9e7_3 [label="4"];
    X79ef61c00d8bf9e7_2 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- Use(cp((*6)))\lCall\l"];
    X79ef61c00d8bf9e7_3 -> X79ef61c00d8bf9e7_5;
    X79ef61c00d8bf9e7_3 [label="0 <- Adt{0} (mv(4))\lGoto\l"];
    X79ef61c00d8bf9e7_4 -> X79ef61c00d8bf9e7_5;
    X79ef61c00d8bf9e7_4 [label="8 <- Adt{12} ()\l0 <- Adt{1} (mv(8))\lGoto\l"];
    X79ef61c00d8bf9e7_5 [label="Return\l"];
  }
  X79ef61c00d8bf9e7_1 -> X9e6ee8713e773f38_0 [label="cp(1)"];
  X79ef61c00d8bf9e7_2 -> Xc97887a60368c46_0 [label="mv(5)"];
  subgraph cluster_54 {
    label="processor::amount_to_ui_a\nmount::process_amount_to_\nui_amount";
    style="filled";
    color=lightgray;
    node_55 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, u64>\l4 = core::result::Result<u64, pinocchio_token_interface::error::TokenError>\l5 = isize\l6 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l7 = u64\l8 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l9 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l10 = core::option::Option<&pinocchio::account_info::AccountInfo>\l11 = pinocchio::program_error::ProgramError\l12 = isize\l13 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l14 = &pinocchio::account_info::AccountInfo\l15 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l16 = core::result::Result<(), pinocchio::program_error::ProgramError>\l17 = isize\l18 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l19 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &pinocchio_token_interface::state::mint::Mint>\l20 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l21 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l22 = &[u8]\l23 = isize\l24 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l25 = &pinocchio_token_interface::state::mint::Mint\l26 = pinocchio_log::logger::Logger<257>\l27 = &mut pinocchio_log::logger::Logger<257>\l28 = &mut pinocchio_log::logger::Logger<257>\l29 = &[pinocchio_log::logger::Argument]\l30 = &[pinocchio_log::logger::Argument; 1]\l31 = [pinocchio_log::logger::Argument; 1]\l32 = pinocchio_log::logger::Argument\l33 = u8\l34 = &str\l35 = &[u8]\l36 = &pinocchio_log::logger::Logger<257>\l37 = bool\l38 = u8\l39 = bool\l40 = &str\l41 = &str\l42 = &str\l43 = &str\l44 = ()\l45 = &[u8]\l46 = &str\l", style="filled", color=palegreen3];
    Xd906d322bcc28b32_0 -> Xd906d322bcc28b32_1 [label="4"];
    Xd906d322bcc28b32_0 [label="Call\l"];
    Xd906d322bcc28b32_1 -> Xd906d322bcc28b32_2 [label="3"];
    Xd906d322bcc28b32_1 [label="Call\l"];
    Xd906d322bcc28b32_2 -> Xd906d322bcc28b32_4 [label="0"];
    Xd906d322bcc28b32_2 -> Xd906d322bcc28b32_5 [label="1"];
    Xd906d322bcc28b32_2 -> Xd906d322bcc28b32_3 [label="other"];
    Xd906d322bcc28b32_2 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    Xd906d322bcc28b32_3 [label="Unreachable\l"];
    Xd906d322bcc28b32_4 -> Xd906d322bcc28b32_6 [label="10"];
    Xd906d322bcc28b32_4 [label="7 <- Use(cp((3 as variant 0).0))\lCall\l"];
    Xd906d322bcc28b32_5 -> Xd906d322bcc28b32_33 [label="0"];
    Xd906d322bcc28b32_5 [label="6 <- Use(mv((3 as variant 1).0))\lCall\l"];
    Xd906d322bcc28b32_6 -> Xd906d322bcc28b32_7 [label="9"];
    Xd906d322bcc28b32_6 [label="11 <- Adt{10} ()\lCall\l"];
    Xd906d322bcc28b32_7 -> Xd906d322bcc28b32_8 [label="8"];
    Xd906d322bcc28b32_7 [label="Call\l"];
    Xd906d322bcc28b32_8 -> Xd906d322bcc28b32_9 [label="0"];
    Xd906d322bcc28b32_8 -> Xd906d322bcc28b32_10 [label="1"];
    Xd906d322bcc28b32_8 -> Xd906d322bcc28b32_3 [label="other"];
    Xd906d322bcc28b32_8 [label="12 <- Discriminant(8)\lSwitchInt mv(12)\l"];
    Xd906d322bcc28b32_9 -> Xd906d322bcc28b32_11 [label="16"];
    Xd906d322bcc28b32_9 [label="14 <- Use(cp((8 as variant 0).0))\lCall\l"];
    Xd906d322bcc28b32_10 -> Xd906d322bcc28b32_33 [label="0"];
    Xd906d322bcc28b32_10 [label="13 <- Use(mv((8 as variant 1).0))\lCall\l"];
    Xd906d322bcc28b32_11 -> Xd906d322bcc28b32_12 [label="15"];
    Xd906d322bcc28b32_11 [label="Call\l"];
    Xd906d322bcc28b32_12 -> Xd906d322bcc28b32_13 [label="0"];
    Xd906d322bcc28b32_12 -> Xd906d322bcc28b32_14 [label="1"];
    Xd906d322bcc28b32_12 -> Xd906d322bcc28b32_3 [label="other"];
    Xd906d322bcc28b32_12 [label="17 <- Discriminant(15)\lSwitchInt mv(17)\l"];
    Xd906d322bcc28b32_13 -> Xd906d322bcc28b32_15 [label="22"];
    Xd906d322bcc28b32_13 [label="Call\l"];
    Xd906d322bcc28b32_14 -> Xd906d322bcc28b32_33 [label="0"];
    Xd906d322bcc28b32_14 [label="18 <- Use(mv((15 as variant 1).0))\lCall\l"];
    Xd906d322bcc28b32_15 -> Xd906d322bcc28b32_16 [label="21"];
    Xd906d322bcc28b32_15 [label="Call\l"];
    Xd906d322bcc28b32_16 -> Xd906d322bcc28b32_17 [label="20"];
    Xd906d322bcc28b32_16 [label="Call\l"];
    Xd906d322bcc28b32_17 -> Xd906d322bcc28b32_18 [label="19"];
    Xd906d322bcc28b32_17 [label="Call\l"];
    Xd906d322bcc28b32_18 -> Xd906d322bcc28b32_19 [label="0"];
    Xd906d322bcc28b32_18 -> Xd906d322bcc28b32_20 [label="1"];
    Xd906d322bcc28b32_18 -> Xd906d322bcc28b32_3 [label="other"];
    Xd906d322bcc28b32_18 [label="23 <- Discriminant(19)\lSwitchInt mv(23)\l"];
    Xd906d322bcc28b32_19 -> Xd906d322bcc28b32_21 [label="26"];
    Xd906d322bcc28b32_19 [label="25 <- Use(cp((19 as variant 0).0))\lCall\l"];
    Xd906d322bcc28b32_20 -> Xd906d322bcc28b32_33 [label="0"];
    Xd906d322bcc28b32_20 [label="24 <- Use(mv((19 as variant 1).0))\lCall\l"];
    Xd906d322bcc28b32_21 -> Xd906d322bcc28b32_22 [label="27"];
    Xd906d322bcc28b32_21 [label="28 <- &mut 26\l33 <- Use(cp((*25).2))\l32 <- Adt{0} (mv(33))\l31 <- Array (mv(32))\l30 <- & 31\l29 <- Cast-PointerCoercion(Unsize) cp(30)\lCall\l"];
    Xd906d322bcc28b32_22 -> Xd906d322bcc28b32_23 [label="35"];
    Xd906d322bcc28b32_22 [label="36 <- & 26\lCall\l"];
    Xd906d322bcc28b32_23 -> Xd906d322bcc28b32_24 [label="34"];
    Xd906d322bcc28b32_23 [label="Call\l"];
    Xd906d322bcc28b32_24 -> Xd906d322bcc28b32_30 [label="0"];
    Xd906d322bcc28b32_24 -> Xd906d322bcc28b32_25 [label="other"];
    Xd906d322bcc28b32_24 [label="38 <- Use(cp((*25).2))\l37 <- Gt(mv(38), const ?_u8)\lSwitchInt mv(37)\l"];
    Xd906d322bcc28b32_25 -> Xd906d322bcc28b32_26 [label="39"];
    Xd906d322bcc28b32_25 [label="40 <- Use(cp(34))\lCall\l"];
    Xd906d322bcc28b32_26 -> Xd906d322bcc28b32_30 [label="0"];
    Xd906d322bcc28b32_26 -> Xd906d322bcc28b32_27 [label="other"];
    Xd906d322bcc28b32_26 [label="SwitchInt mv(39)\l"];
    Xd906d322bcc28b32_27 -> Xd906d322bcc28b32_28 [label="41"];
    Xd906d322bcc28b32_27 [label="42 <- Use(cp(34))\lCall\l"];
    Xd906d322bcc28b32_28 -> Xd906d322bcc28b32_29 [label="43"];
    Xd906d322bcc28b32_28 [label="Call\l"];
    Xd906d322bcc28b32_29 -> Xd906d322bcc28b32_30;
    Xd906d322bcc28b32_29 [label="34 <- Use(cp(43))\lGoto\l"];
    Xd906d322bcc28b32_30 -> Xd906d322bcc28b32_31 [label="45"];
    Xd906d322bcc28b32_30 [label="46 <- Use(cp(34))\lCall\l"];
    Xd906d322bcc28b32_31 -> Xd906d322bcc28b32_32 [label="44"];
    Xd906d322bcc28b32_31 [label="Call\l"];
    Xd906d322bcc28b32_32 -> Xd906d322bcc28b32_33;
    Xd906d322bcc28b32_32 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xd906d322bcc28b32_33 [label="Return\l"];
  }
  Xd906d322bcc28b32_0 -> X79ef61c00d8bf9e7_0 [label="cp(2)"];
  Xd906d322bcc28b32_1 -> Xcbfae2b25b3a8bf1_0 [label="mv(4)"];
  Xd906d322bcc28b32_4 -> X7872bd54ee488e30_0 [label="cp(1)"];
  Xd906d322bcc28b32_5 -> X2463e75e08f1acde_0 [label="mv(6)"];
  Xd906d322bcc28b32_6 -> X27f21f54126ae4f5_0 [label="mv(10),mv(11)"];
  Xd906d322bcc28b32_7 -> X5872796c41a72d9e_0 [label="mv(9)"];
  Xd906d322bcc28b32_9 -> Xaa2da689ad7cc07b_0 [label="cp(14)"];
  Xd906d322bcc28b32_10 -> X5a1b7e395be91c95_0 [label="mv(13)"];
  Xd906d322bcc28b32_11 -> Xa5ca904ae82432b1_0 [label="mv(16)"];
  Xd906d322bcc28b32_13 -> X18b054a9564b373a_0 [label="cp(14)"];
  Xd906d322bcc28b32_14 -> X5a1b7e395be91c95_0 [label="mv(18)"];
  Xd906d322bcc28b32_15 -> Xe7e60421b7bdb777_0 [label="cp(22)"];
  Xd906d322bcc28b32_16 -> X4544d5a9726463e5_0 [label="mv(21),const {closure@p-token/src/processor/amount_to_ui_amount.rs:26:65: 26:68}"];
  Xd906d322bcc28b32_17 -> Xe6c4906ed7b13b2b_0 [label="mv(20)"];
  Xd906d322bcc28b32_19 -> X198a02deb871dc7c_0 [label=""];
  Xd906d322bcc28b32_20 -> X2463e75e08f1acde_0 [label="mv(24)"];
  Xd906d322bcc28b32_21 -> X60a52f7949dac7eb_0 [label="mv(28),cp(7),mv(29)"];
  Xd906d322bcc28b32_22 -> Xaae16f8cc6e03bae_0 [label="cp(36)"];
  Xd906d322bcc28b32_23 -> Xa8af50ae2aec905_0 [label="cp(35)"];
  Xd906d322bcc28b32_25 -> X68d161863aff8610_0 [label="mv(40),const char"];
  Xd906d322bcc28b32_27 -> X1440fc12115968ff_0 [label="mv(42),const char"];
  Xd906d322bcc28b32_28 -> X1440fc12115968ff_0 [label="cp(41),const char"];
  Xd906d322bcc28b32_30 -> Xd71a94b355ef4906_0 [label="mv(46)"];
  Xd906d322bcc28b32_31 -> Xf3bdd71fa9654efd_0 [label="cp(45)"];
  subgraph cluster_56 {
    label="processor::amount_to_ui_a\nmount::process_amount_to_\nui_amount::{closure#0}";
    style="filled";
    color=lightgray;
    node_57 [label="LOCALS\l0 = pinocchio_token_interface::error::TokenError\l1 = {closure@p-token/src/processor/amount_to_ui_amount.rs:26:65: 26:68}\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X4d1bb10a7606ae9b_0 [label="0 <- Adt{2} ()\lReturn\l"];
  }
  subgraph cluster_58 {
    label="processor::check_account_\nowner";
    style="filled";
    color=lightgray;
    node_59 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &[u8; 32]\l4 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xaa2da689ad7cc07b_0 -> Xaa2da689ad7cc07b_1 [label="2"];
    Xaa2da689ad7cc07b_0 [label="3 <- Use(const &[u8; 32])\lCall\l"];
    Xaa2da689ad7cc07b_1 -> Xaa2da689ad7cc07b_3 [label="0"];
    Xaa2da689ad7cc07b_1 -> Xaa2da689ad7cc07b_2 [label="other"];
    Xaa2da689ad7cc07b_1 [label="SwitchInt mv(2)\l"];
    Xaa2da689ad7cc07b_2 -> Xaa2da689ad7cc07b_4;
    Xaa2da689ad7cc07b_2 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xaa2da689ad7cc07b_3 -> Xaa2da689ad7cc07b_4;
    Xaa2da689ad7cc07b_3 [label="4 <- Adt{6} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    Xaa2da689ad7cc07b_4 [label="Return\l"];
  }
  Xaa2da689ad7cc07b_0 -> X59e9e813b3803772_0 [label="cp(1),cp(3)"];
  subgraph cluster_60 {
    label="processor::batch::process\n_batch";
    style="filled";
    color=lightgray;
    node_61 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = usize\l5 = &[u8]\l6 = pinocchio::program_error::ProgramError\l7 = pinocchio_token_interface::error::TokenError\l8 = usize\l9 = u8\l10 = &u8\l11 = &[u8]\l12 = usize\l13 = usize\l14 = u8\l15 = &u8\l16 = &[u8]\l17 = (usize, bool)\l18 = bool\l19 = usize\l20 = &[u8]\l21 = bool\l22 = pinocchio::program_error::ProgramError\l23 = pinocchio_token_interface::error::TokenError\l24 = bool\l25 = usize\l26 = &[pinocchio::account_info::AccountInfo]\l27 = pinocchio::program_error::ProgramError\l28 = &[pinocchio::account_info::AccountInfo]\l29 = &[u8]\l30 = (&[pinocchio::account_info::AccountInfo], &[u8])\l31 = &[pinocchio::account_info::AccountInfo]\l32 = &[pinocchio::account_info::AccountInfo]\l33 = core::ops::RangeTo<usize>\l34 = &[u8]\l35 = &[u8]\l36 = core::ops::Range<usize>\l37 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l38 = core::result::Result<(), pinocchio::program_error::ProgramError>\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = bool\l42 = usize\l43 = &[u8]\l44 = &[pinocchio::account_info::AccountInfo]\l45 = &[pinocchio::account_info::AccountInfo]\l46 = core::ops::RangeFrom<usize>\l47 = &[u8]\l48 = &[u8]\l49 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X15962aa79900eb2f_0 -> X15962aa79900eb2f_1;
    X15962aa79900eb2f_0 [label="Goto\l"];
    X15962aa79900eb2f_1 -> X15962aa79900eb2f_4 [label="0"];
    X15962aa79900eb2f_1 -> X15962aa79900eb2f_2 [label="other"];
    X15962aa79900eb2f_1 [label="5 <- Use(cp(2))\l4 <- PtrMetadata(mv(5))\l3 <- Lt(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    X15962aa79900eb2f_2 -> X15962aa79900eb2f_3 [label="6"];
    X15962aa79900eb2f_2 [label="7 <- Adt{12} ()\lCall\l"];
    X15962aa79900eb2f_3 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_3 [label="0 <- Adt{1} (mv(6))\lGoto\l"];
    X15962aa79900eb2f_4 -> X15962aa79900eb2f_5 [label="10"];
    X15962aa79900eb2f_4 [label="11 <- Use(cp(2))\lCall\l"];
    X15962aa79900eb2f_5 -> X15962aa79900eb2f_6 [label="15"];
    X15962aa79900eb2f_5 [label="9 <- Use(cp((*10)))\l8 <- Cast-IntToInt mv(9)\l16 <- Use(cp(2))\lCall\l"];
    X15962aa79900eb2f_6 -> X15962aa79900eb2f_7;
    X15962aa79900eb2f_6 [label="14 <- Use(cp((*15)))\l13 <- Cast-IntToInt mv(14)\l17 <- chkd-Add(const ?_usize, cp(13))\lAssert mv(17.1) == false\l"];
    X15962aa79900eb2f_7 -> X15962aa79900eb2f_8 [label="0"];
    X15962aa79900eb2f_7 -> X15962aa79900eb2f_9 [label="other"];
    X15962aa79900eb2f_7 [label="12 <- Use(mv(17.0))\l20 <- Use(cp(2))\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), cp(12))\lSwitchInt mv(18)\l"];
    X15962aa79900eb2f_8 -> X15962aa79900eb2f_11 [label="0"];
    X15962aa79900eb2f_8 -> X15962aa79900eb2f_9 [label="other"];
    X15962aa79900eb2f_8 [label="21 <- Eq(cp(12), const ?_usize)\lSwitchInt mv(21)\l"];
    X15962aa79900eb2f_9 -> X15962aa79900eb2f_10 [label="22"];
    X15962aa79900eb2f_9 [label="23 <- Adt{12} ()\lCall\l"];
    X15962aa79900eb2f_10 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_10 [label="0 <- Adt{1} (mv(22))\lGoto\l"];
    X15962aa79900eb2f_11 -> X15962aa79900eb2f_13 [label="0"];
    X15962aa79900eb2f_11 -> X15962aa79900eb2f_12 [label="other"];
    X15962aa79900eb2f_11 [label="26 <- Use(cp(1))\l25 <- PtrMetadata(mv(26))\l24 <- Lt(mv(25), cp(8))\lSwitchInt mv(24)\l"];
    X15962aa79900eb2f_12 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_12 [label="27 <- Adt{10} ()\l0 <- Adt{1} (mv(27))\lGoto\l"];
    X15962aa79900eb2f_13 -> X15962aa79900eb2f_14 [label="31"];
    X15962aa79900eb2f_13 [label="32 <- Use(cp(1))\l33 <- Adt{0} (cp(8))\lCall\l"];
    X15962aa79900eb2f_14 -> X15962aa79900eb2f_15 [label="34"];
    X15962aa79900eb2f_14 [label="35 <- Use(cp(2))\l36 <- Adt{0} (const ?_usize, cp(12))\lCall\l"];
    X15962aa79900eb2f_15 -> X15962aa79900eb2f_16 [label="38"];
    X15962aa79900eb2f_15 [label="30 <- Tuple (mv(31), mv(34))\l28 <- Use(cp(30.0))\l29 <- Use(cp(30.1))\lCall\l"];
    X15962aa79900eb2f_16 -> X15962aa79900eb2f_17 [label="37"];
    X15962aa79900eb2f_16 [label="Call\l"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_19 [label="0"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_20 [label="1"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_18 [label="other"];
    X15962aa79900eb2f_17 [label="39 <- Discriminant(37)\lSwitchInt mv(39)\l"];
    X15962aa79900eb2f_18 [label="Unreachable\l"];
    X15962aa79900eb2f_19 -> X15962aa79900eb2f_22 [label="0"];
    X15962aa79900eb2f_19 -> X15962aa79900eb2f_21 [label="other"];
    X15962aa79900eb2f_19 [label="43 <- Use(cp(2))\l42 <- PtrMetadata(mv(43))\l41 <- Eq(cp(12), mv(42))\lSwitchInt mv(41)\l"];
    X15962aa79900eb2f_20 -> X15962aa79900eb2f_25 [label="0"];
    X15962aa79900eb2f_20 [label="40 <- Use(mv((37 as variant 1).0))\lCall\l"];
    X15962aa79900eb2f_21 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_21 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X15962aa79900eb2f_22 -> X15962aa79900eb2f_23 [label="44"];
    X15962aa79900eb2f_22 [label="45 <- Use(cp(1))\l46 <- Adt{0} (cp(8))\lCall\l"];
    X15962aa79900eb2f_23 -> X15962aa79900eb2f_24 [label="47"];
    X15962aa79900eb2f_23 [label="1 <- Use(cp(44))\l48 <- Use(cp(2))\l49 <- Adt{0} (cp(12))\lCall\l"];
    X15962aa79900eb2f_24 -> X15962aa79900eb2f_1;
    X15962aa79900eb2f_24 [label="2 <- Use(cp(47))\lGoto\l"];
    X15962aa79900eb2f_25 [label="Return\l"];
  }
  X15962aa79900eb2f_2 -> X3e41fe755ef8b4ae_0 [label="mv(7)"];
  X15962aa79900eb2f_4 -> X2cdd8b2d70a4eaed_0 [label="mv(11),const ?_usize"];
  X15962aa79900eb2f_5 -> X2cdd8b2d70a4eaed_0 [label="mv(16),const ?_usize"];
  X15962aa79900eb2f_9 -> X3e41fe755ef8b4ae_0 [label="mv(23)"];
  X15962aa79900eb2f_13 -> Xfafc3ed6df8f1eb_0 [label="mv(32),mv(33)"];
  X15962aa79900eb2f_14 -> X73286d278f91d44b_0 [label="mv(35),mv(36)"];
  X15962aa79900eb2f_15 -> X9595629189257c54_0 [label="cp(28),cp(29)"];
  X15962aa79900eb2f_16 -> Xa5ca904ae82432b1_0 [label="mv(38)"];
  X15962aa79900eb2f_20 -> X5a1b7e395be91c95_0 [label="mv(40)"];
  X15962aa79900eb2f_22 -> X465c7d4710d81d1e_0 [label="mv(45),mv(46)"];
  X15962aa79900eb2f_23 -> Xe8b88bdd28569b08_0 [label="mv(48),mv(49)"];
  subgraph cluster_62 {
    label="pinocchio_token_interface\n::state::load_unchecked::\n<pinocchio_token_interfac\ne::state::mint::Mint>";
    style="filled";
    color=lightgray;
    node_63 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = pinocchio::program_error::ProgramError\l5 = &pinocchio_token_interface::state::mint::Mint\l6 = *const pinocchio_token_interface::state::mint::Mint\l7 = *const u8\l", style="filled", color=palegreen3];
    X10a88b79c5f904a3_0 -> X10a88b79c5f904a3_2 [label="0"];
    X10a88b79c5f904a3_0 -> X10a88b79c5f904a3_1 [label="other"];
    X10a88b79c5f904a3_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X10a88b79c5f904a3_1 -> X10a88b79c5f904a3_4;
    X10a88b79c5f904a3_1 [label="4 <- Adt{3} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X10a88b79c5f904a3_2 -> X10a88b79c5f904a3_3 [label="7"];
    X10a88b79c5f904a3_2 [label="Call\l"];
    X10a88b79c5f904a3_3 -> X10a88b79c5f904a3_4;
    X10a88b79c5f904a3_3 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- & (*6)\l0 <- Adt{0} (cp(5))\lGoto\l"];
    X10a88b79c5f904a3_4 [label="Return\l"];
  }
  X10a88b79c5f904a3_2 -> X9e6ee8713e773f38_0 [label="cp(1)"];
  subgraph cluster_64 {
    label="pinocchio_token_interface\n::state::load::<pinocchio\n_token_interface::state::\nmint::Mint>";
    style="filled";
    color=lightgray;
    node_65 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xe7e60421b7bdb777_0 -> Xe7e60421b7bdb777_1 [label="2"];
    Xe7e60421b7bdb777_0 [label="Call\l"];
    Xe7e60421b7bdb777_1 -> Xe7e60421b7bdb777_2 [label="0"];
    Xe7e60421b7bdb777_1 [label="Call\l"];
    Xe7e60421b7bdb777_2 [label="Return\l"];
  }
  Xe7e60421b7bdb777_0 -> X10a88b79c5f904a3_0 [label="cp(1)"];
  Xe7e60421b7bdb777_1 -> X241dac1a0e8e19fa_0 [label="mv(2),const {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}"];
  subgraph cluster_66 {
    label="pinocchio_token_interface\n::state::load::<pinocchio\n_token_interface::state::\nmint::Mint>::{closure#0}";
    style="filled";
    color=lightgray;
    node_67 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l2 = &pinocchio_token_interface::state::mint::Mint\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = isize\l6 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l7 = bool\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X709ca803b6bdae19_0 -> X709ca803b6bdae19_1 [label="4"];
    X709ca803b6bdae19_0 [label="Call\l"];
    X709ca803b6bdae19_1 -> X709ca803b6bdae19_2 [label="3"];
    X709ca803b6bdae19_1 [label="Call\l"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_4 [label="0"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_5 [label="1"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_3 [label="other"];
    X709ca803b6bdae19_2 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    X709ca803b6bdae19_3 [label="Unreachable\l"];
    X709ca803b6bdae19_4 -> X709ca803b6bdae19_7 [label="0"];
    X709ca803b6bdae19_4 -> X709ca803b6bdae19_6 [label="other"];
    X709ca803b6bdae19_4 [label="7 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(7)\l"];
    X709ca803b6bdae19_5 -> X709ca803b6bdae19_8 [label="0"];
    X709ca803b6bdae19_5 [label="6 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X709ca803b6bdae19_6 -> X709ca803b6bdae19_8;
    X709ca803b6bdae19_6 [label="0 <- Adt{0} (cp(2))\lGoto\l"];
    X709ca803b6bdae19_7 -> X709ca803b6bdae19_8;
    X709ca803b6bdae19_7 [label="8 <- Adt{9} ()\l0 <- Adt{1} (mv(8))\lGoto\l"];
    X709ca803b6bdae19_8 [label="Return\l"];
  }
  X709ca803b6bdae19_0 -> X81eb37da80f6fb85_0 [label="cp(2)"];
  X709ca803b6bdae19_1 -> X22ee39b8b53b763c_0 [label="mv(4)"];
  X709ca803b6bdae19_5 -> Xdaa446e4ac3a609b_0 [label="mv(6)"];
  subgraph cluster_68 {
    label="<&core::result::Result<()\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_69 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xab69f320456645b0_0 -> Xab69f320456645b0_1 [label="0"];
    Xab69f320456645b0_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xab69f320456645b0_1 [label="Return\l"];
  }
  Xab69f320456645b0_0 -> Xab8fa31025adcf5b_0 [label="mv(3),mv(2)"];
  subgraph cluster_70 {
    label="<&pinocchio::program_erro\nr::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_71 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X1a0ceacdb000495d_0 -> X1a0ceacdb000495d_1 [label="0"];
    X1a0ceacdb000495d_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X1a0ceacdb000495d_1 [label="Return\l"];
  }
  X1a0ceacdb000495d_0 -> X2742b41be11e0ec6_0 [label="mv(3),mv(2)"];
  subgraph cluster_72 {
    label="<&() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_73 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&()\l2 = &mut core::fmt::Formatter<'_>\l3 = &()\l", style="filled", color=palegreen3];
    X907d5b9a2b96cc8c_0 -> X907d5b9a2b96cc8c_1 [label="0"];
    X907d5b9a2b96cc8c_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X907d5b9a2b96cc8c_1 [label="Return\l"];
  }
  X907d5b9a2b96cc8c_0 -> X3282849f4a2ca907_0 [label="mv(3),mv(2)"];
  subgraph cluster_74 {
    label="<&u32 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_75 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u32\l2 = &mut core::fmt::Formatter<'_>\l3 = &u32\l", style="filled", color=palegreen3];
    Xbf1ab5e806a12eb3_0 -> Xbf1ab5e806a12eb3_1 [label="0"];
    Xbf1ab5e806a12eb3_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xbf1ab5e806a12eb3_1 [label="Return\l"];
  }
  Xbf1ab5e806a12eb3_0 -> Xf8e41209cb5e3630_0 [label="mv(3),mv(2)"];
  subgraph cluster_76 {
    label="<() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_77 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &()\l2 = &mut core::fmt::Formatter<'_>\l", style="filled", color=palegreen3];
    X3282849f4a2ca907_0 -> X3282849f4a2ca907_1 [label="0"];
    X3282849f4a2ca907_0 [label="Call\l"];
    X3282849f4a2ca907_1 [label="Return\l"];
  }
  X3282849f4a2ca907_0 -> X5b44578fd65a3909_0 [label="mv(2),const &str"];
  subgraph cluster_78 {
    label="<usize \nas \ncore::iter::Step>::forwar\nd_unchecked";
    style="filled";
    color=lightgray;
    node_79 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xdaf48124b17ea92_0 -> Xdaf48124b17ea92_2 [label="0"];
    Xdaf48124b17ea92_0 -> Xdaf48124b17ea92_1 [label="other"];
    Xdaf48124b17ea92_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xdaf48124b17ea92_1 -> Xdaf48124b17ea92_2 [label="4"];
    Xdaf48124b17ea92_1 [label="Call\l"];
    Xdaf48124b17ea92_2 [label="Storage Dead _3\l0 <- AddUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xdaf48124b17ea92_1 -> X83d527cca8322d39_0 [label="cp(1),cp(2)"];
  subgraph cluster_80 {
    label="<usize \nas \ncore::iter::Step>::backwa\nrd_unchecked";
    style="filled";
    color=lightgray;
    node_81 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xfc8f300194968d14_0 -> Xfc8f300194968d14_2 [label="0"];
    Xfc8f300194968d14_0 -> Xfc8f300194968d14_1 [label="other"];
    Xfc8f300194968d14_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xfc8f300194968d14_1 -> Xfc8f300194968d14_2 [label="4"];
    Xfc8f300194968d14_1 [label="Call\l"];
    Xfc8f300194968d14_2 [label="Storage Dead _3\l0 <- SubUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xfc8f300194968d14_1 -> Xb161298d5da9c0fa_0 [label="cp(1),cp(2)"];
  subgraph cluster_82 {
    label="core::intrinsics::copy_no\nnoverlapping::<core::mem:\n:MaybeUninit<u8>>";
    style="filled";
    color=lightgray;
    node_83 [label="LOCALS\l0 = ()\l1 = *const core::mem::MaybeUninit<u8>\l2 = *mut core::mem::MaybeUninit<u8>\l3 = usize\l4 = bool\l5 = ()\l6 = *const ()\l7 = *mut ()\l8 = usize\l9 = usize\l", style="filled", color=palegreen3];
    Xef59c4024d633d0b_0 -> Xef59c4024d633d0b_3 [label="0"];
    Xef59c4024d633d0b_0 -> Xef59c4024d633d0b_1 [label="other"];
    Xef59c4024d633d0b_0 [label="Storage Live _4\l4 <- UbChecks :: bool\lSwitchInt mv(4)\l"];
    Xef59c4024d633d0b_1 -> Xef59c4024d633d0b_2 [label="5"];
    Xef59c4024d633d0b_1 [label="Storage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _7\l7 <- Cast-PtrToPtr cp(2)\lStorage Live _8\l8 <- SizeOf :: core::mem::MaybeUninit<u8>\lStorage Live _9\l9 <- AlignOf :: core::mem::MaybeUninit<u8>\lCall\l"];
    Xef59c4024d633d0b_2 -> Xef59c4024d633d0b_3;
    Xef59c4024d633d0b_2 [label="Storage Dead _9\lStorage Dead _8\lStorage Dead _7\lStorage Dead _6\lGoto\l"];
    Xef59c4024d633d0b_3 [label="Storage Dead _4\lIntr: CopyNonOverlapping: cp(2) <- cp(1)(cp(3)))\lReturn\l"];
  }
  Xef59c4024d633d0b_1 -> Xa02d25be8cfd143d_0 [label="mv(6),mv(7),mv(8),mv(9),cp(3)"];
  subgraph cluster_84 {
    label="core::intrinsics::copy_no\nnoverlapping::preconditio\nn_check";
    style="filled";
    color=lightgray;
    node_85 [label="LOCALS\l0 = ()\l1 = *const ()\l2 = *mut ()\l3 = usize\l4 = usize\l5 = usize\l6 = bool\l7 = bool\l8 = bool\l9 = usize\l10 = bool\l11 = bool\l12 = *const ()\l13 = bool\l14 = !\l15 = bool\l16 = !\l17 = core::fmt::Arguments<'_>\l18 = usize\l19 = usize\l20 = usize\l21 = u32\l22 = &[&str]\l23 = &[core::fmt::rt::Argument<'_>]\l24 = *const u8\l25 = bool\l26 = !\l27 = core::fmt::Arguments<'_>\l28 = usize\l29 = usize\l30 = u32\l31 = &[&str]\l32 = &[core::fmt::rt::Argument<'_>]\l33 = *const u8\l", style="filled", color=palegreen3];
    Xa02d25be8cfd143d_0 -> Xa02d25be8cfd143d_1 [label="0"];
    Xa02d25be8cfd143d_0 -> Xa02d25be8cfd143d_2 [label="other"];
    Xa02d25be8cfd143d_0 [label="Storage Live _6\lStorage Live _7\lSwitchInt cp(5)\l"];
    Xa02d25be8cfd143d_1 -> Xa02d25be8cfd143d_25 [label="21"];
    Xa02d25be8cfd143d_1 [label="7 <- Use(const bool)\lStorage Live _8\lStorage Live _9\l9 <- Use(cp(4))\lStorage Live _10\l10 <- Use(cp(7))\lStorage Live _19\lStorage Live _21\lCall\l"];
    Xa02d25be8cfd143d_2 -> Xa02d25be8cfd143d_16 [label="21"];
    Xa02d25be8cfd143d_2 [label="7 <- Eq(cp(3), const ?_usize)\lStorage Live _8\lStorage Live _9\l9 <- Use(cp(4))\lStorage Live _10\l10 <- Use(cp(7))\lStorage Live _19\lStorage Live _21\lCall\l"];
    Xa02d25be8cfd143d_3 -> Xa02d25be8cfd143d_23 [label="30"];
    Xa02d25be8cfd143d_3 [label="Storage Dead _10\lStorage Dead _9\lStorage Live _11\l12 <- Cast-PtrToPtr cp(2)\lStorage Live _13\l13 <- Use(cp(7))\lStorage Live _29\lStorage Live _30\lCall\l"];
    Xa02d25be8cfd143d_4 -> Xa02d25be8cfd143d_24 [label="6"];
    Xa02d25be8cfd143d_4 [label="Storage Dead _13\lCall\l"];
    Xa02d25be8cfd143d_5 -> Xa02d25be8cfd143d_7;
    Xa02d25be8cfd143d_5 [label="Storage Dead _13\lGoto\l"];
    Xa02d25be8cfd143d_6 -> Xa02d25be8cfd143d_7;
    Xa02d25be8cfd143d_6 [label="Storage Dead _10\lStorage Dead _9\lGoto\l"];
    Xa02d25be8cfd143d_7 -> Xa02d25be8cfd143d_8;
    Xa02d25be8cfd143d_7 [label="Storage Dead _11\lStorage Dead _8\lStorage Dead _7\lGoto\l"];
    Xa02d25be8cfd143d_8 [label="Call\l"];
    Xa02d25be8cfd143d_9 [label="Storage Dead _6\lReturn\l"];
    Xa02d25be8cfd143d_10 -> Xa02d25be8cfd143d_13 [label="0"];
    Xa02d25be8cfd143d_10 -> Xa02d25be8cfd143d_12 [label="other"];
    Xa02d25be8cfd143d_10 [label="Storage Dead _18\lSwitchInt cp(10)\l"];
    Xa02d25be8cfd143d_11 -> Xa02d25be8cfd143d_6;
    Xa02d25be8cfd143d_11 [label="Storage Dead _18\lStorage Dead _19\lGoto\l"];
    Xa02d25be8cfd143d_12 -> Xa02d25be8cfd143d_3;
    Xa02d25be8cfd143d_12 [label="Storage Dead _19\lGoto\l"];
    Xa02d25be8cfd143d_13 -> Xa02d25be8cfd143d_6 [label="0"];
    Xa02d25be8cfd143d_13 -> Xa02d25be8cfd143d_3 [label="other"];
    Xa02d25be8cfd143d_13 [label="Storage Live _15\lStorage Live _24\l24 <- Cast-PtrToPtr cp(1)\l15 <- Eq(cp(19), const ?_usize)\lStorage Dead _24\l8 <- Not(mv(15))\lStorage Dead _15\lStorage Dead _19\lSwitchInt mv(8)\l"];
    Xa02d25be8cfd143d_14 -> Xa02d25be8cfd143d_10 [label="0"];
    Xa02d25be8cfd143d_14 -> Xa02d25be8cfd143d_11 [label="other"];
    Xa02d25be8cfd143d_14 [label="Storage Dead _21\lStorage Live _18\l19 <- Cast-Transmute cp(1)\l20 <- Sub(cp(4), const ?_usize)\l18 <- BitAnd(cp(19), cp(20))\lSwitchInt mv(18)\l"];
    Xa02d25be8cfd143d_15 [label="Storage Dead _21\lStorage Live _17\lStorage Live _22\l22 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _23\l23 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l17 <- Adt{0} (mv(22), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(23))\lStorage Dead _23\lStorage Dead _22\lCall\l"];
    Xa02d25be8cfd143d_16 -> Xa02d25be8cfd143d_14 [label="1"];
    Xa02d25be8cfd143d_16 -> Xa02d25be8cfd143d_15 [label="other"];
    Xa02d25be8cfd143d_16 [label="SwitchInt mv(21)\l"];
    Xa02d25be8cfd143d_17 -> Xa02d25be8cfd143d_20 [label="0"];
    Xa02d25be8cfd143d_17 -> Xa02d25be8cfd143d_19 [label="other"];
    Xa02d25be8cfd143d_17 [label="Storage Dead _28\lSwitchInt cp(13)\l"];
    Xa02d25be8cfd143d_18 -> Xa02d25be8cfd143d_5;
    Xa02d25be8cfd143d_18 [label="Storage Dead _28\lStorage Dead _29\lGoto\l"];
    Xa02d25be8cfd143d_19 -> Xa02d25be8cfd143d_4;
    Xa02d25be8cfd143d_19 [label="Storage Dead _29\lGoto\l"];
    Xa02d25be8cfd143d_20 -> Xa02d25be8cfd143d_5 [label="0"];
    Xa02d25be8cfd143d_20 -> Xa02d25be8cfd143d_4 [label="other"];
    Xa02d25be8cfd143d_20 [label="Storage Live _25\lStorage Live _33\l33 <- Cast-PtrToPtr cp(2)\l25 <- Eq(cp(29), const ?_usize)\lStorage Dead _33\l11 <- Not(mv(25))\lStorage Dead _25\lStorage Dead _29\lSwitchInt mv(11)\l"];
    Xa02d25be8cfd143d_21 -> Xa02d25be8cfd143d_17 [label="0"];
    Xa02d25be8cfd143d_21 -> Xa02d25be8cfd143d_18 [label="other"];
    Xa02d25be8cfd143d_21 [label="Storage Dead _30\lStorage Live _28\l29 <- Cast-Transmute cp(2)\l28 <- BitAnd(cp(29), cp(20))\lSwitchInt mv(28)\l"];
    Xa02d25be8cfd143d_22 [label="Storage Dead _30\lStorage Live _27\lStorage Live _31\l31 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _32\l32 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l27 <- Adt{0} (mv(31), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(32))\lStorage Dead _32\lStorage Dead _31\lCall\l"];
    Xa02d25be8cfd143d_23 -> Xa02d25be8cfd143d_21 [label="1"];
    Xa02d25be8cfd143d_23 -> Xa02d25be8cfd143d_22 [label="other"];
    Xa02d25be8cfd143d_23 [label="SwitchInt mv(30)\l"];
    Xa02d25be8cfd143d_24 -> Xa02d25be8cfd143d_8 [label="0"];
    Xa02d25be8cfd143d_24 -> Xa02d25be8cfd143d_9 [label="other"];
    Xa02d25be8cfd143d_24 [label="Storage Dead _11\lStorage Dead _8\lStorage Dead _7\lSwitchInt mv(6)\l"];
    Xa02d25be8cfd143d_25 -> Xa02d25be8cfd143d_26 [label="1"];
    Xa02d25be8cfd143d_25 -> Xa02d25be8cfd143d_15 [label="other"];
    Xa02d25be8cfd143d_25 [label="SwitchInt mv(21)\l"];
    Xa02d25be8cfd143d_26 -> Xa02d25be8cfd143d_27 [label="0"];
    Xa02d25be8cfd143d_26 -> Xa02d25be8cfd143d_11 [label="other"];
    Xa02d25be8cfd143d_26 [label="Storage Dead _21\lStorage Live _18\l19 <- Cast-Transmute cp(1)\l20 <- Sub(cp(4), const ?_usize)\l18 <- BitAnd(cp(19), cp(20))\lSwitchInt mv(18)\l"];
    Xa02d25be8cfd143d_27 -> Xa02d25be8cfd143d_12;
    Xa02d25be8cfd143d_27 [label="Storage Dead _18\lGoto\l"];
  }
  Xa02d25be8cfd143d_1 -> X5ea6c111b835a80f_0 [label="cp(4)"];
  Xa02d25be8cfd143d_2 -> X5ea6c111b835a80f_0 [label="cp(4)"];
  Xa02d25be8cfd143d_3 -> X5ea6c111b835a80f_0 [label="mv(4)"];
  Xa02d25be8cfd143d_4 -> X6dc314fc8fa89576_0 [label="mv(1),mv(12),mv(3),mv(5)"];
  Xa02d25be8cfd143d_8 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  Xa02d25be8cfd143d_15 -> Xfffaab11503b9894_0 [label="mv(17)"];
  Xa02d25be8cfd143d_22 -> Xfffaab11503b9894_0 [label="mv(27)"];
  subgraph cluster_86 {
    label="core::intrinsics::cold_pa\nth";
    style="filled";
    color=lightgray;
    node_87 [label="LOCALS\l0 = ()\l", style="filled", color=palegreen3];
    Xf44dc55018491642_0 [label="Return\l"];
  }
  subgraph cluster_88 {
    label="<usize \nas \ncore::cmp::Ord>::min";
    style="filled";
    color=lightgray;
    node_89 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X6ef12a525c09043d_0 -> X6ef12a525c09043d_1 [label="0"];
    X6ef12a525c09043d_0 [label="Call\l"];
    X6ef12a525c09043d_1 [label="Return\l"];
  }
  X6ef12a525c09043d_0 -> Xf85b79c5bd16f087_0 [label="mv(1),mv(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_90 {
    label="core::cmp::min::<usize>";
    style="filled";
    color=lightgray;
    node_91 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xe9140f1d0f7f9eb4_0 -> Xe9140f1d0f7f9eb4_1 [label="0"];
    Xe9140f1d0f7f9eb4_0 [label="Call\l"];
    Xe9140f1d0f7f9eb4_1 [label="Return\l"];
  }
  Xe9140f1d0f7f9eb4_0 -> X6ef12a525c09043d_0 [label="mv(1),mv(2)"];
  subgraph cluster_92 {
    label="core::cmp::impls::<impl \ncore::cmp::Ord \nfor \nusize>::cmp";
    style="filled";
    color=lightgray;
    node_93 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xf9c0f98a7bd601c9_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Cmp(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_94 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \nu32>::eq";
    style="filled";
    color=lightgray;
    node_95 [label="LOCALS\l0 = bool\l1 = &u32\l2 = &u32\l3 = u32\l4 = u32\l", style="filled", color=palegreen3];
    Xf467524343d2663e_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Eq(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_96 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \nusize>::lt";
    style="filled";
    color=lightgray;
    node_97 [label="LOCALS\l0 = bool\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xb4d458fe7af2393d_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Lt(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_98 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n()>::eq";
    style="filled";
    color=lightgray;
    node_99 [label="LOCALS\l0 = bool\l1 = &()\l2 = &()\l", style="filled", color=palegreen3];
    Xe5dce0424c1e8e0f_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_100 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_101 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X7d20e7238026070b_0 -> X7d20e7238026070b_1 [label="0"];
    X7d20e7238026070b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X7d20e7238026070b_1 [label="Return\l"];
  }
  X7d20e7238026070b_0 -> X7b4e898ba35115b5_0 [label="mv(3),mv(4)"];
  subgraph cluster_102 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&u32>::eq";
    style="filled";
    color=lightgray;
    node_103 [label="LOCALS\l0 = bool\l1 = &&u32\l2 = &&u32\l3 = &u32\l4 = &u32\l", style="filled", color=palegreen3];
    X1bb3de031e0823b_0 -> X1bb3de031e0823b_1 [label="0"];
    X1bb3de031e0823b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X1bb3de031e0823b_1 [label="Return\l"];
  }
  X1bb3de031e0823b_0 -> Xf467524343d2663e_0 [label="mv(3),mv(4)"];
  subgraph cluster_104 {
    label="core::cmp::max_by::<usize\n, \nfor<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp}>";
    style="filled";
    color=lightgray;
    node_105 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l4 = core::cmp::Ordering\l5 = (&usize, &usize)\l6 = &usize\l7 = &usize\l8 = i8\l9 = bool\l", style="filled", color=palegreen3];
    X727d00c50bac1297_0 -> X727d00c50bac1297_6 [label="Cleanup"];
    X727d00c50bac1297_0 -> X727d00c50bac1297_1 [label="4"];
    X727d00c50bac1297_0 [label="9 <- Use(const bool)\lStorage Live _4\lStorage Live _5\l6 <- & 1\l7 <- & 2\l5 <- Tuple (cp(6), cp(7))\lCall\l"];
    X727d00c50bac1297_1 -> X727d00c50bac1297_4 [label="255"];
    X727d00c50bac1297_1 -> X727d00c50bac1297_4 [label="0"];
    X727d00c50bac1297_1 -> X727d00c50bac1297_3 [label="1"];
    X727d00c50bac1297_1 -> X727d00c50bac1297_2 [label="other"];
    X727d00c50bac1297_1 [label="Storage Dead _5\l8 <- Discriminant(4)\lSwitchInt mv(8)\l"];
    X727d00c50bac1297_2 [label="Unreachable\l"];
    X727d00c50bac1297_3 -> X727d00c50bac1297_10 [label="Cleanup"];
    X727d00c50bac1297_3 -> X727d00c50bac1297_5;
    X727d00c50bac1297_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lStorage Dead _4\lDrop 2\l"];
    X727d00c50bac1297_4 -> X727d00c50bac1297_5 [label="0"];
    X727d00c50bac1297_4 -> X727d00c50bac1297_8 [label="other"];
    X727d00c50bac1297_4 [label="0 <- Use(mv(2))\lStorage Dead _4\lSwitchInt cp(9)\l"];
    X727d00c50bac1297_5 [label="Return\l"];
    X727d00c50bac1297_6 -> X727d00c50bac1297_10;
    X727d00c50bac1297_6 [label="Drop 2\l"];
    X727d00c50bac1297_7 [label="Resume\l"];
    X727d00c50bac1297_8 -> X727d00c50bac1297_5;
    X727d00c50bac1297_8 [label="Drop 1\l"];
    X727d00c50bac1297_9 -> X727d00c50bac1297_7;
    X727d00c50bac1297_9 [label="Drop 1\l"];
    X727d00c50bac1297_10 -> X727d00c50bac1297_7 [label="0"];
    X727d00c50bac1297_10 -> X727d00c50bac1297_9 [label="other"];
    X727d00c50bac1297_10 [label="SwitchInt cp(9)\l"];
  }
  X727d00c50bac1297_0 -> X77e43185fa0f4d2e_0 [label="mv(3),mv(5)"];
  subgraph cluster_106 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu32>::fmt";
    style="filled";
    color=lightgray;
    node_107 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u32\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    Xf8e41209cb5e3630_0 -> Xf8e41209cb5e3630_2 [label="0"];
    Xf8e41209cb5e3630_0 -> Xf8e41209cb5e3630_1 [label="other"];
    Xf8e41209cb5e3630_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    Xf8e41209cb5e3630_1 -> Xf8e41209cb5e3630_6 [label="0"];
    Xf8e41209cb5e3630_1 [label="Storage Dead _3\lCall\l"];
    Xf8e41209cb5e3630_2 -> Xf8e41209cb5e3630_4 [label="0"];
    Xf8e41209cb5e3630_2 -> Xf8e41209cb5e3630_3 [label="other"];
    Xf8e41209cb5e3630_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    Xf8e41209cb5e3630_3 -> Xf8e41209cb5e3630_5 [label="0"];
    Xf8e41209cb5e3630_3 [label="Storage Dead _5\lCall\l"];
    Xf8e41209cb5e3630_4 -> Xf8e41209cb5e3630_5 [label="0"];
    Xf8e41209cb5e3630_4 [label="Storage Dead _5\lCall\l"];
    Xf8e41209cb5e3630_5 -> Xf8e41209cb5e3630_6;
    Xf8e41209cb5e3630_5 [label="Goto\l"];
    Xf8e41209cb5e3630_6 [label="Return\l"];
  }
  Xf8e41209cb5e3630_1 -> X1d0677a8f15bd47_0 [label="mv(1),mv(2)"];
  Xf8e41209cb5e3630_3 -> Xca95a9d6f7061805_0 [label="mv(1),mv(2)"];
  Xf8e41209cb5e3630_4 -> X67d151235d77b301_0 [label="mv(1),mv(2)"];
  subgraph cluster_108 {
    label="core::mem::MaybeUninit::<\nu8>::write";
    style="filled";
    color=lightgray;
    node_109 [label="LOCALS\l0 = &mut u8\l1 = &mut core::mem::MaybeUninit<u8>\l2 = u8\l3 = core::mem::MaybeUninit<u8>\l4 = core::mem::ManuallyDrop<u8>\l5 = ()\l6 = *mut u8\l7 = *mut core::mem::MaybeUninit<u8>\l", style="filled", color=palegreen3];
    X106fa85414871cf3_0 -> X106fa85414871cf3_1 [label="5"];
    X106fa85414871cf3_0 [label="Storage Live _3\lStorage Live _4\l4 <- Adt{0} (cp(2))\l3 <- Adt{0} (mv(4))\lStorage Dead _4\l(*1) <- Use(mv(3))\lStorage Dead _3\lCall\l"];
    X106fa85414871cf3_1 [label="Storage Live _6\lStorage Live _7\l7 <- &raw mut (*1)\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l0 <- &mut (*6)\lStorage Dead _6\lReturn\l"];
  }
  X106fa85414871cf3_0 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_110 {
    label="core::mem::size_of::<u64>";
    style="filled";
    color=lightgray;
    node_111 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    X31bb347943910dd2_0 [label="0 <- SizeOf :: u64\lReturn\l"];
  }
  subgraph cluster_112 {
    label="core::num::<impl \nu64>::from_le_bytes";
    style="filled";
    color=lightgray;
    node_113 [label="LOCALS\l0 = u64\l1 = [u8; 8]\l", style="filled", color=palegreen3];
    Xc97887a60368c46_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_114 {
    label="core::num::<impl \nisize>::unchecked_neg::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_115 [label="LOCALS\l0 = ()\l1 = isize\l2 = !\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    X44b1b4235fabb732_0 -> X44b1b4235fabb732_3 [label="0"];
    X44b1b4235fabb732_0 -> X44b1b4235fabb732_1 [label="other"];
    X44b1b4235fabb732_0 [label="Storage Live _3\l3 <- Eq(cp(1), const ?_isize)\lSwitchInt cp(3)\l"];
    X44b1b4235fabb732_1 -> X44b1b4235fabb732_2 [label="4"];
    X44b1b4235fabb732_1 [label="Call\l"];
    X44b1b4235fabb732_2 [label="Storage Dead _3\lCall\l"];
    X44b1b4235fabb732_3 [label="Storage Dead _3\lReturn\l"];
  }
  X44b1b4235fabb732_1 -> X8fc2060ad58510d8_0 [label=""];
  X44b1b4235fabb732_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_116 {
    label="core::num::<impl \nusize>::unchecked_add::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_117 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    X83d527cca8322d39_0 -> X83d527cca8322d39_2 [label="0"];
    X83d527cca8322d39_0 -> X83d527cca8322d39_1 [label="other"];
    X83d527cca8322d39_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Add(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    X83d527cca8322d39_1 [label="Call\l"];
    X83d527cca8322d39_2 [label="Return\l"];
  }
  X83d527cca8322d39_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_118 {
    label="core::num::<impl \nusize>::unchecked_sub::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_119 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    Xb161298d5da9c0fa_0 -> Xb161298d5da9c0fa_2 [label="0"];
    Xb161298d5da9c0fa_0 -> Xb161298d5da9c0fa_1 [label="other"];
    Xb161298d5da9c0fa_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Sub(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    Xb161298d5da9c0fa_1 [label="Call\l"];
    Xb161298d5da9c0fa_2 [label="Return\l"];
  }
  Xb161298d5da9c0fa_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_120 {
    label="core::num::<impl \nusize>::saturating_sub";
    style="filled";
    color=lightgray;
    node_121 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X68516b8f507a33d4_0 -> X68516b8f507a33d4_1 [label="0"];
    X68516b8f507a33d4_0 [label="Call\l"];
    X68516b8f507a33d4_1 [label="Return\l"];
  }
  X68516b8f507a33d4_0 -> X737432dcfae07d65_0 [label="mv(1),mv(2)"];
  subgraph cluster_122 {
    label="<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error} \nas \ncore::ops::FnOnce<(&pinoc\nchio::program_error::Prog\nramError,)>>::call_once";
    style="filled";
    color=lightgray;
    node_123 [label="LOCALS\l0 = ()\l1 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l2 = (&pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xd7455b7937af9e68_0 -> Xd7455b7937af9e68_1 [label="0"];
    Xd7455b7937af9e68_0 [label="Call\l"];
    Xd7455b7937af9e68_1 [label="Return\l"];
  }
  Xd7455b7937af9e68_0 -> Xd7455b7937af9e68_0: 1 [label="mv(2.0)"];
  subgraph cluster_124 {
    label="<for<'a, \n'b> \nfn(&'a \nusize, \n&'b \nusize) \n-> \ncore::cmp::Ordering \n{<usize \nas \ncore::cmp::Ord>::cmp} \nas \ncore::ops::FnOnce<(&usize\n, \n&usize)>>::call_once";
    style="filled";
    color=lightgray;
    node_125 [label="LOCALS\l0 = core::cmp::Ordering\l1 = for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}\l2 = (&usize, &usize)\l", style="filled", color=palegreen3];
    X77e43185fa0f4d2e_0 -> X77e43185fa0f4d2e_1 [label="0"];
    X77e43185fa0f4d2e_0 [label="Call\l"];
    X77e43185fa0f4d2e_1 [label="Return\l"];
  }
  X77e43185fa0f4d2e_0 -> X77e43185fa0f4d2e_0: 1 [label="mv(2.0),mv(2.1)"];
  subgraph cluster_126 {
    label="core::ptr::drop_in_place:\n:<&core::result::Result<(\n), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_127 [label="LOCALS\l0 = ()\l1 = *mut &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X510712dba1e9a34a_0 [label="Return\l"];
  }
  subgraph cluster_128 {
    label="core::ptr::read_unaligned\n::<u32>";
    style="filled";
    color=lightgray;
    node_129 [label="LOCALS\l0 = u32\l1 = *const u32\l2 = core::mem::MaybeUninit<u32>\l3 = *const u8\l4 = *mut u8\l5 = &mut core::mem::MaybeUninit<u32>\l6 = usize\l7 = core::mem::MaybeUninit<u32>\l8 = *mut core::mem::MaybeUninit<u32>\l9 = bool\l10 = ()\l11 = *const ()\l12 = *mut ()\l13 = ()\l14 = core::mem::ManuallyDrop<u32>\l", style="filled", color=palegreen3];
    X6326b7a519f8a58f_0 -> X6326b7a519f8a58f_3 [label="0"];
    X6326b7a519f8a58f_0 -> X6326b7a519f8a58f_1 [label="other"];
    X6326b7a519f8a58f_0 [label="Storage Live _2\l2 <- Adt{0} (const ())\lStorage Live _3\l3 <- Cast-PtrToPtr cp(1)\lStorage Live _4\lStorage Live _5\l5 <- &mut 2\l8 <- &raw mut 2\lStorage Dead _5\l4 <- Cast-PtrToPtr cp(8)\lStorage Live _6\l6 <- SizeOf :: u32\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    X6326b7a519f8a58f_1 -> X6326b7a519f8a58f_2 [label="10"];
    X6326b7a519f8a58f_1 [label="Storage Live _11\l11 <- Cast-PtrToPtr cp(1)\lStorage Live _12\l12 <- Cast-PtrToPtr cp(8)\lCall\l"];
    X6326b7a519f8a58f_2 -> X6326b7a519f8a58f_3;
    X6326b7a519f8a58f_2 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X6326b7a519f8a58f_3 -> X6326b7a519f8a58f_4 [label="13"];
    X6326b7a519f8a58f_3 [label="Storage Dead _9\lIntr: CopyNonOverlapping: cp(4) <- cp(3)(cp(6)))\lStorage Dead _6\lStorage Dead _4\lStorage Dead _3\lStorage Live _7\l7 <- Use(mv(2))\lCall\l"];
    X6326b7a519f8a58f_4 [label="Storage Live _14\l14 <- Use(mv(7.1))\l0 <- Use(mv(14.0))\lStorage Dead _14\lStorage Dead _7\lStorage Dead _2\lReturn\l"];
  }
  X6326b7a519f8a58f_1 -> Xa02d25be8cfd143d_0 [label="mv(11),mv(12),const ?_usize,const ?_usize,cp(6)"];
  X6326b7a519f8a58f_3 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_130 {
    label="core::ptr::read_unaligned\n::<core::simd::Simd<u8, \n16>>";
    style="filled";
    color=lightgray;
    node_131 [label="LOCALS\l0 = core::simd::Simd<u8, 16>\l1 = *const core::simd::Simd<u8, 16>\l2 = core::mem::MaybeUninit<core::simd::Simd<u8, 16>>\l3 = *const u8\l4 = *mut u8\l5 = &mut core::mem::MaybeUninit<core::simd::Simd<u8, 16>>\l6 = usize\l7 = core::mem::MaybeUninit<core::simd::Simd<u8, 16>>\l8 = *mut core::mem::MaybeUninit<core::simd::Simd<u8, 16>>\l9 = bool\l10 = ()\l11 = *const ()\l12 = *mut ()\l13 = ()\l14 = core::mem::ManuallyDrop<core::simd::Simd<u8, 16>>\l", style="filled", color=palegreen3];
    X86c67d283f5fb95_0 -> X86c67d283f5fb95_3 [label="0"];
    X86c67d283f5fb95_0 -> X86c67d283f5fb95_1 [label="other"];
    X86c67d283f5fb95_0 [label="Storage Live _2\l2 <- Adt{0} (const ())\lStorage Live _3\l3 <- Cast-PtrToPtr cp(1)\lStorage Live _4\lStorage Live _5\l5 <- &mut 2\l8 <- &raw mut 2\lStorage Dead _5\l4 <- Cast-PtrToPtr cp(8)\lStorage Live _6\l6 <- SizeOf :: core::simd::Simd<u8, 16>\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    X86c67d283f5fb95_1 -> X86c67d283f5fb95_2 [label="10"];
    X86c67d283f5fb95_1 [label="Storage Live _11\l11 <- Cast-PtrToPtr cp(1)\lStorage Live _12\l12 <- Cast-PtrToPtr cp(8)\lCall\l"];
    X86c67d283f5fb95_2 -> X86c67d283f5fb95_3;
    X86c67d283f5fb95_2 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X86c67d283f5fb95_3 -> X86c67d283f5fb95_4 [label="13"];
    X86c67d283f5fb95_3 [label="Storage Dead _9\lIntr: CopyNonOverlapping: cp(4) <- cp(3)(cp(6)))\lStorage Dead _6\lStorage Dead _4\lStorage Dead _3\lStorage Live _7\l7 <- Use(mv(2))\lCall\l"];
    X86c67d283f5fb95_4 [label="Storage Live _14\l14 <- Use(mv(7.1))\l0 <- Use(mv(14.0))\lStorage Dead _14\lStorage Dead _7\lStorage Dead _2\lReturn\l"];
  }
  X86c67d283f5fb95_1 -> Xa02d25be8cfd143d_0 [label="mv(11),mv(12),const ?_usize,const ?_usize,cp(6)"];
  X86c67d283f5fb95_3 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_132 {
    label="core::ptr::drop_in_place:\n:<&u32>";
    style="filled";
    color=lightgray;
    node_133 [label="LOCALS\l0 = ()\l1 = *mut &u32\l", style="filled", color=palegreen3];
    X30c4b72bd88588e9_0 [label="Return\l"];
  }
  subgraph cluster_134 {
    label="core::ptr::drop_in_place:\n:<&()>";
    style="filled";
    color=lightgray;
    node_135 [label="LOCALS\l0 = ()\l1 = *mut &()\l", style="filled", color=palegreen3];
    Xb1de6c64f30c28ca_0 [label="Return\l"];
  }
  subgraph cluster_136 {
    label="core::ptr::drop_in_place:\n:<core::num::TryFromIntEr\nror>";
    style="filled";
    color=lightgray;
    node_137 [label="LOCALS\l0 = ()\l1 = *mut core::num::TryFromIntError\l", style="filled", color=palegreen3];
    Xeafe983e6346020c_0 [label="Return\l"];
  }
  subgraph cluster_138 {
    label="core::ptr::drop_in_place:\n:<pinocchio::program_erro\nr::ProgramError>";
    style="filled";
    color=lightgray;
    node_139 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X5267a1347b838209_0 [label="Return\l"];
  }
  subgraph cluster_140 {
    label="core::ptr::drop_in_place:\n:<&pinocchio::program_err\nor::ProgramError>";
    style="filled";
    color=lightgray;
    node_141 [label="LOCALS\l0 = ()\l1 = *mut &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xbed7bd1a7d1dca9_0 [label="Return\l"];
  }
  subgraph cluster_142 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::add";
    style="filled";
    color=lightgray;
    node_143 [label="LOCALS\l0 = *mut u8\l1 = *mut u8\l2 = usize\l", style="filled", color=palegreen3];
    X99398f9f14483c90_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_144 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \ncore::mem::MaybeUninit<u8\n>>::add";
    style="filled";
    color=lightgray;
    node_145 [label="LOCALS\l0 = *mut core::mem::MaybeUninit<u8>\l1 = *mut core::mem::MaybeUninit<u8>\l2 = usize\l", style="filled", color=palegreen3];
    Xea0c6a7ce6f10078_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_146 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \npinocchio::account_info::\nAccountInfo>::add";
    style="filled";
    color=lightgray;
    node_147 [label="LOCALS\l0 = *mut pinocchio::account_info::AccountInfo\l1 = *mut pinocchio::account_info::AccountInfo\l2 = usize\l", style="filled", color=palegreen3];
    X921508901878e521_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_148 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \npinocchio::account_info::\nAccountInfo>::write";
    style="filled";
    color=lightgray;
    node_149 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::account_info::AccountInfo\l2 = pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X9344cfdf8f55fc21_0 [label="(*1) <- Use(cp(2))\lReturn\l"];
  }
  subgraph cluster_150 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::write";
    style="filled";
    color=lightgray;
    node_151 [label="LOCALS\l0 = ()\l1 = *mut u8\l2 = u8\l", style="filled", color=palegreen3];
    Xd6fff20807a20379_0 [label="(*1) <- Use(cp(2))\lReturn\l"];
  }
  subgraph cluster_152 {
    label="core::ptr::const_ptr::<im\npl \n*const \npinocchio::account_info::\nAccountInfo>::add";
    style="filled";
    color=lightgray;
    node_153 [label="LOCALS\l0 = *const pinocchio::account_info::AccountInfo\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l", style="filled", color=palegreen3];
    X2a511a2fc7bfad7f_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_154 {
    label="core::ptr::const_ptr::<im\npl \n*const \ncore::mem::MaybeUninit<u8\n>>::add";
    style="filled";
    color=lightgray;
    node_155 [label="LOCALS\l0 = *const core::mem::MaybeUninit<u8>\l1 = *const core::mem::MaybeUninit<u8>\l2 = usize\l", style="filled", color=palegreen3];
    X192fb3deae17bccc_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_156 {
    label="core::ptr::const_ptr::<im\npl \n*const \npinocchio_token_interface\n::state::mint::Mint>::rea\nd";
    style="filled";
    color=lightgray;
    node_157 [label="LOCALS\l0 = pinocchio_token_interface::state::mint::Mint\l1 = *const pinocchio_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    Xe54069678bfda177_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_158 {
    label="core::ptr::const_ptr::<im\npl \n*const \nT>::sub_ptr::precondition\n_check";
    style="filled";
    color=lightgray;
    node_159 [label="LOCALS\l0 = ()\l1 = *const ()\l2 = *const ()\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xfccd6b940db3d5e8_0 -> Xfccd6b940db3d5e8_2 [label="0"];
    Xfccd6b940db3d5e8_0 -> Xfccd6b940db3d5e8_1 [label="other"];
    Xfccd6b940db3d5e8_0 [label="Storage Live _3\l3 <- Ge(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xfccd6b940db3d5e8_1 [label="Storage Dead _3\lReturn\l"];
    Xfccd6b940db3d5e8_2 [label="Call\l"];
  }
  Xfccd6b940db3d5e8_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_160 {
    label="core::str::next_code_poin\nt::<'_, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_161 [label="LOCALS\l0 = core::option::Option<u32>\l1 = &mut core::slice::Iter<'_, u8>\l2 = u8\l3 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &u8>\l4 = core::option::Option<&u8>\l5 = &u8\l6 = bool\l7 = u32\l8 = u32\l9 = u8\l10 = &u8\l11 = core::option::Option<&u8>\l12 = u32\l13 = bool\l14 = u8\l15 = &u8\l16 = core::option::Option<&u8>\l17 = u32\l18 = u32\l19 = u8\l20 = u32\l21 = bool\l22 = u8\l23 = &u8\l24 = core::option::Option<&u8>\l25 = u32\l26 = u32\l27 = u32\l28 = u32\l29 = isize\l30 = &u8\l31 = u8\l32 = isize\l33 = bool\l34 = ()\l35 = u32\l36 = u32\l37 = u8\l38 = isize\l39 = bool\l40 = ()\l41 = u32\l42 = u32\l43 = u8\l44 = isize\l45 = bool\l46 = ()\l47 = u32\l48 = u32\l49 = u8\l", style="filled", color=palegreen3];
    Xf810b0801103927_0 -> Xf810b0801103927_1 [label="4"];
    Xf810b0801103927_0 [label="Storage Live _3\lStorage Live _4\lCall\l"];
    Xf810b0801103927_1 -> Xf810b0801103927_13 [label="0"];
    Xf810b0801103927_1 -> Xf810b0801103927_14 [label="1"];
    Xf810b0801103927_1 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_1 [label="Storage Live _29\lStorage Live _30\l29 <- Discriminant(4)\lSwitchInt mv(29)\l"];
    Xf810b0801103927_2 [label="Unreachable\l"];
    Xf810b0801103927_3 -> Xf810b0801103927_12;
    Xf810b0801103927_3 [label="Storage Live _7\l7 <- Cast-IntToInt cp(2)\l0 <- Adt{1} (mv(7))\lStorage Dead _7\lStorage Dead _6\lGoto\l"];
    Xf810b0801103927_4 -> Xf810b0801103927_5 [label="11"];
    Xf810b0801103927_4 [label="Storage Dead _6\lStorage Live _31\l31 <- BitAnd(cp(2), const ?_u8)\l8 <- Cast-IntToInt mv(31)\lStorage Dead _31\lStorage Live _10\lStorage Live _11\lCall\l"];
    Xf810b0801103927_5 -> Xf810b0801103927_15 [label="0"];
    Xf810b0801103927_5 -> Xf810b0801103927_16 [label="1"];
    Xf810b0801103927_5 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_5 [label="Storage Live _32\l32 <- Discriminant(11)\lSwitchInt mv(32)\l"];
    Xf810b0801103927_6 -> Xf810b0801103927_7 [label="16"];
    Xf810b0801103927_6 [label="Storage Live _15\lStorage Live _16\lCall\l"];
    Xf810b0801103927_7 -> Xf810b0801103927_17 [label="0"];
    Xf810b0801103927_7 -> Xf810b0801103927_18 [label="1"];
    Xf810b0801103927_7 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_7 [label="Storage Live _38\l38 <- Discriminant(16)\lSwitchInt mv(38)\l"];
    Xf810b0801103927_8 -> Xf810b0801103927_9 [label="24"];
    Xf810b0801103927_8 [label="Storage Live _23\lStorage Live _24\lCall\l"];
    Xf810b0801103927_9 -> Xf810b0801103927_19 [label="0"];
    Xf810b0801103927_9 -> Xf810b0801103927_20 [label="1"];
    Xf810b0801103927_9 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_9 [label="Storage Live _44\l44 <- Discriminant(24)\lSwitchInt mv(44)\l"];
    Xf810b0801103927_10 -> Xf810b0801103927_11;
    Xf810b0801103927_10 [label="Storage Dead _21\lGoto\l"];
    Xf810b0801103927_11 -> Xf810b0801103927_12;
    Xf810b0801103927_11 [label="Storage Dead _13\lStorage Live _28\l28 <- Use(cp(12))\l0 <- Adt{1} (mv(28))\lStorage Dead _28\lStorage Dead _12\lGoto\l"];
    Xf810b0801103927_12 [label="Return\l"];
    Xf810b0801103927_13 -> Xf810b0801103927_12;
    Xf810b0801103927_13 [label="Storage Dead _30\lStorage Dead _29\lStorage Dead _4\l0 <- Use(const core::option::Option<u32>)\lStorage Dead _3\lGoto\l"];
    Xf810b0801103927_14 -> Xf810b0801103927_4 [label="0"];
    Xf810b0801103927_14 -> Xf810b0801103927_3 [label="other"];
    Xf810b0801103927_14 [label="30 <- Use(mv((4 as variant 1).0))\l3 <- Adt{0} (cp(30))\lStorage Dead _30\lStorage Dead _29\lStorage Dead _4\l5 <- Use(cp((3 as variant 0).0))\l2 <- Use(cp((*5)))\lStorage Dead _3\lStorage Live _6\l6 <- Lt(cp(2), const ?_u8)\lSwitchInt mv(6)\l"];
    Xf810b0801103927_15 -> Xf810b0801103927_2 [label="34"];
    Xf810b0801103927_15 [label="Storage Live _33\l33 <- UbChecks :: bool\lIntr: Assume cp(33)\lCall\l"];
    Xf810b0801103927_16 -> Xf810b0801103927_11 [label="0"];
    Xf810b0801103927_16 -> Xf810b0801103927_6 [label="other"];
    Xf810b0801103927_16 [label="10 <- Use(mv((11 as variant 1).0))\lStorage Dead _32\lStorage Dead _11\l9 <- Use(cp((*10)))\lStorage Dead _10\lStorage Live _12\lStorage Live _35\l35 <- Shl(cp(8), const ?_i32)\lStorage Live _36\lStorage Live _37\l37 <- BitAnd(cp(9), const ?_u8)\l36 <- Cast-IntToInt mv(37)\lStorage Dead _37\l12 <- BitOr(mv(35), mv(36))\lStorage Dead _36\lStorage Dead _35\lStorage Live _13\l13 <- Ge(cp(2), const ?_u8)\lSwitchInt mv(13)\l"];
    Xf810b0801103927_17 -> Xf810b0801103927_2 [label="40"];
    Xf810b0801103927_17 [label="Storage Live _39\l39 <- UbChecks :: bool\lIntr: Assume cp(39)\lCall\l"];
    Xf810b0801103927_18 -> Xf810b0801103927_10 [label="0"];
    Xf810b0801103927_18 -> Xf810b0801103927_8 [label="other"];
    Xf810b0801103927_18 [label="15 <- Use(mv((16 as variant 1).0))\lStorage Dead _38\lStorage Dead _16\l14 <- Use(cp((*15)))\lStorage Dead _15\lStorage Live _18\lStorage Live _19\l19 <- BitAnd(cp(9), const ?_u8)\l18 <- Cast-IntToInt mv(19)\lStorage Dead _19\lStorage Live _41\l41 <- Shl(cp(18), const ?_i32)\lStorage Live _42\lStorage Live _43\l43 <- BitAnd(cp(14), const ?_u8)\l42 <- Cast-IntToInt mv(43)\lStorage Dead _43\l17 <- BitOr(mv(41), mv(42))\lStorage Dead _42\lStorage Dead _41\lStorage Dead _18\lStorage Live _20\l20 <- Shl(cp(8), const ?_i32)\l12 <- BitOr(mv(20), cp(17))\lStorage Dead _20\lStorage Live _21\l21 <- Ge(cp(2), const ?_u8)\lSwitchInt mv(21)\l"];
    Xf810b0801103927_19 -> Xf810b0801103927_2 [label="46"];
    Xf810b0801103927_19 [label="Storage Live _45\l45 <- UbChecks :: bool\lIntr: Assume cp(45)\lCall\l"];
    Xf810b0801103927_20 -> Xf810b0801103927_10;
    Xf810b0801103927_20 [label="23 <- Use(mv((24 as variant 1).0))\lStorage Dead _44\lStorage Dead _24\l22 <- Use(cp((*23)))\lStorage Dead _23\lStorage Live _25\lStorage Live _26\l26 <- BitAnd(cp(8), const ?_u32)\l25 <- Shl(mv(26), const ?_i32)\lStorage Dead _26\lStorage Live _27\lStorage Live _47\l47 <- Shl(cp(17), const ?_i32)\lStorage Live _48\lStorage Live _49\l49 <- BitAnd(cp(22), const ?_u8)\l48 <- Cast-IntToInt mv(49)\lStorage Dead _49\l27 <- BitOr(mv(47), mv(48))\lStorage Dead _48\lStorage Dead _47\l12 <- BitOr(mv(25), mv(27))\lStorage Dead _27\lStorage Dead _25\lGoto\l"];
  }
  Xf810b0801103927_0 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_4 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_6 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_8 -> X26beb3c664659c46_0 [label="mv(1)"];
  Xf810b0801103927_15 -> X33a001831920b814_0 [label=""];
  Xf810b0801103927_17 -> X33a001831920b814_0 [label=""];
  Xf810b0801103927_19 -> X33a001831920b814_0 [label=""];
  subgraph cluster_162 {
    label="core::str::validations::n\next_code_point_reverse::<\n'_, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_163 [label="LOCALS\l0 = core::option::Option<u32>\l1 = &mut core::slice::Iter<'_, u8>\l2 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &u8>\l3 = core::option::Option<&u8>\l4 = &u8\l5 = u8\l6 = bool\l7 = u8\l8 = u32\l9 = u8\l10 = u32\l11 = u8\l12 = &u8\l13 = core::option::Option<&u8>\l14 = u32\l15 = bool\l16 = u8\l17 = &u8\l18 = core::option::Option<&u8>\l19 = u32\l20 = bool\l21 = u8\l22 = &u8\l23 = core::option::Option<&u8>\l24 = u32\l25 = u32\l26 = u32\l27 = u32\l28 = u32\l29 = u32\l30 = u32\l31 = u32\l32 = isize\l33 = &u8\l34 = isize\l35 = bool\l36 = ()\l37 = u8\l38 = i8\l39 = isize\l40 = bool\l41 = ()\l42 = u8\l43 = i8\l44 = isize\l45 = bool\l46 = ()\l47 = u8\l48 = u32\l49 = u32\l50 = u8\l51 = u32\l52 = u32\l53 = u8\l54 = u32\l55 = u32\l56 = u8\l", style="filled", color=palegreen3];
    X514f89d19e2bc1b0_0 -> X514f89d19e2bc1b0_1 [label="3"];
    X514f89d19e2bc1b0_0 [label="Storage Live _2\lStorage Live _3\lCall\l"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_16 [label="0"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_17 [label="1"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_1 [label="Storage Live _32\lStorage Live _33\l32 <- Discriminant(3)\lSwitchInt mv(32)\l"];
    X514f89d19e2bc1b0_2 [label="Unreachable\l"];
    X514f89d19e2bc1b0_3 -> X514f89d19e2bc1b0_14;
    X514f89d19e2bc1b0_3 [label="Storage Dead _7\lStorage Dead _6\l5 <- Use(cp((*4)))\lStorage Live _8\l8 <- Cast-IntToInt cp(5)\l0 <- Adt{1} (mv(8))\lStorage Dead _8\lGoto\l"];
    X514f89d19e2bc1b0_4 -> X514f89d19e2bc1b0_5 [label="13"];
    X514f89d19e2bc1b0_4 [label="Storage Dead _7\lStorage Dead _6\l9 <- Use(cp((*4)))\lStorage Dead _2\lStorage Live _10\lStorage Live _12\lStorage Live _13\lCall\l"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_18 [label="0"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_19 [label="1"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_5 [label="Storage Live _34\l34 <- Discriminant(13)\lSwitchInt mv(34)\l"];
    X514f89d19e2bc1b0_6 -> X514f89d19e2bc1b0_7 [label="18"];
    X514f89d19e2bc1b0_6 [label="Storage Live _17\lStorage Live _18\lCall\l"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_20 [label="0"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_21 [label="1"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_7 [label="Storage Live _39\l39 <- Discriminant(18)\lSwitchInt mv(39)\l"];
    X514f89d19e2bc1b0_8 -> X514f89d19e2bc1b0_9 [label="23"];
    X514f89d19e2bc1b0_8 [label="Storage Live _22\lStorage Live _23\lCall\l"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_22 [label="0"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_23 [label="1"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_9 [label="Storage Live _44\l44 <- Discriminant(23)\lSwitchInt mv(44)\l"];
    X514f89d19e2bc1b0_10 -> X514f89d19e2bc1b0_11;
    X514f89d19e2bc1b0_10 [label="Goto\l"];
    X514f89d19e2bc1b0_11 -> X514f89d19e2bc1b0_13;
    X514f89d19e2bc1b0_11 [label="Storage Dead _20\lStorage Live _27\lStorage Live _28\l28 <- Use(cp(10))\lStorage Live _51\l51 <- Shl(cp(28), const ?_i32)\lStorage Live _52\lStorage Live _53\l53 <- BitAnd(cp(11), const ?_u8)\l52 <- Cast-IntToInt mv(53)\lStorage Dead _53\l27 <- BitOr(mv(51), mv(52))\lStorage Dead _52\lStorage Dead _51\lStorage Dead _28\l10 <- Use(mv(27))\lStorage Dead _27\lGoto\l"];
    X514f89d19e2bc1b0_12 -> X514f89d19e2bc1b0_13;
    X514f89d19e2bc1b0_12 [label="Goto\l"];
    X514f89d19e2bc1b0_13 -> X514f89d19e2bc1b0_15;
    X514f89d19e2bc1b0_13 [label="Storage Dead _15\lStorage Live _29\lStorage Live _30\l30 <- Use(cp(10))\lStorage Live _54\l54 <- Shl(cp(30), const ?_i32)\lStorage Live _55\lStorage Live _56\l56 <- BitAnd(cp(9), const ?_u8)\l55 <- Cast-IntToInt mv(56)\lStorage Dead _56\l29 <- BitOr(mv(54), mv(55))\lStorage Dead _55\lStorage Dead _54\lStorage Dead _30\l10 <- Use(mv(29))\lStorage Dead _29\lStorage Live _31\l31 <- Use(cp(10))\l0 <- Adt{1} (mv(31))\lStorage Dead _31\lStorage Dead _10\lGoto\l"];
    X514f89d19e2bc1b0_14 -> X514f89d19e2bc1b0_15;
    X514f89d19e2bc1b0_14 [label="Storage Dead _2\lGoto\l"];
    X514f89d19e2bc1b0_15 [label="Return\l"];
    X514f89d19e2bc1b0_16 -> X514f89d19e2bc1b0_14;
    X514f89d19e2bc1b0_16 [label="Storage Dead _33\lStorage Dead _32\lStorage Dead _3\l0 <- Use(const core::option::Option<u32>)\lGoto\l"];
    X514f89d19e2bc1b0_17 -> X514f89d19e2bc1b0_4 [label="0"];
    X514f89d19e2bc1b0_17 -> X514f89d19e2bc1b0_3 [label="other"];
    X514f89d19e2bc1b0_17 [label="33 <- Use(mv((3 as variant 1).0))\l2 <- Adt{0} (cp(33))\lStorage Dead _33\lStorage Dead _32\lStorage Dead _3\l4 <- Use(cp((2 as variant 0).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(cp((*4)))\l6 <- Lt(mv(7), const ?_u8)\lSwitchInt mv(6)\l"];
    X514f89d19e2bc1b0_18 -> X514f89d19e2bc1b0_2 [label="36"];
    X514f89d19e2bc1b0_18 [label="Storage Live _35\l35 <- UbChecks :: bool\lIntr: Assume cp(35)\lCall\l"];
    X514f89d19e2bc1b0_19 -> X514f89d19e2bc1b0_12 [label="0"];
    X514f89d19e2bc1b0_19 -> X514f89d19e2bc1b0_6 [label="other"];
    X514f89d19e2bc1b0_19 [label="12 <- Use(mv((13 as variant 1).0))\lStorage Dead _34\lStorage Dead _13\l11 <- Use(cp((*12)))\lStorage Dead _12\lStorage Live _14\lStorage Live _37\l37 <- BitAnd(cp(11), const ?_u8)\l14 <- Cast-IntToInt mv(37)\lStorage Dead _37\l10 <- Use(mv(14))\lStorage Dead _14\lStorage Live _15\lStorage Live _38\l38 <- Cast-IntToInt cp(11)\l15 <- Lt(mv(38), const ?_i8)\lStorage Dead _38\lSwitchInt mv(15)\l"];
    X514f89d19e2bc1b0_20 -> X514f89d19e2bc1b0_2 [label="41"];
    X514f89d19e2bc1b0_20 [label="Storage Live _40\l40 <- UbChecks :: bool\lIntr: Assume cp(40)\lCall\l"];
    X514f89d19e2bc1b0_21 -> X514f89d19e2bc1b0_10 [label="0"];
    X514f89d19e2bc1b0_21 -> X514f89d19e2bc1b0_8 [label="other"];
    X514f89d19e2bc1b0_21 [label="17 <- Use(mv((18 as variant 1).0))\lStorage Dead _39\lStorage Dead _18\l16 <- Use(cp((*17)))\lStorage Dead _17\lStorage Live _19\lStorage Live _42\l42 <- BitAnd(cp(16), const ?_u8)\l19 <- Cast-IntToInt mv(42)\lStorage Dead _42\l10 <- Use(mv(19))\lStorage Dead _19\lStorage Live _20\lStorage Live _43\l43 <- Cast-IntToInt cp(16)\l20 <- Lt(mv(43), const ?_i8)\lStorage Dead _43\lSwitchInt mv(20)\l"];
    X514f89d19e2bc1b0_22 -> X514f89d19e2bc1b0_2 [label="46"];
    X514f89d19e2bc1b0_22 [label="Storage Live _45\l45 <- UbChecks :: bool\lIntr: Assume cp(45)\lCall\l"];
    X514f89d19e2bc1b0_23 -> X514f89d19e2bc1b0_11;
    X514f89d19e2bc1b0_23 [label="22 <- Use(mv((23 as variant 1).0))\lStorage Dead _44\lStorage Dead _23\l21 <- Use(cp((*22)))\lStorage Dead _22\lStorage Live _24\lStorage Live _47\l47 <- BitAnd(cp(21), const ?_u8)\l24 <- Cast-IntToInt mv(47)\lStorage Dead _47\l10 <- Use(mv(24))\lStorage Dead _24\lStorage Live _25\lStorage Live _26\l26 <- Use(cp(10))\lStorage Live _48\l48 <- Shl(cp(26), const ?_i32)\lStorage Live _49\lStorage Live _50\l50 <- BitAnd(cp(16), const ?_u8)\l49 <- Cast-IntToInt mv(50)\lStorage Dead _50\l25 <- BitOr(mv(48), mv(49))\lStorage Dead _49\lStorage Dead _48\lStorage Dead _26\l10 <- Use(mv(25))\lStorage Dead _25\lGoto\l"];
  }
  X514f89d19e2bc1b0_0 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_4 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_6 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_8 -> X40f037eb7ab6abf7_0 [label="mv(1)"];
  X514f89d19e2bc1b0_18 -> X33a001831920b814_0 [label=""];
  X514f89d19e2bc1b0_20 -> X33a001831920b814_0 [label=""];
  X514f89d19e2bc1b0_22 -> X33a001831920b814_0 [label=""];
  subgraph cluster_164 {
    label="core::str::<impl \nstr>::trim_end_matches::<\nchar>";
    style="filled";
    color=lightgray;
    node_165 [label="LOCALS\l0 = &str\l1 = &str\l2 = char\l3 = usize\l4 = core::str::pattern::CharSearcher<'_>\l5 = core::option::Option<(usize, usize)>\l6 = &mut core::str::pattern::CharSearcher<'_>\l7 = isize\l8 = usize\l9 = usize\l10 = *const str\l11 = *const str\l12 = *const [u8]\l13 = bool\l14 = ()\l15 = usize\l16 = *const [u8]\l17 = *const u8\l", style="filled", color=palegreen3];
    X1440fc12115968ff_0 -> X1440fc12115968ff_1 [label="4"];
    X1440fc12115968ff_0 [label="Storage Live _3\l3 <- Use(const ?_usize)\lStorage Live _4\lCall\l"];
    X1440fc12115968ff_1 -> X1440fc12115968ff_6 [label="Cleanup"];
    X1440fc12115968ff_1 -> X1440fc12115968ff_2 [label="5"];
    X1440fc12115968ff_1 [label="Storage Live _5\lStorage Live _6\l6 <- &mut 4\lCall\l"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_3 [label="1"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_4 [label="0"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_11 [label="other"];
    X1440fc12115968ff_2 [label="Storage Dead _6\l7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    X1440fc12115968ff_3 -> X1440fc12115968ff_4;
    X1440fc12115968ff_3 [label="8 <- Use(cp((5 as variant 1).0.1))\l3 <- Use(cp(8))\lGoto\l"];
    X1440fc12115968ff_4 -> X1440fc12115968ff_10 [label="0"];
    X1440fc12115968ff_4 -> X1440fc12115968ff_8 [label="other"];
    X1440fc12115968ff_4 [label="Storage Dead _5\l9 <- Use(cp(3))\lStorage Live _10\lStorage Live _11\l11 <- &raw (*1)\lStorage Live _12\l12 <- Cast-PtrToPtr cp(11)\lStorage Live _13\l13 <- UbChecks :: bool\lSwitchInt mv(13)\l"];
    X1440fc12115968ff_5 [label="Storage Dead _4\lStorage Dead _3\lReturn\l"];
    X1440fc12115968ff_6 -> X1440fc12115968ff_7;
    X1440fc12115968ff_6 [label="Drop 4\l"];
    X1440fc12115968ff_7 [label="Resume\l"];
    X1440fc12115968ff_8 -> X1440fc12115968ff_9 [label="14"];
    X1440fc12115968ff_8 [label="Storage Live _15\l15 <- PtrMetadata(cp(1))\lCall\l"];
    X1440fc12115968ff_9 -> X1440fc12115968ff_10;
    X1440fc12115968ff_9 [label="Storage Dead _15\lGoto\l"];
    X1440fc12115968ff_10 -> X1440fc12115968ff_5;
    X1440fc12115968ff_10 [label="Storage Dead _13\lStorage Live _16\l17 <- Cast-PtrToPtr cp(11)\l16 <- *([u8]) (cp(17), cp(9))\l10 <- Cast-PtrToPtr mv(16)\lStorage Dead _16\lStorage Dead _12\lStorage Dead _11\l0 <- & (*10)\lStorage Dead _10\lDrop 4\l"];
    X1440fc12115968ff_11 [label="Unreachable\l"];
  }
  X1440fc12115968ff_0 -> Xc18a98127535c7df_0 [label="mv(2),cp(1)"];
  X1440fc12115968ff_1 -> X17cb78685fd546e8_0 [label="mv(6)"];
  X1440fc12115968ff_8 -> X371ee97037325b3b_0 [label="const ?_usize,cp(9),mv(15)"];
  subgraph cluster_166 {
    label="core::str::<impl \nstr>::as_bytes";
    style="filled";
    color=lightgray;
    node_167 [label="LOCALS\l0 = &[u8]\l1 = &str\l", style="filled", color=palegreen3];
    Xd71a94b355ef4906_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_168 {
    label="core::str::<impl \nstr>::contains::<char>";
    style="filled";
    color=lightgray;
    node_169 [label="LOCALS\l0 = bool\l1 = &str\l2 = char\l", style="filled", color=palegreen3];
    X68d161863aff8610_0 -> X68d161863aff8610_1 [label="0"];
    X68d161863aff8610_0 [label="Call\l"];
    X68d161863aff8610_1 [label="Return\l"];
  }
  X68d161863aff8610_0 -> X9be505de6f8a248b_0 [label="mv(2),mv(1)"];
  subgraph cluster_170 {
    label="core::str::traits::<impl \ncore::slice::SliceIndex<s\ntr> \nfor \ncore::ops::Range<usize>>:\n:get_unchecked::precondit\nion_check";
    style="filled";
    color=lightgray;
    node_171 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X371ee97037325b3b_0 -> X371ee97037325b3b_3 [label="0"];
    X371ee97037325b3b_0 -> X371ee97037325b3b_1 [label="other"];
    X371ee97037325b3b_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X371ee97037325b3b_1 -> X371ee97037325b3b_3 [label="0"];
    X371ee97037325b3b_1 -> X371ee97037325b3b_2 [label="other"];
    X371ee97037325b3b_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X371ee97037325b3b_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X371ee97037325b3b_3 [label="Call\l"];
  }
  X371ee97037325b3b_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_172 {
    label="core::str::traits::<impl \ncore::slice::SliceIndex<s\ntr> \nfor \ncore::ops::RangeFrom<usiz\ne>>::get";
    style="filled";
    color=lightgray;
    node_173 [label="LOCALS\l0 = core::option::Option<&str>\l1 = core::ops::RangeFrom<usize>\l2 = &str\l3 = bool\l4 = usize\l5 = &str\l6 = *const str\l7 = *const str\l8 = bool\l9 = usize\l10 = u8\l11 = usize\l12 = bool\l13 = &[u8]\l14 = i8\l15 = usize\l16 = *const [u8]\l17 = bool\l18 = ()\l19 = usize\l20 = *const [u8]\l21 = *const u8\l22 = *const u8\l", style="filled", color=palegreen3];
    Xd282c93ec4679f4f_0 -> Xd282c93ec4679f4f_4 [label="0"];
    Xd282c93ec4679f4f_0 -> Xd282c93ec4679f4f_5 [label="other"];
    Xd282c93ec4679f4f_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\lStorage Live _9\lStorage Live _11\lStorage Live _12\lStorage Live _13\lSwitchInt cp(4)\l"];
    Xd282c93ec4679f4f_1 -> Xd282c93ec4679f4f_11 [label="0"];
    Xd282c93ec4679f4f_1 -> Xd282c93ec4679f4f_10 [label="other"];
    Xd282c93ec4679f4f_1 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*2)\lStorage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(7)\l15 <- PtrMetadata(cp(2))\lStorage Live _19\lStorage Live _17\l17 <- UbChecks :: bool\lSwitchInt mv(17)\l"];
    Xd282c93ec4679f4f_2 -> Xd282c93ec4679f4f_3;
    Xd282c93ec4679f4f_2 [label="0 <- Use(const core::option::Option<&str>)\lGoto\l"];
    Xd282c93ec4679f4f_3 [label="Storage Dead _3\lReturn\l"];
    Xd282c93ec4679f4f_4 -> Xd282c93ec4679f4f_1;
    Xd282c93ec4679f4f_4 [label="Storage Dead _13\lStorage Dead _12\lStorage Dead _11\lStorage Dead _9\lGoto\l"];
    Xd282c93ec4679f4f_5 -> Xd282c93ec4679f4f_7 [label="0"];
    Xd282c93ec4679f4f_5 -> Xd282c93ec4679f4f_6 [label="other"];
    Xd282c93ec4679f4f_5 [label="Storage Live _8\l13 <- Cast-Transmute cp(2)\l9 <- PtrMetadata(cp(13))\l8 <- Ge(cp(4), cp(9))\lSwitchInt mv(8)\l"];
    Xd282c93ec4679f4f_6 -> Xd282c93ec4679f4f_9;
    Xd282c93ec4679f4f_6 [label="3 <- Eq(cp(4), cp(9))\lGoto\l"];
    Xd282c93ec4679f4f_7 -> Xd282c93ec4679f4f_8;
    Xd282c93ec4679f4f_7 [label="Storage Live _10\l11 <- Len((*13))\l12 <- Lt(cp(4), cp(11))\lAssert mv(12) == true\l"];
    Xd282c93ec4679f4f_8 -> Xd282c93ec4679f4f_9;
    Xd282c93ec4679f4f_8 [label="10 <- Use(cp((*13)[_4]))\lStorage Live _14\l14 <- Cast-IntToInt cp(10)\l3 <- Ge(mv(14), const ?_i8)\lStorage Dead _14\lStorage Dead _10\lGoto\l"];
    Xd282c93ec4679f4f_9 -> Xd282c93ec4679f4f_2 [label="0"];
    Xd282c93ec4679f4f_9 -> Xd282c93ec4679f4f_1 [label="other"];
    Xd282c93ec4679f4f_9 [label="Storage Dead _8\lStorage Dead _13\lStorage Dead _12\lStorage Dead _11\lStorage Dead _9\lSwitchInt mv(3)\l"];
    Xd282c93ec4679f4f_10 -> Xd282c93ec4679f4f_11 [label="18"];
    Xd282c93ec4679f4f_10 [label="Call\l"];
    Xd282c93ec4679f4f_11 -> Xd282c93ec4679f4f_3;
    Xd282c93ec4679f4f_11 [label="Storage Dead _17\l19 <- SubUnchecked(cp(15), cp(4))\lStorage Live _20\lStorage Live _21\lStorage Live _22\l22 <- Cast-PtrToPtr cp(7)\l21 <- Offset(cp(22), cp(4))\lStorage Dead _22\l20 <- *([u8]) (cp(21), cp(19))\lStorage Dead _21\l6 <- Cast-PtrToPtr mv(20)\lStorage Dead _20\lStorage Dead _19\lStorage Dead _16\lStorage Dead _15\lStorage Dead _7\l5 <- & (*6)\l0 <- Adt{1} (cp(5))\lStorage Dead _6\lGoto\l"];
  }
  Xd282c93ec4679f4f_10 -> X371ee97037325b3b_0 [label="cp(4),cp(15),cp(15)"];
  subgraph cluster_174 {
    label="core::str::pattern::simd_\ncontains";
    style="filled";
    color=lightgray;
    node_175 [label="LOCALS\l0 = core::option::Option<bool>\l1 = &str\l2 = &str\l3 = &[u8]\l4 = &[u8]\l5 = u8\l6 = usize\l7 = bool\l8 = usize\l9 = usize\l10 = usize\l11 = usize\l12 = core::option::Option<usize>\l13 = &mut core::ops::Range<usize>\l14 = core::ops::Range<usize>\l15 = usize\l16 = {closure@core::str::pattern::simd_contains::{closure#0}}\l17 = &u8\l18 = isize\l19 = bool\l20 = usize\l21 = usize\l22 = bool\l23 = &mut core::slice::Windows<'_, u8>\l24 = core::slice::Windows<'_, u8>\l25 = {closure@core::str::pattern::simd_contains::{closure#1}}\l26 = &&[u8]\l27 = core::simd::Simd<u8, 16>\l28 = core::simd::Simd<u8, 16>\l29 = u8\l30 = usize\l31 = usize\l32 = bool\l33 = &[u8]\l34 = {closure@core::str::pattern::simd_contains::{closure#2}}\l35 = {closure@core::str::pattern::simd_contains::{closure#3}}\l36 = &usize\l37 = &core::simd::Simd<u8, 16>\l38 = &core::simd::Simd<u8, 16>\l39 = usize\l40 = bool\l41 = bool\l42 = usize\l43 = usize\l44 = usize\l45 = bool\l46 = [u16; 4]\l47 = core::ops::Range<usize>\l48 = core::option::Option<usize>\l49 = &mut core::ops::Range<usize>\l50 = isize\l51 = usize\l52 = u16\l53 = &{closure@core::str::pattern::simd_contains::{closure#3}}\l54 = (usize,)\l55 = usize\l56 = usize\l57 = usize\l58 = bool\l59 = core::ops::Range<usize>\l60 = core::option::Option<usize>\l61 = &mut core::ops::Range<usize>\l62 = isize\l63 = usize\l64 = u16\l65 = bool\l66 = bool\l67 = &{closure@core::str::pattern::simd_contains::{closure#2}}\l68 = (usize, u16, bool)\l69 = usize\l70 = usize\l71 = usize\l72 = bool\l73 = bool\l74 = usize\l75 = usize\l76 = usize\l77 = bool\l78 = u16\l79 = &{closure@core::str::pattern::simd_contains::{closure#3}}\l80 = (usize,)\l81 = usize\l82 = bool\l83 = &{closure@core::str::pattern::simd_contains::{closure#2}}\l84 = (usize, u16, bool)\l85 = usize\l86 = bool\l87 = usize\l88 = usize\l89 = u16\l90 = &{closure@core::str::pattern::simd_contains::{closure#3}}\l91 = (usize,)\l92 = bool\l93 = &{closure@core::str::pattern::simd_contains::{closure#2}}\l94 = (usize, u16, bool)\l95 = bool\l96 = bool\l97 = core::ops::ControlFlow<usize>\l98 = {closure@core::iter::DoubleEndedIterator::rfind::check<usize, {closure@core::str::pattern::simd_contains::{closure#0}}>::{closure#0}}\l99 = isize\l100 = usize\l101 = core::num::NonZero<usize>\l102 = core::option::Option<core::num::NonZero<usize>>\l103 = isize\l104 = !\l105 = &core::ops::ControlFlow<()>\l106 = core::ops::ControlFlow<()>\l107 = {closure@core::iter::Iterator::any::check<&[u8], {closure@core::str::pattern::simd_contains::{closure#1}}>::{closure#0}}\l108 = core::simd::Simd<u8, 1>\l109 = [u8; 1]\l110 = [u8; 1]\l111 = *const [u8; 1]\l112 = core::simd::Simd<u8, 1>\l113 = [u8; 1]\l114 = [u8; 1]\l115 = *const [u8; 1]\l116 = bool\l117 = &usize\l118 = &usize\l119 = usize\l120 = usize\l121 = usize\l122 = usize\l123 = bool\l124 = &usize\l125 = &usize\l126 = usize\l127 = usize\l128 = usize\l129 = usize\l", style="filled", color=palegreen3];
    X3175254fab39b135_0 -> X3175254fab39b135_1;
    X3175254fab39b135_0 [label="3 <- Cast-Transmute cp(1)\l4 <- Cast-Transmute cp(2)\l6 <- Len((*3))\l7 <- Lt(const ?_usize, cp(6))\lAssert mv(7) == true\l"];
    X3175254fab39b135_1 -> X3175254fab39b135_2 [label="2"];
    X3175254fab39b135_1 -> X3175254fab39b135_3 [label="other"];
    X3175254fab39b135_1 [label="5 <- Use(cp((*3)[0]))\l9 <- PtrMetadata(cp(3))\l8 <- Sub(cp(9), const ?_usize)\lStorage Live _10\lSwitchInt cp(9)\l"];
    X3175254fab39b135_2 -> X3175254fab39b135_6;
    X3175254fab39b135_2 [label="10 <- Use(const ?_usize)\lGoto\l"];
    X3175254fab39b135_3 -> X3175254fab39b135_43 [label="15"];
    X3175254fab39b135_3 [label="Storage Live _12\lStorage Live _13\lStorage Live _14\lStorage Live _15\lCall\l"];
    X3175254fab39b135_4 -> X3175254fab39b135_6;
    X3175254fab39b135_4 [label="11 <- Use(cp((12 as variant 1).0))\lStorage Dead _14\lStorage Dead _12\l10 <- Use(cp(11))\lGoto\l"];
    X3175254fab39b135_5 -> X3175254fab39b135_41;
    X3175254fab39b135_5 [label="Storage Dead _14\lStorage Dead _12\l0 <- Use(const core::option::Option<bool>)\lGoto\l"];
    X3175254fab39b135_6 -> X3175254fab39b135_8 [label="0"];
    X3175254fab39b135_6 -> X3175254fab39b135_7 [label="other"];
    X3175254fab39b135_6 [label="Storage Live _19\l20 <- PtrMetadata(cp(4))\lStorage Live _21\l21 <- Add(const ?_usize, cp(8))\l19 <- Lt(cp(20), mv(21))\lSwitchInt mv(19)\l"];
    X3175254fab39b135_7 -> X3175254fab39b135_48 [label="0"];
    X3175254fab39b135_7 -> X3175254fab39b135_49 [label="1"];
    X3175254fab39b135_7 -> X3175254fab39b135_14 [label="other"];
    X3175254fab39b135_7 [label="Storage Dead _21\lStorage Live _22\lStorage Live _23\lStorage Live _24\lStorage Live _101\lStorage Live _102\l102 <- Cast-Transmute cp(9)\lStorage Live _103\l103 <- Discriminant(102)\lSwitchInt mv(103)\l"];
    X3175254fab39b135_8 -> X3175254fab39b135_52 [label="108"];
    X3175254fab39b135_8 [label="Storage Dead _21\lStorage Dead _19\lStorage Live _27\lStorage Live _108\l109 <- Array (cp(5))\lStorage Live _110\l110 <- Use(cp(109))\lStorage Live _111\l111 <- &raw 110\lCall\l"];
    X3175254fab39b135_9 -> X3175254fab39b135_54 [label="112"];
    X3175254fab39b135_9 [label="29 <- Use(cp((*3)[_30]))\lStorage Live _112\l113 <- Array (cp(29))\lStorage Live _114\l114 <- Use(cp(113))\lStorage Live _115\l115 <- &raw 114\lCall\l"];
    X3175254fab39b135_10 -> X3175254fab39b135_26 [label="0"];
    X3175254fab39b135_10 -> X3175254fab39b135_11 [label="other"];
    X3175254fab39b135_10 [label="Storage Live _41\lStorage Live _42\lStorage Live _43\lStorage Live _44\l44 <- Use(cp(39))\l43 <- Add(mv(44), cp(8))\lStorage Dead _44\l42 <- Add(mv(43), const ?_usize)\lStorage Dead _43\l41 <- Lt(mv(42), cp(20))\lSwitchInt mv(41)\l"];
    X3175254fab39b135_11 -> X3175254fab39b135_12 [label="0"];
    X3175254fab39b135_11 -> X3175254fab39b135_27 [label="other"];
    X3175254fab39b135_11 [label="Storage Dead _42\lStorage Live _45\l45 <- Use(cp(40))\lSwitchInt mv(45)\l"];
    X3175254fab39b135_12 -> X3175254fab39b135_13;
    X3175254fab39b135_12 [label="Storage Live _46\l46 <- Repeat const ?_u16\lStorage Live _47\l47 <- Use(const core::ops::Range<usize>)\lGoto\l"];
    X3175254fab39b135_13 -> X3175254fab39b135_59 [label="0"];
    X3175254fab39b135_13 -> X3175254fab39b135_57 [label="other"];
    X3175254fab39b135_13 [label="Storage Live _48\l49 <- &mut 47\lStorage Live _119\lStorage Live _116\lStorage Live _117\l117 <- & 47.0\lStorage Live _118\l118 <- & 47.1\lStorage Live _121\l121 <- Use(cp(47.0))\lStorage Live _122\l122 <- Use(cp(47.1))\l116 <- Lt(mv(121), mv(122))\lStorage Dead _122\lStorage Dead _121\lSwitchInt mv(116)\l"];
    X3175254fab39b135_14 [label="Unreachable\l"];
    X3175254fab39b135_15 -> X3175254fab39b135_17 [label="52"];
    X3175254fab39b135_15 [label="51 <- Use(cp((48 as variant 1).0))\lStorage Live _52\lStorage Live _53\l53 <- & 35\lStorage Live _54\lStorage Live _55\lStorage Live _56\l56 <- Use(cp(39))\lStorage Live _57\l57 <- Mul(cp(51), const ?_usize)\l55 <- Add(mv(56), mv(57))\lStorage Dead _57\lStorage Dead _56\l54 <- Tuple (mv(55))\lCall\l"];
    X3175254fab39b135_16 -> X3175254fab39b135_19;
    X3175254fab39b135_16 [label="Storage Dead _48\lStorage Dead _47\lStorage Live _59\l59 <- Use(const core::ops::Range<usize>)\lGoto\l"];
    X3175254fab39b135_17 -> X3175254fab39b135_18;
    X3175254fab39b135_17 [label="Storage Dead _55\lStorage Dead _54\lStorage Dead _53\l58 <- Lt(cp(51), const ?_usize)\lAssert mv(58) == true\l"];
    X3175254fab39b135_18 -> X3175254fab39b135_13;
    X3175254fab39b135_18 [label="46[_51] <- Use(mv(52))\lStorage Dead _52\lStorage Dead _48\lGoto\l"];
    X3175254fab39b135_19 -> X3175254fab39b135_63 [label="0"];
    X3175254fab39b135_19 -> X3175254fab39b135_61 [label="other"];
    X3175254fab39b135_19 [label="Storage Live _60\l61 <- &mut 59\lStorage Live _126\lStorage Live _123\lStorage Live _124\l124 <- & 59.0\lStorage Live _125\l125 <- & 59.1\lStorage Live _128\l128 <- Use(cp(59.0))\lStorage Live _129\l129 <- Use(cp(59.1))\l123 <- Lt(mv(128), mv(129))\lStorage Dead _129\lStorage Dead _128\lSwitchInt mv(123)\l"];
    X3175254fab39b135_20 -> X3175254fab39b135_22;
    X3175254fab39b135_20 [label="63 <- Use(cp((60 as variant 1).0))\l65 <- Lt(cp(63), const ?_usize)\lAssert mv(65) == true\l"];
    X3175254fab39b135_21 -> X3175254fab39b135_10;
    X3175254fab39b135_21 [label="Storage Dead _60\lStorage Dead _59\l39 <- Add(cp(39), const ?_usize)\lStorage Dead _46\lStorage Dead _45\lStorage Dead _41\lGoto\l"];
    X3175254fab39b135_22 -> X3175254fab39b135_25 [label="0"];
    X3175254fab39b135_22 -> X3175254fab39b135_23 [label="other"];
    X3175254fab39b135_22 [label="64 <- Use(cp(46[_63]))\lSwitchInt mv(64)\l"];
    X3175254fab39b135_23 -> X3175254fab39b135_24 [label="66"];
    X3175254fab39b135_23 [label="Storage Live _66\lStorage Live _67\l67 <- & 34\lStorage Live _68\lStorage Live _69\lStorage Live _70\l70 <- Use(cp(39))\lStorage Live _71\l71 <- Mul(cp(63), const ?_usize)\l69 <- Add(mv(70), mv(71))\lStorage Dead _71\lStorage Dead _70\lStorage Live _72\l72 <- Use(cp(40))\l68 <- Tuple (mv(69), cp(64), mv(72))\lCall\l"];
    X3175254fab39b135_24 -> X3175254fab39b135_25;
    X3175254fab39b135_24 [label="Storage Dead _72\lStorage Dead _69\lStorage Dead _68\lStorage Dead _67\l40 <- BitOr(cp(40), mv(66))\lStorage Dead _66\lGoto\l"];
    X3175254fab39b135_25 -> X3175254fab39b135_19;
    X3175254fab39b135_25 [label="Storage Dead _60\lGoto\l"];
    X3175254fab39b135_26 -> X3175254fab39b135_27;
    X3175254fab39b135_26 [label="Storage Dead _42\lGoto\l"];
    X3175254fab39b135_27 -> X3175254fab39b135_28;
    X3175254fab39b135_27 [label="Storage Dead _45\lStorage Dead _41\lGoto\l"];
    X3175254fab39b135_28 -> X3175254fab39b135_35 [label="0"];
    X3175254fab39b135_28 -> X3175254fab39b135_29 [label="other"];
    X3175254fab39b135_28 [label="Storage Live _73\lStorage Live _74\lStorage Live _75\lStorage Live _76\l76 <- Use(cp(39))\l75 <- Add(mv(76), cp(8))\lStorage Dead _76\l74 <- Add(mv(75), const ?_usize)\lStorage Dead _75\l73 <- Lt(mv(74), cp(20))\lSwitchInt mv(73)\l"];
    X3175254fab39b135_29 -> X3175254fab39b135_30 [label="0"];
    X3175254fab39b135_29 -> X3175254fab39b135_36 [label="other"];
    X3175254fab39b135_29 [label="Storage Dead _74\lStorage Live _77\l77 <- Use(cp(40))\lSwitchInt mv(77)\l"];
    X3175254fab39b135_30 -> X3175254fab39b135_31 [label="78"];
    X3175254fab39b135_30 [label="Storage Live _79\l79 <- & 35\lStorage Live _80\lStorage Live _81\l81 <- Use(cp(39))\l80 <- Tuple (mv(81))\lCall\l"];
    X3175254fab39b135_31 -> X3175254fab39b135_34 [label="0"];
    X3175254fab39b135_31 -> X3175254fab39b135_32 [label="other"];
    X3175254fab39b135_31 [label="Storage Dead _81\lStorage Dead _80\lStorage Dead _79\lSwitchInt mv(78)\l"];
    X3175254fab39b135_32 -> X3175254fab39b135_33 [label="82"];
    X3175254fab39b135_32 [label="Storage Live _82\lStorage Live _83\l83 <- & 34\lStorage Live _84\lStorage Live _85\l85 <- Use(cp(39))\lStorage Live _86\l86 <- Use(cp(40))\l84 <- Tuple (mv(85), cp(78), mv(86))\lCall\l"];
    X3175254fab39b135_33 -> X3175254fab39b135_34;
    X3175254fab39b135_33 [label="Storage Dead _86\lStorage Dead _85\lStorage Dead _84\lStorage Dead _83\l40 <- BitOr(cp(40), mv(82))\lStorage Dead _82\lGoto\l"];
    X3175254fab39b135_34 -> X3175254fab39b135_28;
    X3175254fab39b135_34 [label="39 <- Add(cp(39), const ?_usize)\lStorage Dead _77\lStorage Dead _73\lGoto\l"];
    X3175254fab39b135_35 -> X3175254fab39b135_36;
    X3175254fab39b135_35 [label="Storage Dead _74\lGoto\l"];
    X3175254fab39b135_36 -> X3175254fab39b135_37 [label="89"];
    X3175254fab39b135_36 [label="Storage Dead _77\lStorage Dead _73\lStorage Live _88\l88 <- Sub(cp(20), cp(8))\l87 <- Sub(mv(88), const ?_usize)\lStorage Dead _88\lStorage Live _90\l90 <- & 35\lStorage Live _91\l91 <- Tuple (cp(87))\lCall\l"];
    X3175254fab39b135_37 -> X3175254fab39b135_40 [label="0"];
    X3175254fab39b135_37 -> X3175254fab39b135_38 [label="other"];
    X3175254fab39b135_37 [label="Storage Dead _91\lStorage Dead _90\lSwitchInt mv(89)\l"];
    X3175254fab39b135_38 -> X3175254fab39b135_39 [label="92"];
    X3175254fab39b135_38 [label="Storage Live _92\lStorage Live _93\l93 <- & 34\lStorage Live _94\lStorage Live _95\l95 <- Use(cp(40))\l94 <- Tuple (cp(87), cp(89), mv(95))\lCall\l"];
    X3175254fab39b135_39 -> X3175254fab39b135_40;
    X3175254fab39b135_39 [label="Storage Dead _95\lStorage Dead _94\lStorage Dead _93\l40 <- BitOr(cp(40), mv(92))\lStorage Dead _92\lGoto\l"];
    X3175254fab39b135_40 -> X3175254fab39b135_42;
    X3175254fab39b135_40 [label="Storage Live _96\l96 <- Use(cp(40))\l0 <- Adt{1} (mv(96))\lStorage Dead _96\lStorage Dead _40\lStorage Dead _39\lStorage Dead _35\lStorage Dead _34\lStorage Dead _28\lStorage Dead _27\lStorage Dead _10\lGoto\l"];
    X3175254fab39b135_41 -> X3175254fab39b135_42;
    X3175254fab39b135_41 [label="Storage Dead _10\lGoto\l"];
    X3175254fab39b135_42 [label="Return\l"];
    X3175254fab39b135_43 -> X3175254fab39b135_44 [label="97"];
    X3175254fab39b135_43 [label="14 <- Adt{0} (mv(15), cp(9))\l13 <- &mut 14\lStorage Dead _15\lStorage Live _16\lStorage Live _17\l17 <- & 5\l16 <- Closure (cp(3), mv(17))\lStorage Dead _17\lStorage Live _97\lStorage Live _98\l98 <- Closure (cp(16))\lCall\l"];
    X3175254fab39b135_44 -> X3175254fab39b135_46 [label="0"];
    X3175254fab39b135_44 -> X3175254fab39b135_45 [label="1"];
    X3175254fab39b135_44 -> X3175254fab39b135_14 [label="other"];
    X3175254fab39b135_44 [label="Storage Dead _98\lStorage Live _100\l99 <- Discriminant(97)\lSwitchInt cp(99)\l"];
    X3175254fab39b135_45 -> X3175254fab39b135_47;
    X3175254fab39b135_45 [label="100 <- Use(mv((97 as variant 1).0))\l12 <- Adt{1} (cp(100))\lGoto\l"];
    X3175254fab39b135_46 -> X3175254fab39b135_47;
    X3175254fab39b135_46 [label="12 <- Use(const core::option::Option<usize>)\lGoto\l"];
    X3175254fab39b135_47 -> X3175254fab39b135_4 [label="1"];
    X3175254fab39b135_47 -> X3175254fab39b135_5 [label="0"];
    X3175254fab39b135_47 -> X3175254fab39b135_14 [label="other"];
    X3175254fab39b135_47 [label="Storage Dead _100\lStorage Dead _97\lStorage Dead _16\lStorage Dead _13\l18 <- Discriminant(12)\lSwitchInt mv(18)\l"];
    X3175254fab39b135_48 [label="Call\l"];
    X3175254fab39b135_49 -> X3175254fab39b135_50 [label="106"];
    X3175254fab39b135_49 [label="101 <- Use(mv((102 as variant 1).0))\lStorage Dead _103\lStorage Dead _102\l24 <- Adt{0} (cp(4), cp(101))\lStorage Dead _101\l23 <- &mut 24\lStorage Live _25\lStorage Live _26\l26 <- & 3\l25 <- Closure (mv(26))\lStorage Dead _26\lStorage Live _105\lStorage Live _106\lStorage Live _107\l107 <- Closure (cp(25))\lCall\l"];
    X3175254fab39b135_50 -> X3175254fab39b135_51 [label="22"];
    X3175254fab39b135_50 [label="105 <- & 106\lStorage Dead _107\lCall\l"];
    X3175254fab39b135_51 -> X3175254fab39b135_41;
    X3175254fab39b135_51 [label="Storage Dead _105\lStorage Dead _106\lStorage Dead _25\lStorage Dead _23\l0 <- Adt{1} (mv(22))\lStorage Dead _22\lStorage Dead _24\lStorage Dead _19\lGoto\l"];
    X3175254fab39b135_52 -> X3175254fab39b135_53 [label="27"];
    X3175254fab39b135_52 [label="Storage Dead _111\lStorage Dead _110\lCall\l"];
    X3175254fab39b135_53 -> X3175254fab39b135_9;
    X3175254fab39b135_53 [label="Storage Dead _108\lStorage Live _28\lStorage Live _29\lStorage Live _30\l30 <- Use(cp(10))\l31 <- Len((*3))\l32 <- Lt(cp(30), cp(31))\lAssert mv(32) == true\l"];
    X3175254fab39b135_54 -> X3175254fab39b135_55 [label="28"];
    X3175254fab39b135_54 [label="Storage Dead _115\lStorage Dead _114\lCall\l"];
    X3175254fab39b135_55 -> X3175254fab39b135_56 [label="33"];
    X3175254fab39b135_55 [label="Storage Dead _112\lStorage Dead _29\lStorage Dead _30\lCall\l"];
    X3175254fab39b135_56 -> X3175254fab39b135_10;
    X3175254fab39b135_56 [label="Storage Live _34\l34 <- Closure (cp(4), cp(33))\lStorage Live _35\lStorage Live _36\l36 <- & 10\lStorage Live _37\l37 <- & 27\lStorage Live _38\l38 <- & 28\l35 <- Closure (cp(4), mv(36), mv(37), mv(38))\lStorage Dead _38\lStorage Dead _37\lStorage Dead _36\lStorage Live _39\l39 <- Use(const ?_usize)\lStorage Live _40\l40 <- Use(const bool)\lGoto\l"];
    X3175254fab39b135_57 -> X3175254fab39b135_58 [label="120"];
    X3175254fab39b135_57 [label="Storage Dead _118\lStorage Dead _117\l119 <- Use(cp(47.0))\lStorage Live _120\lCall\l"];
    X3175254fab39b135_58 -> X3175254fab39b135_60;
    X3175254fab39b135_58 [label="47.0 <- Use(mv(120))\lStorage Dead _120\l48 <- Adt{1} (cp(119))\lGoto\l"];
    X3175254fab39b135_59 -> X3175254fab39b135_60;
    X3175254fab39b135_59 [label="Storage Dead _118\lStorage Dead _117\l48 <- Use(const core::option::Option<usize>)\lGoto\l"];
    X3175254fab39b135_60 -> X3175254fab39b135_16 [label="0"];
    X3175254fab39b135_60 -> X3175254fab39b135_15 [label="1"];
    X3175254fab39b135_60 -> X3175254fab39b135_14 [label="other"];
    X3175254fab39b135_60 [label="Storage Dead _116\lStorage Dead _119\l50 <- Discriminant(48)\lSwitchInt mv(50)\l"];
    X3175254fab39b135_61 -> X3175254fab39b135_62 [label="127"];
    X3175254fab39b135_61 [label="Storage Dead _125\lStorage Dead _124\l126 <- Use(cp(59.0))\lStorage Live _127\lCall\l"];
    X3175254fab39b135_62 -> X3175254fab39b135_64;
    X3175254fab39b135_62 [label="59.0 <- Use(mv(127))\lStorage Dead _127\l60 <- Adt{1} (cp(126))\lGoto\l"];
    X3175254fab39b135_63 -> X3175254fab39b135_64;
    X3175254fab39b135_63 [label="Storage Dead _125\lStorage Dead _124\l60 <- Use(const core::option::Option<usize>)\lGoto\l"];
    X3175254fab39b135_64 -> X3175254fab39b135_21 [label="0"];
    X3175254fab39b135_64 -> X3175254fab39b135_20 [label="1"];
    X3175254fab39b135_64 -> X3175254fab39b135_14 [label="other"];
    X3175254fab39b135_64 [label="Storage Dead _123\lStorage Dead _126\l62 <- Discriminant(60)\lSwitchInt mv(62)\l"];
  }
  X3175254fab39b135_3 -> X737432dcfae07d65_0 [label="cp(9),const ?_usize"];
  X3175254fab39b135_8 -> Xccbfcc4d2ef6308f_0 [label="mv(111)"];
  X3175254fab39b135_9 -> Xccbfcc4d2ef6308f_0 [label="mv(115)"];
  X3175254fab39b135_15 -> X30049a959a33ed0d_0 [label="mv(53),mv(54)"];
  X3175254fab39b135_23 -> X28e43c5f549ad72c_0 [label="mv(67),mv(68)"];
  X3175254fab39b135_30 -> X30049a959a33ed0d_0 [label="mv(79),mv(80)"];
  X3175254fab39b135_32 -> X28e43c5f549ad72c_0 [label="mv(83),mv(84)"];
  X3175254fab39b135_36 -> X30049a959a33ed0d_0 [label="mv(90),mv(91)"];
  X3175254fab39b135_38 -> X28e43c5f549ad72c_0 [label="mv(93),mv(94)"];
  X3175254fab39b135_43 -> X10dd4e431911e715_0 [label="mv(13),const (),mv(98)"];
  X3175254fab39b135_48 -> X5a2a5b478e9b33b_0 [label="const &str"];
  X3175254fab39b135_49 -> X226a0853acd2672b_0 [label="mv(23),const (),mv(107)"];
  X3175254fab39b135_50 -> X43e1d3a9fc1a8e12_0 [label="mv(105),const &core::ops::ControlFlow<()>"];
  X3175254fab39b135_52 -> X1336184f2954778f_0 [label="cp(108),mv(108),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  X3175254fab39b135_54 -> X1336184f2954778f_0 [label="cp(112),mv(112),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  X3175254fab39b135_55 -> Xbf13fd323824b7e4_0 [label="const core::ops::RangeFrom<usize>,cp(3)"];
  X3175254fab39b135_57 -> Xdaf48124b17ea92_0 [label="cp(119),const ?_usize"];
  X3175254fab39b135_61 -> Xdaf48124b17ea92_0 [label="cp(126),const ?_usize"];
  subgraph cluster_176 {
    label="core::str::pattern::simd_\ncontains::{closure#2}";
    style="filled";
    color=lightgray;
    node_177 [label="LOCALS\l0 = bool\l1 = &{closure@core::str::pattern::simd_contains::{closure#2}}\l2 = usize\l3 = u16\l4 = bool\l5 = u16\l6 = u16\l7 = u32\l8 = u16\l9 = usize\l10 = usize\l11 = usize\l12 = &[u8]\l13 = usize\l14 = bool\l15 = u16\l16 = u16\l17 = &[u8]\l18 = &[u8]\l19 = &[u8]\l20 = *const [u8]\l21 = *const [u8]\l22 = usize\l23 = bool\l24 = ()\l25 = usize\l26 = *const u8\l27 = *const u8\l28 = *const [u8]\l29 = ()\l30 = usize\l31 = *const u8\l32 = *const u8\l33 = usize\l34 = usize\l", style="filled", color=palegreen3];
    X28e43c5f549ad72c_0 -> X28e43c5f549ad72c_2 [label="0"];
    X28e43c5f549ad72c_0 -> X28e43c5f549ad72c_1 [label="other"];
    X28e43c5f549ad72c_0 [label="SwitchInt cp(4)\l"];
    X28e43c5f549ad72c_1 -> X28e43c5f549ad72c_9;
    X28e43c5f549ad72c_1 [label="0 <- Use(const bool)\lGoto\l"];
    X28e43c5f549ad72c_2 -> X28e43c5f549ad72c_3;
    X28e43c5f549ad72c_2 [label="Storage Live _5\l5 <- Use(cp(3))\lGoto\l"];
    X28e43c5f549ad72c_3 -> X28e43c5f549ad72c_8 [label="0"];
    X28e43c5f549ad72c_3 -> X28e43c5f549ad72c_4 [label="other"];
    X28e43c5f549ad72c_3 [label="Storage Live _6\l6 <- Use(cp(5))\lSwitchInt mv(6)\l"];
    X28e43c5f549ad72c_4 -> X28e43c5f549ad72c_10 [label="7"];
    X28e43c5f549ad72c_4 [label="Storage Dead _6\lStorage Live _8\l8 <- Use(cp(5))\lCall\l"];
    X28e43c5f549ad72c_5 -> X28e43c5f549ad72c_7 [label="0"];
    X28e43c5f549ad72c_5 -> X28e43c5f549ad72c_6 [label="other"];
    X28e43c5f549ad72c_5 [label="SwitchInt mv(14)\l"];
    X28e43c5f549ad72c_6 -> X28e43c5f549ad72c_9;
    X28e43c5f549ad72c_6 [label="0 <- Use(const bool)\lStorage Dead _14\lStorage Dead _5\lGoto\l"];
    X28e43c5f549ad72c_7 -> X28e43c5f549ad72c_3;
    X28e43c5f549ad72c_7 [label="Storage Dead _14\lStorage Live _15\lStorage Live _16\l16 <- Shl(const ?_u16, cp(7))\l15 <- Not(mv(16))\lStorage Dead _16\l5 <- BitAnd(cp(5), mv(15))\lStorage Dead _15\lGoto\l"];
    X28e43c5f549ad72c_8 -> X28e43c5f549ad72c_9;
    X28e43c5f549ad72c_8 [label="Storage Dead _6\l0 <- Use(const bool)\lStorage Dead _5\lGoto\l"];
    X28e43c5f549ad72c_9 [label="Return\l"];
    X28e43c5f549ad72c_10 -> X28e43c5f549ad72c_12 [label="0"];
    X28e43c5f549ad72c_10 -> X28e43c5f549ad72c_11 [label="other"];
    X28e43c5f549ad72c_10 [label="Storage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Cast-IntToInt cp(7)\l10 <- Add(cp(2), mv(11))\lStorage Dead _11\l9 <- Add(mv(10), const ?_usize)\lStorage Dead _10\l17 <- Use(cp((*1).0))\lStorage Live _21\l21 <- &raw (*17)\lStorage Live _22\l22 <- PtrMetadata(cp(17))\l23 <- UbChecks :: bool\lSwitchInt cp(23)\l"];
    X28e43c5f549ad72c_11 -> X28e43c5f549ad72c_15 [label="24"];
    X28e43c5f549ad72c_11 [label="Call\l"];
    X28e43c5f549ad72c_12 -> X28e43c5f549ad72c_14 [label="0"];
    X28e43c5f549ad72c_12 -> X28e43c5f549ad72c_13 [label="other"];
    X28e43c5f549ad72c_12 [label="25 <- SubUnchecked(cp(22), cp(9))\lStorage Live _27\l27 <- Cast-PtrToPtr cp(21)\l26 <- Offset(cp(27), cp(9))\lStorage Dead _27\l20 <- *([u8]) (cp(26), cp(25))\lStorage Dead _22\lStorage Dead _21\lStorage Live _33\l18 <- Use(cp((*1).1))\l13 <- PtrMetadata(cp(18))\l33 <- Use(cp(13))\lStorage Live _28\lStorage Live _34\l34 <- Use(cp(13))\lStorage Live _30\lSwitchInt cp(23)\l"];
    X28e43c5f549ad72c_13 -> X28e43c5f549ad72c_14 [label="29"];
    X28e43c5f549ad72c_13 [label="Call\l"];
    X28e43c5f549ad72c_14 -> X28e43c5f549ad72c_5 [label="14"];
    X28e43c5f549ad72c_14 [label="30 <- Use(cp(13))\lStorage Live _31\lStorage Live _32\l32 <- Use(cp(26))\l31 <- Use(cp(26))\lStorage Dead _32\l28 <- *([u8]) (cp(26), cp(13))\lStorage Dead _31\lStorage Dead _30\lStorage Dead _34\l12 <- & (*28)\lStorage Dead _28\lStorage Dead _33\lStorage Live _14\l19 <- Use(cp((*1).1))\lCall\l"];
    X28e43c5f549ad72c_15 -> X28e43c5f549ad72c_13;
    X28e43c5f549ad72c_15 [label="25 <- SubUnchecked(cp(22), cp(9))\lStorage Live _27\l27 <- Cast-PtrToPtr cp(21)\l26 <- Offset(cp(27), cp(9))\lStorage Dead _27\l20 <- *([u8]) (cp(26), cp(25))\lStorage Dead _22\lStorage Dead _21\lStorage Live _33\l18 <- Use(cp((*1).1))\l13 <- PtrMetadata(cp(18))\l33 <- Use(cp(13))\lStorage Live _28\lStorage Live _34\l34 <- Use(cp(13))\lStorage Live _30\lGoto\l"];
  }
  X28e43c5f549ad72c_4 -> Xde5364326654de35_0 [label="mv(8)"];
  X28e43c5f549ad72c_11 -> X37e6c077af20a501_0 [label="cp(9),cp(22),cp(22)"];
  X28e43c5f549ad72c_13 -> X37e6c077af20a501_0 [label="const ?_usize,cp(13),mv(25)"];
  X28e43c5f549ad72c_14 -> Xc837b11e39e1a994_0 [label="mv(12),mv(19)"];
  subgraph cluster_178 {
    label="core::str::pattern::simd_\ncontains::{closure#0}";
    style="filled";
    color=lightgray;
    node_179 [label="LOCALS\l0 = bool\l1 = &mut {closure@core::str::pattern::simd_contains::{closure#0}}\l2 = &usize\l3 = usize\l4 = u8\l5 = usize\l6 = bool\l7 = u8\l8 = &[u8]\l9 = &[u8]\l10 = &u8\l", style="filled", color=palegreen3];
    Xcfe09b4e9e0e61ca_0 -> Xcfe09b4e9e0e61ca_1;
    Xcfe09b4e9e0e61ca_0 [label="3 <- Use(cp((*2)))\lStorage Live _4\l8 <- Use(cp((*1).0))\l5 <- Len((*8))\l6 <- Lt(cp(3), cp(5))\lAssert mv(6) == true\l"];
    Xcfe09b4e9e0e61ca_1 [label="9 <- Use(cp((*1).0))\l4 <- Use(cp((*9)[_3]))\lStorage Live _7\l10 <- Use(cp((*1).1))\l7 <- Use(cp((*10)))\l0 <- Ne(mv(4), mv(7))\lStorage Dead _7\lStorage Dead _4\lReturn\l"];
  }
  subgraph cluster_180 {
    label="core::str::pattern::simd_\ncontains::{closure#1}";
    style="filled";
    color=lightgray;
    node_181 [label="LOCALS\l0 = bool\l1 = &mut {closure@core::str::pattern::simd_contains::{closure#1}}\l2 = &[u8]\l3 = &&[u8]\l4 = &&[u8]\l5 = &[u8]\l", style="filled", color=palegreen3];
    X2e4cd4eabe4b6e2f_0 -> X2e4cd4eabe4b6e2f_1 [label="0"];
    X2e4cd4eabe4b6e2f_0 [label="Storage Live _3\l3 <- & 2\l4 <- Use(cp((*1).0))\lStorage Live _5\l5 <- Use(cp((*4)))\lCall\l"];
    X2e4cd4eabe4b6e2f_1 [label="Storage Dead _5\lStorage Dead _3\lReturn\l"];
  }
  X2e4cd4eabe4b6e2f_0 -> X9d8f98d3704e8fd6_0 [label="cp(2),mv(5)"];
  subgraph cluster_182 {
    label="core::str::pattern::simd_\ncontains::{closure#3}";
    style="filled";
    color=lightgray;
    node_183 [label="LOCALS\l0 = u16\l1 = &{closure@core::str::pattern::simd_contains::{closure#3}}\l2 = usize\l3 = core::simd::Simd<u8, 16>\l4 = *const core::simd::Simd<u8, 16>\l5 = *const u8\l6 = *const u8\l7 = core::simd::Simd<u8, 16>\l8 = *const core::simd::Simd<u8, 16>\l9 = *const u8\l10 = *const u8\l11 = *const u8\l12 = usize\l13 = core::simd::Simd<u8, 16>\l14 = core::simd::Simd<u8, 16>\l15 = u64\l16 = &[u8]\l17 = &[u8]\l18 = &usize\l19 = &core::simd::Simd<u8, 16>\l20 = &core::simd::Simd<u8, 16>\l21 = *const [u8]\l22 = *const [u8]\l23 = core::simd::Simd<i8, 16>\l24 = bool\l25 = core::simd::Simd<i8, 16>\l26 = bool\l27 = core::core_simd::masks::mask_impl::Mask<i8, 16>\l28 = core::simd::Simd<i8, 16>\l", style="filled", color=palegreen3];
    X30049a959a33ed0d_0 -> X30049a959a33ed0d_1 [label="3"];
    X30049a959a33ed0d_0 [label="Storage Live _4\lStorage Live _5\lStorage Live _6\l16 <- Use(cp((*1).0))\lStorage Live _21\l21 <- &raw (*16)\l6 <- Cast-PtrToPtr mv(21)\lStorage Dead _21\l5 <- Offset(cp(6), cp(2))\lStorage Dead _6\l4 <- Cast-PtrToPtr cp(5)\lStorage Dead _5\lCall\l"];
    X30049a959a33ed0d_1 -> X30049a959a33ed0d_2 [label="7"];
    X30049a959a33ed0d_1 [label="Storage Dead _4\lStorage Live _8\lStorage Live _9\lStorage Live _10\lStorage Live _11\l17 <- Use(cp((*1).0))\lStorage Live _22\l22 <- &raw (*17)\l11 <- Cast-PtrToPtr mv(22)\lStorage Dead _22\l10 <- Offset(cp(11), cp(2))\lStorage Dead _11\lStorage Live _12\l18 <- Use(cp((*1).1))\l12 <- Use(cp((*18)))\l9 <- Offset(cp(10), cp(12))\lStorage Dead _12\lStorage Dead _10\l8 <- Cast-PtrToPtr cp(9)\lStorage Dead _9\lCall\l"];
    X30049a959a33ed0d_2 -> X30049a959a33ed0d_3 [label="23"];
    X30049a959a33ed0d_2 [label="Storage Dead _8\lStorage Live _13\l19 <- Use(cp((*1).2))\l13 <- Use(cp((*19)))\lCall\l"];
    X30049a959a33ed0d_3 -> X30049a959a33ed0d_4 [label="24"];
    X30049a959a33ed0d_3 [label="Storage Live _24\lCall\l"];
    X30049a959a33ed0d_4 -> X30049a959a33ed0d_5 [label="25"];
    X30049a959a33ed0d_4 [label="Intr: Assume mv(24)\lStorage Dead _24\lStorage Dead _13\lStorage Live _14\l20 <- Use(cp((*1).3))\l14 <- Use(cp((*20)))\lCall\l"];
    X30049a959a33ed0d_5 -> X30049a959a33ed0d_6 [label="26"];
    X30049a959a33ed0d_5 [label="Storage Live _26\lCall\l"];
    X30049a959a33ed0d_6 -> X30049a959a33ed0d_7 [label="28"];
    X30049a959a33ed0d_6 [label="Intr: Assume mv(26)\lStorage Dead _26\lStorage Dead _14\lStorage Live _28\lCall\l"];
    X30049a959a33ed0d_7 -> X30049a959a33ed0d_8 [label="15"];
    X30049a959a33ed0d_7 [label="27 <- Adt{0} (mv(28))\lStorage Dead _28\lStorage Live _15\lCall\l"];
    X30049a959a33ed0d_8 [label="0 <- Cast-IntToInt mv(15)\lStorage Dead _15\lReturn\l"];
  }
  X30049a959a33ed0d_0 -> X86c67d283f5fb95_0 [label="mv(4)"];
  X30049a959a33ed0d_1 -> X86c67d283f5fb95_0 [label="mv(8)"];
  X30049a959a33ed0d_2 -> X31a239ce3d11fff8_0 [label="mv(3),mv(13)"];
  X30049a959a33ed0d_3 -> X510c6976ab5e1f59_0 [label="cp(23)"];
  X30049a959a33ed0d_4 -> X31a239ce3d11fff8_0 [label="mv(7),mv(14)"];
  X30049a959a33ed0d_5 -> X510c6976ab5e1f59_0 [label="cp(25)"];
  X30049a959a33ed0d_6 -> X8c408aef692d50b8_0 [label="mv(23),mv(25)"];
  X30049a959a33ed0d_7 -> Xcb009c8e778b19ca_0 [label="mv(27)"];
  subgraph cluster_184 {
    label="core::str::pattern::TwoWa\nySearcher::next::<core::s\ntr::pattern::MatchOnly>";
    style="filled";
    color=lightgray;
    node_185 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::TwoWaySearcher\l2 = &[u8]\l3 = &[u8]\l4 = bool\l5 = usize\l6 = usize\l7 = usize\l8 = core::option::Option<&u8>\l9 = usize\l10 = usize\l11 = u8\l12 = usize\l13 = bool\l14 = bool\l15 = usize\l16 = usize\l17 = usize\l18 = usize\l19 = usize\l20 = core::ops::Range<usize>\l21 = usize\l22 = core::ops::Range<usize>\l23 = core::option::Option<usize>\l24 = &mut core::ops::Range<usize>\l25 = usize\l26 = bool\l27 = u8\l28 = usize\l29 = bool\l30 = u8\l31 = usize\l32 = usize\l33 = usize\l34 = bool\l35 = usize\l36 = usize\l37 = usize\l38 = usize\l39 = core::iter::Rev<core::ops::Range<usize>>\l40 = core::ops::Range<usize>\l41 = usize\l42 = usize\l43 = core::iter::Rev<core::ops::Range<usize>>\l44 = core::option::Option<usize>\l45 = &mut core::iter::Rev<core::ops::Range<usize>>\l46 = usize\l47 = bool\l48 = u8\l49 = usize\l50 = bool\l51 = u8\l52 = usize\l53 = usize\l54 = usize\l55 = bool\l56 = usize\l57 = usize\l58 = usize\l59 = usize\l60 = &u8\l61 = bool\l62 = usize\l63 = &u8\l64 = *const u8\l65 = *const [u8]\l66 = *const u8\l67 = u64\l68 = u64\l69 = u64\l70 = usize\l71 = u8\l72 = bool\l73 = &usize\l74 = &usize\l75 = usize\l76 = usize\l77 = usize\l78 = usize\l79 = &mut core::ops::Range<usize>\l80 = bool\l81 = &usize\l82 = &usize\l83 = usize\l84 = usize\l85 = usize\l86 = usize\l87 = usize\l", style="filled", color=palegreen3];
    X108a068c4d285151_0 -> X108a068c4d285151_1;
    X108a068c4d285151_0 [label="5 <- Use(cp((*1).4))\l7 <- PtrMetadata(cp(3))\l6 <- Sub(cp(7), const ?_usize)\lGoto\l"];
    X108a068c4d285151_1 -> X108a068c4d285151_40 [label="0"];
    X108a068c4d285151_1 -> X108a068c4d285151_39 [label="other"];
    X108a068c4d285151_1 [label="Storage Live _8\lStorage Live _9\lStorage Live _10\l10 <- Use(cp((*1).4))\l9 <- Add(mv(10), cp(6))\lStorage Dead _10\lStorage Live _63\lStorage Live _61\l62 <- PtrMetadata(cp(2))\l61 <- Lt(cp(9), cp(62))\lSwitchInt mv(61)\l"];
    X108a068c4d285151_2 -> X108a068c4d285151_38;
    X108a068c4d285151_2 [label="Storage Dead _12\lStorage Dead _8\lGoto\l"];
    X108a068c4d285151_3 -> X108a068c4d285151_8 [label="0"];
    X108a068c4d285151_3 -> X108a068c4d285151_4 [label="other"];
    X108a068c4d285151_3 [label="SwitchInt mv(13)\l"];
    X108a068c4d285151_4 -> X108a068c4d285151_7 [label="0"];
    X108a068c4d285151_4 -> X108a068c4d285151_5 [label="other"];
    X108a068c4d285151_4 [label="Storage Live _14\lStorage Live _15\l15 <- Use(cp((*1).4))\l14 <- Ne(cp(5), mv(15))\lSwitchInt mv(14)\l"];
    X108a068c4d285151_5 -> X108a068c4d285151_6 [label="0"];
    X108a068c4d285151_5 [label="Storage Dead _15\lStorage Live _16\l16 <- Use(cp((*1).4))\lCall\l"];
    X108a068c4d285151_6 -> X108a068c4d285151_38;
    X108a068c4d285151_6 [label="Storage Dead _16\lStorage Dead _14\lStorage Dead _13\lGoto\l"];
    X108a068c4d285151_7 -> X108a068c4d285151_8;
    X108a068c4d285151_7 [label="Storage Dead _15\lGoto\l"];
    X108a068c4d285151_8 -> X108a068c4d285151_10 [label="0"];
    X108a068c4d285151_8 -> X108a068c4d285151_9 [label="other"];
    X108a068c4d285151_8 [label="Storage Dead _14\lStorage Dead _13\lStorage Live _67\lStorage Live _68\lStorage Live _69\l69 <- Use(cp((*1).3))\lStorage Live _70\lStorage Live _71\l71 <- BitAnd(cp(11), const ?_u8)\l70 <- Cast-IntToInt mv(71)\lStorage Dead _71\l68 <- Shr(mv(69), mv(70))\lStorage Dead _70\lStorage Dead _69\l67 <- BitAnd(mv(68), const ?_u64)\lStorage Dead _68\lSwitchInt mv(67)\l"];
    X108a068c4d285151_9 -> X108a068c4d285151_14 [label="0"];
    X108a068c4d285151_9 -> X108a068c4d285151_13 [label="other"];
    X108a068c4d285151_9 [label="Storage Dead _67\lStorage Live _17\lSwitchInt cp(4)\l"];
    X108a068c4d285151_10 -> X108a068c4d285151_11 [label="0"];
    X108a068c4d285151_10 -> X108a068c4d285151_12 [label="other"];
    X108a068c4d285151_10 [label="Storage Dead _67\l(*1).4 <- Add(cp((*1).4), cp(7))\lSwitchInt cp(4)\l"];
    X108a068c4d285151_11 -> X108a068c4d285151_12;
    X108a068c4d285151_11 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X108a068c4d285151_12 -> X108a068c4d285151_37;
    X108a068c4d285151_12 [label="Goto\l"];
    X108a068c4d285151_13 -> X108a068c4d285151_15;
    X108a068c4d285151_13 [label="17 <- Use(cp((*1).0))\lGoto\l"];
    X108a068c4d285151_14 -> X108a068c4d285151_41 [label="17"];
    X108a068c4d285151_14 [label="Storage Live _18\l18 <- Use(cp((*1).0))\lStorage Live _19\l19 <- Use(cp((*1).6))\lCall\l"];
    X108a068c4d285151_15 -> X108a068c4d285151_16;
    X108a068c4d285151_15 [label="Storage Live _21\l21 <- Use(cp(17))\l20 <- Adt{0} (mv(21), cp(7))\lStorage Dead _21\lStorage Live _22\l22 <- Use(cp(20))\lGoto\l"];
    X108a068c4d285151_16 -> X108a068c4d285151_44 [label="0"];
    X108a068c4d285151_16 -> X108a068c4d285151_42 [label="other"];
    X108a068c4d285151_16 [label="Storage Live _23\l24 <- &mut 22\lStorage Live _75\lStorage Live _72\lStorage Live _73\l73 <- & 22.0\lStorage Live _74\l74 <- & 22.1\lStorage Live _77\l77 <- Use(cp(22.0))\lStorage Live _78\l78 <- Use(cp(22.1))\l72 <- Lt(mv(77), mv(78))\lStorage Dead _78\lStorage Dead _77\lSwitchInt mv(72)\l"];
    X108a068c4d285151_17 -> X108a068c4d285151_18;
    X108a068c4d285151_17 [label="27 <- Use(cp((*3)[_25]))\lStorage Live _30\lStorage Live _31\lStorage Live _32\l32 <- Use(cp((*1).4))\l31 <- Add(mv(32), cp(25))\lStorage Dead _32\l33 <- Len((*2))\l34 <- Lt(cp(31), cp(33))\lAssert mv(34) == true\l"];
    X108a068c4d285151_18 -> X108a068c4d285151_22 [label="0"];
    X108a068c4d285151_18 -> X108a068c4d285151_19 [label="other"];
    X108a068c4d285151_18 [label="30 <- Use(cp((*2)[_31]))\l26 <- Ne(mv(27), mv(30))\lSwitchInt mv(26)\l"];
    X108a068c4d285151_19 -> X108a068c4d285151_20 [label="0"];
    X108a068c4d285151_19 -> X108a068c4d285151_21 [label="other"];
    X108a068c4d285151_19 [label="Storage Dead _31\lStorage Dead _30\lStorage Dead _27\lStorage Live _35\lStorage Live _36\lStorage Live _37\l37 <- Use(cp((*1).0))\l36 <- Sub(cp(25), mv(37))\lStorage Dead _37\l35 <- Add(mv(36), const ?_usize)\lStorage Dead _36\l(*1).4 <- Add(cp((*1).4), mv(35))\lStorage Dead _35\lSwitchInt cp(4)\l"];
    X108a068c4d285151_20 -> X108a068c4d285151_21;
    X108a068c4d285151_20 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X108a068c4d285151_21 -> X108a068c4d285151_36;
    X108a068c4d285151_21 [label="Storage Dead _26\lStorage Dead _23\lStorage Dead _22\lGoto\l"];
    X108a068c4d285151_22 -> X108a068c4d285151_16;
    X108a068c4d285151_22 [label="Storage Dead _31\lStorage Dead _30\lStorage Dead _27\lStorage Dead _26\lStorage Dead _23\lGoto\l"];
    X108a068c4d285151_23 -> X108a068c4d285151_25;
    X108a068c4d285151_23 [label="38 <- Use(const ?_usize)\lGoto\l"];
    X108a068c4d285151_24 -> X108a068c4d285151_25;
    X108a068c4d285151_24 [label="38 <- Use(cp((*1).6))\lGoto\l"];
    X108a068c4d285151_25 -> X108a068c4d285151_26;
    X108a068c4d285151_25 [label="Storage Live _40\lStorage Live _41\l41 <- Use(cp(38))\lStorage Live _42\l42 <- Use(cp((*1).0))\l40 <- Adt{0} (mv(41), mv(42))\lStorage Dead _42\lStorage Dead _41\l39 <- Adt{0} (cp(40))\lStorage Dead _40\lStorage Live _43\l43 <- Use(cp(39))\lGoto\l"];
    X108a068c4d285151_26 -> X108a068c4d285151_47 [label="0"];
    X108a068c4d285151_26 -> X108a068c4d285151_45 [label="other"];
    X108a068c4d285151_26 [label="Storage Live _44\l45 <- &mut 43\l79 <- &mut 43.0\lStorage Live _80\lStorage Live _81\l81 <- & 43.0.0\lStorage Live _82\l82 <- & 43.0.1\lStorage Live _86\l86 <- Use(cp(43.0.0))\lStorage Live _87\l87 <- Use(cp(43.0.1))\l80 <- Lt(mv(86), mv(87))\lStorage Dead _87\lStorage Dead _86\lSwitchInt mv(80)\l"];
    X108a068c4d285151_27 -> X108a068c4d285151_28;
    X108a068c4d285151_27 [label="48 <- Use(cp((*3)[_46]))\lStorage Live _51\lStorage Live _52\lStorage Live _53\l53 <- Use(cp((*1).4))\l52 <- Add(mv(53), cp(46))\lStorage Dead _53\l54 <- Len((*2))\l55 <- Lt(cp(52), cp(54))\lAssert mv(55) == true\l"];
    X108a068c4d285151_28 -> X108a068c4d285151_32 [label="0"];
    X108a068c4d285151_28 -> X108a068c4d285151_29 [label="other"];
    X108a068c4d285151_28 [label="51 <- Use(cp((*2)[_52]))\l47 <- Ne(mv(48), mv(51))\lSwitchInt mv(47)\l"];
    X108a068c4d285151_29 -> X108a068c4d285151_30 [label="0"];
    X108a068c4d285151_29 -> X108a068c4d285151_31 [label="other"];
    X108a068c4d285151_29 [label="Storage Dead _52\lStorage Dead _51\lStorage Dead _48\lStorage Live _56\l56 <- Use(cp((*1).2))\l(*1).4 <- Add(cp((*1).4), mv(56))\lStorage Dead _56\lSwitchInt cp(4)\l"];
    X108a068c4d285151_30 -> X108a068c4d285151_31;
    X108a068c4d285151_30 [label="Storage Live _57\l57 <- Use(cp((*1).2))\l(*1).6 <- Sub(cp(7), mv(57))\lStorage Dead _57\lGoto\l"];
    X108a068c4d285151_31 -> X108a068c4d285151_36;
    X108a068c4d285151_31 [label="Storage Dead _47\lStorage Dead _44\lStorage Dead _43\lStorage Dead _38\lGoto\l"];
    X108a068c4d285151_32 -> X108a068c4d285151_26;
    X108a068c4d285151_32 [label="Storage Dead _52\lStorage Dead _51\lStorage Dead _48\lStorage Dead _47\lStorage Dead _44\lGoto\l"];
    X108a068c4d285151_33 -> X108a068c4d285151_34;
    X108a068c4d285151_33 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X108a068c4d285151_34 -> X108a068c4d285151_35 [label="0"];
    X108a068c4d285151_34 [label="Storage Live _59\l59 <- Add(cp(58), cp(7))\lCall\l"];
    X108a068c4d285151_35 -> X108a068c4d285151_38;
    X108a068c4d285151_35 [label="Storage Dead _59\lStorage Dead _38\lStorage Dead _17\lGoto\l"];
    X108a068c4d285151_36 -> X108a068c4d285151_37;
    X108a068c4d285151_36 [label="Storage Dead _17\lGoto\l"];
    X108a068c4d285151_37 -> X108a068c4d285151_1;
    X108a068c4d285151_37 [label="Goto\l"];
    X108a068c4d285151_38 [label="Return\l"];
    X108a068c4d285151_39 -> X108a068c4d285151_3 [label="13"];
    X108a068c4d285151_39 [label="Storage Live _64\lStorage Live _65\l65 <- &raw (*2)\lStorage Live _66\l66 <- Cast-PtrToPtr cp(65)\l64 <- Offset(cp(66), cp(9))\lStorage Dead _66\lStorage Dead _65\l63 <- & (*64)\l8 <- Adt{1} (cp(63))\lStorage Dead _64\lStorage Dead _61\lStorage Dead _63\lStorage Dead _9\l60 <- Use(cp((8 as variant 1).0))\l11 <- Use(cp((*60)))\lStorage Dead _8\lStorage Live _13\lCall\l"];
    X108a068c4d285151_40 -> X108a068c4d285151_2 [label="0"];
    X108a068c4d285151_40 [label="Storage Dead _61\lStorage Dead _63\lStorage Dead _9\l(*1).4 <- Use(cp(62))\lStorage Live _12\l12 <- Use(cp((*1).4))\lCall\l"];
    X108a068c4d285151_41 -> X108a068c4d285151_15;
    X108a068c4d285151_41 [label="Storage Dead _19\lStorage Dead _18\lGoto\l"];
    X108a068c4d285151_42 -> X108a068c4d285151_43 [label="76"];
    X108a068c4d285151_42 [label="Storage Dead _74\lStorage Dead _73\l75 <- Use(cp(22.0))\lStorage Live _76\lCall\l"];
    X108a068c4d285151_43 -> X108a068c4d285151_17;
    X108a068c4d285151_43 [label="22.0 <- Use(mv(76))\lStorage Dead _76\l23 <- Adt{1} (cp(75))\lStorage Dead _72\lStorage Dead _75\l25 <- Use(cp((23 as variant 1).0))\lStorage Live _26\lStorage Live _27\l28 <- Len((*3))\l29 <- Lt(cp(25), cp(28))\lAssert mv(29) == true\l"];
    X108a068c4d285151_44 -> X108a068c4d285151_24 [label="0"];
    X108a068c4d285151_44 -> X108a068c4d285151_23 [label="other"];
    X108a068c4d285151_44 [label="Storage Dead _74\lStorage Dead _73\lStorage Dead _72\lStorage Dead _75\lStorage Dead _23\lStorage Dead _22\lStorage Live _38\lSwitchInt cp(4)\l"];
    X108a068c4d285151_45 -> X108a068c4d285151_46 [label="83"];
    X108a068c4d285151_45 [label="Storage Dead _82\lStorage Dead _81\lStorage Live _83\lStorage Live _84\l84 <- Use(cp(43.0.1))\lCall\l"];
    X108a068c4d285151_46 -> X108a068c4d285151_27;
    X108a068c4d285151_46 [label="Storage Dead _84\l43.0.1 <- Use(mv(83))\lStorage Dead _83\lStorage Live _85\l85 <- Use(cp(43.0.1))\l44 <- Adt{1} (mv(85))\lStorage Dead _85\lStorage Dead _80\l46 <- Use(cp((44 as variant 1).0))\lStorage Live _47\lStorage Live _48\l49 <- Len((*3))\l50 <- Lt(cp(46), cp(49))\lAssert mv(50) == true\l"];
    X108a068c4d285151_47 -> X108a068c4d285151_33 [label="0"];
    X108a068c4d285151_47 -> X108a068c4d285151_34 [label="other"];
    X108a068c4d285151_47 [label="Storage Dead _82\lStorage Dead _81\lStorage Dead _80\lStorage Dead _44\lStorage Dead _43\l58 <- Use(cp((*1).4))\l(*1).4 <- Add(cp((*1).4), cp(7))\lSwitchInt cp(4)\l"];
  }
  X108a068c4d285151_5 -> Xe65b0d04d62dce41_0 [label="mv(5),mv(16)"];
  X108a068c4d285151_14 -> X727d00c50bac1297_0 [label="mv(18),mv(19),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  X108a068c4d285151_34 -> X6feca9f9ebf23717_0 [label="mv(58),mv(59)"];
  X108a068c4d285151_39 -> Xad7c3769434f2850_0 [label=""];
  X108a068c4d285151_40 -> Xe65b0d04d62dce41_0 [label="mv(5),mv(12)"];
  X108a068c4d285151_42 -> Xdaf48124b17ea92_0 [label="cp(75),const ?_usize"];
  X108a068c4d285151_45 -> Xfc8f300194968d14_0 [label="mv(84),const ?_usize"];
  subgraph cluster_186 {
    label="core::str::pattern::TwoWa\nySearcher::next::<core::s\ntr::pattern::RejectAndMat\nch>";
    style="filled";
    color=lightgray;
    node_187 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::TwoWaySearcher\l2 = &[u8]\l3 = &[u8]\l4 = bool\l5 = usize\l6 = usize\l7 = usize\l8 = core::option::Option<&u8>\l9 = usize\l10 = usize\l11 = u8\l12 = usize\l13 = bool\l14 = bool\l15 = usize\l16 = usize\l17 = usize\l18 = usize\l19 = usize\l20 = core::ops::Range<usize>\l21 = usize\l22 = core::ops::Range<usize>\l23 = core::option::Option<usize>\l24 = &mut core::ops::Range<usize>\l25 = usize\l26 = bool\l27 = u8\l28 = usize\l29 = bool\l30 = u8\l31 = usize\l32 = usize\l33 = usize\l34 = bool\l35 = usize\l36 = usize\l37 = usize\l38 = usize\l39 = core::iter::Rev<core::ops::Range<usize>>\l40 = core::ops::Range<usize>\l41 = usize\l42 = usize\l43 = core::iter::Rev<core::ops::Range<usize>>\l44 = core::option::Option<usize>\l45 = &mut core::iter::Rev<core::ops::Range<usize>>\l46 = usize\l47 = bool\l48 = u8\l49 = usize\l50 = bool\l51 = u8\l52 = usize\l53 = usize\l54 = usize\l55 = bool\l56 = usize\l57 = usize\l58 = usize\l59 = usize\l60 = &u8\l61 = bool\l62 = usize\l63 = &u8\l64 = *const u8\l65 = *const [u8]\l66 = *const u8\l67 = u64\l68 = u64\l69 = u64\l70 = usize\l71 = u8\l72 = bool\l73 = &usize\l74 = &usize\l75 = usize\l76 = usize\l77 = usize\l78 = usize\l79 = &mut core::ops::Range<usize>\l80 = bool\l81 = &usize\l82 = &usize\l83 = usize\l84 = usize\l85 = usize\l86 = usize\l87 = usize\l", style="filled", color=palegreen3];
    X6452371870a661f2_0 -> X6452371870a661f2_1;
    X6452371870a661f2_0 [label="5 <- Use(cp((*1).4))\l7 <- PtrMetadata(cp(3))\l6 <- Sub(cp(7), const ?_usize)\lGoto\l"];
    X6452371870a661f2_1 -> X6452371870a661f2_40 [label="0"];
    X6452371870a661f2_1 -> X6452371870a661f2_39 [label="other"];
    X6452371870a661f2_1 [label="Storage Live _8\lStorage Live _9\lStorage Live _10\l10 <- Use(cp((*1).4))\l9 <- Add(mv(10), cp(6))\lStorage Dead _10\lStorage Live _63\lStorage Live _61\l62 <- PtrMetadata(cp(2))\l61 <- Lt(cp(9), cp(62))\lSwitchInt mv(61)\l"];
    X6452371870a661f2_2 -> X6452371870a661f2_38;
    X6452371870a661f2_2 [label="Storage Dead _12\lStorage Dead _8\lGoto\l"];
    X6452371870a661f2_3 -> X6452371870a661f2_8 [label="0"];
    X6452371870a661f2_3 -> X6452371870a661f2_4 [label="other"];
    X6452371870a661f2_3 [label="SwitchInt mv(13)\l"];
    X6452371870a661f2_4 -> X6452371870a661f2_7 [label="0"];
    X6452371870a661f2_4 -> X6452371870a661f2_5 [label="other"];
    X6452371870a661f2_4 [label="Storage Live _14\lStorage Live _15\l15 <- Use(cp((*1).4))\l14 <- Ne(cp(5), mv(15))\lSwitchInt mv(14)\l"];
    X6452371870a661f2_5 -> X6452371870a661f2_6 [label="0"];
    X6452371870a661f2_5 [label="Storage Dead _15\lStorage Live _16\l16 <- Use(cp((*1).4))\lCall\l"];
    X6452371870a661f2_6 -> X6452371870a661f2_38;
    X6452371870a661f2_6 [label="Storage Dead _16\lStorage Dead _14\lStorage Dead _13\lGoto\l"];
    X6452371870a661f2_7 -> X6452371870a661f2_8;
    X6452371870a661f2_7 [label="Storage Dead _15\lGoto\l"];
    X6452371870a661f2_8 -> X6452371870a661f2_10 [label="0"];
    X6452371870a661f2_8 -> X6452371870a661f2_9 [label="other"];
    X6452371870a661f2_8 [label="Storage Dead _14\lStorage Dead _13\lStorage Live _67\lStorage Live _68\lStorage Live _69\l69 <- Use(cp((*1).3))\lStorage Live _70\lStorage Live _71\l71 <- BitAnd(cp(11), const ?_u8)\l70 <- Cast-IntToInt mv(71)\lStorage Dead _71\l68 <- Shr(mv(69), mv(70))\lStorage Dead _70\lStorage Dead _69\l67 <- BitAnd(mv(68), const ?_u64)\lStorage Dead _68\lSwitchInt mv(67)\l"];
    X6452371870a661f2_9 -> X6452371870a661f2_14 [label="0"];
    X6452371870a661f2_9 -> X6452371870a661f2_13 [label="other"];
    X6452371870a661f2_9 [label="Storage Dead _67\lStorage Live _17\lSwitchInt cp(4)\l"];
    X6452371870a661f2_10 -> X6452371870a661f2_11 [label="0"];
    X6452371870a661f2_10 -> X6452371870a661f2_12 [label="other"];
    X6452371870a661f2_10 [label="Storage Dead _67\l(*1).4 <- Add(cp((*1).4), cp(7))\lSwitchInt cp(4)\l"];
    X6452371870a661f2_11 -> X6452371870a661f2_12;
    X6452371870a661f2_11 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X6452371870a661f2_12 -> X6452371870a661f2_37;
    X6452371870a661f2_12 [label="Goto\l"];
    X6452371870a661f2_13 -> X6452371870a661f2_15;
    X6452371870a661f2_13 [label="17 <- Use(cp((*1).0))\lGoto\l"];
    X6452371870a661f2_14 -> X6452371870a661f2_41 [label="17"];
    X6452371870a661f2_14 [label="Storage Live _18\l18 <- Use(cp((*1).0))\lStorage Live _19\l19 <- Use(cp((*1).6))\lCall\l"];
    X6452371870a661f2_15 -> X6452371870a661f2_16;
    X6452371870a661f2_15 [label="Storage Live _21\l21 <- Use(cp(17))\l20 <- Adt{0} (mv(21), cp(7))\lStorage Dead _21\lStorage Live _22\l22 <- Use(cp(20))\lGoto\l"];
    X6452371870a661f2_16 -> X6452371870a661f2_44 [label="0"];
    X6452371870a661f2_16 -> X6452371870a661f2_42 [label="other"];
    X6452371870a661f2_16 [label="Storage Live _23\l24 <- &mut 22\lStorage Live _75\lStorage Live _72\lStorage Live _73\l73 <- & 22.0\lStorage Live _74\l74 <- & 22.1\lStorage Live _77\l77 <- Use(cp(22.0))\lStorage Live _78\l78 <- Use(cp(22.1))\l72 <- Lt(mv(77), mv(78))\lStorage Dead _78\lStorage Dead _77\lSwitchInt mv(72)\l"];
    X6452371870a661f2_17 -> X6452371870a661f2_18;
    X6452371870a661f2_17 [label="27 <- Use(cp((*3)[_25]))\lStorage Live _30\lStorage Live _31\lStorage Live _32\l32 <- Use(cp((*1).4))\l31 <- Add(mv(32), cp(25))\lStorage Dead _32\l33 <- Len((*2))\l34 <- Lt(cp(31), cp(33))\lAssert mv(34) == true\l"];
    X6452371870a661f2_18 -> X6452371870a661f2_22 [label="0"];
    X6452371870a661f2_18 -> X6452371870a661f2_19 [label="other"];
    X6452371870a661f2_18 [label="30 <- Use(cp((*2)[_31]))\l26 <- Ne(mv(27), mv(30))\lSwitchInt mv(26)\l"];
    X6452371870a661f2_19 -> X6452371870a661f2_20 [label="0"];
    X6452371870a661f2_19 -> X6452371870a661f2_21 [label="other"];
    X6452371870a661f2_19 [label="Storage Dead _31\lStorage Dead _30\lStorage Dead _27\lStorage Live _35\lStorage Live _36\lStorage Live _37\l37 <- Use(cp((*1).0))\l36 <- Sub(cp(25), mv(37))\lStorage Dead _37\l35 <- Add(mv(36), const ?_usize)\lStorage Dead _36\l(*1).4 <- Add(cp((*1).4), mv(35))\lStorage Dead _35\lSwitchInt cp(4)\l"];
    X6452371870a661f2_20 -> X6452371870a661f2_21;
    X6452371870a661f2_20 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X6452371870a661f2_21 -> X6452371870a661f2_36;
    X6452371870a661f2_21 [label="Storage Dead _26\lStorage Dead _23\lStorage Dead _22\lGoto\l"];
    X6452371870a661f2_22 -> X6452371870a661f2_16;
    X6452371870a661f2_22 [label="Storage Dead _31\lStorage Dead _30\lStorage Dead _27\lStorage Dead _26\lStorage Dead _23\lGoto\l"];
    X6452371870a661f2_23 -> X6452371870a661f2_25;
    X6452371870a661f2_23 [label="38 <- Use(const ?_usize)\lGoto\l"];
    X6452371870a661f2_24 -> X6452371870a661f2_25;
    X6452371870a661f2_24 [label="38 <- Use(cp((*1).6))\lGoto\l"];
    X6452371870a661f2_25 -> X6452371870a661f2_26;
    X6452371870a661f2_25 [label="Storage Live _40\lStorage Live _41\l41 <- Use(cp(38))\lStorage Live _42\l42 <- Use(cp((*1).0))\l40 <- Adt{0} (mv(41), mv(42))\lStorage Dead _42\lStorage Dead _41\l39 <- Adt{0} (cp(40))\lStorage Dead _40\lStorage Live _43\l43 <- Use(cp(39))\lGoto\l"];
    X6452371870a661f2_26 -> X6452371870a661f2_47 [label="0"];
    X6452371870a661f2_26 -> X6452371870a661f2_45 [label="other"];
    X6452371870a661f2_26 [label="Storage Live _44\l45 <- &mut 43\l79 <- &mut 43.0\lStorage Live _80\lStorage Live _81\l81 <- & 43.0.0\lStorage Live _82\l82 <- & 43.0.1\lStorage Live _86\l86 <- Use(cp(43.0.0))\lStorage Live _87\l87 <- Use(cp(43.0.1))\l80 <- Lt(mv(86), mv(87))\lStorage Dead _87\lStorage Dead _86\lSwitchInt mv(80)\l"];
    X6452371870a661f2_27 -> X6452371870a661f2_28;
    X6452371870a661f2_27 [label="48 <- Use(cp((*3)[_46]))\lStorage Live _51\lStorage Live _52\lStorage Live _53\l53 <- Use(cp((*1).4))\l52 <- Add(mv(53), cp(46))\lStorage Dead _53\l54 <- Len((*2))\l55 <- Lt(cp(52), cp(54))\lAssert mv(55) == true\l"];
    X6452371870a661f2_28 -> X6452371870a661f2_32 [label="0"];
    X6452371870a661f2_28 -> X6452371870a661f2_29 [label="other"];
    X6452371870a661f2_28 [label="51 <- Use(cp((*2)[_52]))\l47 <- Ne(mv(48), mv(51))\lSwitchInt mv(47)\l"];
    X6452371870a661f2_29 -> X6452371870a661f2_30 [label="0"];
    X6452371870a661f2_29 -> X6452371870a661f2_31 [label="other"];
    X6452371870a661f2_29 [label="Storage Dead _52\lStorage Dead _51\lStorage Dead _48\lStorage Live _56\l56 <- Use(cp((*1).2))\l(*1).4 <- Add(cp((*1).4), mv(56))\lStorage Dead _56\lSwitchInt cp(4)\l"];
    X6452371870a661f2_30 -> X6452371870a661f2_31;
    X6452371870a661f2_30 [label="Storage Live _57\l57 <- Use(cp((*1).2))\l(*1).6 <- Sub(cp(7), mv(57))\lStorage Dead _57\lGoto\l"];
    X6452371870a661f2_31 -> X6452371870a661f2_36;
    X6452371870a661f2_31 [label="Storage Dead _47\lStorage Dead _44\lStorage Dead _43\lStorage Dead _38\lGoto\l"];
    X6452371870a661f2_32 -> X6452371870a661f2_26;
    X6452371870a661f2_32 [label="Storage Dead _52\lStorage Dead _51\lStorage Dead _48\lStorage Dead _47\lStorage Dead _44\lGoto\l"];
    X6452371870a661f2_33 -> X6452371870a661f2_34;
    X6452371870a661f2_33 [label="(*1).6 <- Use(const ?_usize)\lGoto\l"];
    X6452371870a661f2_34 -> X6452371870a661f2_35 [label="0"];
    X6452371870a661f2_34 [label="Storage Live _59\l59 <- Add(cp(58), cp(7))\lCall\l"];
    X6452371870a661f2_35 -> X6452371870a661f2_38;
    X6452371870a661f2_35 [label="Storage Dead _59\lStorage Dead _38\lStorage Dead _17\lGoto\l"];
    X6452371870a661f2_36 -> X6452371870a661f2_37;
    X6452371870a661f2_36 [label="Storage Dead _17\lGoto\l"];
    X6452371870a661f2_37 -> X6452371870a661f2_1;
    X6452371870a661f2_37 [label="Goto\l"];
    X6452371870a661f2_38 [label="Return\l"];
    X6452371870a661f2_39 -> X6452371870a661f2_3 [label="13"];
    X6452371870a661f2_39 [label="Storage Live _64\lStorage Live _65\l65 <- &raw (*2)\lStorage Live _66\l66 <- Cast-PtrToPtr cp(65)\l64 <- Offset(cp(66), cp(9))\lStorage Dead _66\lStorage Dead _65\l63 <- & (*64)\l8 <- Adt{1} (cp(63))\lStorage Dead _64\lStorage Dead _61\lStorage Dead _63\lStorage Dead _9\l60 <- Use(cp((8 as variant 1).0))\l11 <- Use(cp((*60)))\lStorage Dead _8\lStorage Live _13\lCall\l"];
    X6452371870a661f2_40 -> X6452371870a661f2_2 [label="0"];
    X6452371870a661f2_40 [label="Storage Dead _61\lStorage Dead _63\lStorage Dead _9\l(*1).4 <- Use(cp(62))\lStorage Live _12\l12 <- Use(cp((*1).4))\lCall\l"];
    X6452371870a661f2_41 -> X6452371870a661f2_15;
    X6452371870a661f2_41 [label="Storage Dead _19\lStorage Dead _18\lGoto\l"];
    X6452371870a661f2_42 -> X6452371870a661f2_43 [label="76"];
    X6452371870a661f2_42 [label="Storage Dead _74\lStorage Dead _73\l75 <- Use(cp(22.0))\lStorage Live _76\lCall\l"];
    X6452371870a661f2_43 -> X6452371870a661f2_17;
    X6452371870a661f2_43 [label="22.0 <- Use(mv(76))\lStorage Dead _76\l23 <- Adt{1} (cp(75))\lStorage Dead _72\lStorage Dead _75\l25 <- Use(cp((23 as variant 1).0))\lStorage Live _26\lStorage Live _27\l28 <- Len((*3))\l29 <- Lt(cp(25), cp(28))\lAssert mv(29) == true\l"];
    X6452371870a661f2_44 -> X6452371870a661f2_24 [label="0"];
    X6452371870a661f2_44 -> X6452371870a661f2_23 [label="other"];
    X6452371870a661f2_44 [label="Storage Dead _74\lStorage Dead _73\lStorage Dead _72\lStorage Dead _75\lStorage Dead _23\lStorage Dead _22\lStorage Live _38\lSwitchInt cp(4)\l"];
    X6452371870a661f2_45 -> X6452371870a661f2_46 [label="83"];
    X6452371870a661f2_45 [label="Storage Dead _82\lStorage Dead _81\lStorage Live _83\lStorage Live _84\l84 <- Use(cp(43.0.1))\lCall\l"];
    X6452371870a661f2_46 -> X6452371870a661f2_27;
    X6452371870a661f2_46 [label="Storage Dead _84\l43.0.1 <- Use(mv(83))\lStorage Dead _83\lStorage Live _85\l85 <- Use(cp(43.0.1))\l44 <- Adt{1} (mv(85))\lStorage Dead _85\lStorage Dead _80\l46 <- Use(cp((44 as variant 1).0))\lStorage Live _47\lStorage Live _48\l49 <- Len((*3))\l50 <- Lt(cp(46), cp(49))\lAssert mv(50) == true\l"];
    X6452371870a661f2_47 -> X6452371870a661f2_33 [label="0"];
    X6452371870a661f2_47 -> X6452371870a661f2_34 [label="other"];
    X6452371870a661f2_47 [label="Storage Dead _82\lStorage Dead _81\lStorage Dead _80\lStorage Dead _44\lStorage Dead _43\l58 <- Use(cp((*1).4))\l(*1).4 <- Add(cp((*1).4), cp(7))\lSwitchInt cp(4)\l"];
  }
  X6452371870a661f2_5 -> X850b3864d07d35b8_0 [label="mv(5),mv(16)"];
  X6452371870a661f2_14 -> X727d00c50bac1297_0 [label="mv(18),mv(19),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  X6452371870a661f2_34 -> Xeea2daa5e03f0f7b_0 [label="mv(58),mv(59)"];
  X6452371870a661f2_39 -> X1d14b4cfa02595a0_0 [label=""];
  X6452371870a661f2_40 -> X850b3864d07d35b8_0 [label="mv(5),mv(12)"];
  X6452371870a661f2_42 -> Xdaf48124b17ea92_0 [label="cp(75),const ?_usize"];
  X6452371870a661f2_45 -> Xfc8f300194968d14_0 [label="mv(84),const ?_usize"];
  subgraph cluster_188 {
    label="core::str::pattern::small\n_slice_eq";
    style="filled";
    color=lightgray;
    node_189 [label="LOCALS\l0 = bool\l1 = &[u8]\l2 = &[u8]\l3 = &usize\l4 = &usize\l5 = bool\l6 = usize\l7 = core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l8 = core::slice::Iter<'_, u8>\l9 = core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l10 = core::option::Option<(&u8, &u8)>\l11 = &mut core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l12 = isize\l13 = u8\l14 = u8\l15 = bool\l16 = *const u8\l17 = *const u8\l18 = *const u8\l19 = *const u8\l20 = *const u8\l21 = *const u8\l22 = usize\l23 = *const u8\l24 = *const u8\l25 = usize\l26 = usize\l27 = bool\l28 = *const u8\l29 = u32\l30 = *const u32\l31 = *const u8\l32 = u32\l33 = *const u32\l34 = *const u8\l35 = bool\l36 = *const u8\l37 = *const u8\l38 = *const u8\l39 = *const u8\l40 = u32\l41 = *const u32\l42 = u32\l43 = *const u32\l44 = &u8\l45 = &u8\l46 = core::ptr::NonNull<u8>\l47 = core::ptr::NonNull<[u8]>\l48 = *const u8\l49 = *mut u8\l50 = *mut u8\l51 = *const [u8]\l52 = *const u8\l53 = *const [u8]\l54 = *const [u8]\l", style="filled", color=palegreen3];
    Xc837b11e39e1a994_0 -> Xc837b11e39e1a994_9 [label="0"];
    Xc837b11e39e1a994_0 -> Xc837b11e39e1a994_1 [label="other"];
    Xc837b11e39e1a994_0 [label="Storage Live _5\l6 <- PtrMetadata(cp(1))\l5 <- Lt(cp(6), const ?_usize)\lSwitchInt mv(5)\l"];
    Xc837b11e39e1a994_1 -> Xc837b11e39e1a994_2 [label="7"];
    Xc837b11e39e1a994_1 [label="Storage Live _8\lStorage Live _46\lStorage Live _51\lStorage Live _52\lStorage Live _47\l51 <- &raw (*1)\l47 <- Adt{0} (cp(51))\l52 <- Cast-PtrToPtr cp(51)\l46 <- Adt{0} (cp(52))\lStorage Dead _47\lStorage Live _49\lStorage Live _50\l50 <- Cast-PtrToPtr cp(51)\l49 <- Offset(cp(50), cp(6))\lStorage Dead _50\l48 <- Cast-PtrToPtr mv(49)\lStorage Dead _49\l8 <- Adt{0} (cp(46), cp(48), const core::marker::PhantomData<&u8>)\lStorage Dead _52\lStorage Dead _51\lStorage Dead _46\lCall\l"];
    Xc837b11e39e1a994_2 -> Xc837b11e39e1a994_3;
    Xc837b11e39e1a994_2 [label="Storage Dead _8\lStorage Live _9\l9 <- Use(cp(7))\lGoto\l"];
    Xc837b11e39e1a994_3 -> Xc837b11e39e1a994_17 [label="10"];
    Xc837b11e39e1a994_3 [label="Storage Live _10\l11 <- &mut 9\lCall\l"];
    Xc837b11e39e1a994_4 [label="Unreachable\l"];
    Xc837b11e39e1a994_5 -> Xc837b11e39e1a994_8 [label="0"];
    Xc837b11e39e1a994_5 -> Xc837b11e39e1a994_7 [label="other"];
    Xc837b11e39e1a994_5 [label="44 <- Use(cp((10 as variant 1).0.0))\l13 <- Use(cp((*44)))\l45 <- Use(cp((10 as variant 1).0.1))\l14 <- Use(cp((*45)))\lStorage Live _15\l15 <- Ne(cp(13), cp(14))\lSwitchInt mv(15)\l"];
    Xc837b11e39e1a994_6 -> Xc837b11e39e1a994_15;
    Xc837b11e39e1a994_6 [label="Storage Dead _10\lStorage Dead _9\l0 <- Use(const bool)\lGoto\l"];
    Xc837b11e39e1a994_7 -> Xc837b11e39e1a994_15;
    Xc837b11e39e1a994_7 [label="0 <- Use(const bool)\lStorage Dead _15\lStorage Dead _10\lStorage Dead _9\lGoto\l"];
    Xc837b11e39e1a994_8 -> Xc837b11e39e1a994_3;
    Xc837b11e39e1a994_8 [label="Storage Dead _15\lStorage Dead _10\lGoto\l"];
    Xc837b11e39e1a994_9 -> Xc837b11e39e1a994_10;
    Xc837b11e39e1a994_9 [label="Storage Dead _5\lStorage Live _53\l53 <- &raw (*1)\l18 <- Cast-PtrToPtr mv(53)\lStorage Dead _53\lStorage Live _54\l54 <- &raw (*2)\l19 <- Cast-PtrToPtr mv(54)\lStorage Dead _54\lStorage Live _16\l16 <- Use(cp(18))\lStorage Live _17\l17 <- Use(cp(19))\lStorage Live _21\l21 <- Use(cp(16))\lStorage Live _22\l22 <- Sub(cp(6), const ?_usize)\l20 <- Offset(cp(21), cp(22))\lStorage Dead _22\lStorage Dead _21\lStorage Live _24\l24 <- Use(cp(17))\lStorage Live _25\lStorage Live _26\l26 <- PtrMetadata(cp(2))\l25 <- Sub(mv(26), const ?_usize)\lStorage Dead _26\l23 <- Offset(cp(24), cp(25))\lStorage Dead _25\lStorage Dead _24\lGoto\l"];
    Xc837b11e39e1a994_10 -> Xc837b11e39e1a994_14 [label="0"];
    Xc837b11e39e1a994_10 -> Xc837b11e39e1a994_11 [label="other"];
    Xc837b11e39e1a994_10 [label="Storage Live _27\lStorage Live _28\l28 <- Use(cp(16))\l27 <- Lt(mv(28), cp(20))\lSwitchInt mv(27)\l"];
    Xc837b11e39e1a994_11 -> Xc837b11e39e1a994_18 [label="29"];
    Xc837b11e39e1a994_11 [label="Storage Dead _28\lStorage Live _30\lStorage Live _31\l31 <- Use(cp(16))\l30 <- Cast-PtrToPtr mv(31)\lStorage Dead _31\lCall\l"];
    Xc837b11e39e1a994_12 -> Xc837b11e39e1a994_16;
    Xc837b11e39e1a994_12 [label="0 <- Use(const bool)\lStorage Dead _35\lStorage Dead _27\lStorage Dead _17\lStorage Dead _16\lGoto\l"];
    Xc837b11e39e1a994_13 -> Xc837b11e39e1a994_10;
    Xc837b11e39e1a994_13 [label="Storage Dead _35\lStorage Live _36\lStorage Live _37\l37 <- Use(cp(16))\l36 <- Offset(cp(37), const ?_usize)\lStorage Dead _37\l16 <- Use(mv(36))\lStorage Dead _36\lStorage Live _38\lStorage Live _39\l39 <- Use(cp(17))\l38 <- Offset(cp(39), const ?_usize)\lStorage Dead _39\l17 <- Use(mv(38))\lStorage Dead _38\lStorage Dead _27\lGoto\l"];
    Xc837b11e39e1a994_14 -> Xc837b11e39e1a994_20 [label="40"];
    Xc837b11e39e1a994_14 [label="Storage Dead _28\lStorage Dead _27\lStorage Live _41\l41 <- Cast-PtrToPtr cp(20)\lCall\l"];
    Xc837b11e39e1a994_15 -> Xc837b11e39e1a994_16;
    Xc837b11e39e1a994_15 [label="Storage Dead _5\lGoto\l"];
    Xc837b11e39e1a994_16 [label="Return\l"];
    Xc837b11e39e1a994_17 -> Xc837b11e39e1a994_6 [label="0"];
    Xc837b11e39e1a994_17 -> Xc837b11e39e1a994_5 [label="1"];
    Xc837b11e39e1a994_17 -> Xc837b11e39e1a994_4 [label="other"];
    Xc837b11e39e1a994_17 [label="12 <- Discriminant(10)\lSwitchInt mv(12)\l"];
    Xc837b11e39e1a994_18 -> Xc837b11e39e1a994_19 [label="32"];
    Xc837b11e39e1a994_18 [label="Storage Dead _30\lStorage Live _33\lStorage Live _34\l34 <- Use(cp(17))\l33 <- Cast-PtrToPtr mv(34)\lStorage Dead _34\lCall\l"];
    Xc837b11e39e1a994_19 -> Xc837b11e39e1a994_13 [label="0"];
    Xc837b11e39e1a994_19 -> Xc837b11e39e1a994_12 [label="other"];
    Xc837b11e39e1a994_19 [label="Storage Dead _33\lStorage Live _35\l35 <- Ne(cp(29), cp(32))\lSwitchInt mv(35)\l"];
    Xc837b11e39e1a994_20 -> Xc837b11e39e1a994_21 [label="42"];
    Xc837b11e39e1a994_20 [label="Storage Dead _41\lStorage Live _43\l43 <- Cast-PtrToPtr cp(23)\lCall\l"];
    Xc837b11e39e1a994_21 -> Xc837b11e39e1a994_16;
    Xc837b11e39e1a994_21 [label="Storage Dead _43\l0 <- Eq(cp(40), cp(42))\lStorage Dead _17\lStorage Dead _16\lGoto\l"];
  }
  Xc837b11e39e1a994_1 -> X51463e88ade07969_0 [label="mv(8),mv(2)"];
  Xc837b11e39e1a994_3 -> Xb1291a0276d3f880_0 [label="mv(11)"];
  Xc837b11e39e1a994_11 -> X6326b7a519f8a58f_0 [label="mv(30)"];
  Xc837b11e39e1a994_14 -> X6326b7a519f8a58f_0 [label="mv(41)"];
  Xc837b11e39e1a994_18 -> X6326b7a519f8a58f_0 [label="mv(33)"];
  Xc837b11e39e1a994_20 -> X6326b7a519f8a58f_0 [label="mv(43)"];
  subgraph cluster_190 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Rever\nseSearcher<'_>>::next_rej\nect_back";
    style="filled";
    color=lightgray;
    node_191 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = core::str::pattern::SearchStep\l3 = isize\l4 = usize\l5 = usize\l6 = (usize, usize)\l", style="filled", color=palegreen3];
    X17cb78685fd546e8_0 -> X17cb78685fd546e8_1;
    X17cb78685fd546e8_0 [label="Goto\l"];
    X17cb78685fd546e8_1 -> X17cb78685fd546e8_2 [label="2"];
    X17cb78685fd546e8_1 [label="Storage Live _2\lCall\l"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_4 [label="1"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_3 [label="2"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_5 [label="0"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_7 [label="other"];
    X17cb78685fd546e8_2 [label="3 <- Discriminant(2)\lSwitchInt mv(3)\l"];
    X17cb78685fd546e8_3 -> X17cb78685fd546e8_6;
    X17cb78685fd546e8_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X17cb78685fd546e8_4 -> X17cb78685fd546e8_6;
    X17cb78685fd546e8_4 [label="4 <- Use(cp((2 as variant 1).0))\l5 <- Use(cp((2 as variant 1).1))\lStorage Live _6\l6 <- Tuple (cp(4), cp(5))\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X17cb78685fd546e8_5 -> X17cb78685fd546e8_1;
    X17cb78685fd546e8_5 [label="Storage Dead _2\lGoto\l"];
    X17cb78685fd546e8_6 [label="Storage Dead _2\lReturn\l"];
    X17cb78685fd546e8_7 [label="Unreachable\l"];
  }
  X17cb78685fd546e8_1 -> Xa12778c1e9fbfec3_0 [label="cp(1)"];
  subgraph cluster_192 {
    label="core::str::from_utf8_unch\necked";
    style="filled";
    color=lightgray;
    node_193 [label="LOCALS\l0 = &str\l1 = &[u8]\l", style="filled", color=palegreen3];
    Xa8af50ae2aec905_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_194 {
    label="core::char::convert::from\n_u32_unchecked::precondit\nion_check";
    style="filled";
    color=lightgray;
    node_195 [label="LOCALS\l0 = ()\l1 = u32\l2 = &core::result::Result<char, core::char::CharTryFromError>\l3 = core::result::Result<char, core::char::CharTryFromError>\l4 = !\l5 = bool\l6 = u32\l7 = u32\l8 = char\l9 = isize\l", style="filled", color=palegreen3];
    Xeeb9aa05dcd0eaef_0 -> Xeeb9aa05dcd0eaef_2 [label="0"];
    Xeeb9aa05dcd0eaef_0 -> Xeeb9aa05dcd0eaef_1 [label="other"];
    Xeeb9aa05dcd0eaef_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _5\lStorage Live _6\lStorage Live _7\l7 <- BitXor(cp(1), const ?_u32)\l6 <- Sub(cp(7), const ?_u32)\lStorage Dead _7\l5 <- Ge(mv(6), const ?_u32)\lSwitchInt mv(5)\l"];
    Xeeb9aa05dcd0eaef_1 -> Xeeb9aa05dcd0eaef_3;
    Xeeb9aa05dcd0eaef_1 [label="Storage Dead _6\l3 <- Use(const core::result::Result<char, core::char::CharTryFromError>)\lGoto\l"];
    Xeeb9aa05dcd0eaef_2 -> Xeeb9aa05dcd0eaef_3;
    Xeeb9aa05dcd0eaef_2 [label="Storage Dead _6\lStorage Live _8\l8 <- Cast-Transmute cp(1)\l3 <- Adt{0} (mv(8))\lStorage Dead _8\lGoto\l"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_5 [label="0"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_4 [label="1"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_6 [label="other"];
    Xeeb9aa05dcd0eaef_3 [label="Storage Dead _5\l2 <- & 3\lStorage Live _9\l9 <- Discriminant(3)\lSwitchInt mv(9)\l"];
    Xeeb9aa05dcd0eaef_4 [label="Storage Dead _9\lStorage Dead _2\lStorage Dead _3\lCall\l"];
    Xeeb9aa05dcd0eaef_5 [label="Storage Dead _9\lStorage Dead _2\lStorage Dead _3\lReturn\l"];
    Xeeb9aa05dcd0eaef_6 [label="Unreachable\l"];
  }
  Xeeb9aa05dcd0eaef_4 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_196 {
    label="core::char::encode_utf8_r\naw";
    style="filled";
    color=lightgray;
    node_197 [label="LOCALS\l0 = &mut [u8]\l1 = u32\l2 = &mut [u8]\l3 = usize\l4 = usize\l5 = bool\l6 = usize\l7 = bool\l8 = usize\l9 = bool\l10 = usize\l11 = bool\l12 = &mut u8\l13 = &mut u8\l14 = &mut u8\l15 = u8\l16 = u32\l17 = u32\l18 = u8\l19 = u32\l20 = &mut u8\l21 = &mut u8\l22 = &mut u8\l23 = u8\l24 = u32\l25 = u32\l26 = u8\l27 = u32\l28 = u32\l29 = u8\l30 = u32\l31 = &mut u8\l32 = &mut u8\l33 = &mut u8\l34 = &mut u8\l35 = u8\l36 = u32\l37 = u32\l38 = u8\l39 = u32\l40 = u32\l41 = u8\l42 = u32\l43 = u32\l44 = u8\l45 = u32\l46 = !\l47 = usize\l48 = usize\l49 = *mut u8\l50 = usize\l51 = bool\l52 = bool\l53 = bool\l54 = *mut [u8]\l55 = bool\l56 = ()\l57 = *mut ()\l58 = *mut [u8]\l", style="filled", color=palegreen3];
    X99903dfa6b5cd43f_0 -> X99903dfa6b5cd43f_7 [label="0"];
    X99903dfa6b5cd43f_0 -> X99903dfa6b5cd43f_12 [label="other"];
    X99903dfa6b5cd43f_0 [label="Storage Live _3\lStorage Live _51\lStorage Live _52\lStorage Live _53\l51 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(51)\l"];
    X99903dfa6b5cd43f_1 [label="Storage Live _47\l47 <- Use(cp(3))\lStorage Live _48\l48 <- PtrMetadata(cp(2))\lCall\l"];
    X99903dfa6b5cd43f_2 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_2 [label="Storage Live _31\l31 <- &mut (*2)[0]\lStorage Live _32\l32 <- &mut (*2)[1]\lStorage Live _33\l33 <- &mut (*2)[2]\lStorage Live _34\l34 <- &mut (*2)[3]\lStorage Live _35\lStorage Live _36\lStorage Live _37\l37 <- Shr(cp(1), const ?_i32)\l36 <- BitAnd(mv(37), const ?_u32)\lStorage Dead _37\l35 <- Cast-IntToInt mv(36)\lStorage Dead _36\l(*2)[0] <- BitOr(mv(35), const ?_u8)\lStorage Dead _35\lStorage Live _38\lStorage Live _39\lStorage Live _40\l40 <- Shr(cp(1), const ?_i32)\l39 <- BitAnd(mv(40), const ?_u32)\lStorage Dead _40\l38 <- Cast-IntToInt mv(39)\lStorage Dead _39\l(*2)[1] <- BitOr(mv(38), const ?_u8)\lStorage Dead _38\lStorage Live _41\lStorage Live _42\lStorage Live _43\l43 <- Shr(cp(1), const ?_i32)\l42 <- BitAnd(mv(43), const ?_u32)\lStorage Dead _43\l41 <- Cast-IntToInt mv(42)\lStorage Dead _42\l(*2)[2] <- BitOr(mv(41), const ?_u8)\lStorage Dead _41\lStorage Live _44\lStorage Live _45\l45 <- BitAnd(cp(1), const ?_u32)\l44 <- Cast-IntToInt mv(45)\lStorage Dead _45\l(*2)[3] <- BitOr(mv(44), const ?_u8)\lStorage Dead _44\lStorage Dead _34\lStorage Dead _33\lStorage Dead _32\lStorage Dead _31\lGoto\l"];
    X99903dfa6b5cd43f_3 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_3 [label="Storage Live _20\l20 <- &mut (*2)[0]\lStorage Live _21\l21 <- &mut (*2)[1]\lStorage Live _22\l22 <- &mut (*2)[2]\lStorage Live _23\lStorage Live _24\lStorage Live _25\l25 <- Shr(cp(1), const ?_i32)\l24 <- BitAnd(mv(25), const ?_u32)\lStorage Dead _25\l23 <- Cast-IntToInt mv(24)\lStorage Dead _24\l(*2)[0] <- BitOr(mv(23), const ?_u8)\lStorage Dead _23\lStorage Live _26\lStorage Live _27\lStorage Live _28\l28 <- Shr(cp(1), const ?_i32)\l27 <- BitAnd(mv(28), const ?_u32)\lStorage Dead _28\l26 <- Cast-IntToInt mv(27)\lStorage Dead _27\l(*2)[1] <- BitOr(mv(26), const ?_u8)\lStorage Dead _26\lStorage Live _29\lStorage Live _30\l30 <- BitAnd(cp(1), const ?_u32)\l29 <- Cast-IntToInt mv(30)\lStorage Dead _30\l(*2)[2] <- BitOr(mv(29), const ?_u8)\lStorage Dead _29\lStorage Dead _22\lStorage Dead _21\lStorage Dead _20\lGoto\l"];
    X99903dfa6b5cd43f_4 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_4 [label="Storage Live _13\l13 <- &mut (*2)[0]\lStorage Live _14\l14 <- &mut (*2)[1]\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Shr(cp(1), const ?_i32)\l16 <- BitAnd(mv(17), const ?_u32)\lStorage Dead _17\l15 <- Cast-IntToInt mv(16)\lStorage Dead _16\l(*2)[0] <- BitOr(mv(15), const ?_u8)\lStorage Dead _15\lStorage Live _18\lStorage Live _19\l19 <- BitAnd(cp(1), const ?_u32)\l18 <- Cast-IntToInt mv(19)\lStorage Dead _19\l(*2)[1] <- BitOr(mv(18), const ?_u8)\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\lGoto\l"];
    X99903dfa6b5cd43f_5 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_5 [label="Storage Live _12\l12 <- &mut (*2)[0]\l(*2)[0] <- Cast-IntToInt cp(1)\lStorage Dead _12\lGoto\l"];
    X99903dfa6b5cd43f_6 -> X99903dfa6b5cd43f_15 [label="0"];
    X99903dfa6b5cd43f_6 -> X99903dfa6b5cd43f_13 [label="other"];
    X99903dfa6b5cd43f_6 [label="Storage Live _49\l54 <- &raw mut (*2)\l49 <- Cast-PtrToPtr cp(54)\lStorage Live _50\l50 <- Use(cp(3))\lStorage Live _55\l55 <- UbChecks :: bool\lSwitchInt mv(55)\l"];
    X99903dfa6b5cd43f_7 -> X99903dfa6b5cd43f_8 [label="0"];
    X99903dfa6b5cd43f_7 -> X99903dfa6b5cd43f_11 [label="other"];
    X99903dfa6b5cd43f_7 [label="52 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(52)\l"];
    X99903dfa6b5cd43f_8 -> X99903dfa6b5cd43f_9 [label="0"];
    X99903dfa6b5cd43f_8 -> X99903dfa6b5cd43f_10 [label="other"];
    X99903dfa6b5cd43f_8 [label="53 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(53)\l"];
    X99903dfa6b5cd43f_9 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_9 -> X99903dfa6b5cd43f_2 [label="other"];
    X99903dfa6b5cd43f_9 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l10 <- Len((*2))\l11 <- Ge(mv(10), const ?_usize)\lSwitchInt mv(11)\l"];
    X99903dfa6b5cd43f_10 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_10 -> X99903dfa6b5cd43f_3 [label="other"];
    X99903dfa6b5cd43f_10 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l8 <- Len((*2))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    X99903dfa6b5cd43f_11 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_11 -> X99903dfa6b5cd43f_4 [label="other"];
    X99903dfa6b5cd43f_11 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l6 <- Len((*2))\l7 <- Ge(mv(6), const ?_usize)\lSwitchInt mv(7)\l"];
    X99903dfa6b5cd43f_12 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_12 -> X99903dfa6b5cd43f_5 [label="other"];
    X99903dfa6b5cd43f_12 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l4 <- Len((*2))\l5 <- Ge(mv(4), const ?_usize)\lSwitchInt mv(5)\l"];
    X99903dfa6b5cd43f_13 -> X99903dfa6b5cd43f_14 [label="56"];
    X99903dfa6b5cd43f_13 [label="Storage Live _57\l57 <- Cast-PtrToPtr cp(54)\lCall\l"];
    X99903dfa6b5cd43f_14 -> X99903dfa6b5cd43f_15;
    X99903dfa6b5cd43f_14 [label="Storage Dead _57\lGoto\l"];
    X99903dfa6b5cd43f_15 [label="Storage Dead _55\lStorage Live _58\l58 <- *mut ([u8]) (cp(49), cp(50))\l0 <- &mut (*58)\lStorage Dead _58\lStorage Dead _50\lStorage Dead _49\lStorage Dead _3\lReturn\l"];
  }
  X99903dfa6b5cd43f_1 -> X18cbc2f348c9e06e_0 [label="mv(1),mv(47),mv(48)"];
  X99903dfa6b5cd43f_13 -> X63018216f9c6ad5a_0 [label="mv(57),const ?_usize,const ?_usize,cp(50)"];
  subgraph cluster_198 {
    label="core::hint::unreachable_u\nnchecked";
    style="filled";
    color=lightgray;
    node_199 [label="LOCALS\l0 = !\l1 = bool\l2 = ()\l", style="filled", color=palegreen3];
    X8452db9b8b2010e2_0 -> X8452db9b8b2010e2_1 [label="2"];
    X8452db9b8b2010e2_0 [label="1 <- UbChecks :: bool\lIntr: Assume cp(1)\lCall\l"];
    X8452db9b8b2010e2_1 [label="Unreachable\l"];
  }
  X8452db9b8b2010e2_0 -> X33a001831920b814_0 [label=""];
  subgraph cluster_200 {
    label="core::hint::unreachable_u\nnchecked::precondition_ch\neck";
    style="filled";
    color=lightgray;
    node_201 [label="LOCALS\l0 = ()\l1 = !\l", style="filled", color=palegreen3];
    X33a001831920b814_0 [label="Call\l"];
  }
  X33a001831920b814_0 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_202 {
    label="core::hint::black_box::<&\n[u8]>";
    style="filled";
    color=lightgray;
    node_203 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l", style="filled", color=palegreen3];
    X780f31d308d65371_0 -> X780f31d308d65371_1 [label="0"];
    X780f31d308d65371_0 [label="Call\l"];
    X780f31d308d65371_1 [label="Return\l"];
  }
  X780f31d308d65371_0 -> X3c6542d96320ad67_0 [label="mv(1)"];
  subgraph cluster_204 {
    label="core::iter::range::<impl \ncore::iter::DoubleEndedIt\nerator \nfor \ncore::ops::Range<usize>>:\n:next_back";
    style="filled";
    color=lightgray;
    node_205 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X60da0a2f817399aa_0 -> X60da0a2f817399aa_1 [label="0"];
    X60da0a2f817399aa_0 [label="Call\l"];
    X60da0a2f817399aa_1 [label="Return\l"];
  }
  X60da0a2f817399aa_0 -> Xa32faf8d1f160361_0 [label="mv(1)"];
  subgraph cluster_206 {
    label="core::iter::DoubleEndedIt\nerator::rfind::check::<us\nize, \n{closure@core::str::patte\nrn::simd_contains::{closu\nre#0}}>::{closure#0}";
    style="filled";
    color=lightgray;
    node_207 [label="LOCALS\l0 = core::ops::ControlFlow<usize>\l1 = &mut {closure@core::iter::DoubleEndedIterator::rfind::check<usize, {closure@core::str::pattern::simd_contains::{closure#0}}>::{closure#0}}\l2 = ()\l3 = usize\l4 = bool\l5 = &mut {closure@core::str::pattern::simd_contains::{closure#0}}\l6 = (&usize,)\l7 = &usize\l8 = usize\l", style="filled", color=palegreen3];
    Xca7ba83f9203c7b7_0 -> Xca7ba83f9203c7b7_5 [label="Cleanup"];
    Xca7ba83f9203c7b7_0 -> Xca7ba83f9203c7b7_1 [label="4"];
    Xca7ba83f9203c7b7_0 [label="Storage Live _4\lStorage Live _5\l5 <- &mut (*1).0\lStorage Live _6\l7 <- & 3\l6 <- Tuple (cp(7))\lCall\l"];
    Xca7ba83f9203c7b7_1 -> Xca7ba83f9203c7b7_3 [label="0"];
    Xca7ba83f9203c7b7_1 -> Xca7ba83f9203c7b7_2 [label="other"];
    Xca7ba83f9203c7b7_1 [label="SwitchInt mv(4)\l"];
    Xca7ba83f9203c7b7_2 -> Xca7ba83f9203c7b7_4;
    Xca7ba83f9203c7b7_2 [label="Storage Dead _6\lStorage Dead _5\lStorage Live _8\l8 <- Use(mv(3))\l0 <- Adt{1} (mv(8))\lStorage Dead _8\lStorage Dead _4\lGoto\l"];
    Xca7ba83f9203c7b7_3 -> Xca7ba83f9203c7b7_4;
    Xca7ba83f9203c7b7_3 [label="Storage Dead _6\lStorage Dead _5\l0 <- Adt{0} (const ())\lStorage Dead _4\lDrop 3\l"];
    Xca7ba83f9203c7b7_4 [label="Return\l"];
    Xca7ba83f9203c7b7_5 -> Xca7ba83f9203c7b7_6;
    Xca7ba83f9203c7b7_5 [label="Drop 3\l"];
    Xca7ba83f9203c7b7_6 [label="Resume\l"];
  }
  Xca7ba83f9203c7b7_0 -> Xcfe09b4e9e0e61ca_0 [label="mv(5),mv(6)"];
  subgraph cluster_208 {
    label="<core::ops::Range<usize> \nas \ncore::iter::DoubleEndedIt\nerator>::try_rfold::<(), \n{closure@core::iter::Doub\nleEndedIterator::rfind::c\nheck<usize, \n{closure@core::str::patte\nrn::simd_contains::{closu\nre#0}}>::{closure#0}}, \ncore::ops::ControlFlow<us\nize>>";
    style="filled";
    color=lightgray;
    node_209 [label="LOCALS\l0 = core::ops::ControlFlow<usize>\l1 = &mut core::ops::Range<usize>\l2 = ()\l3 = {closure@core::iter::DoubleEndedIterator::rfind::check<usize, {closure@core::str::pattern::simd_contains::{closure#0}}>::{closure#0}}\l4 = ()\l5 = core::option::Option<usize>\l6 = isize\l7 = usize\l8 = core::ops::ControlFlow<core::ops::ControlFlow<usize, core::convert::Infallible>>\l9 = core::ops::ControlFlow<usize>\l10 = &mut {closure@core::iter::DoubleEndedIterator::rfind::check<usize, {closure@core::str::pattern::simd_contains::{closure#0}}>::{closure#0}}\l11 = ((), usize)\l12 = ()\l13 = isize\l14 = core::ops::ControlFlow<usize, core::convert::Infallible>\l15 = ()\l16 = ()\l17 = bool\l", style="filled", color=palegreen3];
    X10dd4e431911e715_0 -> X10dd4e431911e715_1;
    X10dd4e431911e715_0 [label="Storage Live _4\l17 <- Use(const bool)\l4 <- Use(mv(2))\lGoto\l"];
    X10dd4e431911e715_1 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_1 -> X10dd4e431911e715_2 [label="5"];
    X10dd4e431911e715_1 [label="Storage Live _5\lCall\l"];
    X10dd4e431911e715_2 -> X10dd4e431911e715_3 [label="1"];
    X10dd4e431911e715_2 -> X10dd4e431911e715_10 [label="0"];
    X10dd4e431911e715_2 -> X10dd4e431911e715_6 [label="other"];
    X10dd4e431911e715_2 [label="6 <- Discriminant(5)\lSwitchInt mv(6)\l"];
    X10dd4e431911e715_3 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_3 -> X10dd4e431911e715_4 [label="9"];
    X10dd4e431911e715_3 [label="7 <- Use(mv((5 as variant 1).0))\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- &mut 3\lStorage Live _11\lStorage Live _12\l17 <- Use(const bool)\l12 <- Use(mv(4))\l11 <- Tuple (mv(12), cp(7))\lCall\l"];
    X10dd4e431911e715_4 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_4 -> X10dd4e431911e715_5 [label="8"];
    X10dd4e431911e715_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _10\lCall\l"];
    X10dd4e431911e715_5 -> X10dd4e431911e715_7 [label="0"];
    X10dd4e431911e715_5 -> X10dd4e431911e715_8 [label="1"];
    X10dd4e431911e715_5 -> X10dd4e431911e715_6 [label="other"];
    X10dd4e431911e715_5 [label="Storage Dead _9\l13 <- Discriminant(8)\lSwitchInt mv(13)\l"];
    X10dd4e431911e715_6 [label="Unreachable\l"];
    X10dd4e431911e715_7 -> X10dd4e431911e715_1;
    X10dd4e431911e715_7 [label="15 <- Use(mv((8 as variant 0).0))\l17 <- Use(const bool)\l4 <- Use(cp(15))\lStorage Dead _8\lStorage Dead _5\lGoto\l"];
    X10dd4e431911e715_8 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_8 -> X10dd4e431911e715_9 [label="0"];
    X10dd4e431911e715_8 [label="14 <- Use(mv((8 as variant 1).0))\lCall\l"];
    X10dd4e431911e715_9 -> X10dd4e431911e715_13;
    X10dd4e431911e715_9 [label="Storage Dead _8\lStorage Dead _5\lStorage Dead _4\lDrop 3\l"];
    X10dd4e431911e715_10 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_10 -> X10dd4e431911e715_11;
    X10dd4e431911e715_10 [label="Drop 5\l"];
    X10dd4e431911e715_11 -> X10dd4e431911e715_17 [label="Cleanup"];
    X10dd4e431911e715_11 -> X10dd4e431911e715_12 [label="0"];
    X10dd4e431911e715_11 [label="Storage Dead _5\lStorage Live _16\l17 <- Use(const bool)\l16 <- Use(mv(4))\lCall\l"];
    X10dd4e431911e715_12 -> X10dd4e431911e715_13;
    X10dd4e431911e715_12 [label="Storage Dead _16\lStorage Dead _4\lDrop 3\l"];
    X10dd4e431911e715_13 [label="Return\l"];
    X10dd4e431911e715_14 -> X10dd4e431911e715_15;
    X10dd4e431911e715_14 [label="Drop 3\l"];
    X10dd4e431911e715_15 [label="Resume\l"];
    X10dd4e431911e715_16 -> X10dd4e431911e715_14;
    X10dd4e431911e715_16 [label="Drop 4\l"];
    X10dd4e431911e715_17 -> X10dd4e431911e715_14 [label="0"];
    X10dd4e431911e715_17 -> X10dd4e431911e715_16 [label="other"];
    X10dd4e431911e715_17 [label="SwitchInt cp(17)\l"];
  }
  X10dd4e431911e715_1 -> X60da0a2f817399aa_0 [label="cp(1)"];
  X10dd4e431911e715_3 -> Xca7ba83f9203c7b7_0 [label="mv(10),mv(11)"];
  X10dd4e431911e715_4 -> Xde070dece53474e3_0 [label="mv(9)"];
  X10dd4e431911e715_8 -> X8ed325407300fe1c_0 [label="mv(14)"];
  X10dd4e431911e715_11 -> Xd65c21665460170_0 [label="mv(16)"];
  subgraph cluster_210 {
    label="core::iter::Iterator::any\n::check::<&[u8], \n{closure@core::str::patte\nrn::simd_contains::{closu\nre#1}}>::{closure#0}";
    style="filled";
    color=lightgray;
    node_211 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = &mut {closure@core::iter::Iterator::any::check<&[u8], {closure@core::str::pattern::simd_contains::{closure#1}}>::{closure#0}}\l2 = ()\l3 = &[u8]\l4 = bool\l5 = &mut {closure@core::str::pattern::simd_contains::{closure#1}}\l6 = (&[u8],)\l", style="filled", color=palegreen3];
    Xf5ca7d11e54962a8_0 -> Xf5ca7d11e54962a8_1 [label="4"];
    Xf5ca7d11e54962a8_0 [label="Storage Live _4\lStorage Live _5\l5 <- &mut (*1).0\lStorage Live _6\l6 <- Tuple (cp(3))\lCall\l"];
    Xf5ca7d11e54962a8_1 -> Xf5ca7d11e54962a8_3 [label="0"];
    Xf5ca7d11e54962a8_1 -> Xf5ca7d11e54962a8_2 [label="other"];
    Xf5ca7d11e54962a8_1 [label="SwitchInt mv(4)\l"];
    Xf5ca7d11e54962a8_2 -> Xf5ca7d11e54962a8_4;
    Xf5ca7d11e54962a8_2 [label="Storage Dead _6\lStorage Dead _5\l0 <- Use(const core::ops::ControlFlow<()>)\lGoto\l"];
    Xf5ca7d11e54962a8_3 -> Xf5ca7d11e54962a8_4;
    Xf5ca7d11e54962a8_3 [label="Storage Dead _6\lStorage Dead _5\l0 <- Use(const core::ops::ControlFlow<()>)\lGoto\l"];
    Xf5ca7d11e54962a8_4 [label="Storage Dead _4\lReturn\l"];
  }
  Xf5ca7d11e54962a8_0 -> X2e4cd4eabe4b6e2f_0 [label="mv(5),mv(6)"];
  subgraph cluster_212 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::Iterator>::zi\np::<&[u8]>";
    style="filled";
    color=lightgray;
    node_213 [label="LOCALS\l0 = core::iter::Zip<core::slice::Iter<'_, u8>, core::slice::Iter<'_, u8>>\l1 = core::slice::Iter<'_, u8>\l2 = &[u8]\l3 = core::slice::Iter<'_, u8>\l4 = core::slice::Iter<'_, u8>\l5 = bool\l", style="filled", color=palegreen3];
    X51463e88ade07969_0 -> X51463e88ade07969_4 [label="Cleanup"];
    X51463e88ade07969_0 -> X51463e88ade07969_1 [label="4"];
    X51463e88ade07969_0 [label="Storage Live _3\l5 <- Use(const bool)\l3 <- Use(mv(1))\lStorage Live _4\lCall\l"];
    X51463e88ade07969_1 -> X51463e88ade07969_4 [label="Cleanup"];
    X51463e88ade07969_1 -> X51463e88ade07969_5 [label="0"];
    X51463e88ade07969_1 [label="5 <- Use(const bool)\lCall\l"];
    X51463e88ade07969_2 [label="Resume\l"];
    X51463e88ade07969_3 -> X51463e88ade07969_2;
    X51463e88ade07969_3 [label="Drop 3\l"];
    X51463e88ade07969_4 -> X51463e88ade07969_2 [label="0"];
    X51463e88ade07969_4 -> X51463e88ade07969_3 [label="other"];
    X51463e88ade07969_4 [label="SwitchInt cp(5)\l"];
    X51463e88ade07969_5 [label="Storage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  X51463e88ade07969_0 -> X76bf45e1e116d8f6_0 [label="mv(2)"];
  X51463e88ade07969_1 -> X5f2c783b3c15a203_0 [label="mv(3),mv(4)"];
  subgraph cluster_214 {
    label="<core::slice::Windows<'_,\n \nu8> \nas \ncore::iter::Iterator>::tr\ny_fold::<(), \n{closure@core::iter::Iter\nator::any::check<&[u8], \n{closure@core::str::patte\nrn::simd_contains::{closu\nre#1}}>::{closure#0}}, \ncore::ops::ControlFlow<()\n>>";
    style="filled";
    color=lightgray;
    node_215 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = &mut core::slice::Windows<'_, u8>\l2 = ()\l3 = {closure@core::iter::Iterator::any::check<&[u8], {closure@core::str::pattern::simd_contains::{closure#1}}>::{closure#0}}\l4 = ()\l5 = core::option::Option<&[u8]>\l6 = isize\l7 = &[u8]\l8 = core::ops::ControlFlow<core::ops::ControlFlow<(), core::convert::Infallible>>\l9 = core::ops::ControlFlow<()>\l10 = &mut {closure@core::iter::Iterator::any::check<&[u8], {closure@core::str::pattern::simd_contains::{closure#1}}>::{closure#0}}\l11 = ((), &[u8])\l12 = ()\l13 = isize\l14 = core::ops::ControlFlow<(), core::convert::Infallible>\l15 = ()\l16 = ()\l17 = bool\l", style="filled", color=palegreen3];
    X226a0853acd2672b_0 -> X226a0853acd2672b_1;
    X226a0853acd2672b_0 [label="Storage Live _4\l17 <- Use(const bool)\l4 <- Use(mv(2))\lGoto\l"];
    X226a0853acd2672b_1 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_1 -> X226a0853acd2672b_2 [label="5"];
    X226a0853acd2672b_1 [label="Storage Live _5\lCall\l"];
    X226a0853acd2672b_2 -> X226a0853acd2672b_3 [label="1"];
    X226a0853acd2672b_2 -> X226a0853acd2672b_10 [label="0"];
    X226a0853acd2672b_2 -> X226a0853acd2672b_6 [label="other"];
    X226a0853acd2672b_2 [label="6 <- Discriminant(5)\lSwitchInt mv(6)\l"];
    X226a0853acd2672b_3 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_3 -> X226a0853acd2672b_4 [label="9"];
    X226a0853acd2672b_3 [label="7 <- Use(mv((5 as variant 1).0))\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- &mut 3\lStorage Live _11\lStorage Live _12\l17 <- Use(const bool)\l12 <- Use(mv(4))\l11 <- Tuple (mv(12), cp(7))\lCall\l"];
    X226a0853acd2672b_4 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_4 -> X226a0853acd2672b_5 [label="8"];
    X226a0853acd2672b_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _10\lCall\l"];
    X226a0853acd2672b_5 -> X226a0853acd2672b_7 [label="0"];
    X226a0853acd2672b_5 -> X226a0853acd2672b_8 [label="1"];
    X226a0853acd2672b_5 -> X226a0853acd2672b_6 [label="other"];
    X226a0853acd2672b_5 [label="Storage Dead _9\l13 <- Discriminant(8)\lSwitchInt mv(13)\l"];
    X226a0853acd2672b_6 [label="Unreachable\l"];
    X226a0853acd2672b_7 -> X226a0853acd2672b_1;
    X226a0853acd2672b_7 [label="15 <- Use(mv((8 as variant 0).0))\l17 <- Use(const bool)\l4 <- Use(cp(15))\lStorage Dead _8\lStorage Dead _5\lGoto\l"];
    X226a0853acd2672b_8 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_8 -> X226a0853acd2672b_9 [label="0"];
    X226a0853acd2672b_8 [label="14 <- Use(mv((8 as variant 1).0))\lCall\l"];
    X226a0853acd2672b_9 -> X226a0853acd2672b_13;
    X226a0853acd2672b_9 [label="Storage Dead _8\lStorage Dead _5\lStorage Dead _4\lDrop 3\l"];
    X226a0853acd2672b_10 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_10 -> X226a0853acd2672b_11;
    X226a0853acd2672b_10 [label="Drop 5\l"];
    X226a0853acd2672b_11 -> X226a0853acd2672b_17 [label="Cleanup"];
    X226a0853acd2672b_11 -> X226a0853acd2672b_12 [label="0"];
    X226a0853acd2672b_11 [label="Storage Dead _5\lStorage Live _16\l17 <- Use(const bool)\l16 <- Use(mv(4))\lCall\l"];
    X226a0853acd2672b_12 -> X226a0853acd2672b_13;
    X226a0853acd2672b_12 [label="Storage Dead _16\lStorage Dead _4\lDrop 3\l"];
    X226a0853acd2672b_13 [label="Return\l"];
    X226a0853acd2672b_14 -> X226a0853acd2672b_15;
    X226a0853acd2672b_14 [label="Drop 3\l"];
    X226a0853acd2672b_15 [label="Resume\l"];
    X226a0853acd2672b_16 -> X226a0853acd2672b_14;
    X226a0853acd2672b_16 [label="Drop 4\l"];
    X226a0853acd2672b_17 -> X226a0853acd2672b_14 [label="0"];
    X226a0853acd2672b_17 -> X226a0853acd2672b_16 [label="other"];
    X226a0853acd2672b_17 [label="SwitchInt cp(17)\l"];
  }
  X226a0853acd2672b_1 -> X5d74617bf2244196_0 [label="cp(1)"];
  X226a0853acd2672b_3 -> Xf5ca7d11e54962a8_0 [label="mv(10),mv(11)"];
  X226a0853acd2672b_4 -> X520c4c982105df50_0 [label="mv(9)"];
  X226a0853acd2672b_8 -> Xdbc4cc7f242d80ee_0 [label="mv(14)"];
  X226a0853acd2672b_11 -> X28203ac4004097e4_0 [label="mv(16)"];
  subgraph cluster_216 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::TrustedRandom\nAccessNoCoerce>::size";
    style="filled";
    color=lightgray;
    node_217 [label="LOCALS\l0 = usize\l1 = &core::slice::Iter<'_, u8>\l2 = (usize, core::option::Option<usize>)\l", style="filled", color=palegreen3];
    X8c62c323f8ae3452_0 -> X8c62c323f8ae3452_1 [label="2"];
    X8c62c323f8ae3452_0 [label="Storage Live _2\lCall\l"];
    X8c62c323f8ae3452_1 [label="0 <- Use(cp(2.0))\lStorage Dead _2\lReturn\l"];
  }
  X8c62c323f8ae3452_0 -> Xd3628f2b21e15873_0 [label="mv(1)"];
  subgraph cluster_218 {
    label="core::array::<impl \ncore::ops::IndexMut<core:\n:ops::RangeFrom<usize>> \nfor \n[core::mem::MaybeUninit<u\n8>; \n257]>::index_mut";
    style="filled";
    color=lightgray;
    node_219 [label="LOCALS\l0 = &mut [core::mem::MaybeUninit<u8>]\l1 = &mut [core::mem::MaybeUninit<u8>; 257]\l2 = core::ops::RangeFrom<usize>\l3 = &mut [core::mem::MaybeUninit<u8>]\l", style="filled", color=palegreen3];
    X5af4eaf0105356ba_0 -> X5af4eaf0105356ba_1 [label="0"];
    X5af4eaf0105356ba_0 [label="3 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    X5af4eaf0105356ba_1 [label="Return\l"];
  }
  X5af4eaf0105356ba_0 -> X6a111ef28830600d_0 [label="mv(3),mv(2)"];
  subgraph cluster_220 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_221 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    X7b4e898ba35115b5_0 -> X7b4e898ba35115b5_1 [label="0"];
    X7b4e898ba35115b5_0 [label="Call\l"];
    X7b4e898ba35115b5_1 [label="Return\l"];
  }
  X7b4e898ba35115b5_0 -> X1ccfc07345856a22_0 [label="mv(1),mv(2)"];
  subgraph cluster_222 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_223 [label="LOCALS\l0 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X227aea0ec470d5ba_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_224 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<u\n8>]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_225 [label="LOCALS\l0 = *mut core::mem::MaybeUninit<u8>\l1 = &mut [core::mem::MaybeUninit<u8>]\l2 = *mut [core::mem::MaybeUninit<u8>]\l", style="filled", color=palegreen3];
    Xc3ea6fb49488af5d_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_226 {
    label="core::slice::<impl \n[u8]>::first_chunk::<8>";
    style="filled";
    color=lightgray;
    node_227 [label="LOCALS\l0 = core::option::Option<&[u8; 8]>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = &[u8; 8]\l5 = *const [u8; 8]\l6 = *const u8\l7 = *const [u8]\l", style="filled", color=palegreen3];
    X9b6fa2c662436654_0 -> X9b6fa2c662436654_2 [label="0"];
    X9b6fa2c662436654_0 -> X9b6fa2c662436654_1 [label="other"];
    X9b6fa2c662436654_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X9b6fa2c662436654_1 -> X9b6fa2c662436654_3;
    X9b6fa2c662436654_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[u8; 8]>)\lGoto\l"];
    X9b6fa2c662436654_2 -> X9b6fa2c662436654_3;
    X9b6fa2c662436654_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    X9b6fa2c662436654_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_228 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first_chu\nnk::<1>";
    style="filled";
    color=lightgray;
    node_229 [label="LOCALS\l0 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = bool\l3 = usize\l4 = &[pinocchio::account_info::AccountInfo; 1]\l5 = *const [pinocchio::account_info::AccountInfo; 1]\l6 = *const pinocchio::account_info::AccountInfo\l7 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    Xfc3dc8b7260a8e64_0 -> Xfc3dc8b7260a8e64_2 [label="0"];
    Xfc3dc8b7260a8e64_0 -> Xfc3dc8b7260a8e64_1 [label="other"];
    Xfc3dc8b7260a8e64_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xfc3dc8b7260a8e64_1 -> Xfc3dc8b7260a8e64_3;
    Xfc3dc8b7260a8e64_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>)\lGoto\l"];
    Xfc3dc8b7260a8e64_2 -> Xfc3dc8b7260a8e64_3;
    Xfc3dc8b7260a8e64_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    Xfc3dc8b7260a8e64_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_230 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::get_unche\ncked::<core::ops::RangeTo\n<usize>>";
    style="filled";
    color=lightgray;
    node_231 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeTo<usize>\l3 = *const [pinocchio::account_info::AccountInfo]\l4 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    Xfafc3ed6df8f1eb_0 -> Xfafc3ed6df8f1eb_1 [label="3"];
    Xfafc3ed6df8f1eb_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    Xfafc3ed6df8f1eb_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xfafc3ed6df8f1eb_0 -> Xf36307cdfb4d1bcc_0 [label="mv(2),mv(4)"];
  subgraph cluster_232 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<us\nize>";
    style="filled";
    color=lightgray;
    node_233 [label="LOCALS\l0 = &u8\l1 = &[u8]\l2 = usize\l3 = *const u8\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X2cdd8b2d70a4eaed_0 -> X2cdd8b2d70a4eaed_1 [label="3"];
    X2cdd8b2d70a4eaed_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X2cdd8b2d70a4eaed_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X2cdd8b2d70a4eaed_0 -> Xfb10f054466970ae_0 [label="mv(2),mv(4)"];
  subgraph cluster_234 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<co\nre::ops::Range<usize>>";
    style="filled";
    color=lightgray;
    node_235 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l3 = *const [u8]\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X73286d278f91d44b_0 -> X73286d278f91d44b_1 [label="3"];
    X73286d278f91d44b_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X73286d278f91d44b_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X73286d278f91d44b_0 -> Xc1e109de9d1a8745_0 [label="mv(2),mv(4)"];
  subgraph cluster_236 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<u\n8>]>::get_unchecked_mut::\n<usize>";
    style="filled";
    color=lightgray;
    node_237 [label="LOCALS\l0 = &mut core::mem::MaybeUninit<u8>\l1 = &mut [core::mem::MaybeUninit<u8>]\l2 = usize\l3 = *mut core::mem::MaybeUninit<u8>\l4 = *mut [core::mem::MaybeUninit<u8>]\l", style="filled", color=palegreen3];
    X9168001a8578bae9_0 -> X9168001a8578bae9_1 [label="3"];
    X9168001a8578bae9_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw mut (*1)\lCall\l"];
    X9168001a8578bae9_1 [label="Storage Dead _4\l0 <- &mut (*3)\lStorage Dead _3\lReturn\l"];
  }
  X9168001a8578bae9_0 -> Xab34a9c4e6a3b5b3_0 [label="mv(2),mv(4)"];
  subgraph cluster_238 {
    label="core::slice::<impl \n[pinocchio_log::logger::A\nrgument]>::iter";
    style="filled";
    color=lightgray;
    node_239 [label="LOCALS\l0 = core::slice::Iter<'_, pinocchio_log::logger::Argument>\l1 = &[pinocchio_log::logger::Argument]\l", style="filled", color=palegreen3];
    X1c38e366222f5f2b_0 -> X1c38e366222f5f2b_1 [label="0"];
    X1c38e366222f5f2b_0 [label="Call\l"];
    X1c38e366222f5f2b_1 [label="Return\l"];
  }
  X1c38e366222f5f2b_0 -> Xc3a13531c266d7fd_0 [label="mv(1)"];
  subgraph cluster_240 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first";
    style="filled";
    color=lightgray;
    node_241 [label="LOCALS\l0 = core::option::Option<&pinocchio::account_info::AccountInfo>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = usize\l3 = bool\l4 = &pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X7872bd54ee488e30_0 -> X7872bd54ee488e30_2 [label="0"];
    X7872bd54ee488e30_0 -> X7872bd54ee488e30_1 [label="other"];
    X7872bd54ee488e30_0 [label="2 <- Len((*1))\l3 <- Ge(mv(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X7872bd54ee488e30_1 -> X7872bd54ee488e30_3;
    X7872bd54ee488e30_1 [label="4 <- & (*1)[0]\l0 <- Adt{1} (cp(4))\lGoto\l"];
    X7872bd54ee488e30_2 -> X7872bd54ee488e30_3;
    X7872bd54ee488e30_2 [label="0 <- Use(const core::option::Option<&pinocchio::account_info::AccountInfo>)\lGoto\l"];
    X7872bd54ee488e30_3 [label="Return\l"];
  }
  subgraph cluster_242 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<u\n8>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_243 [label="LOCALS\l0 = *const core::mem::MaybeUninit<u8>\l1 = &[core::mem::MaybeUninit<u8>]\l2 = *const [core::mem::MaybeUninit<u8>]\l", style="filled", color=palegreen3];
    X975bf2a3f5955f9_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_244 {
    label="core::slice::<impl \n[u8]>::as_ptr";
    style="filled";
    color=lightgray;
    node_245 [label="LOCALS\l0 = *const u8\l1 = &[u8]\l2 = *const [u8]\l", style="filled", color=palegreen3];
    X9e6ee8713e773f38_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_246 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_247 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X2eb64500281ee9c3_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_248 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<u\n8>]>::is_empty";
    style="filled";
    color=lightgray;
    node_249 [label="LOCALS\l0 = bool\l1 = &[core::mem::MaybeUninit<u8>]\l2 = usize\l", style="filled", color=palegreen3];
    X6915bb02c5a40218_0 [label="Storage Live _2\l2 <- PtrMetadata(cp(1))\l0 <- Eq(mv(2), const ?_usize)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_250 {
    label="core::slice::from_raw_par\nts::<'_, \npinocchio::account_info::\nAccountInfo>";
    style="filled";
    color=lightgray;
    node_251 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l3 = bool\l4 = ()\l5 = *mut ()\l6 = usize\l7 = usize\l8 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X3ef89f86f6c5d4d6_0 -> X3ef89f86f6c5d4d6_3 [label="0"];
    X3ef89f86f6c5d4d6_0 -> X3ef89f86f6c5d4d6_1 [label="other"];
    X3ef89f86f6c5d4d6_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X3ef89f86f6c5d4d6_1 -> X3ef89f86f6c5d4d6_2 [label="4"];
    X3ef89f86f6c5d4d6_1 [label="Storage Live _5\l5 <- Cast-PtrToPtr cp(1)\lStorage Live _6\l6 <- SizeOf :: pinocchio::account_info::AccountInfo\lStorage Live _7\l7 <- AlignOf :: pinocchio::account_info::AccountInfo\lCall\l"];
    X3ef89f86f6c5d4d6_2 -> X3ef89f86f6c5d4d6_3;
    X3ef89f86f6c5d4d6_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X3ef89f86f6c5d4d6_3 [label="Storage Dead _3\lStorage Live _8\l8 <- *([pinocchio::account_info::AccountInfo]) (cp(1), cp(2))\l0 <- & (*8)\lStorage Dead _8\lReturn\l"];
  }
  X3ef89f86f6c5d4d6_1 -> X63f7a61774eb1235_0 [label="mv(5),mv(6),mv(7),cp(2)"];
  subgraph cluster_252 {
    label="core::slice::from_raw_par\nts::precondition_check";
    style="filled";
    color=lightgray;
    node_253 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X63f7a61774eb1235_0 -> X63f7a61774eb1235_10 [label="15"];
    X63f7a61774eb1235_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X63f7a61774eb1235_1 -> X63f7a61774eb1235_11 [label="0"];
    X63f7a61774eb1235_1 -> X63f7a61774eb1235_12 [label="other"];
    X63f7a61774eb1235_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X63f7a61774eb1235_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X63f7a61774eb1235_3 -> X63f7a61774eb1235_5;
    X63f7a61774eb1235_3 [label="Goto\l"];
    X63f7a61774eb1235_4 -> X63f7a61774eb1235_5;
    X63f7a61774eb1235_4 [label="Storage Dead _6\lGoto\l"];
    X63f7a61774eb1235_5 [label="Call\l"];
    X63f7a61774eb1235_6 -> X63f7a61774eb1235_4 [label="0"];
    X63f7a61774eb1235_6 -> X63f7a61774eb1235_1 [label="other"];
    X63f7a61774eb1235_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X63f7a61774eb1235_7 -> X63f7a61774eb1235_4;
    X63f7a61774eb1235_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X63f7a61774eb1235_8 -> X63f7a61774eb1235_6 [label="0"];
    X63f7a61774eb1235_8 -> X63f7a61774eb1235_7 [label="other"];
    X63f7a61774eb1235_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X63f7a61774eb1235_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X63f7a61774eb1235_10 -> X63f7a61774eb1235_8 [label="1"];
    X63f7a61774eb1235_10 -> X63f7a61774eb1235_9 [label="other"];
    X63f7a61774eb1235_10 [label="SwitchInt mv(15)\l"];
    X63f7a61774eb1235_11 -> X63f7a61774eb1235_14;
    X63f7a61774eb1235_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X63f7a61774eb1235_12 -> X63f7a61774eb1235_13;
    X63f7a61774eb1235_12 [label="Assert cp(20) == false\l"];
    X63f7a61774eb1235_13 -> X63f7a61774eb1235_14;
    X63f7a61774eb1235_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X63f7a61774eb1235_14 -> X63f7a61774eb1235_3 [label="0"];
    X63f7a61774eb1235_14 -> X63f7a61774eb1235_2 [label="other"];
    X63f7a61774eb1235_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X63f7a61774eb1235_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X63f7a61774eb1235_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X63f7a61774eb1235_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_254 {
    label="core::slice::from_raw_par\nts_mut::precondition_chec\nk";
    style="filled";
    color=lightgray;
    node_255 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X63018216f9c6ad5a_0 -> X63018216f9c6ad5a_10 [label="15"];
    X63018216f9c6ad5a_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X63018216f9c6ad5a_1 -> X63018216f9c6ad5a_11 [label="0"];
    X63018216f9c6ad5a_1 -> X63018216f9c6ad5a_12 [label="other"];
    X63018216f9c6ad5a_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X63018216f9c6ad5a_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X63018216f9c6ad5a_3 -> X63018216f9c6ad5a_5;
    X63018216f9c6ad5a_3 [label="Goto\l"];
    X63018216f9c6ad5a_4 -> X63018216f9c6ad5a_5;
    X63018216f9c6ad5a_4 [label="Storage Dead _6\lGoto\l"];
    X63018216f9c6ad5a_5 [label="Call\l"];
    X63018216f9c6ad5a_6 -> X63018216f9c6ad5a_4 [label="0"];
    X63018216f9c6ad5a_6 -> X63018216f9c6ad5a_1 [label="other"];
    X63018216f9c6ad5a_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X63018216f9c6ad5a_7 -> X63018216f9c6ad5a_4;
    X63018216f9c6ad5a_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X63018216f9c6ad5a_8 -> X63018216f9c6ad5a_6 [label="0"];
    X63018216f9c6ad5a_8 -> X63018216f9c6ad5a_7 [label="other"];
    X63018216f9c6ad5a_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X63018216f9c6ad5a_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X63018216f9c6ad5a_10 -> X63018216f9c6ad5a_8 [label="1"];
    X63018216f9c6ad5a_10 -> X63018216f9c6ad5a_9 [label="other"];
    X63018216f9c6ad5a_10 [label="SwitchInt mv(15)\l"];
    X63018216f9c6ad5a_11 -> X63018216f9c6ad5a_14;
    X63018216f9c6ad5a_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X63018216f9c6ad5a_12 -> X63018216f9c6ad5a_13;
    X63018216f9c6ad5a_12 [label="Assert cp(20) == false\l"];
    X63018216f9c6ad5a_13 -> X63018216f9c6ad5a_14;
    X63018216f9c6ad5a_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X63018216f9c6ad5a_14 -> X63018216f9c6ad5a_3 [label="0"];
    X63018216f9c6ad5a_14 -> X63018216f9c6ad5a_2 [label="other"];
    X63018216f9c6ad5a_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X63018216f9c6ad5a_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X63018216f9c6ad5a_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X63018216f9c6ad5a_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_256 {
    label="core::slice::Iter::<'_, \npinocchio_log::logger::Ar\ngument>::new";
    style="filled";
    color=lightgray;
    node_257 [label="LOCALS\l0 = core::slice::Iter<'_, pinocchio_log::logger::Argument>\l1 = &[pinocchio_log::logger::Argument]\l2 = usize\l3 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l4 = core::ptr::NonNull<[pinocchio_log::logger::Argument]>\l5 = *const pinocchio_log::logger::Argument\l6 = *mut pinocchio_log::logger::Argument\l7 = *mut pinocchio_log::logger::Argument\l8 = *const pinocchio_log::logger::Argument\l9 = *const [pinocchio_log::logger::Argument]\l10 = *const pinocchio_log::logger::Argument\l", style="filled", color=palegreen3];
    Xc3a13531c266d7fd_0 -> Xc3a13531c266d7fd_2 [label="0"];
    Xc3a13531c266d7fd_0 -> Xc3a13531c266d7fd_1 [label="other"];
    Xc3a13531c266d7fd_0 [label="2 <- PtrMetadata(cp(1))\lStorage Live _4\l9 <- &raw (*1)\l4 <- Adt{0} (cp(9))\l10 <- Cast-PtrToPtr cp(9)\l3 <- Adt{0} (cp(10))\lStorage Dead _4\lStorage Live _5\lSwitchInt const bool\l"];
    Xc3a13531c266d7fd_1 -> Xc3a13531c266d7fd_3;
    Xc3a13531c266d7fd_1 [label="5 <- Cast-Transmute cp(2)\lGoto\l"];
    Xc3a13531c266d7fd_2 -> Xc3a13531c266d7fd_3;
    Xc3a13531c266d7fd_2 [label="Storage Live _6\lStorage Live _7\l7 <- Cast-PtrToPtr cp(9)\l6 <- Offset(cp(7), cp(2))\lStorage Dead _7\l5 <- Cast-PtrToPtr mv(6)\lStorage Dead _6\lGoto\l"];
    Xc3a13531c266d7fd_3 [label="Storage Live _8\l8 <- Use(cp(5))\l0 <- Adt{0} (cp(3), mv(8), const core::marker::PhantomData<&pinocchio_log::logger::Argument>)\lStorage Dead _8\lStorage Dead _5\lReturn\l"];
  }
  subgraph cluster_258 {
    label="core::slice::iter::<impl \ncore::iter::IntoIterator \nfor \n&[u8]>::into_iter";
    style="filled";
    color=lightgray;
    node_259 [label="LOCALS\l0 = core::slice::Iter<'_, u8>\l1 = &[u8]\l2 = usize\l3 = core::ptr::NonNull<u8>\l4 = core::ptr::NonNull<[u8]>\l5 = *const u8\l6 = *mut u8\l7 = *mut u8\l8 = *const u8\l9 = *const [u8]\l10 = *const u8\l", style="filled", color=palegreen3];
    X76bf45e1e116d8f6_0 -> X76bf45e1e116d8f6_2 [label="0"];
    X76bf45e1e116d8f6_0 -> X76bf45e1e116d8f6_1 [label="other"];
    X76bf45e1e116d8f6_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _9\lStorage Live _10\l2 <- PtrMetadata(cp(1))\lStorage Live _4\l9 <- &raw (*1)\l4 <- Adt{0} (cp(9))\l10 <- Cast-PtrToPtr cp(9)\l3 <- Adt{0} (cp(10))\lStorage Dead _4\lStorage Live _5\lSwitchInt const bool\l"];
    X76bf45e1e116d8f6_1 -> X76bf45e1e116d8f6_3;
    X76bf45e1e116d8f6_1 [label="5 <- Cast-Transmute cp(2)\lGoto\l"];
    X76bf45e1e116d8f6_2 -> X76bf45e1e116d8f6_3;
    X76bf45e1e116d8f6_2 [label="Storage Live _6\lStorage Live _7\l7 <- Cast-PtrToPtr cp(9)\l6 <- Offset(cp(7), cp(2))\lStorage Dead _7\l5 <- Cast-PtrToPtr mv(6)\lStorage Dead _6\lGoto\l"];
    X76bf45e1e116d8f6_3 [label="Storage Live _8\l8 <- Use(cp(5))\l0 <- Adt{0} (cp(3), mv(8), const core::marker::PhantomData<&u8>)\lStorage Dead _8\lStorage Dead _5\lStorage Dead _10\lStorage Dead _9\lStorage Dead _3\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_260 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_261 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xe8b88bdd28569b08_0 -> Xe8b88bdd28569b08_1 [label="0"];
    Xe8b88bdd28569b08_0 [label="Call\l"];
    Xe8b88bdd28569b08_1 [label="Return\l"];
  }
  Xe8b88bdd28569b08_0 -> Xbf13fd323824b7e4_0 [label="mv(2),mv(1)"];
  subgraph cluster_262 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[pinocchio::account_info:\n:AccountInfo]>::index";
    style="filled";
    color=lightgray;
    node_263 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X465c7d4710d81d1e_0 -> X465c7d4710d81d1e_1 [label="0"];
    X465c7d4710d81d1e_0 [label="Call\l"];
    X465c7d4710d81d1e_1 [label="Return\l"];
  }
  X465c7d4710d81d1e_0 -> Xa7ac216995a185b1_0 [label="mv(2),mv(1)"];
  subgraph cluster_264 {
    label="core::slice::index::<impl\n \ncore::ops::IndexMut<core:\n:ops::RangeFrom<usize>> \nfor \n[core::mem::MaybeUninit<u\n8>]>::index_mut";
    style="filled";
    color=lightgray;
    node_265 [label="LOCALS\l0 = &mut [core::mem::MaybeUninit<u8>]\l1 = &mut [core::mem::MaybeUninit<u8>]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X6a111ef28830600d_0 -> X6a111ef28830600d_1 [label="0"];
    X6a111ef28830600d_0 [label="Call\l"];
    X6a111ef28830600d_1 [label="Return\l"];
  }
  X6a111ef28830600d_0 -> X69095e180aaa69cc_0 [label="mv(2),mv(1)"];
  subgraph cluster_266 {
    label="core::slice::memchr::memc\nhr";
    style="filled";
    color=lightgray;
    node_267 [label="LOCALS\l0 = core::option::Option<usize>\l1 = u8\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = bool\l7 = usize\l8 = bool\l9 = u8\l10 = usize\l11 = usize\l12 = bool\l13 = usize\l", style="filled", color=palegreen3];
    Xbfa38cc438d7300d_0 -> Xbfa38cc438d7300d_2 [label="0"];
    Xbfa38cc438d7300d_0 -> Xbfa38cc438d7300d_1 [label="other"];
    Xbfa38cc438d7300d_0 [label="Storage Live _3\l4 <- PtrMetadata(cp(2))\l3 <- Lt(cp(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xbfa38cc438d7300d_1 -> Xbfa38cc438d7300d_5;
    Xbfa38cc438d7300d_1 [label="Storage Live _11\lStorage Live _12\lStorage Live _5\l5 <- Use(const ?_usize)\lGoto\l"];
    Xbfa38cc438d7300d_2 -> Xbfa38cc438d7300d_3 [label="0"];
    Xbfa38cc438d7300d_2 [label="Storage Dead _3\lCall\l"];
    Xbfa38cc438d7300d_3 [label="Return\l"];
    Xbfa38cc438d7300d_4 -> Xbfa38cc438d7300d_3;
    Xbfa38cc438d7300d_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _3\lGoto\l"];
    Xbfa38cc438d7300d_5 -> Xbfa38cc438d7300d_10 [label="0"];
    Xbfa38cc438d7300d_5 -> Xbfa38cc438d7300d_6 [label="other"];
    Xbfa38cc438d7300d_5 [label="Storage Live _6\lStorage Live _7\l7 <- Use(cp(5))\l6 <- Lt(mv(7), cp(4))\lSwitchInt mv(6)\l"];
    Xbfa38cc438d7300d_6 -> Xbfa38cc438d7300d_7;
    Xbfa38cc438d7300d_6 [label="Storage Dead _7\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- Use(cp(5))\l11 <- Len((*2))\l12 <- Lt(cp(10), cp(11))\lAssert mv(12) == true\l"];
    Xbfa38cc438d7300d_7 -> Xbfa38cc438d7300d_9 [label="0"];
    Xbfa38cc438d7300d_7 -> Xbfa38cc438d7300d_8 [label="other"];
    Xbfa38cc438d7300d_7 [label="9 <- Use(cp((*2)[_10]))\l8 <- Eq(mv(9), cp(1))\lSwitchInt mv(8)\l"];
    Xbfa38cc438d7300d_8 -> Xbfa38cc438d7300d_4;
    Xbfa38cc438d7300d_8 [label="Storage Dead _10\lStorage Dead _9\lStorage Live _13\l13 <- Use(cp(5))\l0 <- Adt{1} (mv(13))\lStorage Dead _13\lStorage Dead _8\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xbfa38cc438d7300d_9 -> Xbfa38cc438d7300d_5;
    Xbfa38cc438d7300d_9 [label="Storage Dead _10\lStorage Dead _9\lStorage Dead _8\l5 <- Add(cp(5), const ?_usize)\lStorage Dead _6\lGoto\l"];
    Xbfa38cc438d7300d_10 -> Xbfa38cc438d7300d_4;
    Xbfa38cc438d7300d_10 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(const core::option::Option<usize>)\lStorage Dead _5\lGoto\l"];
  }
  Xbfa38cc438d7300d_2 -> X11f225f18df60610_0 [label="mv(1),mv(2)"];
  subgraph cluster_268 {
    label="core::option::Option::<&p\ninocchio::account_info::A\nccountInfo>::ok_or::<pino\ncchio::program_error::Pro\ngramError>";
    style="filled";
    color=lightgray;
    node_269 [label="LOCALS\l0 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l1 = core::option::Option<&pinocchio::account_info::AccountInfo>\l2 = pinocchio::program_error::ProgramError\l3 = isize\l4 = &pinocchio::account_info::AccountInfo\l5 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_2 [label="0"];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_3 [label="1"];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_1 [label="other"];
    X27f21f54126ae4f5_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X27f21f54126ae4f5_1 [label="Unreachable\l"];
    X27f21f54126ae4f5_2 -> X27f21f54126ae4f5_4;
    X27f21f54126ae4f5_2 [label="Storage Live _5\l5 <- Use(mv(2))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X27f21f54126ae4f5_3 -> X27f21f54126ae4f5_4;
    X27f21f54126ae4f5_3 [label="4 <- Use(mv((1 as variant 1).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X27f21f54126ae4f5_4 [label="Return\l"];
  }
  subgraph cluster_270 {
    label="core::option::Option::<&[\nu8; \n8]>::unwrap";
    style="filled";
    color=lightgray;
    node_271 [label="LOCALS\l0 = &[u8; 8]\l1 = core::option::Option<&[u8; 8]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X37e025db98323361_0 -> X37e025db98323361_2 [label="0"];
    X37e025db98323361_0 -> X37e025db98323361_3 [label="1"];
    X37e025db98323361_0 -> X37e025db98323361_1 [label="other"];
    X37e025db98323361_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X37e025db98323361_1 [label="Unreachable\l"];
    X37e025db98323361_2 [label="Call\l"];
    X37e025db98323361_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X37e025db98323361_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_272 {
    label="core::option::Option::<&[\npinocchio::account_info::\nAccountInfo; \n1]>::unwrap";
    style="filled";
    color=lightgray;
    node_273 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo; 1]\l1 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_2 [label="0"];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_3 [label="1"];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_1 [label="other"];
    X5d66149d59dd555d_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X5d66149d59dd555d_1 [label="Unreachable\l"];
    X5d66149d59dd555d_2 [label="Call\l"];
    X5d66149d59dd555d_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X5d66149d59dd555d_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_274 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::inspect_e\nrr::<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error}>";
    style="filled";
    color=lightgray;
    node_275 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l3 = isize\l4 = &pinocchio::program_error::ProgramError\l5 = ()\l6 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l7 = (&pinocchio::program_error::ProgramError,)\l8 = bool\l9 = bool\l", style="filled", color=palegreen3];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_1 [label="1"];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_3 [label="0"];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_9 [label="other"];
    Xba531265f22fa7ac_0 [label="9 <- Use(const bool)\l8 <- Use(const bool)\l3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xba531265f22fa7ac_1 -> Xba531265f22fa7ac_8 [label="Cleanup"];
    Xba531265f22fa7ac_1 -> Xba531265f22fa7ac_2 [label="5"];
    Xba531265f22fa7ac_1 [label="4 <- & (1 as variant 1).0\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    Xba531265f22fa7ac_2 -> Xba531265f22fa7ac_4;
    Xba531265f22fa7ac_2 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(mv(1))\lGoto\l"];
    Xba531265f22fa7ac_3 -> Xba531265f22fa7ac_4 [label="0"];
    Xba531265f22fa7ac_3 -> Xba531265f22fa7ac_6 [label="other"];
    Xba531265f22fa7ac_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lSwitchInt cp(8)\l"];
    Xba531265f22fa7ac_4 [label="Return\l"];
    Xba531265f22fa7ac_5 [label="Resume\l"];
    Xba531265f22fa7ac_6 -> Xba531265f22fa7ac_8 [label="Cleanup"];
    Xba531265f22fa7ac_6 -> Xba531265f22fa7ac_4;
    Xba531265f22fa7ac_6 [label="Drop 2\l"];
    Xba531265f22fa7ac_7 -> Xba531265f22fa7ac_5;
    Xba531265f22fa7ac_7 [label="Drop 1\l"];
    Xba531265f22fa7ac_8 -> Xba531265f22fa7ac_5 [label="0"];
    Xba531265f22fa7ac_8 -> Xba531265f22fa7ac_7 [label="other"];
    Xba531265f22fa7ac_8 [label="SwitchInt cp(9)\l"];
    Xba531265f22fa7ac_9 [label="Unreachable\l"];
  }
  Xba531265f22fa7ac_1 -> Xd7455b7937af9e68_0 [label="mv(6),mv(7)"];
  subgraph cluster_276 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::is_ok";
    style="filled";
    color=lightgray;
    node_277 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = isize\l", style="filled", color=palegreen3];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_2 [label="0"];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_1 [label="1"];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_4 [label="other"];
    X5bb54cf35e56a69b_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X5bb54cf35e56a69b_1 -> X5bb54cf35e56a69b_3;
    X5bb54cf35e56a69b_1 [label="0 <- Use(const bool)\lGoto\l"];
    X5bb54cf35e56a69b_2 -> X5bb54cf35e56a69b_3;
    X5bb54cf35e56a69b_2 [label="0 <- Use(const bool)\lGoto\l"];
    X5bb54cf35e56a69b_3 [label="Return\l"];
    X5bb54cf35e56a69b_4 [label="Unreachable\l"];
  }
  subgraph cluster_278 {
    label="core::result::Result::<u8\n, \ncore::num::TryFromIntErro\nr>::expect";
    style="filled";
    color=lightgray;
    node_279 [label="LOCALS\l0 = u8\l1 = core::result::Result<u8, core::num::TryFromIntError>\l2 = &str\l3 = isize\l4 = core::num::TryFromIntError\l5 = !\l6 = &dyn core::fmt::Debug\l7 = &core::num::TryFromIntError\l", style="filled", color=palegreen3];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_3 [label="0"];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_2 [label="1"];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_1 [label="other"];
    Xfc416ebf37809ed1_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xfc416ebf37809ed1_1 [label="Unreachable\l"];
    Xfc416ebf37809ed1_2 -> Xfc416ebf37809ed1_4 [label="Cleanup"];
    Xfc416ebf37809ed1_2 [label="Storage Live _4\l4 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    Xfc416ebf37809ed1_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    Xfc416ebf37809ed1_4 -> Xfc416ebf37809ed1_5;
    Xfc416ebf37809ed1_4 [label="Drop 4\l"];
    Xfc416ebf37809ed1_5 [label="Resume\l"];
  }
  Xfc416ebf37809ed1_2 -> Xdd778da4886cf626_0 [label="mv(2),mv(6)"];
  subgraph cluster_280 {
    label="core::result::Result::<bo\nol, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_281 [label="LOCALS\l0 = bool\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X4808404a084b92a1_0 -> X4808404a084b92a1_3 [label="0"];
    X4808404a084b92a1_0 -> X4808404a084b92a1_2 [label="1"];
    X4808404a084b92a1_0 -> X4808404a084b92a1_1 [label="other"];
    X4808404a084b92a1_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X4808404a084b92a1_1 [label="Unreachable\l"];
    X4808404a084b92a1_2 -> X4808404a084b92a1_4 [label="Cleanup"];
    X4808404a084b92a1_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X4808404a084b92a1_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X4808404a084b92a1_4 -> X4808404a084b92a1_5;
    X4808404a084b92a1_4 [label="Drop 3\l"];
    X4808404a084b92a1_5 [label="Resume\l"];
  }
  X4808404a084b92a1_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_282 {
    label="core::result::Result::<&p\ninocchio_token_interface:\n:state::mint::Mint, \npinocchio::program_error:\n:ProgramError>::map_err::\n<pinocchio_token_interfac\ne::error::TokenError, \n{closure@p-token/src/proc\nessor/amount_to_ui_amount\n.rs:26:65: \n26:68}>";
    style="filled";
    color=lightgray;
    node_283 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@p-token/src/processor/amount_to_ui_amount.rs:26:65: 26:68}\l3 = isize\l4 = &pinocchio_token_interface::state::mint::Mint\l5 = pinocchio::program_error::ProgramError\l6 = pinocchio_token_interface::error::TokenError\l7 = {closure@p-token/src/processor/amount_to_ui_amount.rs:26:65: 26:68}\l8 = (pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    X4544d5a9726463e5_0 -> X4544d5a9726463e5_3 [label="0"];
    X4544d5a9726463e5_0 -> X4544d5a9726463e5_2 [label="1"];
    X4544d5a9726463e5_0 -> X4544d5a9726463e5_1 [label="other"];
    X4544d5a9726463e5_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X4544d5a9726463e5_1 [label="Unreachable\l"];
    X4544d5a9726463e5_2 -> X4544d5a9726463e5_4 [label="6"];
    X4544d5a9726463e5_2 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(mv(2))\lStorage Live _8\l8 <- Tuple (cp(5))\lCall\l"];
    X4544d5a9726463e5_3 -> X4544d5a9726463e5_5;
    X4544d5a9726463e5_3 [label="4 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X4544d5a9726463e5_4 -> X4544d5a9726463e5_5;
    X4544d5a9726463e5_4 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X4544d5a9726463e5_5 [label="Return\l"];
  }
  X4544d5a9726463e5_2 -> X4d1bb10a7606ae9b_0 [label="mv(7),mv(8)"];
  subgraph cluster_284 {
    label="core::result::Result::<&p\ninocchio_token_interface:\n:state::mint::Mint, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&pinocchio_token_interf\nace::state::mint::Mint, \n{closure@pinocchio_token_\ninterface::state::load<pi\nnocchio_token_interface::\nstate::mint::Mint>::{clos\nure#0}}>";
    style="filled";
    color=lightgray;
    node_285 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l3 = isize\l4 = &pinocchio_token_interface::state::mint::Mint\l5 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l6 = (&pinocchio_token_interface::state::mint::Mint,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_3 [label="0"];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_2 [label="1"];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_1 [label="other"];
    X241dac1a0e8e19fa_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X241dac1a0e8e19fa_1 [label="Unreachable\l"];
    X241dac1a0e8e19fa_2 -> X241dac1a0e8e19fa_5;
    X241dac1a0e8e19fa_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    X241dac1a0e8e19fa_3 -> X241dac1a0e8e19fa_4 [label="0"];
    X241dac1a0e8e19fa_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    X241dac1a0e8e19fa_4 -> X241dac1a0e8e19fa_5;
    X241dac1a0e8e19fa_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    X241dac1a0e8e19fa_5 [label="Return\l"];
  }
  X241dac1a0e8e19fa_3 -> X709ca803b6bdae19_0 [label="mv(5),mv(6)"];
  subgraph cluster_286 {
    label="core::core_simd::masks::<\nimpl \ncore::core_simd::masks::s\nealed::Sealed \nfor \ni8>::valid::<16>";
    style="filled";
    color=lightgray;
    node_287 [label="LOCALS\l0 = bool\l1 = core::simd::Simd<i8, 16>\l2 = core::simd::Simd<i8, 16>\l3 = core::simd::Simd<i8, 16>\l4 = core::simd::Simd<i8, 16>\l5 = core::simd::Simd<i8, 16>\l6 = core::simd::Simd<i8, 16>\l7 = core::simd::Simd<i8, 1>\l8 = [i8; 1]\l9 = [i8; 1]\l10 = *const [i8; 1]\l11 = core::simd::Simd<i8, 1>\l12 = [i8; 1]\l13 = [i8; 1]\l14 = *const [i8; 1]\l", style="filled", color=palegreen3];
    X510c6976ab5e1f59_0 -> X510c6976ab5e1f59_5 [label="7"];
    X510c6976ab5e1f59_0 [label="Storage Live _3\lStorage Live _7\l8 <- Array (const ?_i8)\lStorage Live _9\l9 <- Use(cp(8))\lStorage Live _10\l10 <- &raw 9\lCall\l"];
    X510c6976ab5e1f59_1 -> X510c6976ab5e1f59_7 [label="11"];
    X510c6976ab5e1f59_1 [label="Storage Dead _3\lStorage Live _5\lStorage Live _11\l12 <- Array (const ?_i8)\lStorage Live _13\l13 <- Use(cp(12))\lStorage Live _14\l14 <- &raw 13\lCall\l"];
    X510c6976ab5e1f59_2 -> X510c6976ab5e1f59_3 [label="6"];
    X510c6976ab5e1f59_2 [label="Storage Dead _5\lCall\l"];
    X510c6976ab5e1f59_3 -> X510c6976ab5e1f59_4 [label="0"];
    X510c6976ab5e1f59_3 [label="Call\l"];
    X510c6976ab5e1f59_4 [label="Return\l"];
    X510c6976ab5e1f59_5 -> X510c6976ab5e1f59_6 [label="3"];
    X510c6976ab5e1f59_5 [label="Storage Dead _10\lStorage Dead _9\lCall\l"];
    X510c6976ab5e1f59_6 -> X510c6976ab5e1f59_1 [label="2"];
    X510c6976ab5e1f59_6 [label="Storage Dead _7\lCall\l"];
    X510c6976ab5e1f59_7 -> X510c6976ab5e1f59_8 [label="5"];
    X510c6976ab5e1f59_7 [label="Storage Dead _14\lStorage Dead _13\lCall\l"];
    X510c6976ab5e1f59_8 -> X510c6976ab5e1f59_2 [label="4"];
    X510c6976ab5e1f59_8 [label="Storage Dead _11\lCall\l"];
  }
  X510c6976ab5e1f59_0 -> X4a794e6cd524a85f_0 [label="mv(10)"];
  X510c6976ab5e1f59_1 -> X4a794e6cd524a85f_0 [label="mv(14)"];
  X510c6976ab5e1f59_2 -> X3772d65821e1463b_0 [label="mv(2),mv(4)"];
  X510c6976ab5e1f59_3 -> Xb6cd6f60b3fbc602_0 [label="mv(6)"];
  X510c6976ab5e1f59_5 -> X1336184f2954778f_0 [label="cp(7),mv(7),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  X510c6976ab5e1f59_6 -> X31a239ce3d11fff8_0 [label="cp(1),mv(3)"];
  X510c6976ab5e1f59_7 -> X1336184f2954778f_0 [label="cp(11),mv(11),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  X510c6976ab5e1f59_8 -> X31a239ce3d11fff8_0 [label="mv(1),mv(5)"];
  subgraph cluster_288 {
    label="core::core_simd::masks::m\nask_impl::Mask::<i8, \n16>::to_bitmask_integer";
    style="filled";
    color=lightgray;
    node_289 [label="LOCALS\l0 = u64\l1 = core::core_simd::masks::mask_impl::Mask<i8, 16>\l2 = bool\l3 = u8\l4 = bool\l5 = u16\l6 = bool\l7 = u32\l8 = core::simd::Simd<i8, 8>\l9 = core::simd::Simd<i8, 16>\l10 = core::simd::Simd<i8, 16>\l11 = core::simd::Simd<i8, 1>\l12 = [i8; 1]\l13 = [i8; 1]\l14 = *const [i8; 1]\l15 = core::simd::Simd<i8, 16>\l16 = core::simd::Simd<i8, 16>\l17 = core::simd::Simd<i8, 16>\l18 = core::simd::Simd<i8, 1>\l19 = [i8; 1]\l20 = [i8; 1]\l21 = *const [i8; 1]\l22 = core::simd::Simd<i8, 32>\l23 = core::simd::Simd<i8, 16>\l24 = core::simd::Simd<i8, 16>\l25 = core::simd::Simd<i8, 1>\l26 = [i8; 1]\l27 = [i8; 1]\l28 = *const [i8; 1]\l29 = core::simd::Simd<i8, 64>\l30 = core::simd::Simd<i8, 16>\l31 = core::simd::Simd<i8, 16>\l32 = core::simd::Simd<i8, 1>\l33 = [i8; 1]\l34 = [i8; 1]\l35 = *const [i8; 1]\l", style="filled", color=palegreen3];
    Xcb009c8e778b19ca_0 -> Xcb009c8e778b19ca_2 [label="0"];
    Xcb009c8e778b19ca_0 -> Xcb009c8e778b19ca_1 [label="other"];
    Xcb009c8e778b19ca_0 [label="Storage Live _2\l2 <- Le(const ?_usize, const ?_usize)\lSwitchInt mv(2)\l"];
    Xcb009c8e778b19ca_1 -> Xcb009c8e778b19ca_11 [label="11"];
    Xcb009c8e778b19ca_1 [label="Storage Live _3\lStorage Live _8\lStorage Live _9\l9 <- Use(cp(1.0))\lStorage Live _10\lStorage Live _11\l12 <- Array (const ?_i8)\lStorage Live _13\l13 <- Use(cp(12))\lStorage Live _14\l14 <- &raw 13\lCall\l"];
    Xcb009c8e778b19ca_2 -> Xcb009c8e778b19ca_4 [label="0"];
    Xcb009c8e778b19ca_2 -> Xcb009c8e778b19ca_3 [label="other"];
    Xcb009c8e778b19ca_2 [label="Storage Live _4\l4 <- Le(const ?_usize, const ?_usize)\lSwitchInt mv(4)\l"];
    Xcb009c8e778b19ca_3 -> Xcb009c8e778b19ca_15 [label="18"];
    Xcb009c8e778b19ca_3 [label="Storage Live _5\lStorage Live _15\lStorage Live _16\l16 <- Use(cp(1.0))\lStorage Live _17\lStorage Live _18\l19 <- Array (const ?_i8)\lStorage Live _20\l20 <- Use(cp(19))\lStorage Live _21\l21 <- &raw 20\lCall\l"];
    Xcb009c8e778b19ca_4 -> Xcb009c8e778b19ca_6 [label="0"];
    Xcb009c8e778b19ca_4 -> Xcb009c8e778b19ca_5 [label="other"];
    Xcb009c8e778b19ca_4 [label="Storage Live _6\l6 <- Le(const ?_usize, const ?_usize)\lSwitchInt mv(6)\l"];
    Xcb009c8e778b19ca_5 -> Xcb009c8e778b19ca_19 [label="25"];
    Xcb009c8e778b19ca_5 [label="Storage Live _7\lStorage Live _22\lStorage Live _23\l23 <- Use(cp(1.0))\lStorage Live _24\lStorage Live _25\l26 <- Array (const ?_i8)\lStorage Live _27\l27 <- Use(cp(26))\lStorage Live _28\l28 <- &raw 27\lCall\l"];
    Xcb009c8e778b19ca_6 -> Xcb009c8e778b19ca_23 [label="32"];
    Xcb009c8e778b19ca_6 [label="Storage Live _29\lStorage Live _30\l30 <- Use(cp(1.0))\lStorage Live _31\lStorage Live _32\l33 <- Array (const ?_i8)\lStorage Live _34\l34 <- Use(cp(33))\lStorage Live _35\l35 <- &raw 34\lCall\l"];
    Xcb009c8e778b19ca_7 -> Xcb009c8e778b19ca_8;
    Xcb009c8e778b19ca_7 [label="Storage Dead _6\lGoto\l"];
    Xcb009c8e778b19ca_8 -> Xcb009c8e778b19ca_9;
    Xcb009c8e778b19ca_8 [label="Storage Dead _4\lGoto\l"];
    Xcb009c8e778b19ca_9 [label="Storage Dead _2\lReturn\l"];
    Xcb009c8e778b19ca_10 -> Xcb009c8e778b19ca_9;
    Xcb009c8e778b19ca_10 [label="Storage Dead _8\l0 <- Cast-IntToInt mv(3)\lStorage Dead _3\lGoto\l"];
    Xcb009c8e778b19ca_11 -> Xcb009c8e778b19ca_12 [label="10"];
    Xcb009c8e778b19ca_11 [label="Storage Dead _14\lStorage Dead _13\lCall\l"];
    Xcb009c8e778b19ca_12 -> Xcb009c8e778b19ca_13 [label="8"];
    Xcb009c8e778b19ca_12 [label="Storage Dead _11\lCall\l"];
    Xcb009c8e778b19ca_13 -> Xcb009c8e778b19ca_10 [label="3"];
    Xcb009c8e778b19ca_13 [label="Storage Dead _10\lStorage Dead _9\lCall\l"];
    Xcb009c8e778b19ca_14 -> Xcb009c8e778b19ca_8;
    Xcb009c8e778b19ca_14 [label="Storage Dead _15\l0 <- Cast-IntToInt mv(5)\lStorage Dead _5\lGoto\l"];
    Xcb009c8e778b19ca_15 -> Xcb009c8e778b19ca_16 [label="17"];
    Xcb009c8e778b19ca_15 [label="Storage Dead _21\lStorage Dead _20\lCall\l"];
    Xcb009c8e778b19ca_16 -> Xcb009c8e778b19ca_17 [label="15"];
    Xcb009c8e778b19ca_16 [label="Storage Dead _18\lCall\l"];
    Xcb009c8e778b19ca_17 -> Xcb009c8e778b19ca_14 [label="5"];
    Xcb009c8e778b19ca_17 [label="Storage Dead _17\lStorage Dead _16\lCall\l"];
    Xcb009c8e778b19ca_18 -> Xcb009c8e778b19ca_7;
    Xcb009c8e778b19ca_18 [label="Storage Dead _22\l0 <- Cast-IntToInt mv(7)\lStorage Dead _7\lGoto\l"];
    Xcb009c8e778b19ca_19 -> Xcb009c8e778b19ca_20 [label="24"];
    Xcb009c8e778b19ca_19 [label="Storage Dead _28\lStorage Dead _27\lCall\l"];
    Xcb009c8e778b19ca_20 -> Xcb009c8e778b19ca_21 [label="22"];
    Xcb009c8e778b19ca_20 [label="Storage Dead _25\lCall\l"];
    Xcb009c8e778b19ca_21 -> Xcb009c8e778b19ca_18 [label="7"];
    Xcb009c8e778b19ca_21 [label="Storage Dead _24\lStorage Dead _23\lCall\l"];
    Xcb009c8e778b19ca_22 -> Xcb009c8e778b19ca_7;
    Xcb009c8e778b19ca_22 [label="Storage Dead _29\lGoto\l"];
    Xcb009c8e778b19ca_23 -> Xcb009c8e778b19ca_24 [label="31"];
    Xcb009c8e778b19ca_23 [label="Storage Dead _35\lStorage Dead _34\lCall\l"];
    Xcb009c8e778b19ca_24 -> Xcb009c8e778b19ca_25 [label="29"];
    Xcb009c8e778b19ca_24 [label="Storage Dead _32\lCall\l"];
    Xcb009c8e778b19ca_25 -> Xcb009c8e778b19ca_22 [label="0"];
    Xcb009c8e778b19ca_25 [label="Storage Dead _31\lStorage Dead _30\lCall\l"];
  }
  Xcb009c8e778b19ca_1 -> X4a794e6cd524a85f_0 [label="mv(14)"];
  Xcb009c8e778b19ca_3 -> X4a794e6cd524a85f_0 [label="mv(21)"];
  Xcb009c8e778b19ca_5 -> X4a794e6cd524a85f_0 [label="mv(28)"];
  Xcb009c8e778b19ca_6 -> X4a794e6cd524a85f_0 [label="mv(35)"];
  Xcb009c8e778b19ca_11 -> X1336184f2954778f_0 [label="cp(11),mv(11),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  Xcb009c8e778b19ca_12 -> X1336184f2954778f_0 [label="mv(9),mv(10),const core::simd::Swizzle::concat_swizzle::{constant#0}::SimdShuffleIdx<8>"];
  Xcb009c8e778b19ca_13 -> X308a72169d16c218_0 [label="mv(8)"];
  Xcb009c8e778b19ca_15 -> X1336184f2954778f_0 [label="cp(18),mv(18),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  Xcb009c8e778b19ca_16 -> X1336184f2954778f_0 [label="mv(16),mv(17),const core::simd::Swizzle::concat_swizzle::{constant#0}::SimdShuffleIdx<16>"];
  Xcb009c8e778b19ca_17 -> X308a72169d16c218_0 [label="mv(15)"];
  Xcb009c8e778b19ca_19 -> X1336184f2954778f_0 [label="cp(25),mv(25),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  Xcb009c8e778b19ca_20 -> X1336184f2954778f_0 [label="mv(23),mv(24),const core::simd::Swizzle::concat_swizzle::{constant#0}::SimdShuffleIdx<32>"];
  Xcb009c8e778b19ca_21 -> X308a72169d16c218_0 [label="mv(22)"];
  Xcb009c8e778b19ca_23 -> X1336184f2954778f_0 [label="cp(32),mv(32),const core::simd::Swizzle::swizzle::{constant#0}::SimdShuffleIdx<16>"];
  Xcb009c8e778b19ca_24 -> X1336184f2954778f_0 [label="mv(30),mv(31),const core::simd::Swizzle::concat_swizzle::{constant#0}::SimdShuffleIdx<64>"];
  Xcb009c8e778b19ca_25 -> X308a72169d16c218_0 [label="mv(29)"];
  subgraph cluster_290 {
    label="core::simd::Simd::<i8, \n1>::load";
    style="filled";
    color=lightgray;
    node_291 [label="LOCALS\l0 = core::simd::Simd<i8, 1>\l1 = *const [i8; 1]\l2 = core::mem::MaybeUninit<core::simd::Simd<i8, 1>>\l3 = *mut [i8; 1]\l4 = *mut core::simd::Simd<i8, 1>\l5 = &mut core::mem::MaybeUninit<core::simd::Simd<i8, 1>>\l6 = core::mem::MaybeUninit<core::simd::Simd<i8, 1>>\l7 = *mut core::mem::MaybeUninit<core::simd::Simd<i8, 1>>\l8 = bool\l9 = ()\l10 = *const ()\l11 = *mut ()\l12 = usize\l13 = usize\l14 = ()\l15 = core::mem::ManuallyDrop<core::simd::Simd<i8, 1>>\l", style="filled", color=palegreen3];
    X4a794e6cd524a85f_0 -> X4a794e6cd524a85f_3 [label="0"];
    X4a794e6cd524a85f_0 -> X4a794e6cd524a85f_1 [label="other"];
    X4a794e6cd524a85f_0 [label="Storage Live _2\l2 <- Adt{0} (const ())\lStorage Live _3\lStorage Live _4\lStorage Live _5\l5 <- &mut 2\l7 <- &raw mut 2\l4 <- Cast-PtrToPtr cp(7)\lStorage Dead _5\l3 <- Cast-PtrToPtr cp(7)\lStorage Dead _4\lStorage Live _8\l8 <- UbChecks :: bool\lSwitchInt mv(8)\l"];
    X4a794e6cd524a85f_1 -> X4a794e6cd524a85f_2 [label="9"];
    X4a794e6cd524a85f_1 [label="Storage Live _10\l10 <- Cast-PtrToPtr cp(1)\lStorage Live _11\l11 <- Cast-PtrToPtr cp(7)\lStorage Live _12\l12 <- SizeOf :: [i8; 1]\lStorage Live _13\l13 <- AlignOf :: [i8; 1]\lCall\l"];
    X4a794e6cd524a85f_2 -> X4a794e6cd524a85f_3;
    X4a794e6cd524a85f_2 [label="Storage Dead _13\lStorage Dead _12\lStorage Dead _11\lStorage Dead _10\lGoto\l"];
    X4a794e6cd524a85f_3 -> X4a794e6cd524a85f_4 [label="14"];
    X4a794e6cd524a85f_3 [label="Storage Dead _8\lIntr: CopyNonOverlapping: cp(3) <- cp(1)(const ?_usize))\lStorage Dead _3\lStorage Live _6\l6 <- Use(cp(2))\lCall\l"];
    X4a794e6cd524a85f_4 [label="Storage Live _15\l15 <- Use(mv(6.1))\l0 <- Use(mv(15.0))\lStorage Dead _15\lStorage Dead _6\lStorage Dead _2\lReturn\l"];
  }
  X4a794e6cd524a85f_1 -> Xa02d25be8cfd143d_0 [label="mv(10),mv(11),mv(12),mv(13),const ?_usize"];
  X4a794e6cd524a85f_3 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_292 {
    label="core::simd::Simd::<u8, \n1>::load";
    style="filled";
    color=lightgray;
    node_293 [label="LOCALS\l0 = core::simd::Simd<u8, 1>\l1 = *const [u8; 1]\l2 = core::mem::MaybeUninit<core::simd::Simd<u8, 1>>\l3 = *mut [u8; 1]\l4 = *mut core::simd::Simd<u8, 1>\l5 = &mut core::mem::MaybeUninit<core::simd::Simd<u8, 1>>\l6 = core::mem::MaybeUninit<core::simd::Simd<u8, 1>>\l7 = *mut core::mem::MaybeUninit<core::simd::Simd<u8, 1>>\l8 = bool\l9 = ()\l10 = *const ()\l11 = *mut ()\l12 = usize\l13 = usize\l14 = ()\l15 = core::mem::ManuallyDrop<core::simd::Simd<u8, 1>>\l", style="filled", color=palegreen3];
    Xccbfcc4d2ef6308f_0 -> Xccbfcc4d2ef6308f_3 [label="0"];
    Xccbfcc4d2ef6308f_0 -> Xccbfcc4d2ef6308f_1 [label="other"];
    Xccbfcc4d2ef6308f_0 [label="Storage Live _2\l2 <- Adt{0} (const ())\lStorage Live _3\lStorage Live _4\lStorage Live _5\l5 <- &mut 2\l7 <- &raw mut 2\l4 <- Cast-PtrToPtr cp(7)\lStorage Dead _5\l3 <- Cast-PtrToPtr cp(7)\lStorage Dead _4\lStorage Live _8\l8 <- UbChecks :: bool\lSwitchInt mv(8)\l"];
    Xccbfcc4d2ef6308f_1 -> Xccbfcc4d2ef6308f_2 [label="9"];
    Xccbfcc4d2ef6308f_1 [label="Storage Live _10\l10 <- Cast-PtrToPtr cp(1)\lStorage Live _11\l11 <- Cast-PtrToPtr cp(7)\lStorage Live _12\l12 <- SizeOf :: [u8; 1]\lStorage Live _13\l13 <- AlignOf :: [u8; 1]\lCall\l"];
    Xccbfcc4d2ef6308f_2 -> Xccbfcc4d2ef6308f_3;
    Xccbfcc4d2ef6308f_2 [label="Storage Dead _13\lStorage Dead _12\lStorage Dead _11\lStorage Dead _10\lGoto\l"];
    Xccbfcc4d2ef6308f_3 -> Xccbfcc4d2ef6308f_4 [label="14"];
    Xccbfcc4d2ef6308f_3 [label="Storage Dead _8\lIntr: CopyNonOverlapping: cp(3) <- cp(1)(const ?_usize))\lStorage Dead _3\lStorage Live _6\l6 <- Use(cp(2))\lCall\l"];
    Xccbfcc4d2ef6308f_4 [label="Storage Live _15\l15 <- Use(mv(6.1))\l0 <- Use(mv(15.0))\lStorage Dead _15\lStorage Dead _6\lStorage Dead _2\lReturn\l"];
  }
  Xccbfcc4d2ef6308f_1 -> Xa02d25be8cfd143d_0 [label="mv(10),mv(11),mv(12),mv(13),const ?_usize"];
  Xccbfcc4d2ef6308f_3 -> X83c8e82412404978_0 [label=""];
  subgraph cluster_294 {
    label="core::panicking::assert_f\nailed::<core::result::Res\nult<(), \npinocchio::program_error:\n:ProgramError>, \ncore::result::Result<(), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_295 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l7 = &dyn core::fmt::Debug\l8 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X9b376999e062dfdd_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X9b376999e062dfdd_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_296 {
    label="core::ub_checks::maybe_is\n_nonoverlapping::runtime";
    style="filled";
    color=lightgray;
    node_297 [label="LOCALS\l0 = bool\l1 = *const ()\l2 = *const ()\l3 = usize\l4 = usize\l5 = usize\l6 = usize\l7 = !\l8 = usize\l9 = core::option::Option<usize>\l10 = usize\l11 = usize\l12 = u64\l13 = bool\l14 = (u64, bool)\l15 = u64\l16 = u64\l17 = usize\l18 = ()\l19 = i32\l20 = i32\l21 = i32\l22 = bool\l", style="filled", color=palegreen3];
    X6dc314fc8fa89576_0 -> X6dc314fc8fa89576_3 [label="0"];
    X6dc314fc8fa89576_0 -> X6dc314fc8fa89576_1 [label="other"];
    X6dc314fc8fa89576_0 [label="5 <- Cast-Transmute cp(1)\l6 <- Cast-Transmute cp(2)\lStorage Live _9\lStorage Live _13\lStorage Live _17\lStorage Live _12\lStorage Live _14\lStorage Live _15\l15 <- Cast-IntToInt cp(3)\lStorage Live _16\l16 <- Cast-IntToInt cp(4)\l14 <- chkd-Mul(mv(15), mv(16))\lStorage Dead _16\lStorage Dead _15\l12 <- Use(cp(14.0))\l13 <- Use(cp(14.1))\lStorage Dead _14\l17 <- Cast-IntToInt cp(12)\lStorage Dead _12\lSwitchInt cp(13)\l"];
    X6dc314fc8fa89576_1 -> X6dc314fc8fa89576_2 [label="18"];
    X6dc314fc8fa89576_1 [label="Call\l"];
    X6dc314fc8fa89576_2 [label="Storage Dead _17\lStorage Dead _13\lStorage Dead _9\lCall\l"];
    X6dc314fc8fa89576_3 -> X6dc314fc8fa89576_5 [label="0"];
    X6dc314fc8fa89576_3 -> X6dc314fc8fa89576_4 [label="other"];
    X6dc314fc8fa89576_3 [label="9 <- Adt{1} (cp(17))\lStorage Dead _17\lStorage Dead _13\l8 <- Use(cp((9 as variant 1).0))\lStorage Dead _9\lStorage Live _10\lStorage Live _19\lStorage Live _20\lStorage Live _21\lStorage Live _22\l22 <- Lt(cp(5), cp(6))\lSwitchInt mv(22)\l"];
    X6dc314fc8fa89576_4 -> X6dc314fc8fa89576_6;
    X6dc314fc8fa89576_4 [label="10 <- Sub(cp(6), cp(5))\lGoto\l"];
    X6dc314fc8fa89576_5 -> X6dc314fc8fa89576_6;
    X6dc314fc8fa89576_5 [label="10 <- Sub(cp(5), cp(6))\lGoto\l"];
    X6dc314fc8fa89576_6 [label="Storage Dead _22\lStorage Dead _21\lStorage Dead _20\lStorage Dead _19\lStorage Live _11\l11 <- Use(cp(10))\l0 <- Ge(mv(11), cp(8))\lStorage Dead _11\lStorage Dead _10\lReturn\l"];
  }
  X6dc314fc8fa89576_1 -> X8fc2060ad58510d8_0 [label=""];
  X6dc314fc8fa89576_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_298 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::From<pinoc\nchio::program_error::Prog\nramError>>::from";
    style="filled";
    color=lightgray;
    node_299 [label="LOCALS\l0 = pinocchio::program_error::ProgramError\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xa0efa4cbcb423f13_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_300 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::Into<u64>>\n::into";
    style="filled";
    color=lightgray;
    node_301 [label="LOCALS\l0 = u64\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X86d9ec07d37ae118_0 -> X86d9ec07d37ae118_1 [label="0"];
    X86d9ec07d37ae118_0 [label="Call\l"];
    X86d9ec07d37ae118_1 [label="Return\l"];
  }
  X86d9ec07d37ae118_0 -> X71e84b9ee31f72d5_0 [label="mv(1)"];
  subgraph cluster_302 {
    label="<u64 \nas \npinocchio_log::logger::Lo\ng>::write_with_args";
    style="filled";
    color=lightgray;
    node_303 [label="LOCALS\l0 = usize\l1 = &u64\l2 = &mut [core::mem::MaybeUninit<u8>]\l3 = &[pinocchio_log::logger::Argument]\l4 = bool\l5 = &[core::mem::MaybeUninit<u8>]\l6 = &mut u8\l7 = &mut core::mem::MaybeUninit<u8>\l8 = u64\l9 = [core::mem::MaybeUninit<u8>; 20]\l10 = usize\l11 = bool\l12 = u64\l13 = u64\l14 = u64\l15 = bool\l16 = bool\l17 = (usize, bool)\l18 = &mut u8\l19 = &mut core::mem::MaybeUninit<u8>\l20 = &mut [core::mem::MaybeUninit<u8>]\l21 = &mut [core::mem::MaybeUninit<u8>; 20]\l22 = usize\l23 = u8\l24 = u8\l25 = (u8, bool)\l26 = usize\l27 = core::option::Option<&pinocchio_log::logger::Argument>\l28 = &mut core::slice::Iter<'_, pinocchio_log::logger::Argument>\l29 = core::slice::Iter<'_, pinocchio_log::logger::Argument>\l30 = isize\l31 = isize\l32 = &u8\l33 = u8\l34 = usize\l35 = usize\l36 = (usize, bool)\l37 = bool\l38 = usize\l39 = bool\l40 = usize\l41 = usize\l42 = (usize, bool)\l43 = (usize, bool)\l44 = &mut u8\l45 = &mut core::mem::MaybeUninit<u8>\l46 = &mut [core::mem::MaybeUninit<u8>]\l47 = &mut [core::mem::MaybeUninit<u8>; 20]\l48 = usize\l49 = (usize, bool)\l50 = usize\l51 = &[core::mem::MaybeUninit<u8>]\l52 = bool\l53 = usize\l54 = usize\l55 = (bool, usize, usize)\l56 = bool\l57 = usize\l58 = usize\l59 = usize\l60 = usize\l61 = usize\l62 = usize\l63 = usize\l64 = (usize, bool)\l65 = *const core::mem::MaybeUninit<u8>\l66 = *const core::mem::MaybeUninit<u8>\l67 = &[core::mem::MaybeUninit<u8>]\l68 = &[core::mem::MaybeUninit<u8>; 20]\l69 = usize\l70 = *mut core::mem::MaybeUninit<u8>\l71 = usize\l72 = ()\l73 = usize\l74 = usize\l75 = (usize, bool)\l76 = (usize, bool)\l77 = ()\l78 = ()\l79 = *mut u8\l80 = *mut core::mem::MaybeUninit<u8>\l81 = ()\l82 = *const core::mem::MaybeUninit<u8>\l83 = *mut core::mem::MaybeUninit<u8>\l84 = usize\l85 = (usize, bool)\l86 = &mut core::mem::MaybeUninit<u8>\l87 = usize\l88 = (usize, bool)\l89 = &mut u8\l90 = &pinocchio_log::logger::Argument\l91 = &pinocchio_log::logger::Argument\l", style="filled", color=palegreen3];
    Xc87d3a4f0f28cd2_0 -> Xc87d3a4f0f28cd2_1 [label="4"];
    Xc87d3a4f0f28cd2_0 [label="5 <- & (*2)\lCall\l"];
    Xc87d3a4f0f28cd2_1 -> Xc87d3a4f0f28cd2_3 [label="0"];
    Xc87d3a4f0f28cd2_1 -> Xc87d3a4f0f28cd2_2 [label="other"];
    Xc87d3a4f0f28cd2_1 [label="SwitchInt mv(4)\l"];
    Xc87d3a4f0f28cd2_2 -> Xc87d3a4f0f28cd2_54;
    Xc87d3a4f0f28cd2_2 [label="0 <- Use(const ?_usize)\lGoto\l"];
    Xc87d3a4f0f28cd2_3 -> Xc87d3a4f0f28cd2_5 [label="0"];
    Xc87d3a4f0f28cd2_3 -> Xc87d3a4f0f28cd2_4 [label="other"];
    Xc87d3a4f0f28cd2_3 [label="SwitchInt cp((*1))\l"];
    Xc87d3a4f0f28cd2_4 -> Xc87d3a4f0f28cd2_8;
    Xc87d3a4f0f28cd2_4 [label="8 <- Use(cp((*1)))\l9 <- Repeat const core::mem::MaybeUninit<u8>\l10 <- Use(const ?_usize)\lGoto\l"];
    Xc87d3a4f0f28cd2_5 -> Xc87d3a4f0f28cd2_6 [label="7"];
    Xc87d3a4f0f28cd2_5 [label="Call\l"];
    Xc87d3a4f0f28cd2_6 -> Xc87d3a4f0f28cd2_7 [label="6"];
    Xc87d3a4f0f28cd2_6 [label="Call\l"];
    Xc87d3a4f0f28cd2_7 -> Xc87d3a4f0f28cd2_54;
    Xc87d3a4f0f28cd2_7 [label="0 <- Use(const ?_usize)\lGoto\l"];
    Xc87d3a4f0f28cd2_8 -> Xc87d3a4f0f28cd2_15 [label="0"];
    Xc87d3a4f0f28cd2_8 -> Xc87d3a4f0f28cd2_9 [label="other"];
    Xc87d3a4f0f28cd2_8 [label="12 <- Use(cp(8))\l11 <- Gt(mv(12), const ?_u64)\lSwitchInt mv(11)\l"];
    Xc87d3a4f0f28cd2_9 -> Xc87d3a4f0f28cd2_10;
    Xc87d3a4f0f28cd2_9 [label="14 <- Use(cp(8))\l15 <- Eq(const ?_u64, const ?_u64)\lAssert mv(15) == false\l"];
    Xc87d3a4f0f28cd2_10 -> Xc87d3a4f0f28cd2_11;
    Xc87d3a4f0f28cd2_10 [label="13 <- Rem(mv(14), const ?_u64)\l16 <- Eq(const ?_u64, const ?_u64)\lAssert mv(16) == false\l"];
    Xc87d3a4f0f28cd2_11 -> Xc87d3a4f0f28cd2_12;
    Xc87d3a4f0f28cd2_11 [label="8 <- Div(cp(8), const ?_u64)\l17 <- chkd-Sub(cp(10), const ?_usize)\lAssert mv(17.1) == false\l"];
    Xc87d3a4f0f28cd2_12 -> Xc87d3a4f0f28cd2_13 [label="19"];
    Xc87d3a4f0f28cd2_12 [label="10 <- Use(mv(17.0))\l21 <- &mut 9\l20 <- Cast-PointerCoercion(Unsize) mv(21)\l22 <- Use(cp(10))\lCall\l"];
    Xc87d3a4f0f28cd2_13 -> Xc87d3a4f0f28cd2_14;
    Xc87d3a4f0f28cd2_13 [label="24 <- Cast-IntToInt cp(13)\l25 <- chkd-Add(const ?_u8, cp(24))\lAssert mv(25.1) == false\l"];
    Xc87d3a4f0f28cd2_14 -> Xc87d3a4f0f28cd2_8 [label="18"];
    Xc87d3a4f0f28cd2_14 [label="23 <- Use(mv(25.0))\lCall\l"];
    Xc87d3a4f0f28cd2_15 -> Xc87d3a4f0f28cd2_16 [label="29"];
    Xc87d3a4f0f28cd2_15 [label="Call\l"];
    Xc87d3a4f0f28cd2_16 -> Xc87d3a4f0f28cd2_17 [label="27"];
    Xc87d3a4f0f28cd2_16 [label="28 <- &mut 29\lCall\l"];
    Xc87d3a4f0f28cd2_17 -> Xc87d3a4f0f28cd2_18 [label="1"];
    Xc87d3a4f0f28cd2_17 -> Xc87d3a4f0f28cd2_20 [label="0"];
    Xc87d3a4f0f28cd2_17 -> Xc87d3a4f0f28cd2_55 [label="other"];
    Xc87d3a4f0f28cd2_17 [label="31 <- Discriminant(27)\lSwitchInt mv(31)\l"];
    Xc87d3a4f0f28cd2_18 -> Xc87d3a4f0f28cd2_19 [label="0"];
    Xc87d3a4f0f28cd2_18 -> Xc87d3a4f0f28cd2_20 [label="other"];
    Xc87d3a4f0f28cd2_18 [label="90 <- CopyForDeref((27 as variant 1).0)\l30 <- Discriminant((*90))\lSwitchInt mv(30)\l"];
    Xc87d3a4f0f28cd2_19 -> Xc87d3a4f0f28cd2_21;
    Xc87d3a4f0f28cd2_19 [label="91 <- CopyForDeref((27 as variant 1).0)\l32 <- & ((*91) as variant 0).0\l33 <- Use(cp((*32)))\l26 <- Cast-IntToInt mv(33)\lGoto\l"];
    Xc87d3a4f0f28cd2_20 -> Xc87d3a4f0f28cd2_21;
    Xc87d3a4f0f28cd2_20 [label="26 <- Use(const ?_usize)\lGoto\l"];
    Xc87d3a4f0f28cd2_21 -> Xc87d3a4f0f28cd2_22;
    Xc87d3a4f0f28cd2_21 [label="35 <- Use(cp(10))\l36 <- chkd-Sub(const ?_usize, cp(35))\lAssert mv(36.1) == false\l"];
    Xc87d3a4f0f28cd2_22 -> Xc87d3a4f0f28cd2_30 [label="0"];
    Xc87d3a4f0f28cd2_22 -> Xc87d3a4f0f28cd2_23 [label="other"];
    Xc87d3a4f0f28cd2_22 [label="34 <- Use(mv(36.0))\l38 <- Use(cp(26))\l37 <- Gt(mv(38), const ?_usize)\lSwitchInt mv(37)\l"];
    Xc87d3a4f0f28cd2_23 -> Xc87d3a4f0f28cd2_28 [label="0"];
    Xc87d3a4f0f28cd2_23 -> Xc87d3a4f0f28cd2_24 [label="other"];
    Xc87d3a4f0f28cd2_23 [label="40 <- Use(cp(26))\l41 <- Use(cp(34))\l39 <- Ge(mv(40), mv(41))\lSwitchInt mv(39)\l"];
    Xc87d3a4f0f28cd2_24 -> Xc87d3a4f0f28cd2_25;
    Xc87d3a4f0f28cd2_24 [label="42 <- chkd-Add(cp(34), const ?_usize)\lAssert mv(42.1) == false\l"];
    Xc87d3a4f0f28cd2_25 -> Xc87d3a4f0f28cd2_26;
    Xc87d3a4f0f28cd2_25 [label="34 <- Use(mv(42.0))\l43 <- chkd-Sub(cp(10), const ?_usize)\lAssert mv(43.1) == false\l"];
    Xc87d3a4f0f28cd2_26 -> Xc87d3a4f0f28cd2_27 [label="45"];
    Xc87d3a4f0f28cd2_26 [label="10 <- Use(mv(43.0))\l47 <- &mut 9\l46 <- Cast-PointerCoercion(Unsize) mv(47)\l48 <- Use(cp(10))\lCall\l"];
    Xc87d3a4f0f28cd2_27 -> Xc87d3a4f0f28cd2_23 [label="44"];
    Xc87d3a4f0f28cd2_27 [label="Call\l"];
    Xc87d3a4f0f28cd2_28 -> Xc87d3a4f0f28cd2_29;
    Xc87d3a4f0f28cd2_28 [label="49 <- chkd-Add(cp(34), const ?_usize)\lAssert mv(49.1) == false\l"];
    Xc87d3a4f0f28cd2_29 -> Xc87d3a4f0f28cd2_30;
    Xc87d3a4f0f28cd2_29 [label="34 <- Use(mv(49.0))\lGoto\l"];
    Xc87d3a4f0f28cd2_30 -> Xc87d3a4f0f28cd2_32 [label="0"];
    Xc87d3a4f0f28cd2_30 -> Xc87d3a4f0f28cd2_31 [label="other"];
    Xc87d3a4f0f28cd2_30 [label="51 <- & (*2)\l50 <- PtrMetadata(mv(51))\l57 <- Use(cp(34))\l56 <- Le(mv(57), cp(50))\lSwitchInt mv(56)\l"];
    Xc87d3a4f0f28cd2_31 -> Xc87d3a4f0f28cd2_35;
    Xc87d3a4f0f28cd2_31 [label="58 <- Use(cp(34))\l59 <- Use(cp(26))\l55 <- Tuple (const bool, mv(58), mv(59))\lGoto\l"];
    Xc87d3a4f0f28cd2_32 -> Xc87d3a4f0f28cd2_33;
    Xc87d3a4f0f28cd2_32 [label="61 <- Use(cp(26))\l63 <- Use(cp(34))\l64 <- chkd-Sub(cp(63), cp(50))\lAssert mv(64.1) == false\l"];
    Xc87d3a4f0f28cd2_33 -> Xc87d3a4f0f28cd2_34 [label="60"];
    Xc87d3a4f0f28cd2_33 [label="62 <- Use(mv(64.0))\lCall\l"];
    Xc87d3a4f0f28cd2_34 -> Xc87d3a4f0f28cd2_35;
    Xc87d3a4f0f28cd2_34 [label="55 <- Tuple (const bool, cp(50), mv(60))\lGoto\l"];
    Xc87d3a4f0f28cd2_35 -> Xc87d3a4f0f28cd2_36 [label="66"];
    Xc87d3a4f0f28cd2_35 [label="52 <- Use(cp(55.0))\l53 <- Use(cp(55.1))\l54 <- Use(cp(55.2))\l68 <- & 9\l67 <- Cast-PointerCoercion(Unsize) mv(68)\lCall\l"];
    Xc87d3a4f0f28cd2_36 -> Xc87d3a4f0f28cd2_37 [label="65"];
    Xc87d3a4f0f28cd2_36 [label="69 <- Use(cp(10))\lCall\l"];
    Xc87d3a4f0f28cd2_37 -> Xc87d3a4f0f28cd2_38 [label="70"];
    Xc87d3a4f0f28cd2_37 [label="Call\l"];
    Xc87d3a4f0f28cd2_38 -> Xc87d3a4f0f28cd2_39 [label="0"];
    Xc87d3a4f0f28cd2_38 -> Xc87d3a4f0f28cd2_40 [label="other"];
    Xc87d3a4f0f28cd2_38 [label="71 <- Use(cp(26))\lSwitchInt mv(71)\l"];
    Xc87d3a4f0f28cd2_39 -> Xc87d3a4f0f28cd2_49 [label="72"];
    Xc87d3a4f0f28cd2_39 [label="Call\l"];
    Xc87d3a4f0f28cd2_40 -> Xc87d3a4f0f28cd2_41;
    Xc87d3a4f0f28cd2_40 [label="75 <- chkd-Add(cp(54), const ?_usize)\lAssert mv(75.1) == false\l"];
    Xc87d3a4f0f28cd2_41 -> Xc87d3a4f0f28cd2_42;
    Xc87d3a4f0f28cd2_41 [label="74 <- Use(mv(75.0))\l76 <- chkd-Sub(cp(53), cp(74))\lAssert mv(76.1) == false\l"];
    Xc87d3a4f0f28cd2_42 -> Xc87d3a4f0f28cd2_43 [label="77"];
    Xc87d3a4f0f28cd2_42 [label="73 <- Use(mv(76.0))\lCall\l"];
    Xc87d3a4f0f28cd2_43 -> Xc87d3a4f0f28cd2_44 [label="80"];
    Xc87d3a4f0f28cd2_43 [label="Call\l"];
    Xc87d3a4f0f28cd2_44 -> Xc87d3a4f0f28cd2_45 [label="78"];
    Xc87d3a4f0f28cd2_44 [label="79 <- Cast-PtrToPtr mv(80)\lCall\l"];
    Xc87d3a4f0f28cd2_45 -> Xc87d3a4f0f28cd2_46 [label="82"];
    Xc87d3a4f0f28cd2_45 [label="Call\l"];
    Xc87d3a4f0f28cd2_46 -> Xc87d3a4f0f28cd2_47;
    Xc87d3a4f0f28cd2_46 [label="85 <- chkd-Add(cp(73), const ?_usize)\lAssert mv(85.1) == false\l"];
    Xc87d3a4f0f28cd2_47 -> Xc87d3a4f0f28cd2_48 [label="83"];
    Xc87d3a4f0f28cd2_47 [label="84 <- Use(mv(85.0))\lCall\l"];
    Xc87d3a4f0f28cd2_48 -> Xc87d3a4f0f28cd2_49 [label="81"];
    Xc87d3a4f0f28cd2_48 [label="Call\l"];
    Xc87d3a4f0f28cd2_49 -> Xc87d3a4f0f28cd2_53 [label="0"];
    Xc87d3a4f0f28cd2_49 -> Xc87d3a4f0f28cd2_50 [label="other"];
    Xc87d3a4f0f28cd2_49 [label="SwitchInt cp(52)\l"];
    Xc87d3a4f0f28cd2_50 -> Xc87d3a4f0f28cd2_51;
    Xc87d3a4f0f28cd2_50 [label="88 <- chkd-Sub(cp(53), const ?_usize)\lAssert mv(88.1) == false\l"];
    Xc87d3a4f0f28cd2_51 -> Xc87d3a4f0f28cd2_52 [label="86"];
    Xc87d3a4f0f28cd2_51 [label="87 <- Use(mv(88.0))\lCall\l"];
    Xc87d3a4f0f28cd2_52 -> Xc87d3a4f0f28cd2_53 [label="89"];
    Xc87d3a4f0f28cd2_52 [label="Call\l"];
    Xc87d3a4f0f28cd2_53 -> Xc87d3a4f0f28cd2_54;
    Xc87d3a4f0f28cd2_53 [label="0 <- Use(cp(53))\lGoto\l"];
    Xc87d3a4f0f28cd2_54 [label="Return\l"];
    Xc87d3a4f0f28cd2_55 [label="Unreachable\l"];
  }
  Xc87d3a4f0f28cd2_0 -> X6915bb02c5a40218_0 [label="mv(5)"];
  Xc87d3a4f0f28cd2_5 -> X9168001a8578bae9_0 [label="cp(2),const ?_usize"];
  Xc87d3a4f0f28cd2_6 -> X106fa85414871cf3_0 [label="cp(7),const ?_u8"];
  Xc87d3a4f0f28cd2_12 -> X9168001a8578bae9_0 [label="mv(20),mv(22)"];
  Xc87d3a4f0f28cd2_14 -> X106fa85414871cf3_0 [label="cp(19),mv(23)"];
  Xc87d3a4f0f28cd2_15 -> X1c38e366222f5f2b_0 [label="cp(3)"];
  Xc87d3a4f0f28cd2_16 -> X41e0b0ab43b7d3bc_0 [label="mv(28),const {closure@<u64 as pinocchio_log::logger::Log>::write_with_args::{closure#0}}"];
  Xc87d3a4f0f28cd2_26 -> X9168001a8578bae9_0 [label="mv(46),mv(48)"];
  Xc87d3a4f0f28cd2_27 -> X106fa85414871cf3_0 [label="cp(45),const ?_u8"];
  Xc87d3a4f0f28cd2_33 -> X68516b8f507a33d4_0 [label="mv(61),mv(62)"];
  Xc87d3a4f0f28cd2_35 -> X975bf2a3f5955f9_0 [label="mv(67)"];
  Xc87d3a4f0f28cd2_36 -> X192fb3deae17bccc_0 [label="mv(66),mv(69)"];
  Xc87d3a4f0f28cd2_37 -> Xc3ea6fb49488af5d_0 [label="cp(2)"];
  Xc87d3a4f0f28cd2_39 -> Xef59c4024d633d0b_0 [label="cp(65),cp(70),cp(53)"];
  Xc87d3a4f0f28cd2_42 -> Xef59c4024d633d0b_0 [label="cp(65),cp(70),cp(73)"];
  Xc87d3a4f0f28cd2_43 -> Xea0c6a7ce6f10078_0 [label="cp(70),cp(73)"];
  Xc87d3a4f0f28cd2_44 -> Xd6fff20807a20379_0 [label="mv(79),const ?_u8"];
  Xc87d3a4f0f28cd2_45 -> X192fb3deae17bccc_0 [label="cp(65),cp(73)"];
  Xc87d3a4f0f28cd2_47 -> Xea0c6a7ce6f10078_0 [label="cp(70),mv(84)"];
  Xc87d3a4f0f28cd2_48 -> Xef59c4024d633d0b_0 [label="mv(82),mv(83),cp(54)"];
  Xc87d3a4f0f28cd2_51 -> X9168001a8578bae9_0 [label="cp(2),mv(87)"];
  Xc87d3a4f0f28cd2_52 -> X106fa85414871cf3_0 [label="cp(86),const ?_u8"];
  subgraph cluster_304 {
    label="<u64 \nas \npinocchio_log::logger::Lo\ng>::write_with_args::{clo\nsure#0}";
    style="filled";
    color=lightgray;
    node_305 [label="LOCALS\l0 = bool\l1 = &mut {closure@<u64 as pinocchio_log::logger::Log>::write_with_args::{closure#0}}\l2 = &&pinocchio_log::logger::Argument\l3 = isize\l4 = &pinocchio_log::logger::Argument\l", style="filled", color=palegreen3];
    Xc1d0cd9f63df17cb_0 [label="4 <- CopyForDeref((*2))\l3 <- Discriminant((*4))\l0 <- Eq(cp(3), const ?_isize)\lReturn\l"];
  }
  subgraph cluster_306 {
    label="<char \nas \ncore::str::pattern::Patte\nrn>::into_searcher";
    style="filled";
    color=lightgray;
    node_307 [label="LOCALS\l0 = core::str::pattern::CharSearcher<'_>\l1 = char\l2 = &str\l3 = [u8; 4]\l4 = u8\l5 = core::result::Result<u8, core::num::TryFromIntError>\l6 = usize\l7 = &str\l8 = &mut [u8]\l9 = &mut [u8; 4]\l10 = usize\l11 = [u8; 4]\l12 = &mut [u8]\l13 = u32\l14 = *mut str\l15 = *mut [u8]\l16 = &[u8]\l17 = bool\l18 = u8\l19 = &[u8]\l", style="filled", color=palegreen3];
    Xc18a98127535c7df_0 -> Xc18a98127535c7df_2 [label="12"];
    Xc18a98127535c7df_0 [label="Storage Live _3\l3 <- Repeat const ?_u8\lStorage Live _5\lStorage Live _6\lStorage Live _7\lStorage Live _8\l9 <- &mut 3\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lStorage Live _12\lStorage Live _13\l13 <- Cast-IntToInt cp(1)\lCall\l"];
    Xc18a98127535c7df_1 [label="Storage Dead _5\lStorage Live _10\lStorage Live _19\l19 <- Cast-Transmute cp(2)\l10 <- PtrMetadata(cp(19))\lStorage Dead _19\lStorage Live _11\l11 <- Use(cp(3))\l0 <- Adt{0} (cp(2), const ?_usize, mv(10), cp(1), cp(4), mv(11))\lStorage Dead _11\lStorage Dead _10\lStorage Dead _3\lReturn\l"];
    Xc18a98127535c7df_2 -> Xc18a98127535c7df_4 [label="0"];
    Xc18a98127535c7df_2 -> Xc18a98127535c7df_3 [label="other"];
    Xc18a98127535c7df_2 [label="Storage Dead _13\lStorage Live _15\l15 <- &raw mut (*12)\l14 <- Cast-PtrToPtr mv(15)\lStorage Dead _15\lStorage Dead _12\l7 <- & (*14)\lStorage Dead _8\lStorage Live _16\l16 <- Cast-Transmute cp(7)\l6 <- PtrMetadata(cp(16))\lStorage Dead _16\lStorage Dead _7\lStorage Live _17\l17 <- Gt(cp(6), const ?_usize)\lSwitchInt mv(17)\l"];
    Xc18a98127535c7df_3 -> Xc18a98127535c7df_5;
    Xc18a98127535c7df_3 [label="5 <- Use(const core::result::Result<u8, core::num::TryFromIntError>)\lGoto\l"];
    Xc18a98127535c7df_4 -> Xc18a98127535c7df_5;
    Xc18a98127535c7df_4 [label="Storage Live _18\l18 <- Cast-IntToInt cp(6)\l5 <- Adt{0} (mv(18))\lStorage Dead _18\lGoto\l"];
    Xc18a98127535c7df_5 -> Xc18a98127535c7df_1 [label="4"];
    Xc18a98127535c7df_5 [label="Storage Dead _17\lStorage Dead _6\lCall\l"];
  }
  Xc18a98127535c7df_0 -> X99903dfa6b5cd43f_0 [label="mv(13),mv(8)"];
  Xc18a98127535c7df_5 -> Xfc416ebf37809ed1_0 [label="mv(5),const &str"];
  subgraph cluster_308 {
    label="<char \nas \ncore::str::pattern::Patte\nrn>::is_contained_in";
    style="filled";
    color=lightgray;
    node_309 [label="LOCALS\l0 = bool\l1 = char\l2 = &str\l3 = bool\l4 = u32\l5 = &[u8]\l6 = &u8\l7 = u8\l8 = [u8; 4]\l9 = &str\l10 = &mut [u8]\l11 = &mut [u8; 4]\l12 = &core::option::Option<usize>\l13 = core::option::Option<usize>\l14 = isize\l15 = &mut [u8]\l16 = *mut str\l17 = *mut [u8]\l", style="filled", color=palegreen3];
    X9be505de6f8a248b_0 -> X9be505de6f8a248b_2 [label="0"];
    X9be505de6f8a248b_0 -> X9be505de6f8a248b_1 [label="other"];
    X9be505de6f8a248b_0 [label="Storage Live _3\l4 <- Cast-IntToInt cp(1)\l3 <- Lt(cp(4), const ?_u32)\lSwitchInt mv(3)\l"];
    X9be505de6f8a248b_1 -> X9be505de6f8a248b_5 [label="13"];
    X9be505de6f8a248b_1 [label="5 <- Cast-Transmute cp(2)\l7 <- Cast-IntToInt cp(1)\l6 <- & 7\lStorage Live _12\lStorage Live _13\lCall\l"];
    X9be505de6f8a248b_2 -> X9be505de6f8a248b_10 [label="15"];
    X9be505de6f8a248b_2 [label="Storage Live _8\l8 <- Repeat const ?_u8\lStorage Live _9\lStorage Live _10\l11 <- &mut 8\l10 <- Cast-PointerCoercion(Unsize) cp(11)\lStorage Live _15\lCall\l"];
    X9be505de6f8a248b_3 -> X9be505de6f8a248b_4;
    X9be505de6f8a248b_3 [label="Storage Dead _9\lStorage Dead _8\lGoto\l"];
    X9be505de6f8a248b_4 [label="Storage Dead _3\lReturn\l"];
    X9be505de6f8a248b_5 -> X9be505de6f8a248b_8 [label="1"];
    X9be505de6f8a248b_5 -> X9be505de6f8a248b_7 [label="0"];
    X9be505de6f8a248b_5 -> X9be505de6f8a248b_9 [label="other"];
    X9be505de6f8a248b_5 [label="12 <- & 13\lStorage Live _14\l14 <- Discriminant(13)\lSwitchInt mv(14)\l"];
    X9be505de6f8a248b_6 -> X9be505de6f8a248b_4;
    X9be505de6f8a248b_6 [label="Storage Dead _14\lStorage Dead _12\lStorage Dead _13\lGoto\l"];
    X9be505de6f8a248b_7 -> X9be505de6f8a248b_6;
    X9be505de6f8a248b_7 [label="0 <- Use(const bool)\lGoto\l"];
    X9be505de6f8a248b_8 -> X9be505de6f8a248b_6;
    X9be505de6f8a248b_8 [label="0 <- Use(const bool)\lGoto\l"];
    X9be505de6f8a248b_9 [label="Unreachable\l"];
    X9be505de6f8a248b_10 -> X9be505de6f8a248b_3 [label="0"];
    X9be505de6f8a248b_10 [label="Storage Live _17\l17 <- &raw mut (*15)\l16 <- Cast-PtrToPtr mv(17)\lStorage Dead _17\lStorage Dead _15\l9 <- & (*16)\lStorage Dead _10\lCall\l"];
  }
  X9be505de6f8a248b_1 -> Xbfa38cc438d7300d_0 [label="cp(7),mv(5)"];
  X9be505de6f8a248b_2 -> X99903dfa6b5cd43f_0 [label="mv(4),mv(10)"];
  X9be505de6f8a248b_10 -> X19627368ec159d66_0 [label="mv(9),mv(2)"];
  subgraph cluster_310 {
    label="<&str \nas \ncore::str::pattern::Patte\nrn>::is_contained_in";
    style="filled";
    color=lightgray;
    node_311 [label="LOCALS\l0 = bool\l1 = &str\l2 = &str\l3 = usize\l4 = core::cmp::Ordering\l5 = &usize\l6 = usize\l7 = &usize\l8 = usize\l9 = i8\l10 = &u8\l11 = usize\l12 = bool\l13 = bool\l14 = core::option::Option<bool>\l15 = isize\l16 = bool\l17 = &core::option::Option<(usize, usize)>\l18 = core::option::Option<(usize, usize)>\l19 = &mut core::str::pattern::StrSearcher<'_, '_>\l20 = core::str::pattern::StrSearcher<'_, '_>\l21 = &&str\l22 = &&str\l23 = &[u8]\l24 = &[u8]\l25 = &&[u8]\l26 = &[u8]\l27 = &&[u8]\l28 = &[u8]\l29 = &core::option::Option<usize>\l30 = core::option::Option<usize>\l31 = u8\l32 = isize\l33 = isize\l", style="filled", color=palegreen3];
    X19627368ec159d66_0 -> X19627368ec159d66_1 [label="0"];
    X19627368ec159d66_0 -> X19627368ec159d66_2 [label="other"];
    X19627368ec159d66_0 [label="23 <- Cast-Transmute cp(1)\l3 <- PtrMetadata(cp(23))\lSwitchInt cp(3)\l"];
    X19627368ec159d66_1 -> X19627368ec159d66_16;
    X19627368ec159d66_1 [label="0 <- Use(const bool)\lGoto\l"];
    X19627368ec159d66_2 -> X19627368ec159d66_4 [label="255"];
    X19627368ec159d66_2 -> X19627368ec159d66_3 [label="other"];
    X19627368ec159d66_2 [label="Storage Live _4\lStorage Live _5\lStorage Live _6\l6 <- Use(cp(3))\l5 <- & 6\l24 <- Cast-Transmute cp(2)\l8 <- PtrMetadata(cp(24))\l7 <- & 8\l4 <- Cmp(cp(3), cp(8))\lStorage Dead _5\l9 <- Discriminant(4)\lSwitchInt mv(9)\l"];
    X19627368ec159d66_3 -> X19627368ec159d66_17 [label="0"];
    X19627368ec159d66_3 [label="Storage Live _21\l21 <- & 1\lStorage Live _22\l22 <- & 2\lStorage Live _26\lStorage Live _28\lStorage Live _25\l26 <- Use(cp(23))\l25 <- & 26\lStorage Live _27\l28 <- Use(cp(24))\l27 <- & 28\lCall\l"];
    X19627368ec159d66_4 -> X19627368ec159d66_5 [label="1"];
    X19627368ec159d66_4 -> X19627368ec159d66_7 [label="other"];
    X19627368ec159d66_4 [label="SwitchInt cp(3)\l"];
    X19627368ec159d66_5 -> X19627368ec159d66_6;
    X19627368ec159d66_5 [label="11 <- Len((*23))\l12 <- Lt(const ?_usize, cp(11))\lAssert mv(12) == true\l"];
    X19627368ec159d66_6 -> X19627368ec159d66_18 [label="30"];
    X19627368ec159d66_6 [label="10 <- & (*23)[0]\lStorage Live _29\lStorage Live _30\lStorage Live _31\l31 <- Use(cp((*10)))\lCall\l"];
    X19627368ec159d66_7 -> X19627368ec159d66_12 [label="0"];
    X19627368ec159d66_7 -> X19627368ec159d66_8 [label="other"];
    X19627368ec159d66_7 [label="Storage Live _13\l13 <- Le(cp(3), const ?_usize)\lSwitchInt mv(13)\l"];
    X19627368ec159d66_8 -> X19627368ec159d66_9 [label="14"];
    X19627368ec159d66_8 [label="Storage Live _14\lCall\l"];
    X19627368ec159d66_9 -> X19627368ec159d66_10 [label="1"];
    X19627368ec159d66_9 -> X19627368ec159d66_11 [label="0"];
    X19627368ec159d66_9 -> X19627368ec159d66_22 [label="other"];
    X19627368ec159d66_9 [label="15 <- Discriminant(14)\lSwitchInt mv(15)\l"];
    X19627368ec159d66_10 -> X19627368ec159d66_15;
    X19627368ec159d66_10 [label="16 <- Use(cp((14 as variant 1).0))\l0 <- Use(cp(16))\lStorage Dead _14\lStorage Dead _13\lGoto\l"];
    X19627368ec159d66_11 -> X19627368ec159d66_12;
    X19627368ec159d66_11 [label="Storage Dead _14\lGoto\l"];
    X19627368ec159d66_12 -> X19627368ec159d66_23 [label="20"];
    X19627368ec159d66_12 [label="Storage Dead _13\lStorage Live _17\lStorage Live _18\lStorage Live _19\lStorage Live _20\lCall\l"];
    X19627368ec159d66_13 -> X19627368ec159d66_26 [label="1"];
    X19627368ec159d66_13 -> X19627368ec159d66_25 [label="0"];
    X19627368ec159d66_13 -> X19627368ec159d66_22 [label="other"];
    X19627368ec159d66_13 [label="17 <- & 18\lStorage Dead _19\lStorage Live _33\l33 <- Discriminant(18)\lSwitchInt mv(33)\l"];
    X19627368ec159d66_14 -> X19627368ec159d66_16;
    X19627368ec159d66_14 [label="Storage Dead _6\lStorage Dead _4\lGoto\l"];
    X19627368ec159d66_15 -> X19627368ec159d66_16;
    X19627368ec159d66_15 [label="Storage Dead _6\lStorage Dead _4\lGoto\l"];
    X19627368ec159d66_16 [label="Return\l"];
    X19627368ec159d66_17 -> X19627368ec159d66_14;
    X19627368ec159d66_17 [label="Storage Dead _27\lStorage Dead _25\lStorage Dead _28\lStorage Dead _26\lStorage Dead _22\lStorage Dead _21\lGoto\l"];
    X19627368ec159d66_18 -> X19627368ec159d66_21 [label="1"];
    X19627368ec159d66_18 -> X19627368ec159d66_20 [label="0"];
    X19627368ec159d66_18 -> X19627368ec159d66_22 [label="other"];
    X19627368ec159d66_18 [label="29 <- & 30\lStorage Dead _31\lStorage Live _32\l32 <- Discriminant(30)\lSwitchInt mv(32)\l"];
    X19627368ec159d66_19 -> X19627368ec159d66_15;
    X19627368ec159d66_19 [label="Storage Dead _32\lStorage Dead _29\lStorage Dead _30\lGoto\l"];
    X19627368ec159d66_20 -> X19627368ec159d66_19;
    X19627368ec159d66_20 [label="0 <- Use(const bool)\lGoto\l"];
    X19627368ec159d66_21 -> X19627368ec159d66_19;
    X19627368ec159d66_21 [label="0 <- Use(const bool)\lGoto\l"];
    X19627368ec159d66_22 [label="Unreachable\l"];
    X19627368ec159d66_23 -> X19627368ec159d66_13 [label="18"];
    X19627368ec159d66_23 [label="19 <- &mut 20\lCall\l"];
    X19627368ec159d66_24 -> X19627368ec159d66_14;
    X19627368ec159d66_24 [label="Storage Dead _33\lStorage Dead _17\lStorage Dead _20\lStorage Dead _18\lGoto\l"];
    X19627368ec159d66_25 -> X19627368ec159d66_24;
    X19627368ec159d66_25 [label="0 <- Use(const bool)\lGoto\l"];
    X19627368ec159d66_26 -> X19627368ec159d66_24;
    X19627368ec159d66_26 [label="0 <- Use(const bool)\lGoto\l"];
  }
  X19627368ec159d66_3 -> X9d8f98d3704e8fd6_0 [label="mv(23),mv(24)"];
  X19627368ec159d66_6 -> Xbfa38cc438d7300d_0 [label="mv(31),mv(24)"];
  X19627368ec159d66_8 -> X3175254fab39b135_0 [label="cp(1),cp(2)"];
  X19627368ec159d66_12 -> X2d9fe09564a4e03f_0 [label="cp(2),cp(1)"];
  X19627368ec159d66_23 -> X3d42ab388282bd72_0 [label="mv(19)"];
  subgraph cluster_312 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_eq";
    style="filled";
    color=lightgray;
    node_313 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    X1ccfc07345856a22_0 -> X1ccfc07345856a22_1 [label="0"];
    X1ccfc07345856a22_0 [label="Storage Live _3\l3 <- Cast-Transmute cp(2)\lCall\l"];
    X1ccfc07345856a22_1 [label="Storage Dead _3\lReturn\l"];
  }
  X1ccfc07345856a22_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(3)"];
  subgraph cluster_314 {
    label="<core::num::TryFromIntErr\nor \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_315 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::num::TryFromIntError\l2 = &mut core::fmt::Formatter<'_>\l3 = &dyn core::fmt::Debug\l4 = &&()\l5 = &()\l", style="filled", color=palegreen3];
    X65f16877edc1ff5_0 -> X65f16877edc1ff5_1 [label="0"];
    X65f16877edc1ff5_0 [label="Storage Live _3\lStorage Live _5\l5 <- & (*1).0\l4 <- & 5\l3 <- Cast-PointerCoercion(Unsize) cp(4)\lCall\l"];
    X65f16877edc1ff5_1 [label="Storage Dead _3\lStorage Dead _5\lReturn\l"];
  }
  X65f16877edc1ff5_0 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(3)"];
  subgraph cluster_316 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_317 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &()\l5 = &dyn core::fmt::Debug\l6 = &&()\l7 = &pinocchio::program_error::ProgramError\l8 = &dyn core::fmt::Debug\l9 = &&pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_3 [label="0"];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_2 [label="1"];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_1 [label="other"];
    Xab8fa31025adcf5b_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    Xab8fa31025adcf5b_1 [label="Unreachable\l"];
    Xab8fa31025adcf5b_2 -> Xab8fa31025adcf5b_5 [label="0"];
    Xab8fa31025adcf5b_2 [label="Storage Live _7\l7 <- & ((*1) as variant 1).0\lStorage Live _8\l9 <- & 7\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lCall\l"];
    Xab8fa31025adcf5b_3 -> Xab8fa31025adcf5b_4 [label="0"];
    Xab8fa31025adcf5b_3 [label="Storage Live _4\l4 <- & ((*1) as variant 0).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    Xab8fa31025adcf5b_4 -> Xab8fa31025adcf5b_6;
    Xab8fa31025adcf5b_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    Xab8fa31025adcf5b_5 -> Xab8fa31025adcf5b_6;
    Xab8fa31025adcf5b_5 [label="Storage Dead _8\lStorage Dead _7\lGoto\l"];
    Xab8fa31025adcf5b_6 [label="Return\l"];
  }
  Xab8fa31025adcf5b_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(8)"];
  Xab8fa31025adcf5b_3 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  subgraph cluster_318 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_319 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &&pinocchio::program_error::ProgramError\l16 = &&pinocchio::program_error::ProgramError\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X9e1a89bd60e7c0af_0 -> X9e1a89bd60e7c0af_2 [label="0"];
    X9e1a89bd60e7c0af_0 -> X9e1a89bd60e7c0af_1 [label="other"];
    X9e1a89bd60e7c0af_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_3 [label="0"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_4 [label="1"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_8 [label="other"];
    X9e1a89bd60e7c0af_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X9e1a89bd60e7c0af_2 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_2 [label="0 <- Use(const bool)\lGoto\l"];
    X9e1a89bd60e7c0af_3 -> X9e1a89bd60e7c0af_7 [label="0"];
    X9e1a89bd60e7c0af_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X9e1a89bd60e7c0af_4 -> X9e1a89bd60e7c0af_6 [label="0"];
    X9e1a89bd60e7c0af_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X9e1a89bd60e7c0af_5 [label="Storage Dead _5\lReturn\l"];
    X9e1a89bd60e7c0af_6 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X9e1a89bd60e7c0af_7 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X9e1a89bd60e7c0af_8 [label="Unreachable\l"];
  }
  X9e1a89bd60e7c0af_3 -> Xe5dce0424c1e8e0f_0 [label="cp(9),cp(10)"];
  X9e1a89bd60e7c0af_4 -> X44c3ea7339825cac_0 [label="cp(13),cp(14)"];
  subgraph cluster_320 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_321 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u32\l5 = &str\l6 = &dyn core::fmt::Debug\l7 = &&u32\l8 = &str\l9 = &str\l10 = &str\l11 = &str\l12 = &str\l13 = &str\l14 = &str\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l19 = &str\l20 = &str\l21 = &str\l22 = &str\l23 = &str\l24 = &str\l25 = &str\l26 = &str\l27 = &str\l28 = &str\l29 = &str\l30 = &str\l31 = &str\l32 = &str\l", style="filled", color=palegreen3];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_27 [label="0"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_26 [label="1"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_25 [label="2"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_24 [label="3"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_23 [label="4"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_22 [label="5"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_21 [label="6"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_20 [label="7"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_19 [label="8"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_18 [label="9"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_17 [label="10"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_16 [label="11"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_15 [label="12"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_14 [label="13"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_13 [label="14"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_12 [label="15"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_11 [label="16"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_10 [label="17"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_9 [label="18"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_8 [label="19"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_7 [label="20"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_6 [label="21"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_5 [label="22"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_4 [label="23"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_3 [label="24"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_2 [label="25"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_1 [label="other"];
    X2742b41be11e0ec6_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X2742b41be11e0ec6_1 [label="Unreachable\l"];
    X2742b41be11e0ec6_2 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_2 [label="32 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_3 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_3 [label="31 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_4 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_4 [label="30 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_5 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_5 [label="29 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_6 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_6 [label="28 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_7 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_7 [label="27 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_8 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_8 [label="26 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_9 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_9 [label="25 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_10 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_10 [label="24 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_11 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_11 [label="23 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_12 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_12 [label="22 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_13 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_13 [label="21 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_14 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_14 [label="20 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_15 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_15 [label="19 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_16 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_16 [label="18 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_17 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_17 [label="17 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_18 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_18 [label="16 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_19 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_19 [label="15 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_20 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_20 [label="14 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_21 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_21 [label="13 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_22 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_22 [label="12 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_23 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_23 [label="11 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_24 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_24 [label="10 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_25 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_25 [label="9 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_26 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_26 [label="8 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_27 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_27 [label="4 <- & ((*1) as variant 0).0\l5 <- Use(const &str)\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    X2742b41be11e0ec6_28 [label="Return\l"];
  }
  X2742b41be11e0ec6_2 -> Xb93f0288e0006b54_0 [label="cp(2),mv(32)"];
  X2742b41be11e0ec6_3 -> Xb93f0288e0006b54_0 [label="cp(2),mv(31)"];
  X2742b41be11e0ec6_4 -> Xb93f0288e0006b54_0 [label="cp(2),mv(30)"];
  X2742b41be11e0ec6_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(29)"];
  X2742b41be11e0ec6_6 -> Xb93f0288e0006b54_0 [label="cp(2),mv(28)"];
  X2742b41be11e0ec6_7 -> Xb93f0288e0006b54_0 [label="cp(2),mv(27)"];
  X2742b41be11e0ec6_8 -> Xb93f0288e0006b54_0 [label="cp(2),mv(26)"];
  X2742b41be11e0ec6_9 -> Xb93f0288e0006b54_0 [label="cp(2),mv(25)"];
  X2742b41be11e0ec6_10 -> Xb93f0288e0006b54_0 [label="cp(2),mv(24)"];
  X2742b41be11e0ec6_11 -> Xb93f0288e0006b54_0 [label="cp(2),mv(23)"];
  X2742b41be11e0ec6_12 -> Xb93f0288e0006b54_0 [label="cp(2),mv(22)"];
  X2742b41be11e0ec6_13 -> Xb93f0288e0006b54_0 [label="cp(2),mv(21)"];
  X2742b41be11e0ec6_14 -> Xb93f0288e0006b54_0 [label="cp(2),mv(20)"];
  X2742b41be11e0ec6_15 -> Xb93f0288e0006b54_0 [label="cp(2),mv(19)"];
  X2742b41be11e0ec6_16 -> Xb93f0288e0006b54_0 [label="cp(2),mv(18)"];
  X2742b41be11e0ec6_17 -> Xb93f0288e0006b54_0 [label="cp(2),mv(17)"];
  X2742b41be11e0ec6_18 -> Xb93f0288e0006b54_0 [label="cp(2),mv(16)"];
  X2742b41be11e0ec6_19 -> Xb93f0288e0006b54_0 [label="cp(2),mv(15)"];
  X2742b41be11e0ec6_20 -> Xb93f0288e0006b54_0 [label="cp(2),mv(14)"];
  X2742b41be11e0ec6_21 -> Xb93f0288e0006b54_0 [label="cp(2),mv(13)"];
  X2742b41be11e0ec6_22 -> Xb93f0288e0006b54_0 [label="cp(2),mv(12)"];
  X2742b41be11e0ec6_23 -> Xb93f0288e0006b54_0 [label="cp(2),mv(11)"];
  X2742b41be11e0ec6_24 -> Xb93f0288e0006b54_0 [label="cp(2),mv(10)"];
  X2742b41be11e0ec6_25 -> Xb93f0288e0006b54_0 [label="cp(2),mv(9)"];
  X2742b41be11e0ec6_26 -> Xb93f0288e0006b54_0 [label="cp(2),mv(8)"];
  X2742b41be11e0ec6_27 -> X85724fedaf4a5444_0 [label="cp(2),mv(5),mv(6)"];
  subgraph cluster_322 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_323 [label="LOCALS\l0 = *const u8\l1 = usize\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const u8\l", style="filled", color=palegreen3];
    Xfb10f054466970ae_0 -> Xfb10f054466970ae_3 [label="0"];
    Xfb10f054466970ae_0 -> Xfb10f054466970ae_1 [label="other"];
    Xfb10f054466970ae_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xfb10f054466970ae_1 -> Xfb10f054466970ae_2 [label="4"];
    Xfb10f054466970ae_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    Xfb10f054466970ae_2 -> Xfb10f054466970ae_3;
    Xfb10f054466970ae_2 [label="Storage Dead _5\lGoto\l"];
    Xfb10f054466970ae_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  Xfb10f054466970ae_1 -> X69edc95c4972e1d8_0 [label="cp(1),mv(5)"];
  subgraph cluster_324 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_325 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    X69edc95c4972e1d8_0 -> X69edc95c4972e1d8_2 [label="0"];
    X69edc95c4972e1d8_0 -> X69edc95c4972e1d8_1 [label="other"];
    X69edc95c4972e1d8_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    X69edc95c4972e1d8_1 [label="Storage Dead _3\lReturn\l"];
    X69edc95c4972e1d8_2 [label="Call\l"];
  }
  X69edc95c4972e1d8_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_326 {
    label="<usize \nas \ncore::slice::SliceIndex<[\ncore::mem::MaybeUninit<u8\n>]>>::get_unchecked_mut";
    style="filled";
    color=lightgray;
    node_327 [label="LOCALS\l0 = *mut core::mem::MaybeUninit<u8>\l1 = usize\l2 = *mut [core::mem::MaybeUninit<u8>]\l3 = bool\l4 = ()\l5 = usize\l6 = *const [core::mem::MaybeUninit<u8>]\l7 = *mut core::mem::MaybeUninit<u8>\l", style="filled", color=palegreen3];
    Xab34a9c4e6a3b5b3_0 -> Xab34a9c4e6a3b5b3_3 [label="0"];
    Xab34a9c4e6a3b5b3_0 -> Xab34a9c4e6a3b5b3_1 [label="other"];
    Xab34a9c4e6a3b5b3_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xab34a9c4e6a3b5b3_1 -> Xab34a9c4e6a3b5b3_2 [label="4"];
    Xab34a9c4e6a3b5b3_1 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(2)\l5 <- PtrMetadata(cp(2))\lStorage Dead _6\lCall\l"];
    Xab34a9c4e6a3b5b3_2 -> Xab34a9c4e6a3b5b3_3;
    Xab34a9c4e6a3b5b3_2 [label="Storage Dead _5\lGoto\l"];
    Xab34a9c4e6a3b5b3_3 [label="Storage Dead _3\lStorage Live _7\l7 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(7), cp(1))\lStorage Dead _7\lReturn\l"];
  }
  Xab34a9c4e6a3b5b3_1 -> X6fda5d15f45f258b_0 [label="cp(1),mv(5)"];
  subgraph cluster_328 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked_mut::\nprecondition_check";
    style="filled";
    color=lightgray;
    node_329 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    X6fda5d15f45f258b_0 -> X6fda5d15f45f258b_2 [label="0"];
    X6fda5d15f45f258b_0 -> X6fda5d15f45f258b_1 [label="other"];
    X6fda5d15f45f258b_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    X6fda5d15f45f258b_1 [label="Storage Dead _3\lReturn\l"];
    X6fda5d15f45f258b_2 [label="Call\l"];
  }
  X6fda5d15f45f258b_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_330 {
    label="<core::result::Result<&pi\nnocchio_token_interface::\nstate::mint::Mint, \npinocchio_token_interface\n::error::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_331 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &pinocchio_token_interface::state::mint::Mint>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l2 = isize\l3 = &pinocchio_token_interface::state::mint::Mint\l4 = pinocchio_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_3 [label="0"];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_2 [label="1"];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_1 [label="other"];
    Xe6c4906ed7b13b2b_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xe6c4906ed7b13b2b_1 [label="Unreachable\l"];
    Xe6c4906ed7b13b2b_2 -> Xe6c4906ed7b13b2b_4;
    Xe6c4906ed7b13b2b_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xe6c4906ed7b13b2b_3 -> Xe6c4906ed7b13b2b_4;
    Xe6c4906ed7b13b2b_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xe6c4906ed7b13b2b_4 [label="Return\l"];
  }
  subgraph cluster_332 {
    label="<core::result::Result<u64\n, \npinocchio_token_interface\n::error::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_333 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, u64>\l1 = core::result::Result<u64, pinocchio_token_interface::error::TokenError>\l2 = isize\l3 = u64\l4 = pinocchio_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    Xcbfae2b25b3a8bf1_0 -> Xcbfae2b25b3a8bf1_3 [label="0"];
    Xcbfae2b25b3a8bf1_0 -> Xcbfae2b25b3a8bf1_2 [label="1"];
    Xcbfae2b25b3a8bf1_0 -> Xcbfae2b25b3a8bf1_1 [label="other"];
    Xcbfae2b25b3a8bf1_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xcbfae2b25b3a8bf1_1 [label="Unreachable\l"];
    Xcbfae2b25b3a8bf1_2 -> Xcbfae2b25b3a8bf1_4;
    Xcbfae2b25b3a8bf1_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xcbfae2b25b3a8bf1_3 -> Xcbfae2b25b3a8bf1_4;
    Xcbfae2b25b3a8bf1_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xcbfae2b25b3a8bf1_4 [label="Return\l"];
  }
  subgraph cluster_334 {
    label="<core::result::Result<&pi\nnocchio::account_info::Ac\ncountInfo, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_335 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l1 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &pinocchio::account_info::AccountInfo\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_3 [label="0"];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_2 [label="1"];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_1 [label="other"];
    X5872796c41a72d9e_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X5872796c41a72d9e_1 [label="Unreachable\l"];
    X5872796c41a72d9e_2 -> X5872796c41a72d9e_4;
    X5872796c41a72d9e_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X5872796c41a72d9e_3 -> X5872796c41a72d9e_4;
    X5872796c41a72d9e_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X5872796c41a72d9e_4 [label="Return\l"];
  }
  subgraph cluster_336 {
    label="<core::result::Result<boo\nl, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_337 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = bool\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_3 [label="0"];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_2 [label="1"];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_1 [label="other"];
    X22ee39b8b53b763c_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X22ee39b8b53b763c_1 [label="Unreachable\l"];
    X22ee39b8b53b763c_2 -> X22ee39b8b53b763c_4;
    X22ee39b8b53b763c_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X22ee39b8b53b763c_3 -> X22ee39b8b53b763c_4;
    X22ee39b8b53b763c_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X22ee39b8b53b763c_4 [label="Return\l"];
  }
  subgraph cluster_338 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_339 [label="LOCALS\l0 = bool\l1 = &pinocchio::program_error::ProgramError\l2 = &pinocchio::program_error::ProgramError\l3 = isize\l4 = isize\l5 = bool\l6 = (&pinocchio::program_error::ProgramError, &pinocchio::program_error::ProgramError)\l7 = isize\l8 = isize\l9 = &u32\l10 = &u32\l11 = &&u32\l12 = &&u32\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &pinocchio::program_error::ProgramError\l16 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X44c3ea7339825cac_0 -> X44c3ea7339825cac_2 [label="0"];
    X44c3ea7339825cac_0 -> X44c3ea7339825cac_1 [label="other"];
    X44c3ea7339825cac_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X44c3ea7339825cac_1 -> X44c3ea7339825cac_4 [label="0"];
    X44c3ea7339825cac_1 -> X44c3ea7339825cac_3 [label="other"];
    X44c3ea7339825cac_1 [label="6 <- Tuple (cp(1), cp(2))\l13 <- CopyForDeref(6.0)\l8 <- Discriminant((*13))\lSwitchInt mv(8)\l"];
    X44c3ea7339825cac_2 -> X44c3ea7339825cac_6;
    X44c3ea7339825cac_2 [label="0 <- Use(const bool)\lGoto\l"];
    X44c3ea7339825cac_3 -> X44c3ea7339825cac_6;
    X44c3ea7339825cac_3 [label="0 <- Use(const bool)\lGoto\l"];
    X44c3ea7339825cac_4 -> X44c3ea7339825cac_5 [label="0"];
    X44c3ea7339825cac_4 -> X44c3ea7339825cac_3 [label="other"];
    X44c3ea7339825cac_4 [label="14 <- CopyForDeref(6.1)\l7 <- Discriminant((*14))\lSwitchInt mv(7)\l"];
    X44c3ea7339825cac_5 -> X44c3ea7339825cac_6 [label="0"];
    X44c3ea7339825cac_5 [label="15 <- CopyForDeref(6.0)\l9 <- & ((*15) as variant 0).0\l16 <- CopyForDeref(6.1)\l10 <- & ((*16) as variant 0).0\l11 <- & 9\l12 <- & 10\lCall\l"];
    X44c3ea7339825cac_6 [label="Return\l"];
  }
  X44c3ea7339825cac_5 -> X1bb3de031e0823b_0 [label="mv(11),mv(12)"];
  subgraph cluster_340 {
    label="<core::str::pattern::StrS\nearcher<'_, \n'_> \nas \ncore::str::pattern::Searc\nher<'_>>::next_match";
    style="filled";
    color=lightgray;
    node_341 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::StrSearcher<'_, '_>\l2 = isize\l3 = core::str::pattern::SearchStep\l4 = isize\l5 = usize\l6 = usize\l7 = (usize, usize)\l8 = &mut core::str::pattern::TwoWaySearcher\l9 = bool\l10 = usize\l11 = &[u8]\l12 = &[u8]\l13 = &[u8]\l14 = &[u8]\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l", style="filled", color=palegreen3];
    X3d42ab388282bd72_0 -> X3d42ab388282bd72_3 [label="0"];
    X3d42ab388282bd72_0 -> X3d42ab388282bd72_2 [label="1"];
    X3d42ab388282bd72_0 -> X3d42ab388282bd72_1 [label="other"];
    X3d42ab388282bd72_0 [label="2 <- Discriminant((*1).2)\lSwitchInt mv(2)\l"];
    X3d42ab388282bd72_1 [label="Unreachable\l"];
    X3d42ab388282bd72_2 -> X3d42ab388282bd72_9 [label="0"];
    X3d42ab388282bd72_2 -> X3d42ab388282bd72_8 [label="other"];
    X3d42ab388282bd72_2 [label="8 <- &mut ((*1).2 as variant 1).0\lStorage Live _10\l10 <- Use(cp((*8).6))\l9 <- Eq(mv(10), const ?_usize)\lStorage Dead _10\lSwitchInt cp(9)\l"];
    X3d42ab388282bd72_3 -> X3d42ab388282bd72_4 [label="3"];
    X3d42ab388282bd72_3 [label="Storage Live _3\lCall\l"];
    X3d42ab388282bd72_4 -> X3d42ab388282bd72_7 [label="0"];
    X3d42ab388282bd72_4 -> X3d42ab388282bd72_5 [label="1"];
    X3d42ab388282bd72_4 -> X3d42ab388282bd72_6 [label="2"];
    X3d42ab388282bd72_4 -> X3d42ab388282bd72_1 [label="other"];
    X3d42ab388282bd72_4 [label="4 <- Discriminant(3)\lSwitchInt mv(4)\l"];
    X3d42ab388282bd72_5 -> X3d42ab388282bd72_3;
    X3d42ab388282bd72_5 [label="Storage Dead _3\lGoto\l"];
    X3d42ab388282bd72_6 -> X3d42ab388282bd72_10;
    X3d42ab388282bd72_6 [label="0 <- Adt{0} ()\lGoto\l"];
    X3d42ab388282bd72_7 -> X3d42ab388282bd72_10;
    X3d42ab388282bd72_7 [label="5 <- Use(cp((3 as variant 0).0))\l6 <- Use(cp((3 as variant 0).1))\lStorage Live _7\l7 <- Tuple (cp(5), cp(6))\l0 <- Adt{1} (mv(7))\lStorage Dead _7\lGoto\l"];
    X3d42ab388282bd72_8 -> X3d42ab388282bd72_11 [label="0"];
    X3d42ab388282bd72_8 [label="15 <- Use(cp((*1).0))\l11 <- Cast-Transmute cp(15)\l16 <- Use(cp((*1).1))\l12 <- Cast-Transmute cp(16)\lCall\l"];
    X3d42ab388282bd72_9 -> X3d42ab388282bd72_11 [label="0"];
    X3d42ab388282bd72_9 [label="17 <- Use(cp((*1).0))\l13 <- Cast-Transmute cp(17)\l18 <- Use(cp((*1).1))\l14 <- Cast-Transmute cp(18)\lCall\l"];
    X3d42ab388282bd72_10 -> X3d42ab388282bd72_11;
    X3d42ab388282bd72_10 [label="Storage Dead _3\lGoto\l"];
    X3d42ab388282bd72_11 [label="Return\l"];
  }
  X3d42ab388282bd72_3 -> Xc26d9755ab5fc0f9_0 [label="cp(1)"];
  X3d42ab388282bd72_8 -> X108a068c4d285151_0 [label="mv(8),mv(11),mv(12),const bool"];
  X3d42ab388282bd72_9 -> X108a068c4d285151_0 [label="mv(8),mv(13),mv(14),const bool"];
  subgraph cluster_342 {
    label="<core::str::pattern::StrS\nearcher<'_, \n'_> \nas \ncore::str::pattern::Searc\nher<'_>>::next";
    style="filled";
    color=lightgray;
    node_343 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::StrSearcher<'_, '_>\l2 = isize\l3 = &mut core::str::pattern::EmptyNeedle\l4 = bool\l5 = bool\l6 = bool\l7 = usize\l8 = core::option::Option<char>\l9 = &mut core::str::Chars<'_>\l10 = core::str::Chars<'_>\l11 = &str\l12 = core::ops::RangeFrom<usize>\l13 = char\l14 = usize\l15 = usize\l16 = &mut core::str::pattern::TwoWaySearcher\l17 = bool\l18 = usize\l19 = usize\l20 = bool\l21 = usize\l22 = core::str::pattern::SearchStep\l23 = &[u8]\l24 = &[u8]\l25 = isize\l26 = usize\l27 = usize\l28 = bool\l29 = usize\l30 = usize\l31 = usize\l32 = usize\l33 = usize\l34 = &str\l35 = &str\l36 = &str\l37 = &str\l38 = &str\l39 = &[u8]\l40 = usize\l41 = core::option::Option<&str>\l42 = isize\l43 = !\l44 = &[u8]\l45 = core::slice::Iter<'_, u8>\l46 = &[u8]\l47 = usize\l48 = core::ptr::NonNull<u8>\l49 = core::ptr::NonNull<[u8]>\l50 = *const u8\l51 = *mut u8\l52 = *mut u8\l53 = *const [u8]\l54 = *const u8\l55 = core::option::Option<u32>\l56 = &mut core::slice::Iter<'_, u8>\l57 = isize\l58 = u32\l59 = char\l60 = bool\l61 = ()\l62 = u32\l63 = bool\l64 = bool\l65 = bool\l66 = bool\l67 = usize\l68 = u8\l69 = usize\l70 = bool\l71 = &[u8]\l72 = i8\l", style="filled", color=palegreen3];
    Xc26d9755ab5fc0f9_0 -> Xc26d9755ab5fc0f9_3 [label="0"];
    Xc26d9755ab5fc0f9_0 -> Xc26d9755ab5fc0f9_2 [label="1"];
    Xc26d9755ab5fc0f9_0 -> Xc26d9755ab5fc0f9_1 [label="other"];
    Xc26d9755ab5fc0f9_0 [label="2 <- Discriminant((*1).2)\lSwitchInt mv(2)\l"];
    Xc26d9755ab5fc0f9_1 [label="Unreachable\l"];
    Xc26d9755ab5fc0f9_2 -> Xc26d9755ab5fc0f9_10 [label="0"];
    Xc26d9755ab5fc0f9_2 -> Xc26d9755ab5fc0f9_9 [label="other"];
    Xc26d9755ab5fc0f9_2 [label="16 <- &mut ((*1).2 as variant 1).0\lStorage Live _17\lStorage Live _18\l18 <- Use(cp((*16).4))\lStorage Live _19\l34 <- Use(cp((*1).0))\lStorage Live _39\l39 <- Cast-Transmute cp(34)\l19 <- PtrMetadata(cp(39))\lStorage Dead _39\l17 <- Eq(mv(18), mv(19))\lSwitchInt mv(17)\l"];
    Xc26d9755ab5fc0f9_3 -> Xc26d9755ab5fc0f9_5 [label="0"];
    Xc26d9755ab5fc0f9_3 -> Xc26d9755ab5fc0f9_4 [label="other"];
    Xc26d9755ab5fc0f9_3 [label="Storage Live _3\l3 <- &mut ((*1).2 as variant 0).0\lStorage Live _4\l4 <- Use(cp(((*1).2 as variant 0).0.4))\lSwitchInt mv(4)\l"];
    Xc26d9755ab5fc0f9_4 -> Xc26d9755ab5fc0f9_17;
    Xc26d9755ab5fc0f9_4 [label="0 <- Adt{2} ()\lStorage Dead _4\lStorage Dead _3\lGoto\l"];
    Xc26d9755ab5fc0f9_5 -> Xc26d9755ab5fc0f9_18 [label="41"];
    Xc26d9755ab5fc0f9_5 [label="Storage Dead _4\l5 <- Use(cp(((*1).2 as variant 0).0.2))\lStorage Live _6\l6 <- Use(cp(((*1).2 as variant 0).0.2))\l((*1).2 as variant 0).0.2 <- Not(mv(6))\lStorage Dead _6\l7 <- Use(cp(((*1).2 as variant 0).0.0))\lStorage Live _8\lStorage Live _9\lStorage Live _10\l35 <- Use(cp((*1).0))\lStorage Live _12\l12 <- Adt{0} (cp(7))\lStorage Live _40\lStorage Live _42\lStorage Live _44\l44 <- Cast-Transmute cp(35)\l40 <- PtrMetadata(cp(44))\lStorage Dead _44\lStorage Live _41\lCall\l"];
    Xc26d9755ab5fc0f9_6 -> Xc26d9755ab5fc0f9_8;
    Xc26d9755ab5fc0f9_6 [label="0 <- Adt{0} (cp(7), cp(7))\lGoto\l"];
    Xc26d9755ab5fc0f9_7 -> Xc26d9755ab5fc0f9_27 [label="0"];
    Xc26d9755ab5fc0f9_7 -> Xc26d9755ab5fc0f9_32 [label="other"];
    Xc26d9755ab5fc0f9_7 [label="13 <- Use(cp((8 as variant 1).0))\lStorage Live _14\lStorage Live _62\l62 <- Cast-IntToInt cp(13)\lStorage Live _63\lStorage Live _64\lStorage Live _65\l63 <- Lt(cp(62), const ?_u32)\lSwitchInt mv(63)\l"];
    Xc26d9755ab5fc0f9_8 -> Xc26d9755ab5fc0f9_17;
    Xc26d9755ab5fc0f9_8 [label="Storage Dead _10\lStorage Dead _8\lStorage Dead _3\lGoto\l"];
    Xc26d9755ab5fc0f9_9 -> Xc26d9755ab5fc0f9_17;
    Xc26d9755ab5fc0f9_9 [label="Storage Dead _19\lStorage Dead _18\l0 <- Adt{2} ()\lStorage Dead _17\lGoto\l"];
    Xc26d9755ab5fc0f9_10 -> Xc26d9755ab5fc0f9_11 [label="22"];
    Xc26d9755ab5fc0f9_10 [label="Storage Dead _19\lStorage Dead _18\lStorage Dead _17\lStorage Live _21\l21 <- Use(cp((*16).6))\l20 <- Eq(mv(21), const ?_usize)\lStorage Dead _21\l36 <- Use(cp((*1).0))\l23 <- Cast-Transmute cp(36)\l37 <- Use(cp((*1).1))\l24 <- Cast-Transmute cp(37)\lCall\l"];
    Xc26d9755ab5fc0f9_11 -> Xc26d9755ab5fc0f9_13 [label="1"];
    Xc26d9755ab5fc0f9_11 -> Xc26d9755ab5fc0f9_12 [label="other"];
    Xc26d9755ab5fc0f9_11 [label="25 <- Discriminant(22)\lSwitchInt mv(25)\l"];
    Xc26d9755ab5fc0f9_12 -> Xc26d9755ab5fc0f9_17;
    Xc26d9755ab5fc0f9_12 [label="0 <- Use(cp(22))\lGoto\l"];
    Xc26d9755ab5fc0f9_13 -> Xc26d9755ab5fc0f9_14;
    Xc26d9755ab5fc0f9_13 [label="26 <- Use(cp((22 as variant 1).0))\lStorage Live _27\l27 <- Use(cp((22 as variant 1).1))\lGoto\l"];
    Xc26d9755ab5fc0f9_14 -> Xc26d9755ab5fc0f9_33 [label="0"];
    Xc26d9755ab5fc0f9_14 -> Xc26d9755ab5fc0f9_34 [label="other"];
    Xc26d9755ab5fc0f9_14 [label="Storage Live _28\l38 <- Use(cp((*1).0))\lStorage Live _29\l29 <- Use(cp(27))\lStorage Live _67\lStorage Live _69\lStorage Live _70\lStorage Live _71\lSwitchInt mv(29)\l"];
    Xc26d9755ab5fc0f9_15 -> Xc26d9755ab5fc0f9_39 [label="30"];
    Xc26d9755ab5fc0f9_15 [label="Storage Dead _29\lStorage Dead _28\lStorage Live _30\lStorage Live _31\l31 <- Use(cp(27))\lStorage Live _32\l32 <- Use(cp((*16).4))\lCall\l"];
    Xc26d9755ab5fc0f9_16 -> Xc26d9755ab5fc0f9_14;
    Xc26d9755ab5fc0f9_16 [label="Storage Dead _29\l27 <- Add(cp(27), const ?_usize)\lStorage Dead _28\lGoto\l"];
    Xc26d9755ab5fc0f9_17 [label="Return\l"];
    Xc26d9755ab5fc0f9_18 -> Xc26d9755ab5fc0f9_19 [label="0"];
    Xc26d9755ab5fc0f9_18 -> Xc26d9755ab5fc0f9_20 [label="1"];
    Xc26d9755ab5fc0f9_18 -> Xc26d9755ab5fc0f9_1 [label="other"];
    Xc26d9755ab5fc0f9_18 [label="42 <- Discriminant(41)\lSwitchInt mv(42)\l"];
    Xc26d9755ab5fc0f9_19 [label="Call\l"];
    Xc26d9755ab5fc0f9_20 -> Xc26d9755ab5fc0f9_21 [label="55"];
    Xc26d9755ab5fc0f9_20 [label="11 <- Use(cp((41 as variant 1).0))\lStorage Dead _41\lStorage Dead _42\lStorage Dead _40\lStorage Dead _12\lStorage Live _46\lStorage Live _50\lStorage Live _45\l46 <- Cast-Transmute cp(11)\lStorage Live _47\lStorage Live _48\lStorage Live _53\lStorage Live _54\l47 <- PtrMetadata(cp(46))\lStorage Live _49\l53 <- &raw (*46)\l49 <- Adt{0} (cp(53))\l54 <- Cast-PtrToPtr cp(53)\l48 <- Adt{0} (cp(54))\lStorage Dead _49\lStorage Live _51\lStorage Live _52\l52 <- Cast-PtrToPtr cp(53)\l51 <- Offset(cp(52), cp(47))\lStorage Dead _52\l50 <- Cast-PtrToPtr mv(51)\lStorage Dead _51\l45 <- Adt{0} (cp(48), cp(50), const core::marker::PhantomData<&u8>)\lStorage Dead _54\lStorage Dead _53\lStorage Dead _48\lStorage Dead _47\l10 <- Adt{0} (mv(45))\lStorage Dead _45\lStorage Dead _50\lStorage Dead _46\l9 <- &mut 10\lStorage Live _56\lStorage Live _58\lStorage Live _55\l56 <- &mut 10.0\lCall\l"];
    Xc26d9755ab5fc0f9_21 -> Xc26d9755ab5fc0f9_22 [label="0"];
    Xc26d9755ab5fc0f9_21 -> Xc26d9755ab5fc0f9_23 [label="1"];
    Xc26d9755ab5fc0f9_21 -> Xc26d9755ab5fc0f9_1 [label="other"];
    Xc26d9755ab5fc0f9_21 [label="Storage Live _57\l57 <- Discriminant(55)\lSwitchInt mv(57)\l"];
    Xc26d9755ab5fc0f9_22 -> Xc26d9755ab5fc0f9_40 [label="0"];
    Xc26d9755ab5fc0f9_22 -> Xc26d9755ab5fc0f9_6 [label="other"];
    Xc26d9755ab5fc0f9_22 [label="Storage Dead _57\lStorage Dead _55\lStorage Dead _58\lStorage Dead _56\lStorage Dead _9\lSwitchInt cp(5)\l"];
    Xc26d9755ab5fc0f9_23 -> Xc26d9755ab5fc0f9_25 [label="0"];
    Xc26d9755ab5fc0f9_23 -> Xc26d9755ab5fc0f9_24 [label="other"];
    Xc26d9755ab5fc0f9_23 [label="58 <- Use(mv((55 as variant 1).0))\lStorage Live _59\lStorage Live _60\l60 <- UbChecks :: bool\lSwitchInt mv(60)\l"];
    Xc26d9755ab5fc0f9_24 -> Xc26d9755ab5fc0f9_25 [label="61"];
    Xc26d9755ab5fc0f9_24 [label="Call\l"];
    Xc26d9755ab5fc0f9_25 -> Xc26d9755ab5fc0f9_7 [label="0"];
    Xc26d9755ab5fc0f9_25 -> Xc26d9755ab5fc0f9_6 [label="other"];
    Xc26d9755ab5fc0f9_25 [label="Storage Dead _60\l59 <- Cast-Transmute cp(58)\l8 <- Adt{1} (mv(59))\lStorage Dead _59\lStorage Dead _57\lStorage Dead _55\lStorage Dead _58\lStorage Dead _56\lStorage Dead _9\lSwitchInt cp(5)\l"];
    Xc26d9755ab5fc0f9_26 -> Xc26d9755ab5fc0f9_8;
    Xc26d9755ab5fc0f9_26 [label="Storage Dead _65\lStorage Dead _64\lStorage Dead _63\lStorage Dead _62\l((*1).2 as variant 0).0.0 <- Add(cp(((*1).2 as variant 0).0.0), mv(14))\lStorage Dead _14\lStorage Live _15\l15 <- Use(cp(((*1).2 as variant 0).0.0))\l0 <- Adt{1} (cp(7), mv(15))\lStorage Dead _15\lGoto\l"];
    Xc26d9755ab5fc0f9_27 -> Xc26d9755ab5fc0f9_28 [label="0"];
    Xc26d9755ab5fc0f9_27 -> Xc26d9755ab5fc0f9_31 [label="other"];
    Xc26d9755ab5fc0f9_27 [label="64 <- Lt(cp(62), const ?_u32)\lSwitchInt mv(64)\l"];
    Xc26d9755ab5fc0f9_28 -> Xc26d9755ab5fc0f9_29 [label="0"];
    Xc26d9755ab5fc0f9_28 -> Xc26d9755ab5fc0f9_30 [label="other"];
    Xc26d9755ab5fc0f9_28 [label="65 <- Lt(cp(62), const ?_u32)\lSwitchInt mv(65)\l"];
    Xc26d9755ab5fc0f9_29 -> Xc26d9755ab5fc0f9_26;
    Xc26d9755ab5fc0f9_29 [label="14 <- Use(const ?_usize)\lGoto\l"];
    Xc26d9755ab5fc0f9_30 -> Xc26d9755ab5fc0f9_26;
    Xc26d9755ab5fc0f9_30 [label="14 <- Use(const ?_usize)\lGoto\l"];
    Xc26d9755ab5fc0f9_31 -> Xc26d9755ab5fc0f9_26;
    Xc26d9755ab5fc0f9_31 [label="14 <- Use(const ?_usize)\lGoto\l"];
    Xc26d9755ab5fc0f9_32 -> Xc26d9755ab5fc0f9_26;
    Xc26d9755ab5fc0f9_32 [label="14 <- Use(const ?_usize)\lGoto\l"];
    Xc26d9755ab5fc0f9_33 -> Xc26d9755ab5fc0f9_15;
    Xc26d9755ab5fc0f9_33 [label="Storage Dead _71\lStorage Dead _70\lStorage Dead _69\lStorage Dead _67\lGoto\l"];
    Xc26d9755ab5fc0f9_34 -> Xc26d9755ab5fc0f9_36 [label="0"];
    Xc26d9755ab5fc0f9_34 -> Xc26d9755ab5fc0f9_35 [label="other"];
    Xc26d9755ab5fc0f9_34 [label="Storage Live _66\l71 <- Cast-Transmute cp(38)\l67 <- PtrMetadata(cp(71))\l66 <- Ge(cp(29), cp(67))\lSwitchInt mv(66)\l"];
    Xc26d9755ab5fc0f9_35 -> Xc26d9755ab5fc0f9_38;
    Xc26d9755ab5fc0f9_35 [label="28 <- Eq(cp(29), cp(67))\lGoto\l"];
    Xc26d9755ab5fc0f9_36 -> Xc26d9755ab5fc0f9_37;
    Xc26d9755ab5fc0f9_36 [label="Storage Live _68\l69 <- Len((*71))\l70 <- Lt(cp(29), cp(69))\lAssert mv(70) == true\l"];
    Xc26d9755ab5fc0f9_37 -> Xc26d9755ab5fc0f9_38;
    Xc26d9755ab5fc0f9_37 [label="68 <- Use(cp((*71)[_29]))\lStorage Live _72\l72 <- Cast-IntToInt cp(68)\l28 <- Ge(mv(72), const ?_i8)\lStorage Dead _72\lStorage Dead _68\lGoto\l"];
    Xc26d9755ab5fc0f9_38 -> Xc26d9755ab5fc0f9_16 [label="0"];
    Xc26d9755ab5fc0f9_38 -> Xc26d9755ab5fc0f9_15 [label="other"];
    Xc26d9755ab5fc0f9_38 [label="Storage Dead _66\lStorage Dead _71\lStorage Dead _70\lStorage Dead _69\lStorage Dead _67\lSwitchInt mv(28)\l"];
    Xc26d9755ab5fc0f9_39 -> Xc26d9755ab5fc0f9_17;
    Xc26d9755ab5fc0f9_39 [label="Storage Dead _32\lStorage Dead _31\l(*16).4 <- Use(mv(30))\lStorage Dead _30\lStorage Live _33\l33 <- Use(cp(27))\l0 <- Adt{1} (cp(26), mv(33))\lStorage Dead _33\lStorage Dead _27\lGoto\l"];
    Xc26d9755ab5fc0f9_40 -> Xc26d9755ab5fc0f9_8;
    Xc26d9755ab5fc0f9_40 [label="((*1).2 as variant 0).0.4 <- Use(const bool)\l0 <- Adt{2} ()\lGoto\l"];
  }
  Xc26d9755ab5fc0f9_5 -> Xd282c93ec4679f4f_0 [label="mv(12),cp(35)"];
  Xc26d9755ab5fc0f9_10 -> X6452371870a661f2_0 [label="cp(16),mv(23),mv(24),mv(20)"];
  Xc26d9755ab5fc0f9_15 -> X727d00c50bac1297_0 [label="mv(31),mv(32),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  Xc26d9755ab5fc0f9_19 -> Xc370cd96d12e6547_0 [label="mv(35),mv(7),mv(40)"];
  Xc26d9755ab5fc0f9_20 -> Xf810b0801103927_0 [label="mv(56)"];
  Xc26d9755ab5fc0f9_24 -> Xeeb9aa05dcd0eaef_0 [label="cp(58)"];
  subgraph cluster_344 {
    label="<pinocchio_log::logger::L\nogger<257> \nas \ncore::default::Default>::\ndefault";
    style="filled";
    color=lightgray;
    node_345 [label="LOCALS\l0 = pinocchio_log::logger::Logger<257>\l1 = [core::mem::MaybeUninit<u8>; 257]\l", style="filled", color=palegreen3];
    X198a02deb871dc7c_0 [label="1 <- Repeat const core::mem::MaybeUninit<u8>\l0 <- Adt{0} (mv(1), const ?_usize)\lReturn\l"];
  }
  subgraph cluster_346 {
    label="<pinocchio_log::logger::L\nogger<257> \nas \ncore::ops::Deref>::deref";
    style="filled";
    color=lightgray;
    node_347 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio_log::logger::Logger<257>\l2 = *const u8\l3 = *const core::mem::MaybeUninit<u8>\l4 = &[core::mem::MaybeUninit<u8>]\l5 = &[core::mem::MaybeUninit<u8>; 257]\l6 = usize\l", style="filled", color=palegreen3];
    Xaae16f8cc6e03bae_0 -> Xaae16f8cc6e03bae_1 [label="3"];
    Xaae16f8cc6e03bae_0 [label="5 <- & (*1).0\l4 <- Cast-PointerCoercion(Unsize) mv(5)\lCall\l"];
    Xaae16f8cc6e03bae_1 -> Xaae16f8cc6e03bae_2 [label="0"];
    Xaae16f8cc6e03bae_1 [label="2 <- Cast-PtrToPtr mv(3)\l6 <- Use(cp((*1).1))\lCall\l"];
    Xaae16f8cc6e03bae_2 [label="Return\l"];
  }
  Xaae16f8cc6e03bae_0 -> X975bf2a3f5955f9_0 [label="mv(4)"];
  Xaae16f8cc6e03bae_1 -> X2bbf04117b29714a_0 [label="cp(2),mv(6)"];
  subgraph cluster_348 {
    label="<core::str::pattern::Matc\nhOnly \nas \ncore::str::pattern::TwoWa\nyStrategy>::use_early_rej\nect";
    style="filled";
    color=lightgray;
    node_349 [label="LOCALS\l0 = bool\l", style="filled", color=palegreen3];
    Xad7c3769434f2850_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_350 {
    label="<core::str::pattern::Matc\nhOnly \nas \ncore::str::pattern::TwoWa\nyStrategy>::matching";
    style="filled";
    color=lightgray;
    node_351 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = usize\l2 = usize\l3 = (usize, usize)\l", style="filled", color=palegreen3];
    X6feca9f9ebf23717_0 [label="Storage Live _3\l3 <- Tuple (cp(1), cp(2))\l0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_352 {
    label="<core::str::pattern::Matc\nhOnly \nas \ncore::str::pattern::TwoWa\nyStrategy>::rejecting";
    style="filled";
    color=lightgray;
    node_353 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xe65b0d04d62dce41_0 [label="0 <- Adt{0} ()\lReturn\l"];
  }
  subgraph cluster_354 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Rever\nseSearcher<'_>>::next_bac\nk";
    style="filled";
    color=lightgray;
    node_355 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = usize\l3 = &str\l4 = usize\l5 = core::str::Chars<'_>\l6 = usize\l7 = &core::slice::Iter<'_, u8>\l8 = core::option::Option<char>\l9 = &mut core::str::Chars<'_>\l10 = char\l11 = usize\l12 = usize\l13 = &core::slice::Iter<'_, u8>\l14 = bool\l15 = char\l16 = usize\l17 = usize\l18 = &str\l19 = *const str\l20 = *const str\l21 = *const [u8]\l22 = bool\l23 = ()\l24 = usize\l25 = usize\l26 = *const [u8]\l27 = *const u8\l28 = *const u8\l29 = core::slice::Iter<'_, u8>\l30 = &[u8]\l31 = usize\l32 = core::ptr::NonNull<u8>\l33 = core::ptr::NonNull<[u8]>\l34 = *const u8\l35 = *mut u8\l36 = *mut u8\l37 = *const [u8]\l38 = *const u8\l39 = core::option::Option<u32>\l40 = &mut core::slice::Iter<'_, u8>\l41 = isize\l42 = u32\l43 = char\l44 = ()\l", style="filled", color=palegreen3];
    Xa12778c1e9fbfec3_0 -> Xa12778c1e9fbfec3_9 [label="0"];
    Xa12778c1e9fbfec3_0 -> Xa12778c1e9fbfec3_7 [label="other"];
    Xa12778c1e9fbfec3_0 [label="2 <- Use(cp((*1).2))\l18 <- Use(cp((*1).0))\l4 <- Use(cp((*1).1))\lStorage Live _19\lStorage Live _20\l20 <- &raw (*18)\lStorage Live _21\lStorage Live _25\l21 <- Cast-PtrToPtr cp(20)\l22 <- UbChecks :: bool\lSwitchInt cp(22)\l"];
    Xa12778c1e9fbfec3_1 -> Xa12778c1e9fbfec3_10 [label="39"];
    Xa12778c1e9fbfec3_1 [label="Storage Dead _7\lStorage Live _8\lStorage Live _9\l9 <- &mut 5\lStorage Live _40\lStorage Live _42\lStorage Live _39\l40 <- &mut 5.0\lCall\l"];
    Xa12778c1e9fbfec3_2 -> Xa12778c1e9fbfec3_4 [label="0"];
    Xa12778c1e9fbfec3_2 -> Xa12778c1e9fbfec3_3 [label="other"];
    Xa12778c1e9fbfec3_2 [label="Storage Dead _13\l11 <- Sub(cp(6), mv(12))\lStorage Dead _12\l(*1).2 <- Sub(cp((*1).2), mv(11))\lStorage Dead _11\lStorage Live _14\lStorage Live _15\l15 <- Use(cp((*1).3))\l14 <- Eq(cp(10), mv(15))\lSwitchInt mv(14)\l"];
    Xa12778c1e9fbfec3_3 -> Xa12778c1e9fbfec3_5;
    Xa12778c1e9fbfec3_3 [label="Storage Dead _15\lStorage Live _16\l16 <- Use(cp((*1).2))\l0 <- Adt{0} (mv(16), cp(2))\lStorage Dead _16\lGoto\l"];
    Xa12778c1e9fbfec3_4 -> Xa12778c1e9fbfec3_5;
    Xa12778c1e9fbfec3_4 [label="Storage Dead _15\lStorage Live _17\l17 <- Use(cp((*1).2))\l0 <- Adt{1} (mv(17), cp(2))\lStorage Dead _17\lGoto\l"];
    Xa12778c1e9fbfec3_5 -> Xa12778c1e9fbfec3_6;
    Xa12778c1e9fbfec3_5 [label="Storage Dead _14\lGoto\l"];
    Xa12778c1e9fbfec3_6 [label="Storage Dead _5\lStorage Dead _8\lReturn\l"];
    Xa12778c1e9fbfec3_7 -> Xa12778c1e9fbfec3_8 [label="23"];
    Xa12778c1e9fbfec3_7 [label="Storage Live _24\l24 <- PtrMetadata(cp(18))\lCall\l"];
    Xa12778c1e9fbfec3_8 -> Xa12778c1e9fbfec3_9;
    Xa12778c1e9fbfec3_8 [label="Storage Dead _24\lGoto\l"];
    Xa12778c1e9fbfec3_9 -> Xa12778c1e9fbfec3_1 [label="6"];
    Xa12778c1e9fbfec3_9 [label="25 <- SubUnchecked(cp(2), cp(4))\lStorage Live _26\lStorage Live _27\lStorage Live _28\l28 <- Cast-PtrToPtr cp(20)\l27 <- Offset(cp(28), cp(4))\lStorage Dead _28\l26 <- *([u8]) (cp(27), cp(25))\lStorage Dead _27\l19 <- Cast-PtrToPtr mv(26)\lStorage Dead _26\lStorage Dead _25\lStorage Dead _21\lStorage Dead _20\l3 <- & (*19)\lStorage Dead _19\lStorage Live _5\lStorage Live _30\lStorage Live _34\lStorage Live _29\l30 <- Cast-Transmute cp(3)\lStorage Live _31\lStorage Live _32\lStorage Live _37\lStorage Live _38\l31 <- PtrMetadata(cp(30))\lStorage Live _33\l37 <- &raw (*30)\l33 <- Adt{0} (cp(37))\l38 <- Cast-PtrToPtr cp(37)\l32 <- Adt{0} (cp(38))\lStorage Dead _33\lStorage Live _35\lStorage Live _36\l36 <- Cast-PtrToPtr cp(37)\l35 <- Offset(cp(36), cp(31))\lStorage Dead _36\l34 <- Cast-PtrToPtr mv(35)\lStorage Dead _35\l29 <- Adt{0} (cp(32), cp(34), const core::marker::PhantomData<&u8>)\lStorage Dead _38\lStorage Dead _37\lStorage Dead _32\lStorage Dead _31\l5 <- Adt{0} (mv(29))\lStorage Dead _29\lStorage Dead _34\lStorage Dead _30\lStorage Live _7\l7 <- & 5.0\lCall\l"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_12 [label="0"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_13 [label="1"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_11 [label="other"];
    Xa12778c1e9fbfec3_10 [label="Storage Live _41\l41 <- Discriminant(39)\lSwitchInt mv(41)\l"];
    Xa12778c1e9fbfec3_11 [label="Unreachable\l"];
    Xa12778c1e9fbfec3_12 -> Xa12778c1e9fbfec3_6;
    Xa12778c1e9fbfec3_12 [label="Storage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l0 <- Adt{2} ()\lGoto\l"];
    Xa12778c1e9fbfec3_13 -> Xa12778c1e9fbfec3_15 [label="0"];
    Xa12778c1e9fbfec3_13 -> Xa12778c1e9fbfec3_14 [label="other"];
    Xa12778c1e9fbfec3_13 [label="42 <- Use(mv((39 as variant 1).0))\lStorage Live _43\lSwitchInt cp(22)\l"];
    Xa12778c1e9fbfec3_14 -> Xa12778c1e9fbfec3_15 [label="44"];
    Xa12778c1e9fbfec3_14 [label="Call\l"];
    Xa12778c1e9fbfec3_15 -> Xa12778c1e9fbfec3_2 [label="12"];
    Xa12778c1e9fbfec3_15 [label="43 <- Cast-Transmute cp(42)\l8 <- Adt{1} (mv(43))\lStorage Dead _43\lStorage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l10 <- Use(cp((8 as variant 1).0))\lStorage Live _11\lStorage Live _12\lStorage Live _13\l13 <- & 5.0\lCall\l"];
  }
  Xa12778c1e9fbfec3_1 -> X514f89d19e2bc1b0_0 [label="mv(40)"];
  Xa12778c1e9fbfec3_7 -> X371ee97037325b3b_0 [label="cp(4),cp(2),mv(24)"];
  Xa12778c1e9fbfec3_9 -> Xd05a555747cd5aa8_0 [label="mv(7)"];
  Xa12778c1e9fbfec3_14 -> Xeeb9aa05dcd0eaef_0 [label="cp(42)"];
  Xa12778c1e9fbfec3_15 -> Xd05a555747cd5aa8_0 [label="mv(13)"];
  subgraph cluster_356 {
    label="<core::ops::Range<usize> \nas \ncore::iter::range::RangeI\nteratorImpl>::spec_next_b\nack";
    style="filled";
    color=lightgray;
    node_357 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::Range<usize>\l2 = bool\l3 = &usize\l4 = &usize\l5 = usize\l6 = usize\l7 = usize\l", style="filled", color=palegreen3];
    Xa32faf8d1f160361_0 -> Xa32faf8d1f160361_1 [label="2"];
    Xa32faf8d1f160361_0 [label="Storage Live _2\lStorage Live _3\l3 <- & (*1).0\lStorage Live _4\l4 <- & (*1).1\lCall\l"];
    Xa32faf8d1f160361_1 -> Xa32faf8d1f160361_4 [label="0"];
    Xa32faf8d1f160361_1 -> Xa32faf8d1f160361_2 [label="other"];
    Xa32faf8d1f160361_1 [label="SwitchInt mv(2)\l"];
    Xa32faf8d1f160361_2 -> Xa32faf8d1f160361_3 [label="5"];
    Xa32faf8d1f160361_2 [label="Storage Dead _4\lStorage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*1).1))\lCall\l"];
    Xa32faf8d1f160361_3 -> Xa32faf8d1f160361_5;
    Xa32faf8d1f160361_3 [label="Storage Dead _6\l(*1).1 <- Use(mv(5))\lStorage Dead _5\lStorage Live _7\l7 <- Use(cp((*1).1))\l0 <- Adt{1} (mv(7))\lStorage Dead _7\lGoto\l"];
    Xa32faf8d1f160361_4 -> Xa32faf8d1f160361_5;
    Xa32faf8d1f160361_4 [label="Storage Dead _4\lStorage Dead _3\l0 <- Adt{0} ()\lGoto\l"];
    Xa32faf8d1f160361_5 [label="Storage Dead _2\lReturn\l"];
  }
  Xa32faf8d1f160361_0 -> Xb4d458fe7af2393d_0 [label="mv(3),mv(4)"];
  Xa32faf8d1f160361_2 -> Xfc8f300194968d14_0 [label="mv(6),const ?_usize"];
  subgraph cluster_358 {
    label="<core::str::pattern::Reje\nctAndMatch \nas \ncore::str::pattern::TwoWa\nyStrategy>::use_early_rej\nect";
    style="filled";
    color=lightgray;
    node_359 [label="LOCALS\l0 = bool\l", style="filled", color=palegreen3];
    X1d14b4cfa02595a0_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_360 {
    label="<core::str::pattern::Reje\nctAndMatch \nas \ncore::str::pattern::TwoWa\nyStrategy>::matching";
    style="filled";
    color=lightgray;
    node_361 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xeea2daa5e03f0f7b_0 [label="0 <- Adt{0} (cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_362 {
    label="<core::str::pattern::Reje\nctAndMatch \nas \ncore::str::pattern::TwoWa\nyStrategy>::rejecting";
    style="filled";
    color=lightgray;
    node_363 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X850b3864d07d35b8_0 [label="0 <- Adt{1} (cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_364 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_365 [label="LOCALS\l0 = bool\l1 = &core::ops::ControlFlow<()>\l2 = &core::ops::ControlFlow<()>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &()\l14 = &()\l15 = &&()\l16 = &&()\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X43e1d3a9fc1a8e12_0 -> X43e1d3a9fc1a8e12_2 [label="0"];
    X43e1d3a9fc1a8e12_0 -> X43e1d3a9fc1a8e12_1 [label="other"];
    X43e1d3a9fc1a8e12_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_3 [label="0"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_4 [label="1"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_8 [label="other"];
    X43e1d3a9fc1a8e12_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X43e1d3a9fc1a8e12_2 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_2 [label="0 <- Use(const bool)\lGoto\l"];
    X43e1d3a9fc1a8e12_3 -> X43e1d3a9fc1a8e12_7 [label="0"];
    X43e1d3a9fc1a8e12_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X43e1d3a9fc1a8e12_4 -> X43e1d3a9fc1a8e12_6 [label="0"];
    X43e1d3a9fc1a8e12_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X43e1d3a9fc1a8e12_5 [label="Storage Dead _5\lReturn\l"];
    X43e1d3a9fc1a8e12_6 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X43e1d3a9fc1a8e12_7 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X43e1d3a9fc1a8e12_8 [label="Unreachable\l"];
  }
  X43e1d3a9fc1a8e12_3 -> Xe5dce0424c1e8e0f_0 [label="cp(9),cp(10)"];
  X43e1d3a9fc1a8e12_4 -> Xe5dce0424c1e8e0f_0 [label="cp(13),cp(14)"];
  subgraph cluster_366 {
    label="<pinocchio::program_error\n::ProgramError \nas \npinocchio::program_error:\n:ToStr>::to_str::<pinocch\nio_token_interface::error\n::TokenError>";
    style="filled";
    color=lightgray;
    node_367 [label="LOCALS\l0 = &str\l1 = &pinocchio::program_error::ProgramError\l2 = isize\l3 = &u32\l4 = core::result::Result<pinocchio_token_interface::error::TokenError, pinocchio::program_error::ProgramError>\l5 = u32\l6 = isize\l7 = pinocchio_token_interface::error::TokenError\l8 = &pinocchio_token_interface::error::TokenError\l9 = bool\l10 = isize\l11 = isize\l", style="filled", color=palegreen3];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_27 [label="0"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_26 [label="1"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_25 [label="2"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_24 [label="3"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_23 [label="4"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_22 [label="5"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_21 [label="6"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_20 [label="7"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_19 [label="8"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_18 [label="9"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_17 [label="10"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_16 [label="11"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_15 [label="12"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_14 [label="13"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_13 [label="14"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_12 [label="15"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_11 [label="16"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_10 [label="17"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_9 [label="18"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_8 [label="19"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_7 [label="20"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_6 [label="21"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_5 [label="22"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_4 [label="23"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_3 [label="24"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_2 [label="25"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_0 [label="9 <- Use(const bool)\l2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xa3178b9ab8d38373_1 [label="Unreachable\l"];
    Xa3178b9ab8d38373_2 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_2 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_3 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_3 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_4 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_4 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_5 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_5 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_6 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_6 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_7 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_7 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_8 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_8 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_9 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_9 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_10 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_10 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_11 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_11 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_12 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_12 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_13 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_13 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_14 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_14 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_15 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_15 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_16 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_16 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_17 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_17 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_18 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_18 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_19 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_19 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_20 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_20 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_21 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_21 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_22 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_22 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_23 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_23 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_24 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_24 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_25 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_25 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_26 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_26 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_27 -> Xa3178b9ab8d38373_28 [label="4"];
    Xa3178b9ab8d38373_27 [label="3 <- & ((*1) as variant 0).0\l5 <- Use(cp((*3)))\l9 <- Use(const bool)\lCall\l"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_29 [label="0"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_31 [label="1"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_28 [label="6 <- Discriminant(4)\lSwitchInt mv(6)\l"];
    Xa3178b9ab8d38373_29 -> Xa3178b9ab8d38373_33 [label="Cleanup"];
    Xa3178b9ab8d38373_29 -> Xa3178b9ab8d38373_30 [label="0"];
    Xa3178b9ab8d38373_29 [label="9 <- Use(const bool)\l7 <- Use(mv((4 as variant 0).0))\l8 <- & 7\lCall\l"];
    Xa3178b9ab8d38373_30 -> Xa3178b9ab8d38373_41 [label="Cleanup"];
    Xa3178b9ab8d38373_30 -> Xa3178b9ab8d38373_39;
    Xa3178b9ab8d38373_30 [label="Drop 7\l"];
    Xa3178b9ab8d38373_31 -> Xa3178b9ab8d38373_39;
    Xa3178b9ab8d38373_31 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_32 [label="Return\l"];
    Xa3178b9ab8d38373_33 -> Xa3178b9ab8d38373_41;
    Xa3178b9ab8d38373_33 [label="Drop 7\l"];
    Xa3178b9ab8d38373_34 [label="Resume\l"];
    Xa3178b9ab8d38373_35 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_35 [label="9 <- Use(const bool)\lGoto\l"];
    Xa3178b9ab8d38373_36 -> Xa3178b9ab8d38373_35 [label="0"];
    Xa3178b9ab8d38373_36 -> Xa3178b9ab8d38373_37 [label="other"];
    Xa3178b9ab8d38373_36 [label="SwitchInt cp(9)\l"];
    Xa3178b9ab8d38373_37 -> Xa3178b9ab8d38373_35;
    Xa3178b9ab8d38373_37 [label="Drop (4 as variant 0).0\l"];
    Xa3178b9ab8d38373_38 -> Xa3178b9ab8d38373_35;
    Xa3178b9ab8d38373_38 [label="Drop 4\l"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_36 [label="0"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_38 [label="1"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_39 [label="10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    Xa3178b9ab8d38373_40 -> Xa3178b9ab8d38373_34;
    Xa3178b9ab8d38373_40 [label="Drop 4\l"];
    Xa3178b9ab8d38373_41 -> Xa3178b9ab8d38373_34 [label="0"];
    Xa3178b9ab8d38373_41 -> Xa3178b9ab8d38373_40 [label="other"];
    Xa3178b9ab8d38373_41 [label="11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
  }
  Xa3178b9ab8d38373_27 -> X9972a2e514221fba_0 [label="mv(5)"];
  Xa3178b9ab8d38373_29 -> X4c2fb00b98bd7925_0 [label="mv(8)"];
  subgraph cluster_368 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::Iterator>::__\niterator_get_unchecked";
    style="filled";
    color=lightgray;
    node_369 [label="LOCALS\l0 = &u8\l1 = &mut core::slice::Iter<'_, u8>\l2 = usize\l3 = *mut u8\l4 = *mut u8\l5 = core::ptr::NonNull<u8>\l6 = *const u8\l", style="filled", color=palegreen3];
    X2b864de05d14a2e4_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _5\l5 <- Use(cp((*1).0))\lStorage Live _6\l6 <- Use(cp(5.0))\l4 <- Cast-PtrToPtr mv(6)\lStorage Dead _6\lStorage Dead _5\l3 <- Offset(cp(4), cp(2))\lStorage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_370 {
    label="<core::slice::Iter<'_, \npinocchio_log::logger::Ar\ngument> \nas \ncore::iter::Iterator>::fi\nnd::<{closure@<u64 \nas \npinocchio_log::logger::Lo\ng>::write_with_args::{clo\nsure#0}}>";
    style="filled";
    color=lightgray;
    node_371 [label="LOCALS\l0 = core::option::Option<&pinocchio_log::logger::Argument>\l1 = &mut core::slice::Iter<'_, pinocchio_log::logger::Argument>\l2 = {closure@<u64 as pinocchio_log::logger::Log>::write_with_args::{closure#0}}\l3 = core::option::Option<&pinocchio_log::logger::Argument>\l4 = isize\l5 = &pinocchio_log::logger::Argument\l6 = bool\l7 = &mut {closure@<u64 as pinocchio_log::logger::Log>::write_with_args::{closure#0}}\l8 = (&&pinocchio_log::logger::Argument,)\l9 = &&pinocchio_log::logger::Argument\l", style="filled", color=palegreen3];
    X41e0b0ab43b7d3bc_0 -> X41e0b0ab43b7d3bc_1;
    X41e0b0ab43b7d3bc_0 [label="Goto\l"];
    X41e0b0ab43b7d3bc_1 -> X41e0b0ab43b7d3bc_9 [label="Cleanup"];
    X41e0b0ab43b7d3bc_1 -> X41e0b0ab43b7d3bc_2 [label="3"];
    X41e0b0ab43b7d3bc_1 [label="Storage Live _3\lCall\l"];
    X41e0b0ab43b7d3bc_2 -> X41e0b0ab43b7d3bc_3 [label="1"];
    X41e0b0ab43b7d3bc_2 -> X41e0b0ab43b7d3bc_7 [label="0"];
    X41e0b0ab43b7d3bc_2 -> X41e0b0ab43b7d3bc_11 [label="other"];
    X41e0b0ab43b7d3bc_2 [label="4 <- Discriminant(3)\lSwitchInt mv(4)\l"];
    X41e0b0ab43b7d3bc_3 -> X41e0b0ab43b7d3bc_9 [label="Cleanup"];
    X41e0b0ab43b7d3bc_3 -> X41e0b0ab43b7d3bc_4 [label="6"];
    X41e0b0ab43b7d3bc_3 [label="5 <- Use(cp((3 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- &mut 2\lStorage Live _8\l9 <- & 5\l8 <- Tuple (cp(9))\lCall\l"];
    X41e0b0ab43b7d3bc_4 -> X41e0b0ab43b7d3bc_6 [label="0"];
    X41e0b0ab43b7d3bc_4 -> X41e0b0ab43b7d3bc_5 [label="other"];
    X41e0b0ab43b7d3bc_4 [label="SwitchInt mv(6)\l"];
    X41e0b0ab43b7d3bc_5 -> X41e0b0ab43b7d3bc_8;
    X41e0b0ab43b7d3bc_5 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (cp(5))\lStorage Dead _6\lStorage Dead _3\lDrop 2\l"];
    X41e0b0ab43b7d3bc_6 -> X41e0b0ab43b7d3bc_1;
    X41e0b0ab43b7d3bc_6 [label="Storage Dead _8\lStorage Dead _7\lStorage Dead _6\lStorage Dead _3\lGoto\l"];
    X41e0b0ab43b7d3bc_7 -> X41e0b0ab43b7d3bc_8;
    X41e0b0ab43b7d3bc_7 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&pinocchio_log::logger::Argument>)\lDrop 2\l"];
    X41e0b0ab43b7d3bc_8 [label="Return\l"];
    X41e0b0ab43b7d3bc_9 -> X41e0b0ab43b7d3bc_10;
    X41e0b0ab43b7d3bc_9 [label="Drop 2\l"];
    X41e0b0ab43b7d3bc_10 [label="Resume\l"];
    X41e0b0ab43b7d3bc_11 [label="Unreachable\l"];
  }
  X41e0b0ab43b7d3bc_1 -> X72ec877445e40856_0 [label="cp(1)"];
  X41e0b0ab43b7d3bc_3 -> Xc1d0cd9f63df17cb_0 [label="mv(7),mv(8)"];
  subgraph cluster_372 {
    label="<core::slice::Iter<'_, \npinocchio_log::logger::Ar\ngument> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_373 [label="LOCALS\l0 = core::option::Option<&pinocchio_log::logger::Argument>\l1 = &mut core::slice::Iter<'_, pinocchio_log::logger::Argument>\l2 = bool\l3 = usize\l4 = *const pinocchio_log::logger::Argument\l5 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l6 = *const core::ptr::NonNull<pinocchio_log::logger::Argument>\l7 = *const *const pinocchio_log::logger::Argument\l8 = &core::ptr::NonNull<pinocchio_log::logger::Argument>\l9 = &core::ptr::NonNull<pinocchio_log::logger::Argument>\l10 = &pinocchio_log::logger::Argument\l11 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l12 = *const pinocchio_log::logger::Argument\l13 = *const pinocchio_log::logger::Argument\l14 = &core::ptr::NonNull<pinocchio_log::logger::Argument>\l15 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l16 = *mut usize\l17 = *mut *const pinocchio_log::logger::Argument\l18 = usize\l19 = usize\l20 = *mut core::ptr::NonNull<pinocchio_log::logger::Argument>\l21 = *mut *const pinocchio_log::logger::Argument\l22 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l23 = core::ptr::NonNull<pinocchio_log::logger::Argument>\l24 = *const pinocchio_log::logger::Argument\l25 = *const pinocchio_log::logger::Argument\l26 = *mut pinocchio_log::logger::Argument\l27 = *const pinocchio_log::logger::Argument\l", style="filled", color=palegreen3];
    X72ec877445e40856_0 -> X72ec877445e40856_2 [label="0"];
    X72ec877445e40856_0 -> X72ec877445e40856_1 [label="other"];
    X72ec877445e40856_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    X72ec877445e40856_1 -> X72ec877445e40856_3;
    X72ec877445e40856_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Eq(cp(3), const ?_usize)\lGoto\l"];
    X72ec877445e40856_2 -> X72ec877445e40856_3;
    X72ec877445e40856_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- & (*1).0\lStorage Live _9\l9 <- & 5\lStorage Live _12\lStorage Live _13\lStorage Live _11\l11 <- Use(cp((*1).0))\l12 <- Use(cp(11.0))\lStorage Dead _11\l13 <- Use(cp(5.0))\l2 <- Eq(cp(12), cp(13))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\lGoto\l"];
    X72ec877445e40856_3 -> X72ec877445e40856_5 [label="0"];
    X72ec877445e40856_3 -> X72ec877445e40856_4 [label="other"];
    X72ec877445e40856_3 [label="SwitchInt mv(2)\l"];
    X72ec877445e40856_4 -> X72ec877445e40856_6;
    X72ec877445e40856_4 [label="0 <- Use(const core::option::Option<&pinocchio_log::logger::Argument>)\lGoto\l"];
    X72ec877445e40856_5 -> X72ec877445e40856_9 [label="0"];
    X72ec877445e40856_5 -> X72ec877445e40856_8 [label="other"];
    X72ec877445e40856_5 [label="Storage Live _15\lStorage Live _14\lStorage Live _16\l15 <- Use(cp((*1).0))\lSwitchInt const bool\l"];
    X72ec877445e40856_6 [label="Storage Dead _2\lReturn\l"];
    X72ec877445e40856_7 -> X72ec877445e40856_6;
    X72ec877445e40856_7 [label="Storage Dead _16\l14 <- & 15\lStorage Live _27\lStorage Live _26\l27 <- Use(cp(15.0))\l26 <- Cast-PtrToPtr cp(27)\lStorage Dead _26\l10 <- & (*27)\lStorage Dead _27\lStorage Dead _14\lStorage Dead _15\l0 <- Adt{1} (cp(10))\lGoto\l"];
    X72ec877445e40856_8 -> X72ec877445e40856_7;
    X72ec877445e40856_8 [label="Storage Live _17\l17 <- &raw mut (*1).1\l16 <- Cast-PtrToPtr cp(17)\lStorage Dead _17\lStorage Live _18\lStorage Live _19\l19 <- Use(cp((*16)))\l18 <- SubUnchecked(mv(19), const ?_usize)\lStorage Dead _19\l(*16) <- Use(mv(18))\lStorage Dead _18\lGoto\l"];
    X72ec877445e40856_9 -> X72ec877445e40856_7;
    X72ec877445e40856_9 [label="Storage Live _20\lStorage Live _21\l21 <- &raw mut (*1).1\l20 <- Cast-PtrToPtr cp(21)\lStorage Dead _21\lStorage Live _22\lStorage Live _23\l23 <- Use(cp((*1).0))\lStorage Live _24\lStorage Live _25\l25 <- Use(cp(23.0))\l24 <- Offset(mv(25), const ?_usize)\lStorage Dead _25\l22 <- Adt{0} (mv(24))\lStorage Dead _24\lStorage Dead _23\l(*1).0 <- Use(mv(22))\lStorage Dead _22\lStorage Dead _20\lGoto\l"];
  }
  subgraph cluster_374 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::Iterator>::si\nze_hint";
    style="filled";
    color=lightgray;
    node_375 [label="LOCALS\l0 = (usize, core::option::Option<usize>)\l1 = &core::slice::Iter<'_, u8>\l2 = usize\l3 = usize\l4 = *const u8\l5 = core::ptr::NonNull<u8>\l6 = *const core::ptr::NonNull<u8>\l7 = *const *const u8\l8 = core::ptr::NonNull<u8>\l9 = usize\l10 = core::option::Option<usize>\l11 = usize\l12 = *const u8\l13 = *const u8\l14 = bool\l15 = ()\l16 = *const ()\l17 = *const ()\l18 = usize\l19 = bool\l20 = bool\l21 = !\l", style="filled", color=palegreen3];
    Xd3628f2b21e15873_0 -> Xd3628f2b21e15873_2 [label="0"];
    Xd3628f2b21e15873_0 -> Xd3628f2b21e15873_1 [label="other"];
    Xd3628f2b21e15873_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    Xd3628f2b21e15873_1 -> Xd3628f2b21e15873_3;
    Xd3628f2b21e15873_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Use(cp(3))\lGoto\l"];
    Xd3628f2b21e15873_2 -> Xd3628f2b21e15873_7 [label="0"];
    Xd3628f2b21e15873_2 -> Xd3628f2b21e15873_5 [label="other"];
    Xd3628f2b21e15873_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- Use(cp((*1).0))\lStorage Live _12\l12 <- Use(cp(5.0))\lStorage Live _13\l13 <- Use(cp(8.0))\lStorage Live _18\lStorage Live _14\l14 <- UbChecks :: bool\lSwitchInt mv(14)\l"];
    Xd3628f2b21e15873_3 [label="Storage Live _9\l9 <- Use(cp(2))\lStorage Live _10\lStorage Live _11\l11 <- Use(cp(2))\l10 <- Adt{1} (mv(11))\lStorage Dead _11\l0 <- Tuple (mv(9), mv(10))\lStorage Dead _10\lStorage Dead _9\lStorage Dead _2\lReturn\l"];
    Xd3628f2b21e15873_4 -> Xd3628f2b21e15873_3;
    Xd3628f2b21e15873_4 [label="Storage Dead _18\lStorage Dead _13\lStorage Dead _12\lStorage Dead _8\lGoto\l"];
    Xd3628f2b21e15873_5 -> Xd3628f2b21e15873_6 [label="15"];
    Xd3628f2b21e15873_5 [label="Storage Live _16\l16 <- Cast-PtrToPtr cp(12)\lStorage Live _17\l17 <- Cast-PtrToPtr cp(13)\lCall\l"];
    Xd3628f2b21e15873_6 -> Xd3628f2b21e15873_7;
    Xd3628f2b21e15873_6 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xd3628f2b21e15873_7 -> Xd3628f2b21e15873_10 [label="0"];
    Xd3628f2b21e15873_7 -> Xd3628f2b21e15873_8 [label="other"];
    Xd3628f2b21e15873_7 [label="Storage Dead _14\l18 <- SizeOf :: u8\lStorage Live _19\l19 <- Lt(const ?_usize, cp(18))\lSwitchInt mv(19)\l"];
    Xd3628f2b21e15873_8 -> Xd3628f2b21e15873_10 [label="0"];
    Xd3628f2b21e15873_8 -> Xd3628f2b21e15873_9 [label="other"];
    Xd3628f2b21e15873_8 [label="Storage Live _20\l20 <- Le(cp(18), const ?_usize)\lSwitchInt mv(20)\l"];
    Xd3628f2b21e15873_9 -> Xd3628f2b21e15873_4 [label="2"];
    Xd3628f2b21e15873_9 [label="Storage Dead _20\lStorage Dead _19\lCall\l"];
    Xd3628f2b21e15873_10 [label="Call\l"];
  }
  Xd3628f2b21e15873_5 -> Xfccd6b940db3d5e8_0 [label="mv(16),mv(17)"];
  Xd3628f2b21e15873_9 -> Xfd88df1009b24094_0 [label="mv(12),mv(13)"];
  Xd3628f2b21e15873_10 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_376 {
    label="<core::slice::Windows<'_,\n \nu8> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_377 [label="LOCALS\l0 = core::option::Option<&[u8]>\l1 = &mut core::slice::Windows<'_, u8>\l2 = bool\l3 = usize\l4 = core::num::NonZero<usize>\l5 = usize\l6 = core::option::Option<&[u8]>\l7 = &[u8]\l8 = usize\l9 = core::num::NonZero<usize>\l10 = &[u8]\l11 = &[u8]\l12 = &[u8]\l13 = &[u8]\l14 = core::ops::Range<usize>\l", style="filled", color=palegreen3];
    X5d74617bf2244196_0 -> X5d74617bf2244196_2 [label="0"];
    X5d74617bf2244196_0 -> X5d74617bf2244196_1 [label="other"];
    X5d74617bf2244196_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _4\l4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\lStorage Dead _4\lStorage Live _5\l11 <- Use(cp((*1).0))\l5 <- PtrMetadata(cp(11))\l2 <- Gt(mv(3), mv(5))\lSwitchInt mv(2)\l"];
    X5d74617bf2244196_1 -> X5d74617bf2244196_3;
    X5d74617bf2244196_1 [label="Storage Dead _5\lStorage Dead _3\l0 <- Use(const core::option::Option<&[u8]>)\lGoto\l"];
    X5d74617bf2244196_2 -> X5d74617bf2244196_4 [label="7"];
    X5d74617bf2244196_2 [label="Storage Dead _5\lStorage Dead _3\l12 <- Use(cp((*1).0))\lStorage Live _9\l9 <- Use(cp((*1).1))\l8 <- Cast-Transmute cp(9)\lStorage Dead _9\lStorage Live _14\l14 <- Adt{0} (const ?_usize, cp(8))\lCall\l"];
    X5d74617bf2244196_3 [label="Storage Dead _2\lReturn\l"];
    X5d74617bf2244196_4 -> X5d74617bf2244196_5 [label="10"];
    X5d74617bf2244196_4 [label="Storage Dead _14\l6 <- Adt{1} (cp(7))\l13 <- Use(cp((*1).0))\lCall\l"];
    X5d74617bf2244196_5 -> X5d74617bf2244196_3;
    X5d74617bf2244196_5 [label="(*1).0 <- Use(cp(10))\l0 <- Use(cp(6))\lGoto\l"];
  }
  X5d74617bf2244196_2 -> X386b02aeacd40e86_0 [label="mv(14),mv(12)"];
  X5d74617bf2244196_4 -> Xbf13fd323824b7e4_0 [label="const core::ops::RangeFrom<usize>,mv(13)"];
  subgraph cluster_378 {
    label="<core::ops::ControlFlow<u\nsize> \nas \ncore::ops::Try>::from_out\nput";
    style="filled";
    color=lightgray;
    node_379 [label="LOCALS\l0 = core::ops::ControlFlow<usize>\l1 = ()\l", style="filled", color=palegreen3];
    Xd65c21665460170_0 [label="0 <- Adt{0} (cp(1))\lReturn\l"];
  }
  subgraph cluster_380 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::Try>::from_out\nput";
    style="filled";
    color=lightgray;
    node_381 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = ()\l", style="filled", color=palegreen3];
    X28203ac4004097e4_0 [label="0 <- Adt{0} (cp(1))\lReturn\l"];
  }
  subgraph cluster_382 {
    label="<core::ops::ControlFlow<u\nsize> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_383 [label="LOCALS\l0 = core::ops::ControlFlow<core::ops::ControlFlow<usize, core::convert::Infallible>>\l1 = core::ops::ControlFlow<usize>\l2 = isize\l3 = ()\l4 = usize\l5 = core::ops::ControlFlow<usize, core::convert::Infallible>\l", style="filled", color=palegreen3];
    Xde070dece53474e3_0 -> Xde070dece53474e3_3 [label="0"];
    Xde070dece53474e3_0 -> Xde070dece53474e3_2 [label="1"];
    Xde070dece53474e3_0 -> Xde070dece53474e3_1 [label="other"];
    Xde070dece53474e3_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xde070dece53474e3_1 [label="Unreachable\l"];
    Xde070dece53474e3_2 -> Xde070dece53474e3_4;
    Xde070dece53474e3_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xde070dece53474e3_3 -> Xde070dece53474e3_4;
    Xde070dece53474e3_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xde070dece53474e3_4 [label="Return\l"];
  }
  subgraph cluster_384 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_385 [label="LOCALS\l0 = core::ops::ControlFlow<core::ops::ControlFlow<(), core::convert::Infallible>>\l1 = core::ops::ControlFlow<()>\l2 = isize\l3 = ()\l4 = ()\l5 = core::ops::ControlFlow<(), core::convert::Infallible>\l", style="filled", color=palegreen3];
    X520c4c982105df50_0 -> X520c4c982105df50_3 [label="0"];
    X520c4c982105df50_0 -> X520c4c982105df50_2 [label="1"];
    X520c4c982105df50_0 -> X520c4c982105df50_1 [label="other"];
    X520c4c982105df50_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X520c4c982105df50_1 [label="Unreachable\l"];
    X520c4c982105df50_2 -> X520c4c982105df50_4;
    X520c4c982105df50_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X520c4c982105df50_3 -> X520c4c982105df50_4;
    X520c4c982105df50_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X520c4c982105df50_4 [label="Return\l"];
  }
  subgraph cluster_386 {
    label="<pinocchio_token_interfac\ne::error::TokenError \nas \npinocchio::program_error:\n:ToStr>::to_str::<pinocch\nio_token_interface::error\n::TokenError>";
    style="filled";
    color=lightgray;
    node_387 [label="LOCALS\l0 = &str\l1 = &pinocchio_token_interface::error::TokenError\l2 = isize\l", style="filled", color=palegreen3];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_21 [label="0"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_20 [label="1"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_19 [label="2"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_18 [label="3"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_17 [label="4"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_16 [label="5"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_15 [label="6"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_14 [label="7"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_13 [label="8"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_12 [label="9"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_11 [label="10"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_10 [label="11"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_9 [label="12"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_8 [label="13"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_7 [label="14"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_6 [label="15"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_5 [label="16"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_4 [label="17"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_3 [label="18"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_2 [label="19"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_1 [label="other"];
    X4c2fb00b98bd7925_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X4c2fb00b98bd7925_1 [label="Unreachable\l"];
    X4c2fb00b98bd7925_2 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_2 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_3 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_3 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_4 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_4 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_5 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_5 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_6 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_6 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_7 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_7 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_8 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_8 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_9 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_9 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_10 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_10 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_11 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_11 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_12 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_12 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_13 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_13 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_14 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_14 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_15 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_15 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_16 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_16 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_17 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_17 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_18 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_18 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_19 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_19 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_20 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_20 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_21 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_21 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_22 [label="Return\l"];
  }
  subgraph cluster_388 {
    label="pinocchio::entrypoint::de\nserialize::<254>";
    style="filled";
    color=lightgray;
    node_389 [label="LOCALS\l0 = (&[u8; 32], usize, &[u8])\l1 = *mut u8\l2 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l3 = usize\l4 = u64\l5 = *const u64\l6 = *mut u8\l7 = *mut u8\l8 = *mut u8\l9 = usize\l10 = bool\l11 = usize\l12 = *mut pinocchio::account_info::AccountInfo\l13 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l14 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l15 = *mut pinocchio::account_info::AccountInfo\l16 = *mut pinocchio::account_info::Account\l17 = *mut u8\l18 = ()\l19 = *mut pinocchio::account_info::AccountInfo\l20 = pinocchio::account_info::AccountInfo\l21 = *mut u8\l22 = *mut u8\l23 = usize\l24 = usize\l25 = (usize, bool)\l26 = *mut u8\l27 = *mut u8\l28 = usize\l29 = u64\l30 = usize\l31 = usize\l32 = usize\l33 = *mut u8\l34 = usize\l35 = (usize, bool)\l36 = (usize, bool)\l37 = usize\l38 = usize\l39 = (usize, bool)\l40 = bool\l41 = usize\l42 = usize\l43 = bool\l44 = usize\l45 = usize\l46 = usize\l47 = usize\l48 = (usize, bool)\l49 = usize\l50 = usize\l51 = *mut pinocchio::account_info::AccountInfo\l52 = *mut pinocchio::account_info::AccountInfo\l53 = *mut pinocchio::account_info::Account\l54 = *mut u8\l55 = *mut u8\l56 = *mut u8\l57 = usize\l58 = bool\l59 = u8\l60 = ()\l61 = *mut pinocchio::account_info::AccountInfo\l62 = *const pinocchio::account_info::AccountInfo\l63 = u8\l64 = ()\l65 = *mut pinocchio::account_info::AccountInfo\l66 = pinocchio::account_info::AccountInfo\l67 = *mut u8\l68 = *mut u8\l69 = *mut u8\l70 = *mut u8\l71 = usize\l72 = u64\l73 = usize\l74 = usize\l75 = usize\l76 = *mut u8\l77 = usize\l78 = (usize, bool)\l79 = (usize, bool)\l80 = usize\l81 = usize\l82 = (usize, bool)\l83 = bool\l84 = usize\l85 = *mut pinocchio::account_info::AccountInfo\l86 = *mut pinocchio::account_info::AccountInfo\l87 = *mut pinocchio::account_info::Account\l88 = *mut u8\l89 = *mut u8\l90 = *mut u8\l91 = usize\l92 = bool\l93 = u8\l94 = ()\l95 = *mut pinocchio::account_info::AccountInfo\l96 = *const pinocchio::account_info::AccountInfo\l97 = u8\l98 = ()\l99 = *mut pinocchio::account_info::AccountInfo\l100 = pinocchio::account_info::AccountInfo\l101 = *mut u8\l102 = *mut u8\l103 = *mut u8\l104 = *mut u8\l105 = usize\l106 = u64\l107 = usize\l108 = usize\l109 = usize\l110 = *mut u8\l111 = usize\l112 = (usize, bool)\l113 = (usize, bool)\l114 = usize\l115 = usize\l116 = (usize, bool)\l117 = *mut pinocchio::account_info::AccountInfo\l118 = *mut pinocchio::account_info::AccountInfo\l119 = *mut pinocchio::account_info::Account\l120 = *mut u8\l121 = *mut u8\l122 = *mut u8\l123 = usize\l124 = bool\l125 = u8\l126 = ()\l127 = *mut pinocchio::account_info::AccountInfo\l128 = *const pinocchio::account_info::AccountInfo\l129 = u8\l130 = ()\l131 = *mut pinocchio::account_info::AccountInfo\l132 = pinocchio::account_info::AccountInfo\l133 = *mut u8\l134 = *mut u8\l135 = *mut u8\l136 = *mut u8\l137 = usize\l138 = u64\l139 = usize\l140 = usize\l141 = usize\l142 = *mut u8\l143 = usize\l144 = (usize, bool)\l145 = (usize, bool)\l146 = usize\l147 = usize\l148 = (usize, bool)\l149 = *mut pinocchio::account_info::AccountInfo\l150 = *mut pinocchio::account_info::AccountInfo\l151 = *mut pinocchio::account_info::Account\l152 = *mut u8\l153 = *mut u8\l154 = *mut u8\l155 = usize\l156 = bool\l157 = u8\l158 = ()\l159 = *mut pinocchio::account_info::AccountInfo\l160 = *const pinocchio::account_info::AccountInfo\l161 = u8\l162 = ()\l163 = *mut pinocchio::account_info::AccountInfo\l164 = pinocchio::account_info::AccountInfo\l165 = *mut u8\l166 = *mut u8\l167 = *mut u8\l168 = *mut u8\l169 = usize\l170 = u64\l171 = usize\l172 = usize\l173 = usize\l174 = *mut u8\l175 = usize\l176 = (usize, bool)\l177 = (usize, bool)\l178 = usize\l179 = usize\l180 = (usize, bool)\l181 = *mut pinocchio::account_info::AccountInfo\l182 = *mut pinocchio::account_info::AccountInfo\l183 = *mut pinocchio::account_info::Account\l184 = *mut u8\l185 = *mut u8\l186 = *mut u8\l187 = usize\l188 = bool\l189 = u8\l190 = ()\l191 = *mut pinocchio::account_info::AccountInfo\l192 = *const pinocchio::account_info::AccountInfo\l193 = u8\l194 = ()\l195 = *mut pinocchio::account_info::AccountInfo\l196 = pinocchio::account_info::AccountInfo\l197 = *mut u8\l198 = *mut u8\l199 = *mut u8\l200 = *mut u8\l201 = usize\l202 = u64\l203 = usize\l204 = usize\l205 = usize\l206 = *mut u8\l207 = usize\l208 = (usize, bool)\l209 = (usize, bool)\l210 = usize\l211 = usize\l212 = (usize, bool)\l213 = *mut pinocchio::account_info::AccountInfo\l214 = *mut pinocchio::account_info::AccountInfo\l215 = *mut pinocchio::account_info::Account\l216 = *mut u8\l217 = *mut u8\l218 = *mut u8\l219 = usize\l220 = bool\l221 = u8\l222 = ()\l223 = *mut pinocchio::account_info::AccountInfo\l224 = *const pinocchio::account_info::AccountInfo\l225 = u8\l226 = ()\l227 = *mut pinocchio::account_info::AccountInfo\l228 = pinocchio::account_info::AccountInfo\l229 = *mut u8\l230 = *mut u8\l231 = *mut u8\l232 = *mut u8\l233 = usize\l234 = u64\l235 = usize\l236 = usize\l237 = usize\l238 = *mut u8\l239 = usize\l240 = (usize, bool)\l241 = (usize, bool)\l242 = usize\l243 = usize\l244 = (usize, bool)\l245 = (usize, bool)\l246 = *mut pinocchio::account_info::AccountInfo\l247 = *mut pinocchio::account_info::AccountInfo\l248 = *mut pinocchio::account_info::Account\l249 = *mut u8\l250 = *mut u8\l251 = *mut u8\l252 = usize\l253 = bool\l254 = u8\l255 = ()\l256 = *mut pinocchio::account_info::AccountInfo\l257 = *const pinocchio::account_info::AccountInfo\l258 = u8\l259 = ()\l260 = *mut pinocchio::account_info::AccountInfo\l261 = pinocchio::account_info::AccountInfo\l262 = *mut u8\l263 = *mut u8\l264 = *mut u8\l265 = *mut u8\l266 = usize\l267 = u64\l268 = usize\l269 = usize\l270 = usize\l271 = *mut u8\l272 = usize\l273 = (usize, bool)\l274 = (usize, bool)\l275 = usize\l276 = usize\l277 = (usize, bool)\l278 = *mut pinocchio::account_info::AccountInfo\l279 = *mut pinocchio::account_info::AccountInfo\l280 = *mut pinocchio::account_info::Account\l281 = *mut u8\l282 = *mut u8\l283 = *mut u8\l284 = usize\l285 = bool\l286 = u8\l287 = ()\l288 = *mut pinocchio::account_info::AccountInfo\l289 = *const pinocchio::account_info::AccountInfo\l290 = u8\l291 = ()\l292 = *mut pinocchio::account_info::AccountInfo\l293 = pinocchio::account_info::AccountInfo\l294 = *mut u8\l295 = *mut u8\l296 = *mut u8\l297 = *mut u8\l298 = usize\l299 = u64\l300 = usize\l301 = usize\l302 = usize\l303 = *mut u8\l304 = usize\l305 = (usize, bool)\l306 = (usize, bool)\l307 = usize\l308 = usize\l309 = (usize, bool)\l310 = *mut pinocchio::account_info::AccountInfo\l311 = *mut pinocchio::account_info::AccountInfo\l312 = *mut pinocchio::account_info::Account\l313 = *mut u8\l314 = *mut u8\l315 = *mut u8\l316 = usize\l317 = bool\l318 = u8\l319 = ()\l320 = *mut pinocchio::account_info::AccountInfo\l321 = *const pinocchio::account_info::AccountInfo\l322 = u8\l323 = ()\l324 = *mut pinocchio::account_info::AccountInfo\l325 = pinocchio::account_info::AccountInfo\l326 = *mut u8\l327 = *mut u8\l328 = *mut u8\l329 = *mut u8\l330 = usize\l331 = u64\l332 = usize\l333 = usize\l334 = usize\l335 = *mut u8\l336 = usize\l337 = (usize, bool)\l338 = (usize, bool)\l339 = usize\l340 = usize\l341 = (usize, bool)\l342 = *mut pinocchio::account_info::AccountInfo\l343 = *mut pinocchio::account_info::AccountInfo\l344 = *mut pinocchio::account_info::Account\l345 = *mut u8\l346 = *mut u8\l347 = *mut u8\l348 = usize\l349 = bool\l350 = u8\l351 = ()\l352 = *mut pinocchio::account_info::AccountInfo\l353 = *const pinocchio::account_info::AccountInfo\l354 = u8\l355 = ()\l356 = *mut pinocchio::account_info::AccountInfo\l357 = pinocchio::account_info::AccountInfo\l358 = *mut u8\l359 = *mut u8\l360 = *mut u8\l361 = *mut u8\l362 = usize\l363 = u64\l364 = usize\l365 = usize\l366 = usize\l367 = *mut u8\l368 = usize\l369 = (usize, bool)\l370 = (usize, bool)\l371 = usize\l372 = usize\l373 = (usize, bool)\l374 = *mut pinocchio::account_info::AccountInfo\l375 = *mut pinocchio::account_info::AccountInfo\l376 = *mut pinocchio::account_info::Account\l377 = *mut u8\l378 = *mut u8\l379 = *mut u8\l380 = usize\l381 = bool\l382 = u8\l383 = ()\l384 = *mut pinocchio::account_info::AccountInfo\l385 = *const pinocchio::account_info::AccountInfo\l386 = u8\l387 = ()\l388 = *mut pinocchio::account_info::AccountInfo\l389 = pinocchio::account_info::AccountInfo\l390 = *mut u8\l391 = *mut u8\l392 = *mut u8\l393 = *mut u8\l394 = usize\l395 = u64\l396 = usize\l397 = usize\l398 = usize\l399 = *mut u8\l400 = usize\l401 = (usize, bool)\l402 = (usize, bool)\l403 = usize\l404 = usize\l405 = (usize, bool)\l406 = *mut pinocchio::account_info::AccountInfo\l407 = *mut pinocchio::account_info::AccountInfo\l408 = *mut pinocchio::account_info::Account\l409 = *mut u8\l410 = *mut u8\l411 = *mut u8\l412 = usize\l413 = bool\l414 = u8\l415 = ()\l416 = *mut pinocchio::account_info::AccountInfo\l417 = *const pinocchio::account_info::AccountInfo\l418 = u8\l419 = ()\l420 = *mut pinocchio::account_info::AccountInfo\l421 = pinocchio::account_info::AccountInfo\l422 = *mut u8\l423 = *mut u8\l424 = *mut u8\l425 = *mut u8\l426 = usize\l427 = u64\l428 = usize\l429 = usize\l430 = usize\l431 = *mut u8\l432 = usize\l433 = (usize, bool)\l434 = (usize, bool)\l435 = usize\l436 = usize\l437 = (usize, bool)\l438 = *mut pinocchio::account_info::AccountInfo\l439 = *mut pinocchio::account_info::AccountInfo\l440 = *mut pinocchio::account_info::Account\l441 = *mut u8\l442 = *mut u8\l443 = *mut u8\l444 = usize\l445 = bool\l446 = u8\l447 = ()\l448 = *mut pinocchio::account_info::AccountInfo\l449 = *const pinocchio::account_info::AccountInfo\l450 = u8\l451 = ()\l452 = *mut pinocchio::account_info::AccountInfo\l453 = pinocchio::account_info::AccountInfo\l454 = *mut u8\l455 = *mut u8\l456 = *mut u8\l457 = *mut u8\l458 = usize\l459 = u64\l460 = usize\l461 = usize\l462 = usize\l463 = *mut u8\l464 = usize\l465 = (usize, bool)\l466 = (usize, bool)\l467 = usize\l468 = usize\l469 = (usize, bool)\l470 = *mut pinocchio::account_info::AccountInfo\l471 = *mut pinocchio::account_info::AccountInfo\l472 = *mut pinocchio::account_info::Account\l473 = *mut u8\l474 = *mut u8\l475 = *mut u8\l476 = usize\l477 = bool\l478 = u8\l479 = ()\l480 = *mut pinocchio::account_info::AccountInfo\l481 = *const pinocchio::account_info::AccountInfo\l482 = u8\l483 = ()\l484 = *mut pinocchio::account_info::AccountInfo\l485 = pinocchio::account_info::AccountInfo\l486 = *mut u8\l487 = *mut u8\l488 = *mut u8\l489 = *mut u8\l490 = usize\l491 = u64\l492 = usize\l493 = usize\l494 = usize\l495 = *mut u8\l496 = usize\l497 = (usize, bool)\l498 = (usize, bool)\l499 = usize\l500 = usize\l501 = (usize, bool)\l502 = *mut pinocchio::account_info::AccountInfo\l503 = *mut pinocchio::account_info::AccountInfo\l504 = *mut pinocchio::account_info::Account\l505 = *mut u8\l506 = *mut u8\l507 = *mut u8\l508 = usize\l509 = bool\l510 = u8\l511 = ()\l512 = *mut pinocchio::account_info::AccountInfo\l513 = *const pinocchio::account_info::AccountInfo\l514 = u8\l515 = ()\l516 = *mut pinocchio::account_info::AccountInfo\l517 = pinocchio::account_info::AccountInfo\l518 = *mut u8\l519 = *mut u8\l520 = *mut u8\l521 = *mut u8\l522 = usize\l523 = u64\l524 = usize\l525 = usize\l526 = usize\l527 = *mut u8\l528 = usize\l529 = (usize, bool)\l530 = (usize, bool)\l531 = usize\l532 = usize\l533 = (usize, bool)\l534 = *mut pinocchio::account_info::AccountInfo\l535 = *mut pinocchio::account_info::AccountInfo\l536 = *mut pinocchio::account_info::Account\l537 = *mut u8\l538 = *mut u8\l539 = *mut u8\l540 = usize\l541 = bool\l542 = u8\l543 = ()\l544 = *mut pinocchio::account_info::AccountInfo\l545 = *const pinocchio::account_info::AccountInfo\l546 = u8\l547 = ()\l548 = *mut pinocchio::account_info::AccountInfo\l549 = pinocchio::account_info::AccountInfo\l550 = *mut u8\l551 = *mut u8\l552 = *mut u8\l553 = *mut u8\l554 = usize\l555 = u64\l556 = usize\l557 = usize\l558 = usize\l559 = *mut u8\l560 = usize\l561 = (usize, bool)\l562 = (usize, bool)\l563 = usize\l564 = usize\l565 = (usize, bool)\l566 = !\l567 = bool\l568 = bool\l569 = usize\l570 = (usize, bool)\l571 = *mut pinocchio::account_info::Account\l572 = *mut u8\l573 = *mut u8\l574 = *mut u8\l575 = usize\l576 = bool\l577 = u8\l578 = *mut u8\l579 = *mut u8\l580 = *mut u8\l581 = *mut u8\l582 = usize\l583 = u64\l584 = usize\l585 = usize\l586 = usize\l587 = *mut u8\l588 = usize\l589 = (usize, bool)\l590 = (usize, bool)\l591 = usize\l592 = usize\l593 = (usize, bool)\l594 = usize\l595 = u64\l596 = *const u64\l597 = *mut u8\l598 = *mut u8\l599 = *mut u8\l600 = usize\l601 = &[u8]\l602 = *const u8\l603 = *mut u8\l604 = *mut u8\l605 = *mut u8\l606 = &[u8; 32]\l607 = *const [u8; 32]\l608 = usize\l", style="filled", color=palegreen3];
    X1d843d9d8698d3c4_0 -> X1d843d9d8698d3c4_1 [label="9"];
    X1d843d9d8698d3c4_0 [label="6 <- Use(cp(1))\l5 <- Cast-PtrToPtr mv(6)\l4 <- Use(cp((*5)))\l3 <- Cast-IntToInt mv(4)\l8 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_1 -> X1d843d9d8698d3c4_2 [label="7"];
    X1d843d9d8698d3c4_1 [label="Call\l"];
    X1d843d9d8698d3c4_2 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_2 -> X1d843d9d8698d3c4_3 [label="other"];
    X1d843d9d8698d3c4_2 [label="1 <- Use(mv(7))\l11 <- Use(cp(3))\l10 <- Gt(mv(11), const ?_usize)\lSwitchInt mv(10)\l"];
    X1d843d9d8698d3c4_3 -> X1d843d9d8698d3c4_4 [label="13"];
    X1d843d9d8698d3c4_3 [label="14 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X1d843d9d8698d3c4_4 -> X1d843d9d8698d3c4_5 [label="18"];
    X1d843d9d8698d3c4_4 [label="12 <- Cast-PtrToPtr mv(13)\l15 <- Use(cp(12))\l17 <- Use(cp(1))\l16 <- Cast-PtrToPtr mv(17)\l19 <- Use(cp(12))\l20 <- Adt{0} (cp(16))\lCall\l"];
    X1d843d9d8698d3c4_5 -> X1d843d9d8698d3c4_6 [label="24"];
    X1d843d9d8698d3c4_5 [label="22 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_6 -> X1d843d9d8698d3c4_7;
    X1d843d9d8698d3c4_6 [label="25 <- chkd-Add(const ?_usize, cp(24))\lAssert mv(25.1) == false\l"];
    X1d843d9d8698d3c4_7 -> X1d843d9d8698d3c4_8 [label="21"];
    X1d843d9d8698d3c4_7 [label="23 <- Use(mv(25.0))\lCall\l"];
    X1d843d9d8698d3c4_8 -> X1d843d9d8698d3c4_9 [label="26"];
    X1d843d9d8698d3c4_8 [label="1 <- Use(mv(21))\l27 <- Use(cp(1))\l29 <- Use(cp((*16).8))\l28 <- Cast-IntToInt mv(29)\lCall\l"];
    X1d843d9d8698d3c4_9 -> X1d843d9d8698d3c4_10;
    X1d843d9d8698d3c4_9 [label="1 <- Use(mv(26))\l33 <- Use(cp(1))\l32 <- Cast-PointerExposeAddress mv(33)\l35 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(35.1) == false\l"];
    X1d843d9d8698d3c4_10 -> X1d843d9d8698d3c4_11;
    X1d843d9d8698d3c4_10 [label="34 <- Use(mv(35.0))\l36 <- chkd-Add(cp(32), cp(34))\lAssert mv(36.1) == false\l"];
    X1d843d9d8698d3c4_11 -> X1d843d9d8698d3c4_12;
    X1d843d9d8698d3c4_11 [label="31 <- Use(mv(36.0))\l39 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(39.1) == false\l"];
    X1d843d9d8698d3c4_12 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_12 -> X1d843d9d8698d3c4_13 [label="other"];
    X1d843d9d8698d3c4_12 [label="38 <- Use(mv(39.0))\l37 <- Not(mv(38))\l30 <- BitAnd(mv(31), mv(37))\l1 <- Cast-PointerWithExposedProvenance mv(30)\l41 <- Use(cp(3))\l40 <- Gt(mv(41), const ?_usize)\lSwitchInt mv(40)\l"];
    X1d843d9d8698d3c4_13 -> X1d843d9d8698d3c4_15 [label="0"];
    X1d843d9d8698d3c4_13 -> X1d843d9d8698d3c4_14 [label="other"];
    X1d843d9d8698d3c4_13 [label="43 <- Lt(const ?_usize, const ?_usize)\lSwitchInt mv(43)\l"];
    X1d843d9d8698d3c4_14 -> X1d843d9d8698d3c4_16 [label="42"];
    X1d843d9d8698d3c4_14 [label="44 <- Use(cp(3))\lCall\l"];
    X1d843d9d8698d3c4_15 -> X1d843d9d8698d3c4_16;
    X1d843d9d8698d3c4_15 [label="42 <- Use(cp(3))\lGoto\l"];
    X1d843d9d8698d3c4_16 -> X1d843d9d8698d3c4_17;
    X1d843d9d8698d3c4_16 [label="46 <- Use(cp(3))\l47 <- Use(cp(42))\l48 <- chkd-Sub(cp(46), cp(47))\lAssert mv(48.1) == false\l"];
    X1d843d9d8698d3c4_17 -> X1d843d9d8698d3c4_18 [label="2"];
    X1d843d9d8698d3c4_17 -> X1d843d9d8698d3c4_30 [label="other"];
    X1d843d9d8698d3c4_17 [label="45 <- Use(mv(48.0))\l49 <- Use(cp(42))\l3 <- Use(mv(49))\l50 <- Use(cp(42))\lSwitchInt mv(50)\l"];
    X1d843d9d8698d3c4_18 -> X1d843d9d8698d3c4_19 [label="51"];
    X1d843d9d8698d3c4_18 [label="52 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_19 -> X1d843d9d8698d3c4_20 [label="57"];
    X1d843d9d8698d3c4_19 [label="12 <- Use(mv(51))\l54 <- Use(cp(1))\l53 <- Cast-PtrToPtr mv(54)\l56 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_20 -> X1d843d9d8698d3c4_21 [label="55"];
    X1d843d9d8698d3c4_20 [label="Call\l"];
    X1d843d9d8698d3c4_21 -> X1d843d9d8698d3c4_23 [label="0"];
    X1d843d9d8698d3c4_21 -> X1d843d9d8698d3c4_22 [label="other"];
    X1d843d9d8698d3c4_21 [label="1 <- Use(mv(55))\l59 <- Use(cp((*53).0))\l58 <- Ne(mv(59), const ?_u8)\lSwitchInt mv(58)\l"];
    X1d843d9d8698d3c4_22 -> X1d843d9d8698d3c4_215 [label="60"];
    X1d843d9d8698d3c4_22 [label="61 <- Use(cp(12))\l62 <- Cast-PtrToPtr cp(15)\l63 <- Use(cp((*53).0))\lCall\l"];
    X1d843d9d8698d3c4_23 -> X1d843d9d8698d3c4_24 [label="64"];
    X1d843d9d8698d3c4_23 [label="65 <- Use(cp(12))\l66 <- Adt{0} (cp(53))\lCall\l"];
    X1d843d9d8698d3c4_24 -> X1d843d9d8698d3c4_25 [label="67"];
    X1d843d9d8698d3c4_24 [label="68 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_25 -> X1d843d9d8698d3c4_26 [label="69"];
    X1d843d9d8698d3c4_25 [label="1 <- Use(mv(67))\l70 <- Use(cp(1))\l72 <- Use(cp((*53).8))\l71 <- Cast-IntToInt mv(72)\lCall\l"];
    X1d843d9d8698d3c4_26 -> X1d843d9d8698d3c4_27;
    X1d843d9d8698d3c4_26 [label="1 <- Use(mv(69))\l76 <- Use(cp(1))\l75 <- Cast-PointerExposeAddress mv(76)\l78 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(78.1) == false\l"];
    X1d843d9d8698d3c4_27 -> X1d843d9d8698d3c4_28;
    X1d843d9d8698d3c4_27 [label="77 <- Use(mv(78.0))\l79 <- chkd-Add(cp(75), cp(77))\lAssert mv(79.1) == false\l"];
    X1d843d9d8698d3c4_28 -> X1d843d9d8698d3c4_29;
    X1d843d9d8698d3c4_28 [label="74 <- Use(mv(79.0))\l82 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(82.1) == false\l"];
    X1d843d9d8698d3c4_29 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_29 [label="81 <- Use(mv(82.0))\l80 <- Not(mv(81))\l73 <- BitAnd(mv(74), mv(80))\l1 <- Cast-PointerWithExposedProvenance mv(73)\lGoto\l"];
    X1d843d9d8698d3c4_30 -> X1d843d9d8698d3c4_93 [label="0"];
    X1d843d9d8698d3c4_30 -> X1d843d9d8698d3c4_31 [label="other"];
    X1d843d9d8698d3c4_30 [label="84 <- Use(cp(42))\l83 <- Gt(mv(84), const ?_usize)\lSwitchInt mv(83)\l"];
    X1d843d9d8698d3c4_31 -> X1d843d9d8698d3c4_32 [label="85"];
    X1d843d9d8698d3c4_31 [label="86 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_32 -> X1d843d9d8698d3c4_33 [label="91"];
    X1d843d9d8698d3c4_32 [label="12 <- Use(mv(85))\l88 <- Use(cp(1))\l87 <- Cast-PtrToPtr mv(88)\l90 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_33 -> X1d843d9d8698d3c4_34 [label="89"];
    X1d843d9d8698d3c4_33 [label="Call\l"];
    X1d843d9d8698d3c4_34 -> X1d843d9d8698d3c4_36 [label="0"];
    X1d843d9d8698d3c4_34 -> X1d843d9d8698d3c4_35 [label="other"];
    X1d843d9d8698d3c4_34 [label="1 <- Use(mv(89))\l93 <- Use(cp((*87).0))\l92 <- Ne(mv(93), const ?_u8)\lSwitchInt mv(92)\l"];
    X1d843d9d8698d3c4_35 -> X1d843d9d8698d3c4_43 [label="94"];
    X1d843d9d8698d3c4_35 [label="95 <- Use(cp(12))\l96 <- Cast-PtrToPtr cp(15)\l97 <- Use(cp((*87).0))\lCall\l"];
    X1d843d9d8698d3c4_36 -> X1d843d9d8698d3c4_37 [label="98"];
    X1d843d9d8698d3c4_36 [label="99 <- Use(cp(12))\l100 <- Adt{0} (cp(87))\lCall\l"];
    X1d843d9d8698d3c4_37 -> X1d843d9d8698d3c4_38 [label="101"];
    X1d843d9d8698d3c4_37 [label="102 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_38 -> X1d843d9d8698d3c4_39 [label="103"];
    X1d843d9d8698d3c4_38 [label="1 <- Use(mv(101))\l104 <- Use(cp(1))\l106 <- Use(cp((*87).8))\l105 <- Cast-IntToInt mv(106)\lCall\l"];
    X1d843d9d8698d3c4_39 -> X1d843d9d8698d3c4_40;
    X1d843d9d8698d3c4_39 [label="1 <- Use(mv(103))\l110 <- Use(cp(1))\l109 <- Cast-PointerExposeAddress mv(110)\l112 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(112.1) == false\l"];
    X1d843d9d8698d3c4_40 -> X1d843d9d8698d3c4_41;
    X1d843d9d8698d3c4_40 [label="111 <- Use(mv(112.0))\l113 <- chkd-Add(cp(109), cp(111))\lAssert mv(113.1) == false\l"];
    X1d843d9d8698d3c4_41 -> X1d843d9d8698d3c4_42;
    X1d843d9d8698d3c4_41 [label="108 <- Use(mv(113.0))\l116 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(116.1) == false\l"];
    X1d843d9d8698d3c4_42 -> X1d843d9d8698d3c4_43;
    X1d843d9d8698d3c4_42 [label="115 <- Use(mv(116.0))\l114 <- Not(mv(115))\l107 <- BitAnd(mv(108), mv(114))\l1 <- Cast-PointerWithExposedProvenance mv(107)\lGoto\l"];
    X1d843d9d8698d3c4_43 -> X1d843d9d8698d3c4_44 [label="117"];
    X1d843d9d8698d3c4_43 [label="118 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_44 -> X1d843d9d8698d3c4_45 [label="123"];
    X1d843d9d8698d3c4_44 [label="12 <- Use(mv(117))\l120 <- Use(cp(1))\l119 <- Cast-PtrToPtr mv(120)\l122 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_45 -> X1d843d9d8698d3c4_46 [label="121"];
    X1d843d9d8698d3c4_45 [label="Call\l"];
    X1d843d9d8698d3c4_46 -> X1d843d9d8698d3c4_48 [label="0"];
    X1d843d9d8698d3c4_46 -> X1d843d9d8698d3c4_47 [label="other"];
    X1d843d9d8698d3c4_46 [label="1 <- Use(mv(121))\l125 <- Use(cp((*119).0))\l124 <- Ne(mv(125), const ?_u8)\lSwitchInt mv(124)\l"];
    X1d843d9d8698d3c4_47 -> X1d843d9d8698d3c4_55 [label="126"];
    X1d843d9d8698d3c4_47 [label="127 <- Use(cp(12))\l128 <- Cast-PtrToPtr cp(15)\l129 <- Use(cp((*119).0))\lCall\l"];
    X1d843d9d8698d3c4_48 -> X1d843d9d8698d3c4_49 [label="130"];
    X1d843d9d8698d3c4_48 [label="131 <- Use(cp(12))\l132 <- Adt{0} (cp(119))\lCall\l"];
    X1d843d9d8698d3c4_49 -> X1d843d9d8698d3c4_50 [label="133"];
    X1d843d9d8698d3c4_49 [label="134 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_50 -> X1d843d9d8698d3c4_51 [label="135"];
    X1d843d9d8698d3c4_50 [label="1 <- Use(mv(133))\l136 <- Use(cp(1))\l138 <- Use(cp((*119).8))\l137 <- Cast-IntToInt mv(138)\lCall\l"];
    X1d843d9d8698d3c4_51 -> X1d843d9d8698d3c4_52;
    X1d843d9d8698d3c4_51 [label="1 <- Use(mv(135))\l142 <- Use(cp(1))\l141 <- Cast-PointerExposeAddress mv(142)\l144 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(144.1) == false\l"];
    X1d843d9d8698d3c4_52 -> X1d843d9d8698d3c4_53;
    X1d843d9d8698d3c4_52 [label="143 <- Use(mv(144.0))\l145 <- chkd-Add(cp(141), cp(143))\lAssert mv(145.1) == false\l"];
    X1d843d9d8698d3c4_53 -> X1d843d9d8698d3c4_54;
    X1d843d9d8698d3c4_53 [label="140 <- Use(mv(145.0))\l148 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(148.1) == false\l"];
    X1d843d9d8698d3c4_54 -> X1d843d9d8698d3c4_55;
    X1d843d9d8698d3c4_54 [label="147 <- Use(mv(148.0))\l146 <- Not(mv(147))\l139 <- BitAnd(mv(140), mv(146))\l1 <- Cast-PointerWithExposedProvenance mv(139)\lGoto\l"];
    X1d843d9d8698d3c4_55 -> X1d843d9d8698d3c4_56 [label="149"];
    X1d843d9d8698d3c4_55 [label="150 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_56 -> X1d843d9d8698d3c4_57 [label="155"];
    X1d843d9d8698d3c4_56 [label="12 <- Use(mv(149))\l152 <- Use(cp(1))\l151 <- Cast-PtrToPtr mv(152)\l154 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_57 -> X1d843d9d8698d3c4_58 [label="153"];
    X1d843d9d8698d3c4_57 [label="Call\l"];
    X1d843d9d8698d3c4_58 -> X1d843d9d8698d3c4_60 [label="0"];
    X1d843d9d8698d3c4_58 -> X1d843d9d8698d3c4_59 [label="other"];
    X1d843d9d8698d3c4_58 [label="1 <- Use(mv(153))\l157 <- Use(cp((*151).0))\l156 <- Ne(mv(157), const ?_u8)\lSwitchInt mv(156)\l"];
    X1d843d9d8698d3c4_59 -> X1d843d9d8698d3c4_67 [label="158"];
    X1d843d9d8698d3c4_59 [label="159 <- Use(cp(12))\l160 <- Cast-PtrToPtr cp(15)\l161 <- Use(cp((*151).0))\lCall\l"];
    X1d843d9d8698d3c4_60 -> X1d843d9d8698d3c4_61 [label="162"];
    X1d843d9d8698d3c4_60 [label="163 <- Use(cp(12))\l164 <- Adt{0} (cp(151))\lCall\l"];
    X1d843d9d8698d3c4_61 -> X1d843d9d8698d3c4_62 [label="165"];
    X1d843d9d8698d3c4_61 [label="166 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_62 -> X1d843d9d8698d3c4_63 [label="167"];
    X1d843d9d8698d3c4_62 [label="1 <- Use(mv(165))\l168 <- Use(cp(1))\l170 <- Use(cp((*151).8))\l169 <- Cast-IntToInt mv(170)\lCall\l"];
    X1d843d9d8698d3c4_63 -> X1d843d9d8698d3c4_64;
    X1d843d9d8698d3c4_63 [label="1 <- Use(mv(167))\l174 <- Use(cp(1))\l173 <- Cast-PointerExposeAddress mv(174)\l176 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(176.1) == false\l"];
    X1d843d9d8698d3c4_64 -> X1d843d9d8698d3c4_65;
    X1d843d9d8698d3c4_64 [label="175 <- Use(mv(176.0))\l177 <- chkd-Add(cp(173), cp(175))\lAssert mv(177.1) == false\l"];
    X1d843d9d8698d3c4_65 -> X1d843d9d8698d3c4_66;
    X1d843d9d8698d3c4_65 [label="172 <- Use(mv(177.0))\l180 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(180.1) == false\l"];
    X1d843d9d8698d3c4_66 -> X1d843d9d8698d3c4_67;
    X1d843d9d8698d3c4_66 [label="179 <- Use(mv(180.0))\l178 <- Not(mv(179))\l171 <- BitAnd(mv(172), mv(178))\l1 <- Cast-PointerWithExposedProvenance mv(171)\lGoto\l"];
    X1d843d9d8698d3c4_67 -> X1d843d9d8698d3c4_68 [label="181"];
    X1d843d9d8698d3c4_67 [label="182 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_68 -> X1d843d9d8698d3c4_69 [label="187"];
    X1d843d9d8698d3c4_68 [label="12 <- Use(mv(181))\l184 <- Use(cp(1))\l183 <- Cast-PtrToPtr mv(184)\l186 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_69 -> X1d843d9d8698d3c4_70 [label="185"];
    X1d843d9d8698d3c4_69 [label="Call\l"];
    X1d843d9d8698d3c4_70 -> X1d843d9d8698d3c4_72 [label="0"];
    X1d843d9d8698d3c4_70 -> X1d843d9d8698d3c4_71 [label="other"];
    X1d843d9d8698d3c4_70 [label="1 <- Use(mv(185))\l189 <- Use(cp((*183).0))\l188 <- Ne(mv(189), const ?_u8)\lSwitchInt mv(188)\l"];
    X1d843d9d8698d3c4_71 -> X1d843d9d8698d3c4_79 [label="190"];
    X1d843d9d8698d3c4_71 [label="191 <- Use(cp(12))\l192 <- Cast-PtrToPtr cp(15)\l193 <- Use(cp((*183).0))\lCall\l"];
    X1d843d9d8698d3c4_72 -> X1d843d9d8698d3c4_73 [label="194"];
    X1d843d9d8698d3c4_72 [label="195 <- Use(cp(12))\l196 <- Adt{0} (cp(183))\lCall\l"];
    X1d843d9d8698d3c4_73 -> X1d843d9d8698d3c4_74 [label="197"];
    X1d843d9d8698d3c4_73 [label="198 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_74 -> X1d843d9d8698d3c4_75 [label="199"];
    X1d843d9d8698d3c4_74 [label="1 <- Use(mv(197))\l200 <- Use(cp(1))\l202 <- Use(cp((*183).8))\l201 <- Cast-IntToInt mv(202)\lCall\l"];
    X1d843d9d8698d3c4_75 -> X1d843d9d8698d3c4_76;
    X1d843d9d8698d3c4_75 [label="1 <- Use(mv(199))\l206 <- Use(cp(1))\l205 <- Cast-PointerExposeAddress mv(206)\l208 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(208.1) == false\l"];
    X1d843d9d8698d3c4_76 -> X1d843d9d8698d3c4_77;
    X1d843d9d8698d3c4_76 [label="207 <- Use(mv(208.0))\l209 <- chkd-Add(cp(205), cp(207))\lAssert mv(209.1) == false\l"];
    X1d843d9d8698d3c4_77 -> X1d843d9d8698d3c4_78;
    X1d843d9d8698d3c4_77 [label="204 <- Use(mv(209.0))\l212 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(212.1) == false\l"];
    X1d843d9d8698d3c4_78 -> X1d843d9d8698d3c4_79;
    X1d843d9d8698d3c4_78 [label="211 <- Use(mv(212.0))\l210 <- Not(mv(211))\l203 <- BitAnd(mv(204), mv(210))\l1 <- Cast-PointerWithExposedProvenance mv(203)\lGoto\l"];
    X1d843d9d8698d3c4_79 -> X1d843d9d8698d3c4_80 [label="213"];
    X1d843d9d8698d3c4_79 [label="214 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_80 -> X1d843d9d8698d3c4_81 [label="219"];
    X1d843d9d8698d3c4_80 [label="12 <- Use(mv(213))\l216 <- Use(cp(1))\l215 <- Cast-PtrToPtr mv(216)\l218 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_81 -> X1d843d9d8698d3c4_82 [label="217"];
    X1d843d9d8698d3c4_81 [label="Call\l"];
    X1d843d9d8698d3c4_82 -> X1d843d9d8698d3c4_84 [label="0"];
    X1d843d9d8698d3c4_82 -> X1d843d9d8698d3c4_83 [label="other"];
    X1d843d9d8698d3c4_82 [label="1 <- Use(mv(217))\l221 <- Use(cp((*215).0))\l220 <- Ne(mv(221), const ?_u8)\lSwitchInt mv(220)\l"];
    X1d843d9d8698d3c4_83 -> X1d843d9d8698d3c4_91 [label="222"];
    X1d843d9d8698d3c4_83 [label="223 <- Use(cp(12))\l224 <- Cast-PtrToPtr cp(15)\l225 <- Use(cp((*215).0))\lCall\l"];
    X1d843d9d8698d3c4_84 -> X1d843d9d8698d3c4_85 [label="226"];
    X1d843d9d8698d3c4_84 [label="227 <- Use(cp(12))\l228 <- Adt{0} (cp(215))\lCall\l"];
    X1d843d9d8698d3c4_85 -> X1d843d9d8698d3c4_86 [label="229"];
    X1d843d9d8698d3c4_85 [label="230 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_86 -> X1d843d9d8698d3c4_87 [label="231"];
    X1d843d9d8698d3c4_86 [label="1 <- Use(mv(229))\l232 <- Use(cp(1))\l234 <- Use(cp((*215).8))\l233 <- Cast-IntToInt mv(234)\lCall\l"];
    X1d843d9d8698d3c4_87 -> X1d843d9d8698d3c4_88;
    X1d843d9d8698d3c4_87 [label="1 <- Use(mv(231))\l238 <- Use(cp(1))\l237 <- Cast-PointerExposeAddress mv(238)\l240 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(240.1) == false\l"];
    X1d843d9d8698d3c4_88 -> X1d843d9d8698d3c4_89;
    X1d843d9d8698d3c4_88 [label="239 <- Use(mv(240.0))\l241 <- chkd-Add(cp(237), cp(239))\lAssert mv(241.1) == false\l"];
    X1d843d9d8698d3c4_89 -> X1d843d9d8698d3c4_90;
    X1d843d9d8698d3c4_89 [label="236 <- Use(mv(241.0))\l244 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(244.1) == false\l"];
    X1d843d9d8698d3c4_90 -> X1d843d9d8698d3c4_91;
    X1d843d9d8698d3c4_90 [label="243 <- Use(mv(244.0))\l242 <- Not(mv(243))\l235 <- BitAnd(mv(236), mv(242))\l1 <- Cast-PointerWithExposedProvenance mv(235)\lGoto\l"];
    X1d843d9d8698d3c4_91 -> X1d843d9d8698d3c4_92;
    X1d843d9d8698d3c4_91 [label="245 <- chkd-Sub(cp(42), const ?_usize)\lAssert mv(245.1) == false\l"];
    X1d843d9d8698d3c4_92 -> X1d843d9d8698d3c4_30;
    X1d843d9d8698d3c4_92 [label="42 <- Use(mv(245.0))\lGoto\l"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_98 [label="5"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_97 [label="4"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_96 [label="3"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_95 [label="2"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_215 [label="1"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_94 [label="other"];
    X1d843d9d8698d3c4_93 [label="SwitchInt cp(42)\l"];
    X1d843d9d8698d3c4_94 [label="Call\l"];
    X1d843d9d8698d3c4_95 -> X1d843d9d8698d3c4_204 [label="534"];
    X1d843d9d8698d3c4_95 [label="535 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_96 -> X1d843d9d8698d3c4_181 [label="470"];
    X1d843d9d8698d3c4_96 [label="471 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_97 -> X1d843d9d8698d3c4_146 [label="374"];
    X1d843d9d8698d3c4_97 [label="375 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_98 -> X1d843d9d8698d3c4_99 [label="246"];
    X1d843d9d8698d3c4_98 [label="247 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_99 -> X1d843d9d8698d3c4_100 [label="252"];
    X1d843d9d8698d3c4_99 [label="12 <- Use(mv(246))\l249 <- Use(cp(1))\l248 <- Cast-PtrToPtr mv(249)\l251 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_100 -> X1d843d9d8698d3c4_101 [label="250"];
    X1d843d9d8698d3c4_100 [label="Call\l"];
    X1d843d9d8698d3c4_101 -> X1d843d9d8698d3c4_103 [label="0"];
    X1d843d9d8698d3c4_101 -> X1d843d9d8698d3c4_102 [label="other"];
    X1d843d9d8698d3c4_101 [label="1 <- Use(mv(250))\l254 <- Use(cp((*248).0))\l253 <- Ne(mv(254), const ?_u8)\lSwitchInt mv(253)\l"];
    X1d843d9d8698d3c4_102 -> X1d843d9d8698d3c4_110 [label="255"];
    X1d843d9d8698d3c4_102 [label="256 <- Use(cp(12))\l257 <- Cast-PtrToPtr cp(15)\l258 <- Use(cp((*248).0))\lCall\l"];
    X1d843d9d8698d3c4_103 -> X1d843d9d8698d3c4_104 [label="259"];
    X1d843d9d8698d3c4_103 [label="260 <- Use(cp(12))\l261 <- Adt{0} (cp(248))\lCall\l"];
    X1d843d9d8698d3c4_104 -> X1d843d9d8698d3c4_105 [label="262"];
    X1d843d9d8698d3c4_104 [label="263 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_105 -> X1d843d9d8698d3c4_106 [label="264"];
    X1d843d9d8698d3c4_105 [label="1 <- Use(mv(262))\l265 <- Use(cp(1))\l267 <- Use(cp((*248).8))\l266 <- Cast-IntToInt mv(267)\lCall\l"];
    X1d843d9d8698d3c4_106 -> X1d843d9d8698d3c4_107;
    X1d843d9d8698d3c4_106 [label="1 <- Use(mv(264))\l271 <- Use(cp(1))\l270 <- Cast-PointerExposeAddress mv(271)\l273 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(273.1) == false\l"];
    X1d843d9d8698d3c4_107 -> X1d843d9d8698d3c4_108;
    X1d843d9d8698d3c4_107 [label="272 <- Use(mv(273.0))\l274 <- chkd-Add(cp(270), cp(272))\lAssert mv(274.1) == false\l"];
    X1d843d9d8698d3c4_108 -> X1d843d9d8698d3c4_109;
    X1d843d9d8698d3c4_108 [label="269 <- Use(mv(274.0))\l277 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(277.1) == false\l"];
    X1d843d9d8698d3c4_109 -> X1d843d9d8698d3c4_110;
    X1d843d9d8698d3c4_109 [label="276 <- Use(mv(277.0))\l275 <- Not(mv(276))\l268 <- BitAnd(mv(269), mv(275))\l1 <- Cast-PointerWithExposedProvenance mv(268)\lGoto\l"];
    X1d843d9d8698d3c4_110 -> X1d843d9d8698d3c4_111 [label="278"];
    X1d843d9d8698d3c4_110 [label="279 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_111 -> X1d843d9d8698d3c4_112 [label="284"];
    X1d843d9d8698d3c4_111 [label="12 <- Use(mv(278))\l281 <- Use(cp(1))\l280 <- Cast-PtrToPtr mv(281)\l283 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_112 -> X1d843d9d8698d3c4_113 [label="282"];
    X1d843d9d8698d3c4_112 [label="Call\l"];
    X1d843d9d8698d3c4_113 -> X1d843d9d8698d3c4_115 [label="0"];
    X1d843d9d8698d3c4_113 -> X1d843d9d8698d3c4_114 [label="other"];
    X1d843d9d8698d3c4_113 [label="1 <- Use(mv(282))\l286 <- Use(cp((*280).0))\l285 <- Ne(mv(286), const ?_u8)\lSwitchInt mv(285)\l"];
    X1d843d9d8698d3c4_114 -> X1d843d9d8698d3c4_122 [label="287"];
    X1d843d9d8698d3c4_114 [label="288 <- Use(cp(12))\l289 <- Cast-PtrToPtr cp(15)\l290 <- Use(cp((*280).0))\lCall\l"];
    X1d843d9d8698d3c4_115 -> X1d843d9d8698d3c4_116 [label="291"];
    X1d843d9d8698d3c4_115 [label="292 <- Use(cp(12))\l293 <- Adt{0} (cp(280))\lCall\l"];
    X1d843d9d8698d3c4_116 -> X1d843d9d8698d3c4_117 [label="294"];
    X1d843d9d8698d3c4_116 [label="295 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_117 -> X1d843d9d8698d3c4_118 [label="296"];
    X1d843d9d8698d3c4_117 [label="1 <- Use(mv(294))\l297 <- Use(cp(1))\l299 <- Use(cp((*280).8))\l298 <- Cast-IntToInt mv(299)\lCall\l"];
    X1d843d9d8698d3c4_118 -> X1d843d9d8698d3c4_119;
    X1d843d9d8698d3c4_118 [label="1 <- Use(mv(296))\l303 <- Use(cp(1))\l302 <- Cast-PointerExposeAddress mv(303)\l305 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(305.1) == false\l"];
    X1d843d9d8698d3c4_119 -> X1d843d9d8698d3c4_120;
    X1d843d9d8698d3c4_119 [label="304 <- Use(mv(305.0))\l306 <- chkd-Add(cp(302), cp(304))\lAssert mv(306.1) == false\l"];
    X1d843d9d8698d3c4_120 -> X1d843d9d8698d3c4_121;
    X1d843d9d8698d3c4_120 [label="301 <- Use(mv(306.0))\l309 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(309.1) == false\l"];
    X1d843d9d8698d3c4_121 -> X1d843d9d8698d3c4_122;
    X1d843d9d8698d3c4_121 [label="308 <- Use(mv(309.0))\l307 <- Not(mv(308))\l300 <- BitAnd(mv(301), mv(307))\l1 <- Cast-PointerWithExposedProvenance mv(300)\lGoto\l"];
    X1d843d9d8698d3c4_122 -> X1d843d9d8698d3c4_123 [label="310"];
    X1d843d9d8698d3c4_122 [label="311 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_123 -> X1d843d9d8698d3c4_124 [label="316"];
    X1d843d9d8698d3c4_123 [label="12 <- Use(mv(310))\l313 <- Use(cp(1))\l312 <- Cast-PtrToPtr mv(313)\l315 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_124 -> X1d843d9d8698d3c4_125 [label="314"];
    X1d843d9d8698d3c4_124 [label="Call\l"];
    X1d843d9d8698d3c4_125 -> X1d843d9d8698d3c4_127 [label="0"];
    X1d843d9d8698d3c4_125 -> X1d843d9d8698d3c4_126 [label="other"];
    X1d843d9d8698d3c4_125 [label="1 <- Use(mv(314))\l318 <- Use(cp((*312).0))\l317 <- Ne(mv(318), const ?_u8)\lSwitchInt mv(317)\l"];
    X1d843d9d8698d3c4_126 -> X1d843d9d8698d3c4_134 [label="319"];
    X1d843d9d8698d3c4_126 [label="320 <- Use(cp(12))\l321 <- Cast-PtrToPtr cp(15)\l322 <- Use(cp((*312).0))\lCall\l"];
    X1d843d9d8698d3c4_127 -> X1d843d9d8698d3c4_128 [label="323"];
    X1d843d9d8698d3c4_127 [label="324 <- Use(cp(12))\l325 <- Adt{0} (cp(312))\lCall\l"];
    X1d843d9d8698d3c4_128 -> X1d843d9d8698d3c4_129 [label="326"];
    X1d843d9d8698d3c4_128 [label="327 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_129 -> X1d843d9d8698d3c4_130 [label="328"];
    X1d843d9d8698d3c4_129 [label="1 <- Use(mv(326))\l329 <- Use(cp(1))\l331 <- Use(cp((*312).8))\l330 <- Cast-IntToInt mv(331)\lCall\l"];
    X1d843d9d8698d3c4_130 -> X1d843d9d8698d3c4_131;
    X1d843d9d8698d3c4_130 [label="1 <- Use(mv(328))\l335 <- Use(cp(1))\l334 <- Cast-PointerExposeAddress mv(335)\l337 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(337.1) == false\l"];
    X1d843d9d8698d3c4_131 -> X1d843d9d8698d3c4_132;
    X1d843d9d8698d3c4_131 [label="336 <- Use(mv(337.0))\l338 <- chkd-Add(cp(334), cp(336))\lAssert mv(338.1) == false\l"];
    X1d843d9d8698d3c4_132 -> X1d843d9d8698d3c4_133;
    X1d843d9d8698d3c4_132 [label="333 <- Use(mv(338.0))\l341 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(341.1) == false\l"];
    X1d843d9d8698d3c4_133 -> X1d843d9d8698d3c4_134;
    X1d843d9d8698d3c4_133 [label="340 <- Use(mv(341.0))\l339 <- Not(mv(340))\l332 <- BitAnd(mv(333), mv(339))\l1 <- Cast-PointerWithExposedProvenance mv(332)\lGoto\l"];
    X1d843d9d8698d3c4_134 -> X1d843d9d8698d3c4_135 [label="342"];
    X1d843d9d8698d3c4_134 [label="343 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_135 -> X1d843d9d8698d3c4_136 [label="348"];
    X1d843d9d8698d3c4_135 [label="12 <- Use(mv(342))\l345 <- Use(cp(1))\l344 <- Cast-PtrToPtr mv(345)\l347 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_136 -> X1d843d9d8698d3c4_137 [label="346"];
    X1d843d9d8698d3c4_136 [label="Call\l"];
    X1d843d9d8698d3c4_137 -> X1d843d9d8698d3c4_139 [label="0"];
    X1d843d9d8698d3c4_137 -> X1d843d9d8698d3c4_138 [label="other"];
    X1d843d9d8698d3c4_137 [label="1 <- Use(mv(346))\l350 <- Use(cp((*344).0))\l349 <- Ne(mv(350), const ?_u8)\lSwitchInt mv(349)\l"];
    X1d843d9d8698d3c4_138 -> X1d843d9d8698d3c4_215 [label="351"];
    X1d843d9d8698d3c4_138 [label="352 <- Use(cp(12))\l353 <- Cast-PtrToPtr cp(15)\l354 <- Use(cp((*344).0))\lCall\l"];
    X1d843d9d8698d3c4_139 -> X1d843d9d8698d3c4_140 [label="355"];
    X1d843d9d8698d3c4_139 [label="356 <- Use(cp(12))\l357 <- Adt{0} (cp(344))\lCall\l"];
    X1d843d9d8698d3c4_140 -> X1d843d9d8698d3c4_141 [label="358"];
    X1d843d9d8698d3c4_140 [label="359 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_141 -> X1d843d9d8698d3c4_142 [label="360"];
    X1d843d9d8698d3c4_141 [label="1 <- Use(mv(358))\l361 <- Use(cp(1))\l363 <- Use(cp((*344).8))\l362 <- Cast-IntToInt mv(363)\lCall\l"];
    X1d843d9d8698d3c4_142 -> X1d843d9d8698d3c4_143;
    X1d843d9d8698d3c4_142 [label="1 <- Use(mv(360))\l367 <- Use(cp(1))\l366 <- Cast-PointerExposeAddress mv(367)\l369 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(369.1) == false\l"];
    X1d843d9d8698d3c4_143 -> X1d843d9d8698d3c4_144;
    X1d843d9d8698d3c4_143 [label="368 <- Use(mv(369.0))\l370 <- chkd-Add(cp(366), cp(368))\lAssert mv(370.1) == false\l"];
    X1d843d9d8698d3c4_144 -> X1d843d9d8698d3c4_145;
    X1d843d9d8698d3c4_144 [label="365 <- Use(mv(370.0))\l373 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(373.1) == false\l"];
    X1d843d9d8698d3c4_145 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_145 [label="372 <- Use(mv(373.0))\l371 <- Not(mv(372))\l364 <- BitAnd(mv(365), mv(371))\l1 <- Cast-PointerWithExposedProvenance mv(364)\lGoto\l"];
    X1d843d9d8698d3c4_146 -> X1d843d9d8698d3c4_147 [label="380"];
    X1d843d9d8698d3c4_146 [label="12 <- Use(mv(374))\l377 <- Use(cp(1))\l376 <- Cast-PtrToPtr mv(377)\l379 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_147 -> X1d843d9d8698d3c4_148 [label="378"];
    X1d843d9d8698d3c4_147 [label="Call\l"];
    X1d843d9d8698d3c4_148 -> X1d843d9d8698d3c4_150 [label="0"];
    X1d843d9d8698d3c4_148 -> X1d843d9d8698d3c4_149 [label="other"];
    X1d843d9d8698d3c4_148 [label="1 <- Use(mv(378))\l382 <- Use(cp((*376).0))\l381 <- Ne(mv(382), const ?_u8)\lSwitchInt mv(381)\l"];
    X1d843d9d8698d3c4_149 -> X1d843d9d8698d3c4_157 [label="383"];
    X1d843d9d8698d3c4_149 [label="384 <- Use(cp(12))\l385 <- Cast-PtrToPtr cp(15)\l386 <- Use(cp((*376).0))\lCall\l"];
    X1d843d9d8698d3c4_150 -> X1d843d9d8698d3c4_151 [label="387"];
    X1d843d9d8698d3c4_150 [label="388 <- Use(cp(12))\l389 <- Adt{0} (cp(376))\lCall\l"];
    X1d843d9d8698d3c4_151 -> X1d843d9d8698d3c4_152 [label="390"];
    X1d843d9d8698d3c4_151 [label="391 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_152 -> X1d843d9d8698d3c4_153 [label="392"];
    X1d843d9d8698d3c4_152 [label="1 <- Use(mv(390))\l393 <- Use(cp(1))\l395 <- Use(cp((*376).8))\l394 <- Cast-IntToInt mv(395)\lCall\l"];
    X1d843d9d8698d3c4_153 -> X1d843d9d8698d3c4_154;
    X1d843d9d8698d3c4_153 [label="1 <- Use(mv(392))\l399 <- Use(cp(1))\l398 <- Cast-PointerExposeAddress mv(399)\l401 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(401.1) == false\l"];
    X1d843d9d8698d3c4_154 -> X1d843d9d8698d3c4_155;
    X1d843d9d8698d3c4_154 [label="400 <- Use(mv(401.0))\l402 <- chkd-Add(cp(398), cp(400))\lAssert mv(402.1) == false\l"];
    X1d843d9d8698d3c4_155 -> X1d843d9d8698d3c4_156;
    X1d843d9d8698d3c4_155 [label="397 <- Use(mv(402.0))\l405 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(405.1) == false\l"];
    X1d843d9d8698d3c4_156 -> X1d843d9d8698d3c4_157;
    X1d843d9d8698d3c4_156 [label="404 <- Use(mv(405.0))\l403 <- Not(mv(404))\l396 <- BitAnd(mv(397), mv(403))\l1 <- Cast-PointerWithExposedProvenance mv(396)\lGoto\l"];
    X1d843d9d8698d3c4_157 -> X1d843d9d8698d3c4_158 [label="406"];
    X1d843d9d8698d3c4_157 [label="407 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_158 -> X1d843d9d8698d3c4_159 [label="412"];
    X1d843d9d8698d3c4_158 [label="12 <- Use(mv(406))\l409 <- Use(cp(1))\l408 <- Cast-PtrToPtr mv(409)\l411 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_159 -> X1d843d9d8698d3c4_160 [label="410"];
    X1d843d9d8698d3c4_159 [label="Call\l"];
    X1d843d9d8698d3c4_160 -> X1d843d9d8698d3c4_162 [label="0"];
    X1d843d9d8698d3c4_160 -> X1d843d9d8698d3c4_161 [label="other"];
    X1d843d9d8698d3c4_160 [label="1 <- Use(mv(410))\l414 <- Use(cp((*408).0))\l413 <- Ne(mv(414), const ?_u8)\lSwitchInt mv(413)\l"];
    X1d843d9d8698d3c4_161 -> X1d843d9d8698d3c4_169 [label="415"];
    X1d843d9d8698d3c4_161 [label="416 <- Use(cp(12))\l417 <- Cast-PtrToPtr cp(15)\l418 <- Use(cp((*408).0))\lCall\l"];
    X1d843d9d8698d3c4_162 -> X1d843d9d8698d3c4_163 [label="419"];
    X1d843d9d8698d3c4_162 [label="420 <- Use(cp(12))\l421 <- Adt{0} (cp(408))\lCall\l"];
    X1d843d9d8698d3c4_163 -> X1d843d9d8698d3c4_164 [label="422"];
    X1d843d9d8698d3c4_163 [label="423 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_164 -> X1d843d9d8698d3c4_165 [label="424"];
    X1d843d9d8698d3c4_164 [label="1 <- Use(mv(422))\l425 <- Use(cp(1))\l427 <- Use(cp((*408).8))\l426 <- Cast-IntToInt mv(427)\lCall\l"];
    X1d843d9d8698d3c4_165 -> X1d843d9d8698d3c4_166;
    X1d843d9d8698d3c4_165 [label="1 <- Use(mv(424))\l431 <- Use(cp(1))\l430 <- Cast-PointerExposeAddress mv(431)\l433 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(433.1) == false\l"];
    X1d843d9d8698d3c4_166 -> X1d843d9d8698d3c4_167;
    X1d843d9d8698d3c4_166 [label="432 <- Use(mv(433.0))\l434 <- chkd-Add(cp(430), cp(432))\lAssert mv(434.1) == false\l"];
    X1d843d9d8698d3c4_167 -> X1d843d9d8698d3c4_168;
    X1d843d9d8698d3c4_167 [label="429 <- Use(mv(434.0))\l437 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(437.1) == false\l"];
    X1d843d9d8698d3c4_168 -> X1d843d9d8698d3c4_169;
    X1d843d9d8698d3c4_168 [label="436 <- Use(mv(437.0))\l435 <- Not(mv(436))\l428 <- BitAnd(mv(429), mv(435))\l1 <- Cast-PointerWithExposedProvenance mv(428)\lGoto\l"];
    X1d843d9d8698d3c4_169 -> X1d843d9d8698d3c4_170 [label="438"];
    X1d843d9d8698d3c4_169 [label="439 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_170 -> X1d843d9d8698d3c4_171 [label="444"];
    X1d843d9d8698d3c4_170 [label="12 <- Use(mv(438))\l441 <- Use(cp(1))\l440 <- Cast-PtrToPtr mv(441)\l443 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_171 -> X1d843d9d8698d3c4_172 [label="442"];
    X1d843d9d8698d3c4_171 [label="Call\l"];
    X1d843d9d8698d3c4_172 -> X1d843d9d8698d3c4_174 [label="0"];
    X1d843d9d8698d3c4_172 -> X1d843d9d8698d3c4_173 [label="other"];
    X1d843d9d8698d3c4_172 [label="1 <- Use(mv(442))\l446 <- Use(cp((*440).0))\l445 <- Ne(mv(446), const ?_u8)\lSwitchInt mv(445)\l"];
    X1d843d9d8698d3c4_173 -> X1d843d9d8698d3c4_215 [label="447"];
    X1d843d9d8698d3c4_173 [label="448 <- Use(cp(12))\l449 <- Cast-PtrToPtr cp(15)\l450 <- Use(cp((*440).0))\lCall\l"];
    X1d843d9d8698d3c4_174 -> X1d843d9d8698d3c4_175 [label="451"];
    X1d843d9d8698d3c4_174 [label="452 <- Use(cp(12))\l453 <- Adt{0} (cp(440))\lCall\l"];
    X1d843d9d8698d3c4_175 -> X1d843d9d8698d3c4_176 [label="454"];
    X1d843d9d8698d3c4_175 [label="455 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_176 -> X1d843d9d8698d3c4_177 [label="456"];
    X1d843d9d8698d3c4_176 [label="1 <- Use(mv(454))\l457 <- Use(cp(1))\l459 <- Use(cp((*440).8))\l458 <- Cast-IntToInt mv(459)\lCall\l"];
    X1d843d9d8698d3c4_177 -> X1d843d9d8698d3c4_178;
    X1d843d9d8698d3c4_177 [label="1 <- Use(mv(456))\l463 <- Use(cp(1))\l462 <- Cast-PointerExposeAddress mv(463)\l465 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(465.1) == false\l"];
    X1d843d9d8698d3c4_178 -> X1d843d9d8698d3c4_179;
    X1d843d9d8698d3c4_178 [label="464 <- Use(mv(465.0))\l466 <- chkd-Add(cp(462), cp(464))\lAssert mv(466.1) == false\l"];
    X1d843d9d8698d3c4_179 -> X1d843d9d8698d3c4_180;
    X1d843d9d8698d3c4_179 [label="461 <- Use(mv(466.0))\l469 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(469.1) == false\l"];
    X1d843d9d8698d3c4_180 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_180 [label="468 <- Use(mv(469.0))\l467 <- Not(mv(468))\l460 <- BitAnd(mv(461), mv(467))\l1 <- Cast-PointerWithExposedProvenance mv(460)\lGoto\l"];
    X1d843d9d8698d3c4_181 -> X1d843d9d8698d3c4_182 [label="476"];
    X1d843d9d8698d3c4_181 [label="12 <- Use(mv(470))\l473 <- Use(cp(1))\l472 <- Cast-PtrToPtr mv(473)\l475 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_182 -> X1d843d9d8698d3c4_183 [label="474"];
    X1d843d9d8698d3c4_182 [label="Call\l"];
    X1d843d9d8698d3c4_183 -> X1d843d9d8698d3c4_185 [label="0"];
    X1d843d9d8698d3c4_183 -> X1d843d9d8698d3c4_184 [label="other"];
    X1d843d9d8698d3c4_183 [label="1 <- Use(mv(474))\l478 <- Use(cp((*472).0))\l477 <- Ne(mv(478), const ?_u8)\lSwitchInt mv(477)\l"];
    X1d843d9d8698d3c4_184 -> X1d843d9d8698d3c4_192 [label="479"];
    X1d843d9d8698d3c4_184 [label="480 <- Use(cp(12))\l481 <- Cast-PtrToPtr cp(15)\l482 <- Use(cp((*472).0))\lCall\l"];
    X1d843d9d8698d3c4_185 -> X1d843d9d8698d3c4_186 [label="483"];
    X1d843d9d8698d3c4_185 [label="484 <- Use(cp(12))\l485 <- Adt{0} (cp(472))\lCall\l"];
    X1d843d9d8698d3c4_186 -> X1d843d9d8698d3c4_187 [label="486"];
    X1d843d9d8698d3c4_186 [label="487 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_187 -> X1d843d9d8698d3c4_188 [label="488"];
    X1d843d9d8698d3c4_187 [label="1 <- Use(mv(486))\l489 <- Use(cp(1))\l491 <- Use(cp((*472).8))\l490 <- Cast-IntToInt mv(491)\lCall\l"];
    X1d843d9d8698d3c4_188 -> X1d843d9d8698d3c4_189;
    X1d843d9d8698d3c4_188 [label="1 <- Use(mv(488))\l495 <- Use(cp(1))\l494 <- Cast-PointerExposeAddress mv(495)\l497 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(497.1) == false\l"];
    X1d843d9d8698d3c4_189 -> X1d843d9d8698d3c4_190;
    X1d843d9d8698d3c4_189 [label="496 <- Use(mv(497.0))\l498 <- chkd-Add(cp(494), cp(496))\lAssert mv(498.1) == false\l"];
    X1d843d9d8698d3c4_190 -> X1d843d9d8698d3c4_191;
    X1d843d9d8698d3c4_190 [label="493 <- Use(mv(498.0))\l501 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(501.1) == false\l"];
    X1d843d9d8698d3c4_191 -> X1d843d9d8698d3c4_192;
    X1d843d9d8698d3c4_191 [label="500 <- Use(mv(501.0))\l499 <- Not(mv(500))\l492 <- BitAnd(mv(493), mv(499))\l1 <- Cast-PointerWithExposedProvenance mv(492)\lGoto\l"];
    X1d843d9d8698d3c4_192 -> X1d843d9d8698d3c4_193 [label="502"];
    X1d843d9d8698d3c4_192 [label="503 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_193 -> X1d843d9d8698d3c4_194 [label="508"];
    X1d843d9d8698d3c4_193 [label="12 <- Use(mv(502))\l505 <- Use(cp(1))\l504 <- Cast-PtrToPtr mv(505)\l507 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_194 -> X1d843d9d8698d3c4_195 [label="506"];
    X1d843d9d8698d3c4_194 [label="Call\l"];
    X1d843d9d8698d3c4_195 -> X1d843d9d8698d3c4_197 [label="0"];
    X1d843d9d8698d3c4_195 -> X1d843d9d8698d3c4_196 [label="other"];
    X1d843d9d8698d3c4_195 [label="1 <- Use(mv(506))\l510 <- Use(cp((*504).0))\l509 <- Ne(mv(510), const ?_u8)\lSwitchInt mv(509)\l"];
    X1d843d9d8698d3c4_196 -> X1d843d9d8698d3c4_215 [label="511"];
    X1d843d9d8698d3c4_196 [label="512 <- Use(cp(12))\l513 <- Cast-PtrToPtr cp(15)\l514 <- Use(cp((*504).0))\lCall\l"];
    X1d843d9d8698d3c4_197 -> X1d843d9d8698d3c4_198 [label="515"];
    X1d843d9d8698d3c4_197 [label="516 <- Use(cp(12))\l517 <- Adt{0} (cp(504))\lCall\l"];
    X1d843d9d8698d3c4_198 -> X1d843d9d8698d3c4_199 [label="518"];
    X1d843d9d8698d3c4_198 [label="519 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_199 -> X1d843d9d8698d3c4_200 [label="520"];
    X1d843d9d8698d3c4_199 [label="1 <- Use(mv(518))\l521 <- Use(cp(1))\l523 <- Use(cp((*504).8))\l522 <- Cast-IntToInt mv(523)\lCall\l"];
    X1d843d9d8698d3c4_200 -> X1d843d9d8698d3c4_201;
    X1d843d9d8698d3c4_200 [label="1 <- Use(mv(520))\l527 <- Use(cp(1))\l526 <- Cast-PointerExposeAddress mv(527)\l529 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(529.1) == false\l"];
    X1d843d9d8698d3c4_201 -> X1d843d9d8698d3c4_202;
    X1d843d9d8698d3c4_201 [label="528 <- Use(mv(529.0))\l530 <- chkd-Add(cp(526), cp(528))\lAssert mv(530.1) == false\l"];
    X1d843d9d8698d3c4_202 -> X1d843d9d8698d3c4_203;
    X1d843d9d8698d3c4_202 [label="525 <- Use(mv(530.0))\l533 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(533.1) == false\l"];
    X1d843d9d8698d3c4_203 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_203 [label="532 <- Use(mv(533.0))\l531 <- Not(mv(532))\l524 <- BitAnd(mv(525), mv(531))\l1 <- Cast-PointerWithExposedProvenance mv(524)\lGoto\l"];
    X1d843d9d8698d3c4_204 -> X1d843d9d8698d3c4_205 [label="540"];
    X1d843d9d8698d3c4_204 [label="12 <- Use(mv(534))\l537 <- Use(cp(1))\l536 <- Cast-PtrToPtr mv(537)\l539 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_205 -> X1d843d9d8698d3c4_206 [label="538"];
    X1d843d9d8698d3c4_205 [label="Call\l"];
    X1d843d9d8698d3c4_206 -> X1d843d9d8698d3c4_208 [label="0"];
    X1d843d9d8698d3c4_206 -> X1d843d9d8698d3c4_207 [label="other"];
    X1d843d9d8698d3c4_206 [label="1 <- Use(mv(538))\l542 <- Use(cp((*536).0))\l541 <- Ne(mv(542), const ?_u8)\lSwitchInt mv(541)\l"];
    X1d843d9d8698d3c4_207 -> X1d843d9d8698d3c4_215 [label="543"];
    X1d843d9d8698d3c4_207 [label="544 <- Use(cp(12))\l545 <- Cast-PtrToPtr cp(15)\l546 <- Use(cp((*536).0))\lCall\l"];
    X1d843d9d8698d3c4_208 -> X1d843d9d8698d3c4_209 [label="547"];
    X1d843d9d8698d3c4_208 [label="548 <- Use(cp(12))\l549 <- Adt{0} (cp(536))\lCall\l"];
    X1d843d9d8698d3c4_209 -> X1d843d9d8698d3c4_210 [label="550"];
    X1d843d9d8698d3c4_209 [label="551 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_210 -> X1d843d9d8698d3c4_211 [label="552"];
    X1d843d9d8698d3c4_210 [label="1 <- Use(mv(550))\l553 <- Use(cp(1))\l555 <- Use(cp((*536).8))\l554 <- Cast-IntToInt mv(555)\lCall\l"];
    X1d843d9d8698d3c4_211 -> X1d843d9d8698d3c4_212;
    X1d843d9d8698d3c4_211 [label="1 <- Use(mv(552))\l559 <- Use(cp(1))\l558 <- Cast-PointerExposeAddress mv(559)\l561 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(561.1) == false\l"];
    X1d843d9d8698d3c4_212 -> X1d843d9d8698d3c4_213;
    X1d843d9d8698d3c4_212 [label="560 <- Use(mv(561.0))\l562 <- chkd-Add(cp(558), cp(560))\lAssert mv(562.1) == false\l"];
    X1d843d9d8698d3c4_213 -> X1d843d9d8698d3c4_214;
    X1d843d9d8698d3c4_213 [label="557 <- Use(mv(562.0))\l565 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(565.1) == false\l"];
    X1d843d9d8698d3c4_214 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_214 [label="564 <- Use(mv(565.0))\l563 <- Not(mv(564))\l556 <- BitAnd(mv(557), mv(563))\l1 <- Cast-PointerWithExposedProvenance mv(556)\lGoto\l"];
    X1d843d9d8698d3c4_215 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_215 -> X1d843d9d8698d3c4_216 [label="other"];
    X1d843d9d8698d3c4_215 [label="567 <- Lt(const ?_usize, const ?_usize)\lSwitchInt mv(567)\l"];
    X1d843d9d8698d3c4_216 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_216 -> X1d843d9d8698d3c4_217 [label="other"];
    X1d843d9d8698d3c4_216 [label="569 <- Use(cp(45))\l568 <- Gt(mv(569), const ?_usize)\lSwitchInt mv(568)\l"];
    X1d843d9d8698d3c4_217 -> X1d843d9d8698d3c4_218;
    X1d843d9d8698d3c4_217 [label="570 <- chkd-Sub(cp(45), const ?_usize)\lAssert mv(570.1) == false\l"];
    X1d843d9d8698d3c4_218 -> X1d843d9d8698d3c4_219 [label="575"];
    X1d843d9d8698d3c4_218 [label="45 <- Use(mv(570.0))\l572 <- Use(cp(1))\l571 <- Cast-PtrToPtr mv(572)\l574 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_219 -> X1d843d9d8698d3c4_220 [label="573"];
    X1d843d9d8698d3c4_219 [label="Call\l"];
    X1d843d9d8698d3c4_220 -> X1d843d9d8698d3c4_216 [label="0"];
    X1d843d9d8698d3c4_220 -> X1d843d9d8698d3c4_221 [label="other"];
    X1d843d9d8698d3c4_220 [label="1 <- Use(mv(573))\l577 <- Use(cp((*571).0))\l576 <- Eq(mv(577), const ?_u8)\lSwitchInt mv(576)\l"];
    X1d843d9d8698d3c4_221 -> X1d843d9d8698d3c4_222 [label="578"];
    X1d843d9d8698d3c4_221 [label="579 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_222 -> X1d843d9d8698d3c4_223 [label="580"];
    X1d843d9d8698d3c4_222 [label="1 <- Use(mv(578))\l581 <- Use(cp(1))\l583 <- Use(cp((*571).8))\l582 <- Cast-IntToInt mv(583)\lCall\l"];
    X1d843d9d8698d3c4_223 -> X1d843d9d8698d3c4_224;
    X1d843d9d8698d3c4_223 [label="1 <- Use(mv(580))\l587 <- Use(cp(1))\l586 <- Cast-PointerExposeAddress mv(587)\l589 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(589.1) == false\l"];
    X1d843d9d8698d3c4_224 -> X1d843d9d8698d3c4_225;
    X1d843d9d8698d3c4_224 [label="588 <- Use(mv(589.0))\l590 <- chkd-Add(cp(586), cp(588))\lAssert mv(590.1) == false\l"];
    X1d843d9d8698d3c4_225 -> X1d843d9d8698d3c4_226;
    X1d843d9d8698d3c4_225 [label="585 <- Use(mv(590.0))\l593 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(593.1) == false\l"];
    X1d843d9d8698d3c4_226 -> X1d843d9d8698d3c4_216;
    X1d843d9d8698d3c4_226 [label="592 <- Use(mv(593.0))\l591 <- Not(mv(592))\l584 <- BitAnd(mv(585), mv(591))\l1 <- Cast-PointerWithExposedProvenance mv(584)\lGoto\l"];
    X1d843d9d8698d3c4_227 -> X1d843d9d8698d3c4_228 [label="600"];
    X1d843d9d8698d3c4_227 [label="597 <- Use(cp(1))\l596 <- Cast-PtrToPtr mv(597)\l595 <- Use(cp((*596)))\l594 <- Cast-IntToInt mv(595)\l599 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_228 -> X1d843d9d8698d3c4_229 [label="598"];
    X1d843d9d8698d3c4_228 [label="Call\l"];
    X1d843d9d8698d3c4_229 -> X1d843d9d8698d3c4_230 [label="601"];
    X1d843d9d8698d3c4_229 [label="1 <- Use(mv(598))\l603 <- Use(cp(1))\l602 <- Cast-PtrToPtr mv(603)\lCall\l"];
    X1d843d9d8698d3c4_230 -> X1d843d9d8698d3c4_231 [label="604"];
    X1d843d9d8698d3c4_230 [label="605 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_231 [label="607 <- Cast-PtrToPtr cp(604)\l606 <- & (*607)\l608 <- Use(cp(3))\l0 <- Tuple (cp(606), mv(608), cp(601))\lReturn\l"];
  }
  X1d843d9d8698d3c4_0 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_1 -> X99398f9f14483c90_0 [label="mv(8),mv(9)"];
  X1d843d9d8698d3c4_3 -> X227aea0ec470d5ba_0 [label="mv(14)"];
  X1d843d9d8698d3c4_4 -> X9344cfdf8f55fc21_0 [label="mv(19),mv(20)"];
  X1d843d9d8698d3c4_5 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_7 -> X99398f9f14483c90_0 [label="mv(22),mv(23)"];
  X1d843d9d8698d3c4_8 -> X99398f9f14483c90_0 [label="mv(27),mv(28)"];
  X1d843d9d8698d3c4_14 -> Xe9140f1d0f7f9eb4_0 [label="mv(44),const ?_usize"];
  X1d843d9d8698d3c4_18 -> X921508901878e521_0 [label="mv(52),const ?_usize"];
  X1d843d9d8698d3c4_19 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_20 -> X99398f9f14483c90_0 [label="mv(56),mv(57)"];
  X1d843d9d8698d3c4_22 -> X619a8aacd3bae7ca_0 [label="mv(61),mv(62),mv(63)"];
  X1d843d9d8698d3c4_23 -> X9344cfdf8f55fc21_0 [label="mv(65),mv(66)"];
  X1d843d9d8698d3c4_24 -> X99398f9f14483c90_0 [label="mv(68),const ?_usize"];
  X1d843d9d8698d3c4_25 -> X99398f9f14483c90_0 [label="mv(70),mv(71)"];
  X1d843d9d8698d3c4_31 -> X921508901878e521_0 [label="mv(86),const ?_usize"];
  X1d843d9d8698d3c4_32 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_33 -> X99398f9f14483c90_0 [label="mv(90),mv(91)"];
  X1d843d9d8698d3c4_35 -> X619a8aacd3bae7ca_0 [label="mv(95),mv(96),mv(97)"];
  X1d843d9d8698d3c4_36 -> X9344cfdf8f55fc21_0 [label="mv(99),mv(100)"];
  X1d843d9d8698d3c4_37 -> X99398f9f14483c90_0 [label="mv(102),const ?_usize"];
  X1d843d9d8698d3c4_38 -> X99398f9f14483c90_0 [label="mv(104),mv(105)"];
  X1d843d9d8698d3c4_43 -> X921508901878e521_0 [label="mv(118),const ?_usize"];
  X1d843d9d8698d3c4_44 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_45 -> X99398f9f14483c90_0 [label="mv(122),mv(123)"];
  X1d843d9d8698d3c4_47 -> X619a8aacd3bae7ca_0 [label="mv(127),mv(128),mv(129)"];
  X1d843d9d8698d3c4_48 -> X9344cfdf8f55fc21_0 [label="mv(131),mv(132)"];
  X1d843d9d8698d3c4_49 -> X99398f9f14483c90_0 [label="mv(134),const ?_usize"];
  X1d843d9d8698d3c4_50 -> X99398f9f14483c90_0 [label="mv(136),mv(137)"];
  X1d843d9d8698d3c4_55 -> X921508901878e521_0 [label="mv(150),const ?_usize"];
  X1d843d9d8698d3c4_56 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_57 -> X99398f9f14483c90_0 [label="mv(154),mv(155)"];
  X1d843d9d8698d3c4_59 -> X619a8aacd3bae7ca_0 [label="mv(159),mv(160),mv(161)"];
  X1d843d9d8698d3c4_60 -> X9344cfdf8f55fc21_0 [label="mv(163),mv(164)"];
  X1d843d9d8698d3c4_61 -> X99398f9f14483c90_0 [label="mv(166),const ?_usize"];
  X1d843d9d8698d3c4_62 -> X99398f9f14483c90_0 [label="mv(168),mv(169)"];
  X1d843d9d8698d3c4_67 -> X921508901878e521_0 [label="mv(182),const ?_usize"];
  X1d843d9d8698d3c4_68 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_69 -> X99398f9f14483c90_0 [label="mv(186),mv(187)"];
  X1d843d9d8698d3c4_71 -> X619a8aacd3bae7ca_0 [label="mv(191),mv(192),mv(193)"];
  X1d843d9d8698d3c4_72 -> X9344cfdf8f55fc21_0 [label="mv(195),mv(196)"];
  X1d843d9d8698d3c4_73 -> X99398f9f14483c90_0 [label="mv(198),const ?_usize"];
  X1d843d9d8698d3c4_74 -> X99398f9f14483c90_0 [label="mv(200),mv(201)"];
  X1d843d9d8698d3c4_79 -> X921508901878e521_0 [label="mv(214),const ?_usize"];
  X1d843d9d8698d3c4_80 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_81 -> X99398f9f14483c90_0 [label="mv(218),mv(219)"];
  X1d843d9d8698d3c4_83 -> X619a8aacd3bae7ca_0 [label="mv(223),mv(224),mv(225)"];
  X1d843d9d8698d3c4_84 -> X9344cfdf8f55fc21_0 [label="mv(227),mv(228)"];
  X1d843d9d8698d3c4_85 -> X99398f9f14483c90_0 [label="mv(230),const ?_usize"];
  X1d843d9d8698d3c4_86 -> X99398f9f14483c90_0 [label="mv(232),mv(233)"];
  X1d843d9d8698d3c4_94 -> X8452db9b8b2010e2_0 [label=""];
  X1d843d9d8698d3c4_95 -> X921508901878e521_0 [label="mv(535),const ?_usize"];
  X1d843d9d8698d3c4_96 -> X921508901878e521_0 [label="mv(471),const ?_usize"];
  X1d843d9d8698d3c4_97 -> X921508901878e521_0 [label="mv(375),const ?_usize"];
  X1d843d9d8698d3c4_98 -> X921508901878e521_0 [label="mv(247),const ?_usize"];
  X1d843d9d8698d3c4_99 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_100 -> X99398f9f14483c90_0 [label="mv(251),mv(252)"];
  X1d843d9d8698d3c4_102 -> X619a8aacd3bae7ca_0 [label="mv(256),mv(257),mv(258)"];
  X1d843d9d8698d3c4_103 -> X9344cfdf8f55fc21_0 [label="mv(260),mv(261)"];
  X1d843d9d8698d3c4_104 -> X99398f9f14483c90_0 [label="mv(263),const ?_usize"];
  X1d843d9d8698d3c4_105 -> X99398f9f14483c90_0 [label="mv(265),mv(266)"];
  X1d843d9d8698d3c4_110 -> X921508901878e521_0 [label="mv(279),const ?_usize"];
  X1d843d9d8698d3c4_111 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_112 -> X99398f9f14483c90_0 [label="mv(283),mv(284)"];
  X1d843d9d8698d3c4_114 -> X619a8aacd3bae7ca_0 [label="mv(288),mv(289),mv(290)"];
  X1d843d9d8698d3c4_115 -> X9344cfdf8f55fc21_0 [label="mv(292),mv(293)"];
  X1d843d9d8698d3c4_116 -> X99398f9f14483c90_0 [label="mv(295),const ?_usize"];
  X1d843d9d8698d3c4_117 -> X99398f9f14483c90_0 [label="mv(297),mv(298)"];
  X1d843d9d8698d3c4_122 -> X921508901878e521_0 [label="mv(311),const ?_usize"];
  X1d843d9d8698d3c4_123 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_124 -> X99398f9f14483c90_0 [label="mv(315),mv(316)"];
  X1d843d9d8698d3c4_126 -> X619a8aacd3bae7ca_0 [label="mv(320),mv(321),mv(322)"];
  X1d843d9d8698d3c4_127 -> X9344cfdf8f55fc21_0 [label="mv(324),mv(325)"];
  X1d843d9d8698d3c4_128 -> X99398f9f14483c90_0 [label="mv(327),const ?_usize"];
  X1d843d9d8698d3c4_129 -> X99398f9f14483c90_0 [label="mv(329),mv(330)"];
  X1d843d9d8698d3c4_134 -> X921508901878e521_0 [label="mv(343),const ?_usize"];
  X1d843d9d8698d3c4_135 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_136 -> X99398f9f14483c90_0 [label="mv(347),mv(348)"];
  X1d843d9d8698d3c4_138 -> X619a8aacd3bae7ca_0 [label="mv(352),mv(353),mv(354)"];
  X1d843d9d8698d3c4_139 -> X9344cfdf8f55fc21_0 [label="mv(356),mv(357)"];
  X1d843d9d8698d3c4_140 -> X99398f9f14483c90_0 [label="mv(359),const ?_usize"];
  X1d843d9d8698d3c4_141 -> X99398f9f14483c90_0 [label="mv(361),mv(362)"];
  X1d843d9d8698d3c4_146 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_147 -> X99398f9f14483c90_0 [label="mv(379),mv(380)"];
  X1d843d9d8698d3c4_149 -> X619a8aacd3bae7ca_0 [label="mv(384),mv(385),mv(386)"];
  X1d843d9d8698d3c4_150 -> X9344cfdf8f55fc21_0 [label="mv(388),mv(389)"];
  X1d843d9d8698d3c4_151 -> X99398f9f14483c90_0 [label="mv(391),const ?_usize"];
  X1d843d9d8698d3c4_152 -> X99398f9f14483c90_0 [label="mv(393),mv(394)"];
  X1d843d9d8698d3c4_157 -> X921508901878e521_0 [label="mv(407),const ?_usize"];
  X1d843d9d8698d3c4_158 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_159 -> X99398f9f14483c90_0 [label="mv(411),mv(412)"];
  X1d843d9d8698d3c4_161 -> X619a8aacd3bae7ca_0 [label="mv(416),mv(417),mv(418)"];
  X1d843d9d8698d3c4_162 -> X9344cfdf8f55fc21_0 [label="mv(420),mv(421)"];
  X1d843d9d8698d3c4_163 -> X99398f9f14483c90_0 [label="mv(423),const ?_usize"];
  X1d843d9d8698d3c4_164 -> X99398f9f14483c90_0 [label="mv(425),mv(426)"];
  X1d843d9d8698d3c4_169 -> X921508901878e521_0 [label="mv(439),const ?_usize"];
  X1d843d9d8698d3c4_170 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_171 -> X99398f9f14483c90_0 [label="mv(443),mv(444)"];
  X1d843d9d8698d3c4_173 -> X619a8aacd3bae7ca_0 [label="mv(448),mv(449),mv(450)"];
  X1d843d9d8698d3c4_174 -> X9344cfdf8f55fc21_0 [label="mv(452),mv(453)"];
  X1d843d9d8698d3c4_175 -> X99398f9f14483c90_0 [label="mv(455),const ?_usize"];
  X1d843d9d8698d3c4_176 -> X99398f9f14483c90_0 [label="mv(457),mv(458)"];
  X1d843d9d8698d3c4_181 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_182 -> X99398f9f14483c90_0 [label="mv(475),mv(476)"];
  X1d843d9d8698d3c4_184 -> X619a8aacd3bae7ca_0 [label="mv(480),mv(481),mv(482)"];
  X1d843d9d8698d3c4_185 -> X9344cfdf8f55fc21_0 [label="mv(484),mv(485)"];
  X1d843d9d8698d3c4_186 -> X99398f9f14483c90_0 [label="mv(487),const ?_usize"];
  X1d843d9d8698d3c4_187 -> X99398f9f14483c90_0 [label="mv(489),mv(490)"];
  X1d843d9d8698d3c4_192 -> X921508901878e521_0 [label="mv(503),const ?_usize"];
  X1d843d9d8698d3c4_193 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_194 -> X99398f9f14483c90_0 [label="mv(507),mv(508)"];
  X1d843d9d8698d3c4_196 -> X619a8aacd3bae7ca_0 [label="mv(512),mv(513),mv(514)"];
  X1d843d9d8698d3c4_197 -> X9344cfdf8f55fc21_0 [label="mv(516),mv(517)"];
  X1d843d9d8698d3c4_198 -> X99398f9f14483c90_0 [label="mv(519),const ?_usize"];
  X1d843d9d8698d3c4_199 -> X99398f9f14483c90_0 [label="mv(521),mv(522)"];
  X1d843d9d8698d3c4_204 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_205 -> X99398f9f14483c90_0 [label="mv(539),mv(540)"];
  X1d843d9d8698d3c4_207 -> X619a8aacd3bae7ca_0 [label="mv(544),mv(545),mv(546)"];
  X1d843d9d8698d3c4_208 -> X9344cfdf8f55fc21_0 [label="mv(548),mv(549)"];
  X1d843d9d8698d3c4_209 -> X99398f9f14483c90_0 [label="mv(551),const ?_usize"];
  X1d843d9d8698d3c4_210 -> X99398f9f14483c90_0 [label="mv(553),mv(554)"];
  X1d843d9d8698d3c4_218 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_219 -> X99398f9f14483c90_0 [label="mv(574),mv(575)"];
  X1d843d9d8698d3c4_221 -> X99398f9f14483c90_0 [label="mv(579),const ?_usize"];
  X1d843d9d8698d3c4_222 -> X99398f9f14483c90_0 [label="mv(581),mv(582)"];
  X1d843d9d8698d3c4_227 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_228 -> X99398f9f14483c90_0 [label="mv(599),mv(600)"];
  X1d843d9d8698d3c4_229 -> X2bbf04117b29714a_0 [label="mv(602),cp(594)"];
  X1d843d9d8698d3c4_230 -> X99398f9f14483c90_0 [label="mv(605),cp(594)"];
  subgraph cluster_390 {
    label="pinocchio::entrypoint::cl\none_account_info";
    style="filled";
    color=lightgray;
    node_391 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::account_info::AccountInfo\l2 = *const pinocchio::account_info::AccountInfo\l3 = u8\l4 = ()\l5 = pinocchio::account_info::AccountInfo\l6 = *mut pinocchio::account_info::Account\l7 = *const pinocchio::account_info::AccountInfo\l8 = usize\l", style="filled", color=palegreen3];
    X619a8aacd3bae7ca_0 -> X619a8aacd3bae7ca_1 [label="7"];
    X619a8aacd3bae7ca_0 [label="8 <- Cast-IntToInt cp(3)\lCall\l"];
    X619a8aacd3bae7ca_1 -> X619a8aacd3bae7ca_2 [label="4"];
    X619a8aacd3bae7ca_1 [label="6 <- Use(cp((*7).0))\l5 <- Adt{0} (mv(6))\lCall\l"];
    X619a8aacd3bae7ca_2 [label="Return\l"];
  }
  X619a8aacd3bae7ca_0 -> X2a511a2fc7bfad7f_0 [label="cp(2),mv(8)"];
  X619a8aacd3bae7ca_1 -> X9344cfdf8f55fc21_0 [label="cp(1),mv(5)"];
  subgraph cluster_392 {
    label="pinocchio::account_info::\nAccountInfo::is_owned_by";
    style="filled";
    color=lightgray;
    node_393 [label="LOCALS\l0 = bool\l1 = &pinocchio::account_info::AccountInfo\l2 = &[u8; 32]\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l", style="filled", color=palegreen3];
    X59e9e813b3803772_0 -> X59e9e813b3803772_1 [label="4"];
    X59e9e813b3803772_0 [label="Call\l"];
    X59e9e813b3803772_1 -> X59e9e813b3803772_2 [label="0"];
    X59e9e813b3803772_1 [label="3 <- & 4\l5 <- & 2\lCall\l"];
    X59e9e813b3803772_2 [label="Return\l"];
  }
  X59e9e813b3803772_0 -> Xdc861846860b6105_0 [label="cp(1)"];
  X59e9e813b3803772_1 -> X7d20e7238026070b_0 [label="mv(3),mv(5)"];
  subgraph cluster_394 {
    label="pinocchio::account_info::\nAccountInfo::borrow_data_\nunchecked";
    style="filled";
    color=lightgray;
    node_395 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *const u8\l3 = *mut u8\l4 = usize\l", style="filled", color=palegreen3];
    X18b054a9564b373a_0 -> X18b054a9564b373a_1 [label="3"];
    X18b054a9564b373a_0 [label="Call\l"];
    X18b054a9564b373a_1 -> X18b054a9564b373a_2 [label="4"];
    X18b054a9564b373a_1 [label="2 <- Cast-PtrToPtr mv(3)\lCall\l"];
    X18b054a9564b373a_2 -> X18b054a9564b373a_3 [label="0"];
    X18b054a9564b373a_2 [label="Call\l"];
    X18b054a9564b373a_3 [label="Return\l"];
  }
  X18b054a9564b373a_0 -> X589d41d6375532a6_0 [label="cp(1)"];
  X18b054a9564b373a_1 -> Xc4d065469025948c_0 [label="cp(1)"];
  X18b054a9564b373a_2 -> X2bbf04117b29714a_0 [label="mv(2),mv(4)"];
  subgraph cluster_396 {
    label="pinocchio::account_info::\nAccountInfo::owner";
    style="filled";
    color=lightgray;
    node_397 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xdc861846860b6105_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).6\lReturn\l"];
  }
  subgraph cluster_398 {
    label="pinocchio::account_info::\nAccountInfo::data_len";
    style="filled";
    color=lightgray;
    node_399 [label="LOCALS\l0 = usize\l1 = &pinocchio::account_info::AccountInfo\l2 = u64\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xc4d065469025948c_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).8))\l0 <- Cast-IntToInt mv(2)\lReturn\l"];
  }
  subgraph cluster_400 {
    label="pinocchio::cpi::set_retur\nn_data";
    style="filled";
    color=lightgray;
    node_401 [label="LOCALS\l0 = ()\l1 = &[u8]\l2 = &[u8]\l", style="filled", color=palegreen3];
    Xf3bdd71fa9654efd_0 -> Xf3bdd71fa9654efd_1 [label="2"];
    Xf3bdd71fa9654efd_0 [label="Call\l"];
    Xf3bdd71fa9654efd_1 [label="Return\l"];
  }
  Xf3bdd71fa9654efd_0 -> X780f31d308d65371_0 [label="cp(1)"];
  subgraph cluster_402 {
    label="pinocchio::log::sol_log";
    style="filled";
    color=lightgray;
    node_403 [label="LOCALS\l0 = ()\l1 = &str\l2 = &str\l", style="filled", color=palegreen3];
    Xf793977e1a6d5f00_0 -> Xf793977e1a6d5f00_1 [label="2"];
    Xf793977e1a6d5f00_0 [label="Call\l"];
    Xf793977e1a6d5f00_1 [label="Return\l"];
  }
  Xf793977e1a6d5f00_0 -> Xfa60cf51be3f9fb1_0 [label="cp(1)"];
  subgraph cluster_404 {
    label="entrypoint::entrypoint";
    style="filled";
    color=lightgray;
    node_405 [label="LOCALS\l0 = u64\l1 = *mut u8\l2 = [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l3 = &[u8; 32]\l4 = usize\l5 = &[u8]\l6 = (&[u8; 32], usize, &[u8])\l7 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l8 = core::result::Result<(), pinocchio::program_error::ProgramError>\l9 = &&[u8; 32]\l10 = &[pinocchio::account_info::AccountInfo]\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l13 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l14 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l15 = &&[u8]\l16 = isize\l17 = pinocchio::program_error::ProgramError\l18 = &[u8; 32]\l19 = &[u8]\l", style="filled", color=palegreen3];
    X35727d23baa70bc_0 -> X35727d23baa70bc_1 [label="6"];
    X35727d23baa70bc_0 [label="2 <- Repeat const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l7 <- &mut 2\lCall\l"];
    X35727d23baa70bc_1 -> X35727d23baa70bc_2 [label="12"];
    X35727d23baa70bc_1 [label="3 <- Use(cp(6.0))\l4 <- Use(cp(6.1))\l5 <- Use(cp(6.2))\l9 <- & 3\l18 <- CopyForDeref((*9))\l14 <- & 2\l13 <- Cast-PointerCoercion(Unsize) mv(14)\lCall\l"];
    X35727d23baa70bc_2 -> X35727d23baa70bc_3 [label="10"];
    X35727d23baa70bc_2 [label="11 <- Cast-PtrToPtr mv(12)\lCall\l"];
    X35727d23baa70bc_3 -> X35727d23baa70bc_4 [label="8"];
    X35727d23baa70bc_3 [label="15 <- & 5\l19 <- CopyForDeref((*15))\lCall\l"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_7 [label="0"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_6 [label="1"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_5 [label="other"];
    X35727d23baa70bc_4 [label="16 <- Discriminant(8)\lSwitchInt mv(16)\l"];
    X35727d23baa70bc_5 [label="Unreachable\l"];
    X35727d23baa70bc_6 -> X35727d23baa70bc_9 [label="0"];
    X35727d23baa70bc_6 [label="17 <- Use(mv((8 as variant 1).0))\lCall\l"];
    X35727d23baa70bc_7 -> X35727d23baa70bc_8;
    X35727d23baa70bc_7 [label="0 <- Use(const ?_u64)\lGoto\l"];
    X35727d23baa70bc_8 [label="Return\l"];
    X35727d23baa70bc_9 -> X35727d23baa70bc_8;
    X35727d23baa70bc_9 [label="Goto\l"];
  }
  X35727d23baa70bc_0 -> X1d843d9d8698d3c4_0 [label="cp(1),cp(7)"];
  X35727d23baa70bc_1 -> X2eb64500281ee9c3_0 [label="mv(13)"];
  X35727d23baa70bc_2 -> X3ef89f86f6c5d4d6_0 [label="cp(11),cp(4)"];
  X35727d23baa70bc_3 -> X6c5f82dfbe192777_0 [label="cp(18),cp(10),cp(19)"];
  X35727d23baa70bc_6 -> X86d9ec07d37ae118_0 [label="mv(17)"];
}
