digraph {
  label="pinocchio_token_program";
  node [shape=rectangle];
  Xfa60cf51be3f9fb1_0 [label="_ZN4core4hint9black_box17\nh17818df06b351acdE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xd5f5089a7a4a09ff_0 [label="sol_memcpy_", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xfeeb81e9512374d9_0 [label="_ZN4core3str21_$LT$impl$u\n20$str$GT$18split_at_unch\necked17h8c04b904889c262bE", color=red];
  X13437086877d9cb7_0 [label="_ZN4core5slice5index24sli\nce_end_index_len_fail17h7\ne6f2137e7855a34E", color=red];
  Xb7bf8399f7d46827_0 [label="_ZN4core5slice5index26sli\nce_start_index_len_fail17\nhc3d07dac3414cccaE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xa5e1b7e570e84a71_0 [label="_ZN4core3fmt3num55_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$usize$GT$3f\nmt17h4a12d95170816401E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xf85b79c5bd16f087_0 [label="_ZN4core3cmp6min_by17h26e\n6c12f90697119E", color=red];
  X5b44578fd65a3909_0 [label="_ZN4core3fmt9Formatter3pa\nd17hc1359c14f299250aE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xa5ca904ae82432b1_0 [label="_ZN79_$LT$core..result..R\nesult$LT$T$C$E$GT$$u20$as\n$u20$core..ops..try_trait\n..Try$GT$6branch17hc4c209\ncdb7928292E", color=red];
  Xcfb99dd5dbeb355e_0 [label="_ZN4core9panicking14panic\n_nounwind17h3a5ca15c20002\n51eE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xe9aeaaaf212ff5cc_0 [label="_ZN4core3fmt3num3imp51_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u8$GT$3f\nmt17hb7528d9a39ef0430E", color=red];
  X2bbf04117b29714a_0 [label="_ZN4core5slice3raw14from_\nraw_parts17h23812cc5d2ae4\n610E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xe58365f7356c22e7_0 [label="_ZN4core3fmt9Formatter26d\nebug_struct_field2_finish\n17h954f1e74aefc479cE", color=red];
  Xb00517a14aa1c357_0 [label="_ZN4core3cmp5impls69_$LT$\nimpl$u20$core..cmp..Parti\nalEq$LT$$RF$B$GT$$u20$for\n$u20$$RF$A$GT$2ne17h95160\n796eaf5ca1aE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8fc2060ad58510d8_0 [label="Intr: \ncold_path", color=red];
  Xbebabec19f277d23_0 [label="_ZN4core3fmt3num3imp54_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$usize$GT\n$3fmt17he8b7b748121208d6E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xdd778da4886cf626_0 [label="_ZN4core6result13unwrap_f\nailed17h698bf754bc36b600E", color=red];
  X5ea6c111b835a80f_0 [label="Intr: \nctpop", color=red];
  Xfd88df1009b24094_0 [label="Intr: \nptr_offset_from_unsigned", color=red];
  X85724fedaf4a5444_0 [label="_ZN4core3fmt9Formatter25d\nebug_tuple_field1_finish1\n7h9a57a6e5dd04f319E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xc370cd96d12e6547_0 [label="_ZN4core3str16slice_error\n_fail17h42f5d0919ad1d136E", color=red];
  Xab38848ab7f87cef_0 [label="Intr: \nexact_div", color=red];
  X43ad75e732d0e131_0 [label="Intr: \nraw_eq", color=red];
  X11f225f18df60610_0 [label="_ZN4core5slice6memchr14me\nmchr_aligned17h9271c4044b\n731152E", color=red];
  X83c8e82412404978_0 [label="Intr: \nassert_inhabited", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X71e84b9ee31f72d5_0 [label="_ZN9pinocchio13program_er\nror99_$LT$impl$u20$core..\nconvert..From$LT$pinocchi\no..program_error..Program\nError$GT$$u20$for$u20$u64\n$GT$4from17h628e79062cddf\n645E", color=red];
  X3c6542d96320ad67_0 [label="Intr: \nblack_box", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9d8f98d3704e8fd6_0 [label="_ZN73_$LT$$u5b$A$u5d$$u20\n$as$u20$core..slice..cmp.\n.SlicePartialEq$LT$B$GT$$\nGT$5equal17h9ee8f0d2588e1\n705E", color=red];
  X98d8f249e941dc29_0 [label="_ZN4core3fmt3num55_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$usize$GT$3f\nmt17ha13458951b42e01eE", color=red];
  Xc0df9b1997ac90da_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u8$GT$3fmt1\n7h5c13501d312fda12E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X1d0677a8f15bd47_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..LowerHe\nx$u20$for$u20$u32$GT$3fmt\n17hb987357f13dc6cc8E", color=red];
  Xb93f0288e0006b54_0 [label="_ZN4core3fmt9Formatter9wr\nite_str17h79222ac07baf2d9\n8E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9b498145f7dc0efa_0 [label="_ZN4core6option13unwrap_f\nailed17hb0fa9493deab9974E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xc9c7b31891babc83_0 [label="_ZN4core3num20from_str_ra\ndix_panic17h9eb13bea64678\n23fE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X8c181cd43c321574_0 [label="_ZN4core3str8converts9fro\nm_utf817h1b8218de7495b9cd\nE", color=red];
  X67d151235d77b301_0 [label="_ZN4core3fmt3num3imp52_$L\nT$impl$u20$core..fmt..Dis\nplay$u20$for$u20$u32$GT$3\nfmt17hec74c53b91325b16E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X3e41fe755ef8b4ae_0 [label="_ZN50_$LT$T$u20$as$u20$co\nre..convert..Into$LT$U$GT\n$$GT$4into17h6518d1eb9a13\n190fE", color=red];
  X60cc41313a320d2_0 [label="Intr: \ncompare_bytes", color=red];
  Xfffaab11503b9894_0 [label="_ZN4core9panicking9panic_\nfmt17h3df1a4d3dd80ed56E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X9972a2e514221fba_0 [label="_ZN98_$LT$pinocchio_token\n_interface..error..TokenE\nrror$u20$as$u20$core..con\nvert..TryFrom$LT$u32$GT$$\nGT$8try_from17h41e590df6f\n40ca02E", color=red];
  X18cbc2f348c9e06e_0 [label="_ZN4core4char7methods15en\ncode_utf8_raw8do_panic7ru\nntime17hfcf9039fad5d7f05E", color=red];
  Xd26e23fc1a4f831c_0 [label="_ZN4core5slice29_$LT$impl\n$u20$$u5b$T$u5d$$GT$11sta\nrts_with17h494b7a363309c7\neeE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X589d41d6375532a6_0 [label="_ZN9pinocchio12account_in\nfo11AccountInfo8data_ptr1\n7hfaf55f23b57345a5E", color=red];
  X1eb9e8a223d962a5_0 [label="_ZN4core9panicking19asser\nt_failed_inner17h1d286061\nca0adfe7E", color=red];
  X5740f420bf9fe2ca_0 [label="_ZN25pinocchio_token_inte\nrface5error140_$LT$impl$u\n20$core..convert..From$LT\n$pinocchio_token_interfac\ne..error..TokenError$GT$$\nu20$for$u20$pinocchio..pr\nogram_error..ProgramError\n$GT$4from17hc1cb1962b9bbc\nd3cE", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  Xac08878333d72e42_0 [label="_ZN4core9panicking5panic1\n7h941160ead03e2d54E", color=red];
  Xca95a9d6f7061805_0 [label="_ZN4core3fmt3num53_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u32$GT$3fmt\n17h7baa47f3e5cbe44cE", color=red];
  X5a1b7e395be91c95_0 [label="_ZN153_$LT$core..result..\nResult$LT$T$C$F$GT$$u20$a\ns$u20$core..ops..try_trai\nt..FromResidual$LT$core..\nresult..Result$LT$core..c\nonvert..Infallible$C$E$GT\n$$GT$$GT$13from_residual1\n7hd37a7ce3c291888dE", color=red];
  X3d825c4445d1baca_0 [label="_ZN4core5slice5index22sli\nce_index_order_fail17h640\n68df90ca47128E", color=red];
  X8b0ac2e54b9a91_0 [label="NoOp: ", color=red];
  X26beb3c664659c46_0 [label="_ZN91_$LT$core..slice..it\ner..Iter$LT$T$GT$$u20$as$\nu20$core..iter..traits..i\nterator..Iterator$GT$4nex\nt17hfabbad9b1be1531fE", color=red];
  Xb4c60c8acc2aa4f0_0 [label="_ZN4core3fmt3num52_$LT$im\npl$u20$core..fmt..UpperHe\nx$u20$for$u20$u8$GT$3fmt1\n7hcc3293c85bcdb723E", color=red];
  subgraph cluster_0 {
    label="<core::iter::Skip<core::s\ntr::Chars<'_>> \nas \ncore::iter::Iterator>::tr\ny_fold::<(), \n{closure@core::iter::Iter\nator::all::check<char, \n{closure@p-token/src/entr\nypoint.rs:1397:93: \n1397:96}>::{closure#0}}, \ncore::ops::ControlFlow<()\n>>";
    style="filled";
    color=lightgray;
    node_1 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = &mut core::iter::Skip<core::str::Chars<'_>>\l2 = ()\l3 = {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l4 = usize\l5 = bool\l6 = &core::option::Option<char>\l7 = core::option::Option<char>\l8 = &mut core::str::Chars<'_>\l9 = usize\l10 = ()\l11 = &mut core::str::Chars<'_>\l12 = ()\l13 = {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l14 = bool\l15 = bool\l16 = isize\l", style="filled", color=palegreen3];
    Xbfe99f132f8ade2a_0 -> Xbfe99f132f8ade2a_6 [label="0"];
    Xbfe99f132f8ade2a_0 -> Xbfe99f132f8ade2a_1 [label="other"];
    Xbfe99f132f8ade2a_0 [label="15 <- Use(const bool)\l14 <- Use(const bool)\l4 <- Use(cp((*1).1))\l(*1).1 <- Use(const ?_usize)\lStorage Live _5\l5 <- Gt(cp(4), const ?_usize)\lSwitchInt mv(5)\l"];
    Xbfe99f132f8ade2a_1 -> Xbfe99f132f8ade2a_11 [label="Cleanup"];
    Xbfe99f132f8ade2a_1 -> Xbfe99f132f8ade2a_2 [label="7"];
    Xbfe99f132f8ade2a_1 [label="Storage Live _6\lStorage Live _7\lStorage Live _8\l8 <- &mut (*1).0\lStorage Live _9\l9 <- Sub(cp(4), const ?_usize)\lCall\l"];
    Xbfe99f132f8ade2a_2 -> Xbfe99f132f8ade2a_15 [label="1"];
    Xbfe99f132f8ade2a_2 -> Xbfe99f132f8ade2a_14 [label="0"];
    Xbfe99f132f8ade2a_2 -> Xbfe99f132f8ade2a_16 [label="other"];
    Xbfe99f132f8ade2a_2 [label="6 <- & 7\lStorage Dead _9\lStorage Dead _8\lStorage Live _16\l16 <- Discriminant(7)\lSwitchInt mv(16)\l"];
    Xbfe99f132f8ade2a_3 -> Xbfe99f132f8ade2a_11 [label="Cleanup"];
    Xbfe99f132f8ade2a_3 -> Xbfe99f132f8ade2a_4 [label="0"];
    Xbfe99f132f8ade2a_3 [label="Storage Dead _7\lStorage Dead _6\lStorage Live _10\l15 <- Use(const bool)\l10 <- Use(mv(2))\lCall\l"];
    Xbfe99f132f8ade2a_4 -> Xbfe99f132f8ade2a_13 [label="Cleanup"];
    Xbfe99f132f8ade2a_4 -> Xbfe99f132f8ade2a_8;
    Xbfe99f132f8ade2a_4 [label="Storage Dead _10\lStorage Dead _5\lDrop 3\l"];
    Xbfe99f132f8ade2a_5 -> Xbfe99f132f8ade2a_6;
    Xbfe99f132f8ade2a_5 [label="Storage Dead _7\lStorage Dead _6\lGoto\l"];
    Xbfe99f132f8ade2a_6 -> Xbfe99f132f8ade2a_11 [label="Cleanup"];
    Xbfe99f132f8ade2a_6 -> Xbfe99f132f8ade2a_7 [label="0"];
    Xbfe99f132f8ade2a_6 [label="Storage Dead _5\lStorage Live _11\l11 <- &mut (*1).0\lStorage Live _12\l15 <- Use(const bool)\l12 <- Use(mv(2))\lStorage Live _13\l14 <- Use(const bool)\l13 <- Use(mv(3))\lCall\l"];
    Xbfe99f132f8ade2a_7 -> Xbfe99f132f8ade2a_8;
    Xbfe99f132f8ade2a_7 [label="Storage Dead _13\lStorage Dead _12\lStorage Dead _11\lGoto\l"];
    Xbfe99f132f8ade2a_8 [label="Return\l"];
    Xbfe99f132f8ade2a_9 [label="Resume\l"];
    Xbfe99f132f8ade2a_10 -> Xbfe99f132f8ade2a_13;
    Xbfe99f132f8ade2a_10 [label="Drop 3\l"];
    Xbfe99f132f8ade2a_11 -> Xbfe99f132f8ade2a_13 [label="0"];
    Xbfe99f132f8ade2a_11 -> Xbfe99f132f8ade2a_10 [label="other"];
    Xbfe99f132f8ade2a_11 [label="SwitchInt cp(14)\l"];
    Xbfe99f132f8ade2a_12 -> Xbfe99f132f8ade2a_9;
    Xbfe99f132f8ade2a_12 [label="Drop 2\l"];
    Xbfe99f132f8ade2a_13 -> Xbfe99f132f8ade2a_9 [label="0"];
    Xbfe99f132f8ade2a_13 -> Xbfe99f132f8ade2a_12 [label="other"];
    Xbfe99f132f8ade2a_13 [label="SwitchInt cp(15)\l"];
    Xbfe99f132f8ade2a_14 -> Xbfe99f132f8ade2a_11 [label="Cleanup"];
    Xbfe99f132f8ade2a_14 -> Xbfe99f132f8ade2a_3;
    Xbfe99f132f8ade2a_14 [label="Storage Dead _16\lDrop 7\l"];
    Xbfe99f132f8ade2a_15 -> Xbfe99f132f8ade2a_11 [label="Cleanup"];
    Xbfe99f132f8ade2a_15 -> Xbfe99f132f8ade2a_5;
    Xbfe99f132f8ade2a_15 [label="Storage Dead _16\lDrop 7\l"];
    Xbfe99f132f8ade2a_16 [label="Unreachable\l"];
  }
  Xbfe99f132f8ade2a_1 -> Xe7a56560380956ca_0 [label="mv(8),mv(9)"];
  Xbfe99f132f8ade2a_3 -> X28203ac4004097e4_0 [label="mv(10)"];
  Xbfe99f132f8ade2a_6 -> X78e8e99cf5cec23f_0 [label="mv(11),mv(12),mv(13)"];
  subgraph cluster_2 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::ExactSizeIter\nator>::len";
    style="filled";
    color=lightgray;
    node_3 [label="LOCALS\l0 = usize\l1 = &core::slice::Iter<'_, u8>\l2 = usize\l3 = *const u8\l4 = core::ptr::NonNull<u8>\l5 = *const core::ptr::NonNull<u8>\l6 = *const *const u8\l7 = core::ptr::NonNull<u8>\l8 = *const u8\l9 = *const u8\l10 = bool\l11 = ()\l12 = *const ()\l13 = *const ()\l14 = usize\l15 = bool\l16 = bool\l17 = !\l", style="filled", color=palegreen3];
    Xd05a555747cd5aa8_0 -> Xd05a555747cd5aa8_2 [label="0"];
    Xd05a555747cd5aa8_0 -> Xd05a555747cd5aa8_1 [label="other"];
    Xd05a555747cd5aa8_0 [label="SwitchInt const bool\l"];
    Xd05a555747cd5aa8_1 -> Xd05a555747cd5aa8_3;
    Xd05a555747cd5aa8_1 [label="3 <- Use(cp((*1).1))\l2 <- Cast-Transmute cp(3)\l0 <- Use(cp(2))\lGoto\l"];
    Xd05a555747cd5aa8_2 -> Xd05a555747cd5aa8_7 [label="0"];
    Xd05a555747cd5aa8_2 -> Xd05a555747cd5aa8_5 [label="other"];
    Xd05a555747cd5aa8_2 [label="Storage Live _5\lStorage Live _6\l6 <- &raw (*1).1\l5 <- Cast-PtrToPtr cp(6)\lStorage Dead _6\l4 <- Use(cp((*5)))\lStorage Dead _5\lStorage Live _7\l7 <- Use(cp((*1).0))\lStorage Live _8\l8 <- Use(cp(4.0))\lStorage Live _9\l9 <- Use(cp(7.0))\lStorage Live _14\lStorage Live _10\l10 <- UbChecks :: bool\lSwitchInt mv(10)\l"];
    Xd05a555747cd5aa8_3 [label="Return\l"];
    Xd05a555747cd5aa8_4 -> Xd05a555747cd5aa8_3;
    Xd05a555747cd5aa8_4 [label="Storage Dead _14\lStorage Dead _9\lStorage Dead _8\lStorage Dead _7\lGoto\l"];
    Xd05a555747cd5aa8_5 -> Xd05a555747cd5aa8_6 [label="11"];
    Xd05a555747cd5aa8_5 [label="Storage Live _12\l12 <- Cast-PtrToPtr cp(8)\lStorage Live _13\l13 <- Cast-PtrToPtr cp(9)\lCall\l"];
    Xd05a555747cd5aa8_6 -> Xd05a555747cd5aa8_7;
    Xd05a555747cd5aa8_6 [label="Storage Dead _13\lStorage Dead _12\lGoto\l"];
    Xd05a555747cd5aa8_7 -> Xd05a555747cd5aa8_10 [label="0"];
    Xd05a555747cd5aa8_7 -> Xd05a555747cd5aa8_8 [label="other"];
    Xd05a555747cd5aa8_7 [label="Storage Dead _10\l14 <- SizeOf :: u8\lStorage Live _15\l15 <- Lt(const ?_usize, cp(14))\lSwitchInt mv(15)\l"];
    Xd05a555747cd5aa8_8 -> Xd05a555747cd5aa8_10 [label="0"];
    Xd05a555747cd5aa8_8 -> Xd05a555747cd5aa8_9 [label="other"];
    Xd05a555747cd5aa8_8 [label="Storage Live _16\l16 <- Le(cp(14), const ?_usize)\lSwitchInt mv(16)\l"];
    Xd05a555747cd5aa8_9 -> Xd05a555747cd5aa8_4 [label="0"];
    Xd05a555747cd5aa8_9 [label="Storage Dead _16\lStorage Dead _15\lCall\l"];
    Xd05a555747cd5aa8_10 [label="Call\l"];
  }
  Xd05a555747cd5aa8_5 -> Xfccd6b940db3d5e8_0 [label="mv(12),mv(13)"];
  Xd05a555747cd5aa8_9 -> Xfd88df1009b24094_0 [label="mv(8),mv(9)"];
  Xd05a555747cd5aa8_10 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_4 {
    label="<core::ops::try_trait::Ne\nverShortCircuit<u8> \nas \ncore::ops::FromResidual>:\n:from_residual";
    style="filled";
    color=lightgray;
    node_5 [label="LOCALS\l0 = core::ops::try_trait::NeverShortCircuit<u8>\l1 = core::ops::try_trait::NeverShortCircuitResidual\l", style="filled", color=palegreen3];
    X1204e78c96d6e5fc_0 [label="Unreachable\l"];
  }
  subgraph cluster_6 {
    label="<core::ops::index_range::\nIndexRange \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked_mut::\nprecondition_check";
    style="filled";
    color=lightgray;
    node_7 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xf9189f0cbf6ad92d_0 -> Xf9189f0cbf6ad92d_2 [label="0"];
    Xf9189f0cbf6ad92d_0 -> Xf9189f0cbf6ad92d_1 [label="other"];
    Xf9189f0cbf6ad92d_0 [label="Storage Live _3\l3 <- Le(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xf9189f0cbf6ad92d_1 [label="Storage Dead _3\lReturn\l"];
    Xf9189f0cbf6ad92d_2 [label="Call\l"];
  }
  Xf9189f0cbf6ad92d_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_8 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_9 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::Range<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xe35bd60b7bbdbba4_0 -> Xe35bd60b7bbdbba4_3 [label="0"];
    Xe35bd60b7bbdbba4_0 -> Xe35bd60b7bbdbba4_1 [label="other"];
    Xe35bd60b7bbdbba4_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xe35bd60b7bbdbba4_1 -> Xe35bd60b7bbdbba4_2 [label="4"];
    Xe35bd60b7bbdbba4_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xe35bd60b7bbdbba4_2 -> Xe35bd60b7bbdbba4_3;
    Xe35bd60b7bbdbba4_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xe35bd60b7bbdbba4_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([pinocchio::account_info::AccountInfo]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xe35bd60b7bbdbba4_1 -> X37e6c077af20a501_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_10 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_11 [label="LOCALS\l0 = *const [u8]\l1 = core::ops::Range<usize>\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = usize\l10 = usize\l11 = *const u8\l12 = *const u8\l", style="filled", color=palegreen3];
    Xc1e109de9d1a8745_0 -> Xc1e109de9d1a8745_3 [label="0"];
    Xc1e109de9d1a8745_0 -> Xc1e109de9d1a8745_1 [label="other"];
    Xc1e109de9d1a8745_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xc1e109de9d1a8745_1 -> Xc1e109de9d1a8745_2 [label="4"];
    Xc1e109de9d1a8745_1 [label="Storage Live _5\l5 <- Use(cp(1.0))\lStorage Live _6\l6 <- Use(cp(1.1))\lStorage Live _7\l7 <- PtrMetadata(cp(2))\lCall\l"];
    Xc1e109de9d1a8745_2 -> Xc1e109de9d1a8745_3;
    Xc1e109de9d1a8745_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xc1e109de9d1a8745_3 [label="Storage Dead _3\lStorage Live _9\l9 <- Use(cp(1.1))\l10 <- Use(cp(1.0))\l8 <- SubUnchecked(mv(9), cp(10))\lStorage Dead _9\lStorage Live _11\lStorage Live _12\l12 <- Cast-PtrToPtr cp(2)\l11 <- Offset(cp(12), cp(10))\lStorage Dead _12\l0 <- *([u8]) (cp(11), cp(8))\lStorage Dead _11\lReturn\l"];
  }
  Xc1e109de9d1a8745_1 -> X37e6c077af20a501_0 [label="mv(5),mv(6),mv(7)"];
  subgraph cluster_12 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_13 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X37e6c077af20a501_0 -> X37e6c077af20a501_3 [label="0"];
    X37e6c077af20a501_0 -> X37e6c077af20a501_1 [label="other"];
    X37e6c077af20a501_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X37e6c077af20a501_1 -> X37e6c077af20a501_3 [label="0"];
    X37e6c077af20a501_1 -> X37e6c077af20a501_2 [label="other"];
    X37e6c077af20a501_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X37e6c077af20a501_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X37e6c077af20a501_3 [label="Call\l"];
  }
  X37e6c077af20a501_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_14 {
    label="<core::ops::Range<usize> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_15 [label="LOCALS\l0 = &[u8]\l1 = core::ops::Range<usize>\l2 = &[u8]\l3 = !\l4 = usize\l5 = core::option::Option<usize>\l6 = usize\l7 = usize\l8 = bool\l9 = usize\l10 = !\l11 = *const [u8]\l12 = *const [u8]\l13 = bool\l14 = usize\l15 = *const u8\l16 = *const u8\l", style="filled", color=palegreen3];
    X386b02aeacd40e86_0 -> X386b02aeacd40e86_4 [label="0"];
    X386b02aeacd40e86_0 -> X386b02aeacd40e86_3 [label="other"];
    X386b02aeacd40e86_0 [label="Storage Live _5\l6 <- Use(cp(1.1))\l7 <- Use(cp(1.0))\lStorage Live _13\l13 <- Lt(cp(6), cp(7))\lSwitchInt mv(13)\l"];
    X386b02aeacd40e86_1 [label="Call\l"];
    X386b02aeacd40e86_2 [label="Storage Dead _8\lStorage Live _11\lStorage Live _12\l12 <- &raw (*2)\lStorage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(12)\l15 <- Offset(cp(16), cp(7))\lStorage Dead _16\l11 <- *([u8]) (cp(15), cp(4))\lStorage Dead _15\lStorage Dead _12\l0 <- & (*11)\lStorage Dead _11\lReturn\l"];
    X386b02aeacd40e86_3 [label="Storage Dead _13\lStorage Dead _5\lCall\l"];
    X386b02aeacd40e86_4 -> X386b02aeacd40e86_2 [label="0"];
    X386b02aeacd40e86_4 -> X386b02aeacd40e86_1 [label="other"];
    X386b02aeacd40e86_4 [label="Storage Live _14\l14 <- SubUnchecked(cp(6), cp(7))\l5 <- Adt{1} (mv(14))\lStorage Dead _14\lStorage Dead _13\l4 <- Use(cp((5 as variant 1).0))\lStorage Dead _5\lStorage Live _8\l9 <- PtrMetadata(cp(2))\l8 <- Gt(cp(6), cp(9))\lSwitchInt mv(8)\l"];
  }
  X386b02aeacd40e86_1 -> X13437086877d9cb7_0 [label="mv(6),mv(9)"];
  X386b02aeacd40e86_3 -> X3d825c4445d1baca_0 [label="mv(7),mv(6)"];
  subgraph cluster_16 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::DoubleEndedIt\nerator>::next_back";
    style="filled";
    color=lightgray;
    node_17 [label="LOCALS\l0 = core::option::Option<&u8>\l1 = &mut core::slice::Iter<'_, u8>\l2 = bool\l3 = usize\l4 = *const u8\l5 = core::ptr::NonNull<u8>\l6 = *const core::ptr::NonNull<u8>\l7 = *const *const u8\l8 = &core::ptr::NonNull<u8>\l9 = &core::ptr::NonNull<u8>\l10 = &u8\l11 = core::ptr::NonNull<u8>\l12 = *const u8\l13 = *const u8\l14 = &core::ptr::NonNull<u8>\l15 = core::ptr::NonNull<u8>\l16 = *mut usize\l17 = *mut *const u8\l18 = usize\l19 = usize\l20 = *mut core::ptr::NonNull<u8>\l21 = *mut *const u8\l22 = core::ptr::NonNull<u8>\l23 = core::ptr::NonNull<u8>\l24 = bool\l25 = ()\l26 = *const u8\l27 = *const u8\l28 = *mut u8\l29 = core::ptr::NonNull<u8>\l30 = *const u8\l", style="filled", color=palegreen3];
    X40f037eb7ab6abf7_0 -> X40f037eb7ab6abf7_2 [label="0"];
    X40f037eb7ab6abf7_0 -> X40f037eb7ab6abf7_1 [label="other"];
    X40f037eb7ab6abf7_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_1 -> X40f037eb7ab6abf7_3;
    X40f037eb7ab6abf7_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Eq(cp(3), const ?_usize)\lGoto\l"];
    X40f037eb7ab6abf7_2 -> X40f037eb7ab6abf7_3;
    X40f037eb7ab6abf7_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- & (*1).0\lStorage Live _9\l9 <- & 5\lStorage Live _12\lStorage Live _13\lStorage Live _11\l11 <- Use(cp((*1).0))\l12 <- Use(cp(11.0))\lStorage Dead _11\l13 <- Use(cp(5.0))\l2 <- Eq(cp(12), cp(13))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\lGoto\l"];
    X40f037eb7ab6abf7_3 -> X40f037eb7ab6abf7_5 [label="0"];
    X40f037eb7ab6abf7_3 -> X40f037eb7ab6abf7_4 [label="other"];
    X40f037eb7ab6abf7_3 [label="SwitchInt mv(2)\l"];
    X40f037eb7ab6abf7_4 -> X40f037eb7ab6abf7_6;
    X40f037eb7ab6abf7_4 [label="0 <- Use(const core::option::Option<&u8>)\lGoto\l"];
    X40f037eb7ab6abf7_5 -> X40f037eb7ab6abf7_9 [label="0"];
    X40f037eb7ab6abf7_5 -> X40f037eb7ab6abf7_8 [label="other"];
    X40f037eb7ab6abf7_5 [label="Storage Live _14\lStorage Live _15\lStorage Live _16\lStorage Live _20\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_6 [label="Storage Dead _2\lReturn\l"];
    X40f037eb7ab6abf7_7 -> X40f037eb7ab6abf7_6;
    X40f037eb7ab6abf7_7 [label="Storage Dead _20\lStorage Dead _16\l14 <- & 15\lStorage Live _30\lStorage Live _28\lStorage Live _29\l29 <- Use(cp(15))\l30 <- Use(cp(29.0))\l28 <- Cast-PtrToPtr cp(30)\lStorage Dead _29\lStorage Dead _28\l10 <- & (*30)\lStorage Dead _30\lStorage Dead _14\lStorage Dead _15\l0 <- Adt{1} (cp(10))\lGoto\l"];
    X40f037eb7ab6abf7_8 -> X40f037eb7ab6abf7_7;
    X40f037eb7ab6abf7_8 [label="Storage Live _17\l17 <- &raw mut (*1).1\l16 <- Cast-PtrToPtr cp(17)\lStorage Dead _17\lStorage Live _18\lStorage Live _19\l19 <- Use(cp((*16)))\l18 <- SubUnchecked(mv(19), const ?_usize)\lStorage Dead _19\l(*16) <- Use(mv(18))\lStorage Dead _18\l15 <- Use(cp((*1).0))\lGoto\l"];
    X40f037eb7ab6abf7_9 -> X40f037eb7ab6abf7_12 [label="0"];
    X40f037eb7ab6abf7_9 -> X40f037eb7ab6abf7_11 [label="other"];
    X40f037eb7ab6abf7_9 [label="Storage Live _21\l21 <- &raw mut (*1).1\l20 <- Cast-PtrToPtr cp(21)\lStorage Dead _21\lStorage Live _22\l23 <- Use(cp((*20)))\lSwitchInt const bool\l"];
    X40f037eb7ab6abf7_10 -> X40f037eb7ab6abf7_7;
    X40f037eb7ab6abf7_10 [label="(*20) <- Use(mv(22))\lStorage Dead _22\l15 <- Use(cp((*20)))\lGoto\l"];
    X40f037eb7ab6abf7_11 -> X40f037eb7ab6abf7_10;
    X40f037eb7ab6abf7_11 [label="22 <- Use(cp(23))\lGoto\l"];
    X40f037eb7ab6abf7_12 -> X40f037eb7ab6abf7_14 [label="0"];
    X40f037eb7ab6abf7_12 -> X40f037eb7ab6abf7_13 [label="other"];
    X40f037eb7ab6abf7_12 [label="Storage Live _24\l24 <- UbChecks :: bool\lSwitchInt mv(24)\l"];
    X40f037eb7ab6abf7_13 -> X40f037eb7ab6abf7_14 [label="25"];
    X40f037eb7ab6abf7_13 [label="Call\l"];
    X40f037eb7ab6abf7_14 -> X40f037eb7ab6abf7_10;
    X40f037eb7ab6abf7_14 [label="Storage Dead _24\lStorage Live _26\lStorage Live _27\l27 <- Use(cp(23.0))\l26 <- Offset(mv(27), const ?_isize)\lStorage Dead _27\l22 <- Adt{0} (mv(26))\lStorage Dead _26\lGoto\l"];
  }
  X40f037eb7ab6abf7_13 -> X44b1b4235fabb732_0 [label="const ?_isize"];
  subgraph cluster_18 {
    label="<core::iter::Filter<core:\n:str::Chars<'_>, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}> \nas \ncore::iter::Iterator>::co\nunt";
    style="filled";
    color=lightgray;
    node_19 [label="LOCALS\l0 = usize\l1 = core::iter::Filter<core::str::Chars<'_>, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>\l2 = core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>\l3 = core::str::Chars<'_>\l4 = {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}\l5 = {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}\l6 = core::str::Chars<'_>\l7 = {closure@core::iter::adapters::map::map_fold<char, usize, usize, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}, {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}>::{closure#0}}\l8 = {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}\l", style="filled", color=palegreen3];
    X350049e7b5580d45_0 -> X350049e7b5580d45_1 [label="2"];
    X350049e7b5580d45_0 [label="Storage Live _2\lStorage Live _3\l3 <- Use(mv(1.0))\lStorage Live _4\lStorage Live _5\l5 <- Use(mv(1.1))\l4 <- Closure (mv(5))\lStorage Dead _5\lCall\l"];
    X350049e7b5580d45_1 -> X350049e7b5580d45_2 [label="0"];
    X350049e7b5580d45_1 [label="Storage Dead _4\lStorage Dead _3\lStorage Live _6\l6 <- Use(mv(2.0))\lStorage Live _7\lStorage Live _8\l8 <- Use(mv(2.1))\l7 <- Closure (const {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}, mv(8))\lStorage Dead _8\lCall\l"];
    X350049e7b5580d45_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _2\lReturn\l"];
  }
  X350049e7b5580d45_0 -> X8e7536494f3ec4ab_0 [label="mv(3),mv(4)"];
  X350049e7b5580d45_1 -> X5fb562383e7f44cb_0 [label="mv(6),const ?_usize,mv(7)"];
  subgraph cluster_20 {
    label="<core::iter::Filter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize::<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}";
    style="filled";
    color=lightgray;
    node_21 [label="LOCALS\l0 = usize\l1 = &mut {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}\l2 = char\l3 = bool\l4 = &mut {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}\l5 = (&char,)\l6 = &char\l", style="filled", color=palegreen3];
    Xf28540087b6c8498_0 -> Xf28540087b6c8498_3 [label="Cleanup"];
    Xf28540087b6c8498_0 -> Xf28540087b6c8498_1 [label="3"];
    Xf28540087b6c8498_0 [label="Storage Live _3\lStorage Live _4\l4 <- &mut (*1).0\lStorage Live _5\l6 <- & 2\l5 <- Tuple (cp(6))\lCall\l"];
    Xf28540087b6c8498_1 -> Xf28540087b6c8498_2;
    Xf28540087b6c8498_1 [label="Storage Dead _5\lStorage Dead _4\l0 <- Cast-IntToInt mv(3)\lStorage Dead _3\lDrop 2\l"];
    Xf28540087b6c8498_2 [label="Return\l"];
    Xf28540087b6c8498_3 -> Xf28540087b6c8498_4;
    Xf28540087b6c8498_3 [label="Drop 2\l"];
    Xf28540087b6c8498_4 [label="Resume\l"];
  }
  Xf28540087b6c8498_0 -> X895e0fc700d07783_0 [label="mv(4),mv(5)"];
  subgraph cluster_22 {
    label="<core::ops::RangeTo<usize\n> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::get_unche\ncked";
    style="filled";
    color=lightgray;
    node_23 [label="LOCALS\l0 = *const [pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeTo<usize>\l2 = *const [pinocchio::account_info::AccountInfo]\l3 = core::ops::Range<usize>\l4 = usize\l", style="filled", color=palegreen3];
    Xf36307cdfb4d1bcc_0 -> Xf36307cdfb4d1bcc_1 [label="0"];
    Xf36307cdfb4d1bcc_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(1.0))\l3 <- Adt{0} (const ?_usize, mv(4))\lStorage Dead _4\lCall\l"];
    Xf36307cdfb4d1bcc_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xf36307cdfb4d1bcc_0 -> Xe35bd60b7bbdbba4_0 [label="mv(3),mv(2)"];
  subgraph cluster_24 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\nu8]>>::index";
    style="filled";
    color=lightgray;
    node_25 [label="LOCALS\l0 = &[u8]\l1 = core::ops::RangeFrom<usize>\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [u8]\l8 = *const [u8]\l9 = bool\l10 = ()\l11 = usize\l12 = *const u8\l13 = *const u8\l", style="filled", color=palegreen3];
    Xbf13fd323824b7e4_0 -> Xbf13fd323824b7e4_2 [label="0"];
    Xbf13fd323824b7e4_0 -> Xbf13fd323824b7e4_1 [label="other"];
    Xbf13fd323824b7e4_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xbf13fd323824b7e4_1 [label="Call\l"];
    Xbf13fd323824b7e4_2 -> Xbf13fd323824b7e4_4 [label="0"];
    Xbf13fd323824b7e4_2 -> Xbf13fd323824b7e4_3 [label="other"];
    Xbf13fd323824b7e4_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xbf13fd323824b7e4_3 -> Xbf13fd323824b7e4_4 [label="10"];
    Xbf13fd323824b7e4_3 [label="Call\l"];
    Xbf13fd323824b7e4_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([u8]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xbf13fd323824b7e4_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xbf13fd323824b7e4_3 -> X37e6c077af20a501_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_26 {
    label="<core::ops::RangeFrom<usi\nze> \nas \ncore::slice::SliceIndex<[\npinocchio::account_info::\nAccountInfo]>>::index";
    style="filled";
    color=lightgray;
    node_27 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = core::ops::RangeFrom<usize>\l2 = &[pinocchio::account_info::AccountInfo]\l3 = bool\l4 = usize\l5 = usize\l6 = !\l7 = *const [pinocchio::account_info::AccountInfo]\l8 = *const [pinocchio::account_info::AccountInfo]\l9 = bool\l10 = ()\l11 = usize\l12 = *const pinocchio::account_info::AccountInfo\l13 = *const pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    Xa7ac216995a185b1_0 -> Xa7ac216995a185b1_2 [label="0"];
    Xa7ac216995a185b1_0 -> Xa7ac216995a185b1_1 [label="other"];
    Xa7ac216995a185b1_0 [label="Storage Live _3\l4 <- Use(cp(1.0))\l5 <- PtrMetadata(cp(2))\l3 <- Gt(cp(4), cp(5))\lSwitchInt mv(3)\l"];
    Xa7ac216995a185b1_1 [label="Call\l"];
    Xa7ac216995a185b1_2 -> Xa7ac216995a185b1_4 [label="0"];
    Xa7ac216995a185b1_2 -> Xa7ac216995a185b1_3 [label="other"];
    Xa7ac216995a185b1_2 [label="Storage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- &raw (*2)\lStorage Live _11\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xa7ac216995a185b1_3 -> Xa7ac216995a185b1_4 [label="10"];
    Xa7ac216995a185b1_3 [label="Call\l"];
    Xa7ac216995a185b1_4 [label="Storage Dead _9\l11 <- SubUnchecked(cp(5), cp(4))\lStorage Live _12\lStorage Live _13\l13 <- Cast-PtrToPtr cp(8)\l12 <- Offset(cp(13), cp(4))\lStorage Dead _13\l7 <- *([pinocchio::account_info::AccountInfo]) (cp(12), cp(11))\lStorage Dead _12\lStorage Dead _11\lStorage Dead _8\l0 <- & (*7)\lStorage Dead _7\lReturn\l"];
  }
  Xa7ac216995a185b1_1 -> Xb7bf8399f7d46827_0 [label="mv(4),mv(5)"];
  Xa7ac216995a185b1_3 -> X37e6c077af20a501_0 [label="cp(4),cp(5),cp(5)"];
  subgraph cluster_28 {
    label="<pinocchio_token_interfac\ne::state::mint::Mint \nas \npinocchio_token_interface\n::state::Initializable>::\nis_initialized";
    style="filled";
    color=lightgray;
    node_29 [label="LOCALS\l0 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l1 = &pinocchio_token_interface::state::mint::Mint\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_3 [label="0"];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_2 [label="1"];
    X81eb37da80f6fb85_0 -> X81eb37da80f6fb85_1 [label="other"];
    X81eb37da80f6fb85_0 [label="SwitchInt cp((*1).3)\l"];
    X81eb37da80f6fb85_1 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_1 [label="2 <- Adt{3} ()\l0 <- Adt{1} (mv(2))\lGoto\l"];
    X81eb37da80f6fb85_2 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_2 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    X81eb37da80f6fb85_3 -> X81eb37da80f6fb85_4;
    X81eb37da80f6fb85_3 [label="0 <- Adt{0} (const bool)\lGoto\l"];
    X81eb37da80f6fb85_4 [label="Return\l"];
  }
  subgraph cluster_30 {
    label="<core::result::Result<&pi\nnocchio_token_interface::\nstate::mint::Mint, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio::program_error:\n:ProgramError>>>::from_re\nsidual";
    style="filled";
    color=lightgray;
    node_31 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l2 = pinocchio::program_error::ProgramError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xdaa446e4ac3a609b_0 -> Xdaa446e4ac3a609b_1 [label="3"];
    Xdaa446e4ac3a609b_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    Xdaa446e4ac3a609b_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xdaa446e4ac3a609b_0 -> Xa0efa4cbcb423f13_0 [label="mv(2)"];
  subgraph cluster_32 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::FromResidual<c\nore::result::Result<core:\n:convert::Infallible, \npinocchio_token_interface\n::error::TokenError>>>::f\nrom_residual";
    style="filled";
    color=lightgray;
    node_33 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l2 = pinocchio_token_interface::error::TokenError\l3 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X2463e75e08f1acde_0 -> X2463e75e08f1acde_1 [label="3"];
    X2463e75e08f1acde_0 [label="2 <- Use(mv((1 as variant 1).0))\lStorage Live _3\lCall\l"];
    X2463e75e08f1acde_1 [label="0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X2463e75e08f1acde_0 -> X5740f420bf9fe2ca_0 [label="mv(2)"];
  subgraph cluster_34 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::FromResidual<c\nore::ops::ControlFlow<(),\n \ncore::convert::Infallible\n>>>::from_residual";
    style="filled";
    color=lightgray;
    node_35 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = core::ops::ControlFlow<(), core::convert::Infallible>\l2 = ()\l", style="filled", color=palegreen3];
    Xdbc4cc7f242d80ee_0 [label="2 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(2))\lReturn\l"];
  }
  subgraph cluster_36 {
    label="entrypoint::process_instr\nuction";
    style="filled";
    color=lightgray;
    node_37 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[u8; 32]\l2 = &[pinocchio::account_info::AccountInfo]\l3 = &[u8]\l4 = pinocchio::program_error::ProgramError\l5 = pinocchio_token_interface::error::TokenError\l6 = &u8\l7 = &[u8]\l8 = usize\l9 = bool\l10 = core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = u8\l12 = core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X6c5f82dfbe192777_0 -> X6c5f82dfbe192777_3 [label="0"];
    X6c5f82dfbe192777_0 -> X6c5f82dfbe192777_2 [label="other"];
    X6c5f82dfbe192777_0 [label="8 <- Len((*3))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    X6c5f82dfbe192777_1 -> X6c5f82dfbe192777_7;
    X6c5f82dfbe192777_1 [label="0 <- Adt{1} (mv(4))\lGoto\l"];
    X6c5f82dfbe192777_2 -> X6c5f82dfbe192777_4 [label="255"];
    X6c5f82dfbe192777_2 -> X6c5f82dfbe192777_5 [label="other"];
    X6c5f82dfbe192777_2 [label="6 <- & (*3)[0]\l7 <- & (*3)[1..-0]\l11 <- Use(cp((*6)))\lSwitchInt mv(11)\l"];
    X6c5f82dfbe192777_3 -> X6c5f82dfbe192777_1 [label="4"];
    X6c5f82dfbe192777_3 [label="5 <- Adt{12} ()\lCall\l"];
    X6c5f82dfbe192777_4 -> X6c5f82dfbe192777_6 [label="10"];
    X6c5f82dfbe192777_4 [label="Call\l"];
    X6c5f82dfbe192777_5 -> X6c5f82dfbe192777_6 [label="10"];
    X6c5f82dfbe192777_5 [label="Call\l"];
    X6c5f82dfbe192777_6 -> X6c5f82dfbe192777_7 [label="0"];
    X6c5f82dfbe192777_6 [label="12 <- Use(mv(10))\lCall\l"];
    X6c5f82dfbe192777_7 [label="Return\l"];
  }
  X6c5f82dfbe192777_3 -> X3e41fe755ef8b4ae_0 [label="mv(5)"];
  X6c5f82dfbe192777_4 -> X15962aa79900eb2f_0 [label="cp(2),cp(7)"];
  X6c5f82dfbe192777_5 -> X9595629189257c54_0 [label="cp(2),cp(3)"];
  X6c5f82dfbe192777_6 -> Xba531265f22fa7ac_0 [label="mv(12),const for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}"];
  subgraph cluster_38 {
    label="entrypoint::inner_process\n_instruction";
    style="filled";
    color=lightgray;
    node_39 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = pinocchio::program_error::ProgramError\l4 = pinocchio_token_interface::error::TokenError\l5 = &u8\l6 = &[u8]\l7 = usize\l8 = bool\l9 = u8\l", style="filled", color=palegreen3];
    X9595629189257c54_0 -> X9595629189257c54_3 [label="0"];
    X9595629189257c54_0 -> X9595629189257c54_2 [label="other"];
    X9595629189257c54_0 [label="7 <- Len((*2))\l8 <- Ge(mv(7), const ?_usize)\lSwitchInt mv(8)\l"];
    X9595629189257c54_1 -> X9595629189257c54_4;
    X9595629189257c54_1 [label="0 <- Adt{1} (mv(3))\lGoto\l"];
    X9595629189257c54_2 -> X9595629189257c54_4 [label="0"];
    X9595629189257c54_2 [label="5 <- & (*2)[0]\l6 <- & (*2)[1..-0]\l9 <- Use(cp((*5)))\lCall\l"];
    X9595629189257c54_3 -> X9595629189257c54_1 [label="3"];
    X9595629189257c54_3 [label="4 <- Adt{12} ()\lCall\l"];
    X9595629189257c54_4 [label="Return\l"];
  }
  X9595629189257c54_2 -> Xda53248c0718102a_0 [label="cp(1),cp(6),cp(9)"];
  X9595629189257c54_3 -> X3e41fe755ef8b4ae_0 [label="mv(4)"];
  subgraph cluster_40 {
    label="entrypoint::test_process_\nui_amount_to_amount";
    style="filled";
    color=lightgray;
    node_41 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo; 1]\l2 = &[u8]\l3 = {closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l4 = core::result::Result<&str, core::str::Utf8Error>\l5 = core::result::Result<(), pinocchio::program_error::ProgramError>\l6 = &[pinocchio::account_info::AccountInfo]\l7 = bool\l8 = &core::result::Result<&str, core::str::Utf8Error>\l9 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l10 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l11 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l12 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l13 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l14 = bool\l15 = core::panicking::AssertKind\l16 = !\l17 = core::option::Option<core::fmt::Arguments<'_>>\l18 = bool\l19 = usize\l20 = &[pinocchio::account_info::AccountInfo]\l21 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l22 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l23 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l24 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l25 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l26 = bool\l27 = core::panicking::AssertKind\l28 = !\l29 = core::option::Option<core::fmt::Arguments<'_>>\l30 = bool\l31 = &&[u8; 32]\l32 = &[u8; 32]\l33 = &pinocchio::account_info::AccountInfo\l34 = usize\l35 = usize\l36 = bool\l37 = &&[u8; 32]\l38 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l39 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l40 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l41 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l42 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l43 = bool\l44 = core::panicking::AssertKind\l45 = !\l46 = core::option::Option<core::fmt::Arguments<'_>>\l47 = bool\l48 = usize\l49 = &pinocchio::account_info::AccountInfo\l50 = usize\l51 = usize\l52 = bool\l53 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l54 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l55 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l56 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l57 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l58 = bool\l59 = core::panicking::AssertKind\l60 = !\l61 = core::option::Option<core::fmt::Arguments<'_>>\l62 = bool\l63 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l64 = &pinocchio_token_interface::state::mint::Mint\l65 = pinocchio_token_interface::state::mint::Mint\l66 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l67 = (&pinocchio::account_info::AccountInfo,)\l68 = &pinocchio::account_info::AccountInfo\l69 = usize\l70 = usize\l71 = bool\l72 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l73 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l74 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l75 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l76 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l77 = bool\l78 = core::panicking::AssertKind\l79 = !\l80 = core::option::Option<core::fmt::Arguments<'_>>\l81 = bool\l82 = &str\l83 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l84 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l85 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l86 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l87 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l88 = bool\l89 = core::panicking::AssertKind\l90 = !\l91 = core::option::Option<core::fmt::Arguments<'_>>\l92 = bool\l93 = &&str\l94 = &str\l95 = &&str\l96 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l97 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l98 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l99 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l100 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l101 = bool\l102 = core::panicking::AssertKind\l103 = !\l104 = core::option::Option<core::fmt::Arguments<'_>>\l105 = bool\l106 = usize\l107 = core::iter::Filter<core::str::Chars<'_>, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>\l108 = core::str::Chars<'_>\l109 = &str\l110 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l111 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l112 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l113 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l114 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l115 = bool\l116 = core::panicking::AssertKind\l117 = !\l118 = core::option::Option<core::fmt::Arguments<'_>>\l119 = bool\l120 = &str\l121 = bool\l122 = &mut core::iter::Skip<core::str::Chars<'_>>\l123 = core::iter::Skip<core::str::Chars<'_>>\l124 = core::str::Chars<'_>\l125 = &str\l126 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l127 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l128 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l129 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l130 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l131 = bool\l132 = core::panicking::AssertKind\l133 = !\l134 = core::option::Option<core::fmt::Arguments<'_>>\l135 = bool\l136 = core::option::Option<(&str, &str)>\l137 = &str\l138 = {closure@p-token/src/entrypoint.rs:1399:64: 1399:75}\l139 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l140 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l141 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l142 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l143 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l144 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l145 = bool\l146 = core::panicking::AssertKind\l147 = !\l148 = core::option::Option<core::fmt::Arguments<'_>>\l149 = bool\l150 = core::option::Option<(&str, &str)>\l151 = &str\l152 = bool\l153 = usize\l154 = usize\l155 = &str\l156 = usize\l157 = u8\l158 = pinocchio_token_interface::state::mint::Mint\l159 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l160 = (&pinocchio::account_info::AccountInfo,)\l161 = &pinocchio::account_info::AccountInfo\l162 = usize\l163 = usize\l164 = bool\l165 = (usize, bool)\l166 = {closure@p-token/src/entrypoint.rs:1403:9: 1403:20}\l167 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l168 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l169 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l170 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l171 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l172 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l173 = bool\l174 = core::panicking::AssertKind\l175 = !\l176 = core::option::Option<core::fmt::Arguments<'_>>\l177 = char\l178 = core::option::Option<char>\l179 = &mut core::str::Chars<'_>\l180 = core::str::Chars<'_>\l181 = &str\l182 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l183 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l184 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l185 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l186 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l187 = bool\l188 = core::panicking::AssertKind\l189 = !\l190 = core::option::Option<core::fmt::Arguments<'_>>\l191 = bool\l192 = &str\l193 = (&core::result::Result<(), pinocchio::program_error::ProgramError>, &core::result::Result<(), pinocchio::program_error::ProgramError>)\l194 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l195 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l196 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l197 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l198 = bool\l199 = core::panicking::AssertKind\l200 = !\l201 = core::option::Option<core::fmt::Arguments<'_>>\l202 = bool\l203 = core::option::Option<(&str, &str)>\l204 = &str\l205 = bool\l206 = &str\l207 = &str\l208 = core::option::Option<&str>\l209 = &str\l210 = core::cmp::Ordering\l211 = &usize\l212 = usize\l213 = &usize\l214 = usize\l215 = &str\l216 = i8\l217 = &&str\l218 = &&str\l219 = &str\l220 = bool\l221 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l222 = !\l", style="filled", color=palegreen3];
    X4f6bc10528c036e1_0 -> X4f6bc10528c036e1_1 [label="4"];
    X4f6bc10528c036e1_0 [label="Call\l"];
    X4f6bc10528c036e1_1 -> X4f6bc10528c036e1_2 [label="5"];
    X4f6bc10528c036e1_1 [label="6 <- Cast-PointerCoercion(Unsize) cp(1)\lCall\l"];
    X4f6bc10528c036e1_2 -> X4f6bc10528c036e1_3 [label="7"];
    X4f6bc10528c036e1_2 [label="8 <- & 4\lCall\l"];
    X4f6bc10528c036e1_3 -> X4f6bc10528c036e1_7 [label="0"];
    X4f6bc10528c036e1_3 -> X4f6bc10528c036e1_4 [label="other"];
    X4f6bc10528c036e1_3 [label="SwitchInt mv(7)\l"];
    X4f6bc10528c036e1_4 -> X4f6bc10528c036e1_5 [label="14"];
    X4f6bc10528c036e1_4 [label="10 <- & 5\l11 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l9 <- Tuple (mv(10), mv(11))\l12 <- Use(cp(9.0))\l13 <- Use(cp(9.1))\lCall\l"];
    X4f6bc10528c036e1_5 -> X4f6bc10528c036e1_6 [label="0"];
    X4f6bc10528c036e1_5 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_5 [label="SwitchInt mv(14)\l"];
    X4f6bc10528c036e1_6 [label="15 <- Adt{0} ()\l17 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_7 -> X4f6bc10528c036e1_11 [label="0"];
    X4f6bc10528c036e1_7 -> X4f6bc10528c036e1_8 [label="other"];
    X4f6bc10528c036e1_7 [label="20 <- Cast-PointerCoercion(Unsize) cp(1)\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), const ?_usize)\lSwitchInt mv(18)\l"];
    X4f6bc10528c036e1_8 -> X4f6bc10528c036e1_9 [label="26"];
    X4f6bc10528c036e1_8 [label="22 <- & 5\l23 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l21 <- Tuple (mv(22), mv(23))\l24 <- Use(cp(21.0))\l25 <- Use(cp(21.1))\lCall\l"];
    X4f6bc10528c036e1_9 -> X4f6bc10528c036e1_10 [label="0"];
    X4f6bc10528c036e1_9 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_9 [label="SwitchInt mv(26)\l"];
    X4f6bc10528c036e1_10 [label="27 <- Adt{0} ()\l29 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_11 -> X4f6bc10528c036e1_12;
    X4f6bc10528c036e1_11 [label="34 <- Use(const ?_usize)\l35 <- Use(const ?_usize)\l36 <- Lt(cp(34), cp(35))\lAssert mv(36) == true\l"];
    X4f6bc10528c036e1_12 -> X4f6bc10528c036e1_13 [label="32"];
    X4f6bc10528c036e1_12 [label="33 <- & (*1)[_34]\lCall\l"];
    X4f6bc10528c036e1_13 -> X4f6bc10528c036e1_14 [label="30"];
    X4f6bc10528c036e1_13 [label="31 <- & 32\l37 <- Use(const &&[u8; 32])\lCall\l"];
    X4f6bc10528c036e1_14 -> X4f6bc10528c036e1_18 [label="0"];
    X4f6bc10528c036e1_14 -> X4f6bc10528c036e1_15 [label="other"];
    X4f6bc10528c036e1_14 [label="SwitchInt mv(30)\l"];
    X4f6bc10528c036e1_15 -> X4f6bc10528c036e1_16 [label="43"];
    X4f6bc10528c036e1_15 [label="39 <- & 5\l40 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l38 <- Tuple (mv(39), mv(40))\l41 <- Use(cp(38.0))\l42 <- Use(cp(38.1))\lCall\l"];
    X4f6bc10528c036e1_16 -> X4f6bc10528c036e1_17 [label="0"];
    X4f6bc10528c036e1_16 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_16 [label="SwitchInt mv(43)\l"];
    X4f6bc10528c036e1_17 [label="44 <- Adt{0} ()\l46 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_18 -> X4f6bc10528c036e1_19;
    X4f6bc10528c036e1_18 [label="50 <- Use(const ?_usize)\l51 <- Use(const ?_usize)\l52 <- Lt(cp(50), cp(51))\lAssert mv(52) == true\l"];
    X4f6bc10528c036e1_19 -> X4f6bc10528c036e1_20 [label="48"];
    X4f6bc10528c036e1_19 [label="49 <- & (*1)[_50]\lCall\l"];
    X4f6bc10528c036e1_20 -> X4f6bc10528c036e1_24 [label="0"];
    X4f6bc10528c036e1_20 -> X4f6bc10528c036e1_21 [label="other"];
    X4f6bc10528c036e1_20 [label="47 <- Ne(mv(48), const ?_usize)\lSwitchInt mv(47)\l"];
    X4f6bc10528c036e1_21 -> X4f6bc10528c036e1_22 [label="58"];
    X4f6bc10528c036e1_21 [label="54 <- & 5\l55 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l53 <- Tuple (mv(54), mv(55))\l56 <- Use(cp(53.0))\l57 <- Use(cp(53.1))\lCall\l"];
    X4f6bc10528c036e1_22 -> X4f6bc10528c036e1_23 [label="0"];
    X4f6bc10528c036e1_22 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_22 [label="SwitchInt mv(58)\l"];
    X4f6bc10528c036e1_23 [label="59 <- Adt{0} ()\l61 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_24 -> X4f6bc10528c036e1_25;
    X4f6bc10528c036e1_24 [label="66 <- & 3\l69 <- Use(const ?_usize)\l70 <- Use(const ?_usize)\l71 <- Lt(cp(69), cp(70))\lAssert mv(71) == true\l"];
    X4f6bc10528c036e1_25 -> X4f6bc10528c036e1_26 [label="65"];
    X4f6bc10528c036e1_25 [label="68 <- & (*1)[_69]\l67 <- Tuple (cp(68))\lCall\l"];
    X4f6bc10528c036e1_26 -> X4f6bc10528c036e1_27 [label="63"];
    X4f6bc10528c036e1_26 [label="64 <- & 65\lCall\l"];
    X4f6bc10528c036e1_27 -> X4f6bc10528c036e1_28 [label="62"];
    X4f6bc10528c036e1_27 [label="Call\l"];
    X4f6bc10528c036e1_28 -> X4f6bc10528c036e1_30 [label="0"];
    X4f6bc10528c036e1_28 -> X4f6bc10528c036e1_29 [label="other"];
    X4f6bc10528c036e1_28 [label="SwitchInt mv(62)\l"];
    X4f6bc10528c036e1_29 -> X4f6bc10528c036e1_33 [label="82"];
    X4f6bc10528c036e1_29 [label="Call\l"];
    X4f6bc10528c036e1_30 -> X4f6bc10528c036e1_31 [label="77"];
    X4f6bc10528c036e1_30 [label="73 <- & 5\l74 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l72 <- Tuple (mv(73), mv(74))\l75 <- Use(cp(72.0))\l76 <- Use(cp(72.1))\lCall\l"];
    X4f6bc10528c036e1_31 -> X4f6bc10528c036e1_32 [label="0"];
    X4f6bc10528c036e1_31 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_31 [label="SwitchInt mv(77)\l"];
    X4f6bc10528c036e1_32 [label="78 <- Adt{0} ()\l80 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_33 -> X4f6bc10528c036e1_34 [label="81"];
    X4f6bc10528c036e1_33 [label="Call\l"];
    X4f6bc10528c036e1_34 -> X4f6bc10528c036e1_38 [label="0"];
    X4f6bc10528c036e1_34 -> X4f6bc10528c036e1_35 [label="other"];
    X4f6bc10528c036e1_34 [label="SwitchInt mv(81)\l"];
    X4f6bc10528c036e1_35 -> X4f6bc10528c036e1_36 [label="88"];
    X4f6bc10528c036e1_35 [label="84 <- & 5\l85 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l83 <- Tuple (mv(84), mv(85))\l86 <- Use(cp(83.0))\l87 <- Use(cp(83.1))\lCall\l"];
    X4f6bc10528c036e1_36 -> X4f6bc10528c036e1_37 [label="0"];
    X4f6bc10528c036e1_36 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_36 [label="SwitchInt mv(88)\l"];
    X4f6bc10528c036e1_37 [label="89 <- Adt{0} ()\l91 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_38 -> X4f6bc10528c036e1_39 [label="94"];
    X4f6bc10528c036e1_38 [label="Call\l"];
    X4f6bc10528c036e1_39 -> X4f6bc10528c036e1_40 [label="92"];
    X4f6bc10528c036e1_39 [label="93 <- & 94\l95 <- Use(const &&str)\lCall\l"];
    X4f6bc10528c036e1_40 -> X4f6bc10528c036e1_44 [label="0"];
    X4f6bc10528c036e1_40 -> X4f6bc10528c036e1_41 [label="other"];
    X4f6bc10528c036e1_40 [label="SwitchInt mv(92)\l"];
    X4f6bc10528c036e1_41 -> X4f6bc10528c036e1_42 [label="101"];
    X4f6bc10528c036e1_41 [label="97 <- & 5\l98 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l96 <- Tuple (mv(97), mv(98))\l99 <- Use(cp(96.0))\l100 <- Use(cp(96.1))\lCall\l"];
    X4f6bc10528c036e1_42 -> X4f6bc10528c036e1_43 [label="0"];
    X4f6bc10528c036e1_42 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_42 [label="SwitchInt mv(101)\l"];
    X4f6bc10528c036e1_43 [label="102 <- Adt{0} ()\l104 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_44 -> X4f6bc10528c036e1_45 [label="109"];
    X4f6bc10528c036e1_44 [label="Call\l"];
    X4f6bc10528c036e1_45 -> X4f6bc10528c036e1_46 [label="108"];
    X4f6bc10528c036e1_45 [label="Call\l"];
    X4f6bc10528c036e1_46 -> X4f6bc10528c036e1_47 [label="107"];
    X4f6bc10528c036e1_46 [label="Call\l"];
    X4f6bc10528c036e1_47 -> X4f6bc10528c036e1_48 [label="106"];
    X4f6bc10528c036e1_47 [label="Call\l"];
    X4f6bc10528c036e1_48 -> X4f6bc10528c036e1_52 [label="0"];
    X4f6bc10528c036e1_48 -> X4f6bc10528c036e1_49 [label="other"];
    X4f6bc10528c036e1_48 [label="105 <- Lt(const ?_usize, mv(106))\lSwitchInt mv(105)\l"];
    X4f6bc10528c036e1_49 -> X4f6bc10528c036e1_50 [label="115"];
    X4f6bc10528c036e1_49 [label="111 <- & 5\l112 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l110 <- Tuple (mv(111), mv(112))\l113 <- Use(cp(110.0))\l114 <- Use(cp(110.1))\lCall\l"];
    X4f6bc10528c036e1_50 -> X4f6bc10528c036e1_51 [label="0"];
    X4f6bc10528c036e1_50 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_50 [label="SwitchInt mv(115)\l"];
    X4f6bc10528c036e1_51 [label="116 <- Adt{0} ()\l118 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_52 -> X4f6bc10528c036e1_53 [label="120"];
    X4f6bc10528c036e1_52 [label="Call\l"];
    X4f6bc10528c036e1_53 -> X4f6bc10528c036e1_54 [label="119"];
    X4f6bc10528c036e1_53 [label="Call\l"];
    X4f6bc10528c036e1_54 -> X4f6bc10528c036e1_63 [label="0"];
    X4f6bc10528c036e1_54 -> X4f6bc10528c036e1_55 [label="other"];
    X4f6bc10528c036e1_54 [label="SwitchInt mv(119)\l"];
    X4f6bc10528c036e1_55 -> X4f6bc10528c036e1_56 [label="125"];
    X4f6bc10528c036e1_55 [label="Call\l"];
    X4f6bc10528c036e1_56 -> X4f6bc10528c036e1_57 [label="124"];
    X4f6bc10528c036e1_56 [label="Call\l"];
    X4f6bc10528c036e1_57 -> X4f6bc10528c036e1_58 [label="123"];
    X4f6bc10528c036e1_57 [label="Call\l"];
    X4f6bc10528c036e1_58 -> X4f6bc10528c036e1_59 [label="121"];
    X4f6bc10528c036e1_58 [label="122 <- &mut 123\lCall\l"];
    X4f6bc10528c036e1_59 -> X4f6bc10528c036e1_63 [label="0"];
    X4f6bc10528c036e1_59 -> X4f6bc10528c036e1_60 [label="other"];
    X4f6bc10528c036e1_59 [label="SwitchInt mv(121)\l"];
    X4f6bc10528c036e1_60 -> X4f6bc10528c036e1_61 [label="131"];
    X4f6bc10528c036e1_60 [label="127 <- & 5\l128 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l126 <- Tuple (mv(127), mv(128))\l129 <- Use(cp(126.0))\l130 <- Use(cp(126.1))\lCall\l"];
    X4f6bc10528c036e1_61 -> X4f6bc10528c036e1_62 [label="0"];
    X4f6bc10528c036e1_61 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_61 [label="SwitchInt mv(131)\l"];
    X4f6bc10528c036e1_62 [label="132 <- Adt{0} ()\l134 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_63 -> X4f6bc10528c036e1_64 [label="137"];
    X4f6bc10528c036e1_63 [label="Call\l"];
    X4f6bc10528c036e1_64 -> X4f6bc10528c036e1_65 [label="136"];
    X4f6bc10528c036e1_64 [label="Call\l"];
    X4f6bc10528c036e1_65 -> X4f6bc10528c036e1_66 [label="135"];
    X4f6bc10528c036e1_65 [label="139 <- & 3\l138 <- Closure (mv(139), cp(1))\lCall\l"];
    X4f6bc10528c036e1_66 -> X4f6bc10528c036e1_70 [label="0"];
    X4f6bc10528c036e1_66 -> X4f6bc10528c036e1_67 [label="other"];
    X4f6bc10528c036e1_66 [label="SwitchInt mv(135)\l"];
    X4f6bc10528c036e1_67 -> X4f6bc10528c036e1_68 [label="145"];
    X4f6bc10528c036e1_67 [label="141 <- & 5\l142 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l140 <- Tuple (mv(141), mv(142))\l143 <- Use(cp(140.0))\l144 <- Use(cp(140.1))\lCall\l"];
    X4f6bc10528c036e1_68 -> X4f6bc10528c036e1_69 [label="0"];
    X4f6bc10528c036e1_68 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_68 [label="SwitchInt mv(145)\l"];
    X4f6bc10528c036e1_69 [label="146 <- Adt{0} ()\l148 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_70 -> X4f6bc10528c036e1_71 [label="151"];
    X4f6bc10528c036e1_70 [label="Call\l"];
    X4f6bc10528c036e1_71 -> X4f6bc10528c036e1_72 [label="150"];
    X4f6bc10528c036e1_71 [label="Call\l"];
    X4f6bc10528c036e1_72 -> X4f6bc10528c036e1_73 [label="155"];
    X4f6bc10528c036e1_72 [label="Call\l"];
    X4f6bc10528c036e1_73 -> X4f6bc10528c036e1_74 [label="154"];
    X4f6bc10528c036e1_73 [label="Call\l"];
    X4f6bc10528c036e1_74 -> X4f6bc10528c036e1_75;
    X4f6bc10528c036e1_74 [label="159 <- & 3\l162 <- Use(const ?_usize)\l163 <- Use(const ?_usize)\l164 <- Lt(cp(162), cp(163))\lAssert mv(164) == true\l"];
    X4f6bc10528c036e1_75 -> X4f6bc10528c036e1_76 [label="158"];
    X4f6bc10528c036e1_75 [label="161 <- & (*1)[_162]\l160 <- Tuple (cp(161))\lCall\l"];
    X4f6bc10528c036e1_76 -> X4f6bc10528c036e1_77;
    X4f6bc10528c036e1_76 [label="157 <- Use(cp(158.2))\l156 <- Cast-IntToInt mv(157)\l165 <- chkd-Add(cp(154), cp(156))\lAssert mv(165.1) == false\l"];
    X4f6bc10528c036e1_77 -> X4f6bc10528c036e1_78 [label="149"];
    X4f6bc10528c036e1_77 [label="153 <- Use(mv(165.0))\l152 <- Lt(const ?_usize, mv(153))\l167 <- & 3\l166 <- Closure (mv(167), cp(1))\lCall\l"];
    X4f6bc10528c036e1_78 -> X4f6bc10528c036e1_82 [label="0"];
    X4f6bc10528c036e1_78 -> X4f6bc10528c036e1_79 [label="other"];
    X4f6bc10528c036e1_78 [label="SwitchInt mv(149)\l"];
    X4f6bc10528c036e1_79 -> X4f6bc10528c036e1_80 [label="173"];
    X4f6bc10528c036e1_79 [label="169 <- & 5\l170 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l168 <- Tuple (mv(169), mv(170))\l171 <- Use(cp(168.0))\l172 <- Use(cp(168.1))\lCall\l"];
    X4f6bc10528c036e1_80 -> X4f6bc10528c036e1_81 [label="0"];
    X4f6bc10528c036e1_80 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_80 [label="SwitchInt mv(173)\l"];
    X4f6bc10528c036e1_81 [label="174 <- Adt{0} ()\l176 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_82 -> X4f6bc10528c036e1_83 [label="181"];
    X4f6bc10528c036e1_82 [label="Call\l"];
    X4f6bc10528c036e1_83 -> X4f6bc10528c036e1_84 [label="180"];
    X4f6bc10528c036e1_83 [label="Call\l"];
    X4f6bc10528c036e1_84 -> X4f6bc10528c036e1_85 [label="178"];
    X4f6bc10528c036e1_84 [label="179 <- &mut 180\lCall\l"];
    X4f6bc10528c036e1_85 -> X4f6bc10528c036e1_86 [label="177"];
    X4f6bc10528c036e1_85 [label="Call\l"];
    X4f6bc10528c036e1_86 -> X4f6bc10528c036e1_87 [label="45"];
    X4f6bc10528c036e1_86 -> X4f6bc10528c036e1_90 [label="other"];
    X4f6bc10528c036e1_86 [label="SwitchInt mv(177)\l"];
    X4f6bc10528c036e1_87 -> X4f6bc10528c036e1_88 [label="187"];
    X4f6bc10528c036e1_87 [label="183 <- & 5\l184 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l182 <- Tuple (mv(183), mv(184))\l185 <- Use(cp(182.0))\l186 <- Use(cp(182.1))\lCall\l"];
    X4f6bc10528c036e1_88 -> X4f6bc10528c036e1_89 [label="0"];
    X4f6bc10528c036e1_88 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_88 [label="SwitchInt mv(187)\l"];
    X4f6bc10528c036e1_89 [label="188 <- Adt{0} ()\l190 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_90 -> X4f6bc10528c036e1_91 [label="192"];
    X4f6bc10528c036e1_90 [label="Call\l"];
    X4f6bc10528c036e1_91 -> X4f6bc10528c036e1_92 [label="191"];
    X4f6bc10528c036e1_91 [label="Call\l"];
    X4f6bc10528c036e1_92 -> X4f6bc10528c036e1_96 [label="0"];
    X4f6bc10528c036e1_92 -> X4f6bc10528c036e1_93 [label="other"];
    X4f6bc10528c036e1_92 [label="SwitchInt mv(191)\l"];
    X4f6bc10528c036e1_93 -> X4f6bc10528c036e1_94 [label="198"];
    X4f6bc10528c036e1_93 [label="194 <- & 5\l195 <- Use(const &core::result::Result<(), pinocchio::program_error::ProgramError>)\l193 <- Tuple (mv(194), mv(195))\l196 <- Use(cp(193.0))\l197 <- Use(cp(193.1))\lCall\l"];
    X4f6bc10528c036e1_94 -> X4f6bc10528c036e1_95 [label="0"];
    X4f6bc10528c036e1_94 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_94 [label="SwitchInt mv(198)\l"];
    X4f6bc10528c036e1_95 [label="199 <- Adt{0} ()\l201 <- Adt{0} ()\lCall\l"];
    X4f6bc10528c036e1_96 -> X4f6bc10528c036e1_97 [label="204"];
    X4f6bc10528c036e1_96 [label="Call\l"];
    X4f6bc10528c036e1_97 -> X4f6bc10528c036e1_98 [label="203"];
    X4f6bc10528c036e1_97 [label="Call\l"];
    X4f6bc10528c036e1_98 -> X4f6bc10528c036e1_99 [label="206"];
    X4f6bc10528c036e1_98 [label="Call\l"];
    X4f6bc10528c036e1_99 -> X4f6bc10528c036e1_100 [label="208"];
    X4f6bc10528c036e1_99 [label="Call\l"];
    X4f6bc10528c036e1_100 -> X4f6bc10528c036e1_101 [label="207"];
    X4f6bc10528c036e1_100 [label="Call\l"];
    X4f6bc10528c036e1_101 -> X4f6bc10528c036e1_102 [label="209"];
    X4f6bc10528c036e1_101 [label="Call\l"];
    X4f6bc10528c036e1_102 -> X4f6bc10528c036e1_103 [label="212"];
    X4f6bc10528c036e1_102 [label="Call\l"];
    X4f6bc10528c036e1_103 -> X4f6bc10528c036e1_104 [label="214"];
    X4f6bc10528c036e1_103 [label="211 <- & 212\l215 <- Use(const &str)\lCall\l"];
    X4f6bc10528c036e1_104 -> X4f6bc10528c036e1_105 [label="210"];
    X4f6bc10528c036e1_104 [label="213 <- & 214\lCall\l"];
    X4f6bc10528c036e1_105 -> X4f6bc10528c036e1_109 [label="255"];
    X4f6bc10528c036e1_105 -> X4f6bc10528c036e1_107 [label="0"];
    X4f6bc10528c036e1_105 -> X4f6bc10528c036e1_108 [label="1"];
    X4f6bc10528c036e1_105 -> X4f6bc10528c036e1_106 [label="other"];
    X4f6bc10528c036e1_105 [label="216 <- Discriminant(210)\lSwitchInt mv(216)\l"];
    X4f6bc10528c036e1_106 [label="Unreachable\l"];
    X4f6bc10528c036e1_107 -> X4f6bc10528c036e1_110 [label="205"];
    X4f6bc10528c036e1_107 [label="217 <- Use(const &&str)\l219 <- Use(cp(209))\l218 <- & 219\lCall\l"];
    X4f6bc10528c036e1_108 -> X4f6bc10528c036e1_110;
    X4f6bc10528c036e1_108 [label="205 <- Use(const bool)\lGoto\l"];
    X4f6bc10528c036e1_109 -> X4f6bc10528c036e1_110;
    X4f6bc10528c036e1_109 [label="205 <- Use(const bool)\lGoto\l"];
    X4f6bc10528c036e1_110 -> X4f6bc10528c036e1_111 [label="202"];
    X4f6bc10528c036e1_110 [label="Call\l"];
    X4f6bc10528c036e1_111 -> X4f6bc10528c036e1_112 [label="0"];
    X4f6bc10528c036e1_111 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_111 [label="SwitchInt mv(202)\l"];
    X4f6bc10528c036e1_112 -> X4f6bc10528c036e1_113 [label="220"];
    X4f6bc10528c036e1_112 [label="221 <- & 5\lCall\l"];
    X4f6bc10528c036e1_113 -> X4f6bc10528c036e1_114 [label="0"];
    X4f6bc10528c036e1_113 -> X4f6bc10528c036e1_115 [label="other"];
    X4f6bc10528c036e1_113 [label="SwitchInt mv(220)\l"];
    X4f6bc10528c036e1_114 [label="Call\l"];
    X4f6bc10528c036e1_115 [label="0 <- Use(mv(5))\lReturn\l"];
  }
  X4f6bc10528c036e1_0 -> X8c181cd43c321574_0 [label="cp(2)"];
  X4f6bc10528c036e1_1 -> X2a3898e75ae96cb0_0 [label="mv(6),cp(2)"];
  X4f6bc10528c036e1_2 -> X64871406d1d9af4_0 [label="mv(8)"];
  X4f6bc10528c036e1_4 -> X9e1a89bd60e7c0af_0 [label="cp(12),cp(13)"];
  X4f6bc10528c036e1_6 -> X9b376999e062dfdd_0 [label="mv(15),cp(12),cp(13),mv(17)"];
  X4f6bc10528c036e1_8 -> X9e1a89bd60e7c0af_0 [label="cp(24),cp(25)"];
  X4f6bc10528c036e1_10 -> X9b376999e062dfdd_0 [label="mv(27),cp(24),cp(25),mv(29)"];
  X4f6bc10528c036e1_12 -> Xdc861846860b6105_0 [label="mv(33)"];
  X4f6bc10528c036e1_13 -> Xb00517a14aa1c357_0 [label="mv(31),mv(37)"];
  X4f6bc10528c036e1_15 -> X9e1a89bd60e7c0af_0 [label="cp(41),cp(42)"];
  X4f6bc10528c036e1_17 -> X9b376999e062dfdd_0 [label="mv(44),cp(41),cp(42),mv(46)"];
  X4f6bc10528c036e1_19 -> Xc4d065469025948c_0 [label="mv(49)"];
  X4f6bc10528c036e1_21 -> X9e1a89bd60e7c0af_0 [label="cp(56),cp(57)"];
  X4f6bc10528c036e1_23 -> X9b376999e062dfdd_0 [label="mv(59),cp(56),cp(57),mv(61)"];
  X4f6bc10528c036e1_25 -> Xa836e23be54fe787_0 [label="mv(66),mv(67)"];
  X4f6bc10528c036e1_26 -> X81eb37da80f6fb85_0 [label="mv(64)"];
  X4f6bc10528c036e1_27 -> X4808404a084b92a1_0 [label="mv(63)"];
  X4f6bc10528c036e1_29 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_30 -> X9e1a89bd60e7c0af_0 [label="cp(75),cp(76)"];
  X4f6bc10528c036e1_32 -> X9b376999e062dfdd_0 [label="mv(78),cp(75),cp(76),mv(80)"];
  X4f6bc10528c036e1_33 -> Xedc5819149df218c_0 [label="cp(82)"];
  X4f6bc10528c036e1_35 -> X9e1a89bd60e7c0af_0 [label="cp(86),cp(87)"];
  X4f6bc10528c036e1_37 -> X9b376999e062dfdd_0 [label="mv(89),cp(86),cp(87),mv(91)"];
  X4f6bc10528c036e1_38 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_39 -> X2be9bd600168849f_0 [label="mv(93),mv(95)"];
  X4f6bc10528c036e1_41 -> X9e1a89bd60e7c0af_0 [label="cp(99),cp(100)"];
  X4f6bc10528c036e1_43 -> X9b376999e062dfdd_0 [label="mv(102),cp(99),cp(100),mv(104)"];
  X4f6bc10528c036e1_44 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_45 -> X4a1a662fe4c6cd2b_0 [label="cp(109)"];
  X4f6bc10528c036e1_46 -> Xdbeb23f3b0b50d09_0 [label="mv(108),const {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}"];
  X4f6bc10528c036e1_47 -> X350049e7b5580d45_0 [label="mv(107)"];
  X4f6bc10528c036e1_49 -> X9e1a89bd60e7c0af_0 [label="cp(113),cp(114)"];
  X4f6bc10528c036e1_51 -> X9b376999e062dfdd_0 [label="mv(116),cp(113),cp(114),mv(118)"];
  X4f6bc10528c036e1_52 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_53 -> X85f32405e1fc45be_0 [label="cp(120),const char"];
  X4f6bc10528c036e1_55 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_56 -> X4a1a662fe4c6cd2b_0 [label="cp(125)"];
  X4f6bc10528c036e1_57 -> X2b41c57b1a779fee_0 [label="mv(124),const ?_usize"];
  X4f6bc10528c036e1_58 -> Xc58124057b7df470_0 [label="mv(122),const {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}"];
  X4f6bc10528c036e1_60 -> X9e1a89bd60e7c0af_0 [label="cp(129),cp(130)"];
  X4f6bc10528c036e1_62 -> X9b376999e062dfdd_0 [label="mv(132),cp(129),cp(130),mv(134)"];
  X4f6bc10528c036e1_63 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_64 -> X88c36d043b5866fd_0 [label="cp(137),const char"];
  X4f6bc10528c036e1_65 -> X62232bb2a2bdeca5_0 [label="mv(136),const bool,mv(138)"];
  X4f6bc10528c036e1_67 -> X9e1a89bd60e7c0af_0 [label="cp(143),cp(144)"];
  X4f6bc10528c036e1_69 -> X9b376999e062dfdd_0 [label="mv(146),cp(143),cp(144),mv(148)"];
  X4f6bc10528c036e1_70 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_71 -> X88c36d043b5866fd_0 [label="cp(151),const char"];
  X4f6bc10528c036e1_72 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_73 -> X90c8538ce85c085c_0 [label="cp(155)"];
  X4f6bc10528c036e1_75 -> Xa836e23be54fe787_0 [label="mv(159),mv(160)"];
  X4f6bc10528c036e1_77 -> X6fa8be28febd3a3e_0 [label="mv(150),mv(152),mv(166)"];
  X4f6bc10528c036e1_79 -> X9e1a89bd60e7c0af_0 [label="cp(171),cp(172)"];
  X4f6bc10528c036e1_81 -> X9b376999e062dfdd_0 [label="mv(174),cp(171),cp(172),mv(176)"];
  X4f6bc10528c036e1_82 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_83 -> X4a1a662fe4c6cd2b_0 [label="cp(181)"];
  X4f6bc10528c036e1_84 -> Xe7a56560380956ca_0 [label="mv(179),const ?_usize"];
  X4f6bc10528c036e1_85 -> X6bf096f35ac69de9_0 [label="mv(178)"];
  X4f6bc10528c036e1_87 -> X9e1a89bd60e7c0af_0 [label="cp(185),cp(186)"];
  X4f6bc10528c036e1_89 -> X9b376999e062dfdd_0 [label="mv(188),cp(185),cp(186),mv(190)"];
  X4f6bc10528c036e1_90 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_91 -> X878525d2649db5e0_0 [label="cp(192),const {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}"];
  X4f6bc10528c036e1_93 -> X9e1a89bd60e7c0af_0 [label="cp(196),cp(197)"];
  X4f6bc10528c036e1_95 -> X9b376999e062dfdd_0 [label="mv(199),cp(196),cp(197),mv(201)"];
  X4f6bc10528c036e1_96 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_97 -> X88c36d043b5866fd_0 [label="cp(204),const char"];
  X4f6bc10528c036e1_98 -> X8cc68936facb7d54_0 [label="cp(4)"];
  X4f6bc10528c036e1_99 -> X1f226572c767e3da_0 [label="cp(206),const char"];
  X4f6bc10528c036e1_100 -> Xdad428174f5e039f_0 [label="mv(208),cp(206)"];
  X4f6bc10528c036e1_101 -> X415ffaba2ced770a_0 [label="cp(207),const char"];
  X4f6bc10528c036e1_102 -> X90c8538ce85c085c_0 [label="cp(209)"];
  X4f6bc10528c036e1_103 -> X90c8538ce85c085c_0 [label="mv(215)"];
  X4f6bc10528c036e1_104 -> Xf9c0f98a7bd601c9_0 [label="mv(211),cp(213)"];
  X4f6bc10528c036e1_107 -> Xfd5c4e00a0c381bb_0 [label="mv(217),mv(218)"];
  X4f6bc10528c036e1_110 -> X15bdb1a1fa13734e_0 [label="mv(203),mv(205),const {closure@p-token/src/entrypoint.rs:1427:9: 1427:24}"];
  X4f6bc10528c036e1_112 -> X5bb54cf35e56a69b_0 [label="mv(221)"];
  X4f6bc10528c036e1_114 -> Xac08878333d72e42_0 [label="const &str"];
  subgraph cluster_42 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#3}";
    style="filled";
    color=lightgray;
    node_43 [label="LOCALS\l0 = bool\l1 = {closure@p-token/src/entrypoint.rs:1399:64: 1399:75}\l2 = (&str, &str)\l3 = &str\l4 = usize\l5 = u8\l6 = pinocchio_token_interface::state::mint::Mint\l7 = (&pinocchio::account_info::AccountInfo,)\l8 = &pinocchio::account_info::AccountInfo\l9 = usize\l10 = usize\l11 = bool\l12 = usize\l13 = &str\l14 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l15 = &[pinocchio::account_info::AccountInfo; 1]\l", style="filled", color=palegreen3];
    X507034ae9f8d1d43_0 -> X507034ae9f8d1d43_1;
    X507034ae9f8d1d43_0 [label="3 <- Use(cp(2.1))\l14 <- CopyForDeref(1.0)\l9 <- Use(const ?_usize)\l10 <- Use(const ?_usize)\l11 <- Lt(cp(9), cp(10))\lAssert mv(11) == true\l"];
    X507034ae9f8d1d43_1 -> X507034ae9f8d1d43_2 [label="6"];
    X507034ae9f8d1d43_1 [label="15 <- CopyForDeref(1.1)\l8 <- & (*15)[_9]\l7 <- Tuple (cp(8))\lCall\l"];
    X507034ae9f8d1d43_2 -> X507034ae9f8d1d43_3 [label="13"];
    X507034ae9f8d1d43_2 [label="5 <- Use(cp(6.2))\l4 <- Cast-IntToInt mv(5)\lCall\l"];
    X507034ae9f8d1d43_3 -> X507034ae9f8d1d43_4 [label="12"];
    X507034ae9f8d1d43_3 [label="Call\l"];
    X507034ae9f8d1d43_4 [label="0 <- Lt(mv(4), mv(12))\lReturn\l"];
  }
  X507034ae9f8d1d43_1 -> Xa836e23be54fe787_0 [label="cp(14),mv(7)"];
  X507034ae9f8d1d43_2 -> X1440fc12115968ff_0 [label="cp(3),const char"];
  X507034ae9f8d1d43_3 -> X90c8538ce85c085c_0 [label="cp(13)"];
  subgraph cluster_44 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#5}";
    style="filled";
    color=lightgray;
    node_45 [label="LOCALS\l0 = bool\l1 = &{closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l2 = char\l3 = bool\l", style="filled", color=palegreen3];
    Xdf8cef9e30e66782_0 -> Xdf8cef9e30e66782_1 [label="3"];
    Xdf8cef9e30e66782_0 [label="Call\l"];
    Xdf8cef9e30e66782_1 -> Xdf8cef9e30e66782_2 [label="0"];
    Xdf8cef9e30e66782_1 -> Xdf8cef9e30e66782_4 [label="other"];
    Xdf8cef9e30e66782_1 [label="SwitchInt mv(3)\l"];
    Xdf8cef9e30e66782_2 -> Xdf8cef9e30e66782_4 [label="43"];
    Xdf8cef9e30e66782_2 -> Xdf8cef9e30e66782_3 [label="other"];
    Xdf8cef9e30e66782_2 [label="SwitchInt cp(2)\l"];
    Xdf8cef9e30e66782_3 -> Xdf8cef9e30e66782_5;
    Xdf8cef9e30e66782_3 [label="0 <- Ne(cp(2), const char)\lGoto\l"];
    Xdf8cef9e30e66782_4 -> Xdf8cef9e30e66782_5;
    Xdf8cef9e30e66782_4 [label="0 <- Use(const bool)\lGoto\l"];
    Xdf8cef9e30e66782_5 [label="Return\l"];
  }
  Xdf8cef9e30e66782_0 -> X29ec41623bcab054_0 [label="cp(2),const ?_u32"];
  subgraph cluster_46 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#6}";
    style="filled";
    color=lightgray;
    node_47 [label="LOCALS\l0 = bool\l1 = {closure@p-token/src/entrypoint.rs:1427:9: 1427:24}\l2 = (&str, &str)\l3 = &str\l4 = &str\l5 = &str\l6 = core::option::Option<&str>\l7 = &str\l8 = &str\l9 = bool\l10 = usize\l11 = usize\l12 = usize\l13 = &str\l14 = (usize, bool)\l15 = core::cmp::Ordering\l16 = &usize\l17 = &usize\l18 = usize\l19 = &str\l20 = i8\l21 = bool\l22 = usize\l23 = usize\l24 = &str\l25 = &str\l26 = &str\l27 = (&str, &str)\l28 = &str\l29 = usize\l30 = bool\l31 = &&str\l32 = &&str\l33 = &str\l34 = bool\l35 = &&str\l36 = &&str\l37 = &&str\l38 = &&str\l39 = &str\l", style="filled", color=palegreen3];
    Xcad86353dd45ac7e_0 -> Xcad86353dd45ac7e_1 [label="6"];
    Xcad86353dd45ac7e_0 [label="3 <- Use(cp(2.0))\l4 <- Use(cp(2.1))\lCall\l"];
    Xcad86353dd45ac7e_1 -> Xcad86353dd45ac7e_2 [label="5"];
    Xcad86353dd45ac7e_1 [label="Call\l"];
    Xcad86353dd45ac7e_2 -> Xcad86353dd45ac7e_3 [label="7"];
    Xcad86353dd45ac7e_2 [label="Call\l"];
    Xcad86353dd45ac7e_3 -> Xcad86353dd45ac7e_4 [label="9"];
    Xcad86353dd45ac7e_3 [label="Call\l"];
    Xcad86353dd45ac7e_4 -> Xcad86353dd45ac7e_6 [label="0"];
    Xcad86353dd45ac7e_4 -> Xcad86353dd45ac7e_5 [label="other"];
    Xcad86353dd45ac7e_4 [label="SwitchInt mv(9)\l"];
    Xcad86353dd45ac7e_5 -> Xcad86353dd45ac7e_7 [label="8"];
    Xcad86353dd45ac7e_5 [label="Call\l"];
    Xcad86353dd45ac7e_6 -> Xcad86353dd45ac7e_7;
    Xcad86353dd45ac7e_6 [label="8 <- Use(cp(4))\lGoto\l"];
    Xcad86353dd45ac7e_7 -> Xcad86353dd45ac7e_8 [label="11"];
    Xcad86353dd45ac7e_7 [label="Call\l"];
    Xcad86353dd45ac7e_8 -> Xcad86353dd45ac7e_9 [label="12"];
    Xcad86353dd45ac7e_8 [label="13 <- Use(cp(8))\lCall\l"];
    Xcad86353dd45ac7e_9 -> Xcad86353dd45ac7e_10;
    Xcad86353dd45ac7e_9 [label="14 <- chkd-Add(cp(11), cp(12))\lAssert mv(14.1) == false\l"];
    Xcad86353dd45ac7e_10 -> Xcad86353dd45ac7e_11 [label="18"];
    Xcad86353dd45ac7e_10 [label="10 <- Use(mv(14.0))\l16 <- & 10\l19 <- Use(const &str)\lCall\l"];
    Xcad86353dd45ac7e_11 -> Xcad86353dd45ac7e_12 [label="15"];
    Xcad86353dd45ac7e_11 [label="17 <- & 18\lCall\l"];
    Xcad86353dd45ac7e_12 -> Xcad86353dd45ac7e_16 [label="255"];
    Xcad86353dd45ac7e_12 -> Xcad86353dd45ac7e_14 [label="0"];
    Xcad86353dd45ac7e_12 -> Xcad86353dd45ac7e_15 [label="1"];
    Xcad86353dd45ac7e_12 -> Xcad86353dd45ac7e_13 [label="other"];
    Xcad86353dd45ac7e_12 [label="20 <- Discriminant(15)\lSwitchInt mv(20)\l"];
    Xcad86353dd45ac7e_13 [label="Unreachable\l"];
    Xcad86353dd45ac7e_14 -> Xcad86353dd45ac7e_17 [label="22"];
    Xcad86353dd45ac7e_14 [label="Call\l"];
    Xcad86353dd45ac7e_15 -> Xcad86353dd45ac7e_29;
    Xcad86353dd45ac7e_15 [label="0 <- Use(const bool)\lGoto\l"];
    Xcad86353dd45ac7e_16 -> Xcad86353dd45ac7e_29;
    Xcad86353dd45ac7e_16 [label="0 <- Use(const bool)\lGoto\l"];
    Xcad86353dd45ac7e_17 -> Xcad86353dd45ac7e_18 [label="23"];
    Xcad86353dd45ac7e_17 [label="24 <- Use(const &str)\lCall\l"];
    Xcad86353dd45ac7e_18 -> Xcad86353dd45ac7e_20 [label="0"];
    Xcad86353dd45ac7e_18 -> Xcad86353dd45ac7e_19 [label="other"];
    Xcad86353dd45ac7e_18 [label="21 <- Gt(mv(22), mv(23))\lSwitchInt mv(21)\l"];
    Xcad86353dd45ac7e_19 -> Xcad86353dd45ac7e_29;
    Xcad86353dd45ac7e_19 [label="0 <- Use(const bool)\lGoto\l"];
    Xcad86353dd45ac7e_20 -> Xcad86353dd45ac7e_21 [label="29"];
    Xcad86353dd45ac7e_20 [label="28 <- Use(const &str)\lCall\l"];
    Xcad86353dd45ac7e_21 -> Xcad86353dd45ac7e_22 [label="27"];
    Xcad86353dd45ac7e_21 [label="Call\l"];
    Xcad86353dd45ac7e_22 -> Xcad86353dd45ac7e_23 [label="30"];
    Xcad86353dd45ac7e_22 [label="25 <- Use(cp(27.0))\l26 <- Use(cp(27.1))\l31 <- & 7\l33 <- Use(cp(25))\l32 <- & 33\lCall\l"];
    Xcad86353dd45ac7e_23 -> Xcad86353dd45ac7e_25 [label="0"];
    Xcad86353dd45ac7e_23 -> Xcad86353dd45ac7e_24 [label="other"];
    Xcad86353dd45ac7e_23 [label="SwitchInt mv(30)\l"];
    Xcad86353dd45ac7e_24 -> Xcad86353dd45ac7e_29;
    Xcad86353dd45ac7e_24 [label="0 <- Use(const bool)\lGoto\l"];
    Xcad86353dd45ac7e_25 -> Xcad86353dd45ac7e_26 [label="34"];
    Xcad86353dd45ac7e_25 [label="35 <- & 7\l36 <- & 25\lCall\l"];
    Xcad86353dd45ac7e_26 -> Xcad86353dd45ac7e_28 [label="0"];
    Xcad86353dd45ac7e_26 -> Xcad86353dd45ac7e_27 [label="other"];
    Xcad86353dd45ac7e_26 [label="SwitchInt mv(34)\l"];
    Xcad86353dd45ac7e_27 -> Xcad86353dd45ac7e_29 [label="0"];
    Xcad86353dd45ac7e_27 [label="37 <- & 8\l39 <- Use(cp(26))\l38 <- & 39\lCall\l"];
    Xcad86353dd45ac7e_28 -> Xcad86353dd45ac7e_29;
    Xcad86353dd45ac7e_28 [label="0 <- Use(const bool)\lGoto\l"];
    Xcad86353dd45ac7e_29 [label="Return\l"];
  }
  Xcad86353dd45ac7e_0 -> X1f226572c767e3da_0 [label="cp(3),const char"];
  Xcad86353dd45ac7e_1 -> Xdad428174f5e039f_0 [label="mv(6),cp(3)"];
  Xcad86353dd45ac7e_2 -> X415ffaba2ced770a_0 [label="cp(5),const char"];
  Xcad86353dd45ac7e_3 -> Xedc5819149df218c_0 [label="cp(7)"];
  Xcad86353dd45ac7e_5 -> X415ffaba2ced770a_0 [label="cp(4),const char"];
  Xcad86353dd45ac7e_7 -> X90c8538ce85c085c_0 [label="cp(7)"];
  Xcad86353dd45ac7e_8 -> X90c8538ce85c085c_0 [label="mv(13)"];
  Xcad86353dd45ac7e_10 -> X90c8538ce85c085c_0 [label="mv(19)"];
  Xcad86353dd45ac7e_11 -> Xf9c0f98a7bd601c9_0 [label="mv(16),cp(17)"];
  Xcad86353dd45ac7e_14 -> X90c8538ce85c085c_0 [label="cp(7)"];
  Xcad86353dd45ac7e_17 -> X90c8538ce85c085c_0 [label="mv(24)"];
  Xcad86353dd45ac7e_20 -> X90c8538ce85c085c_0 [label="cp(7)"];
  Xcad86353dd45ac7e_21 -> X5bb7b3b3df1f1b04_0 [label="mv(28),mv(29)"];
  Xcad86353dd45ac7e_22 -> X18cc43720f5c1f92_0 [label="mv(31),mv(32)"];
  Xcad86353dd45ac7e_25 -> X2be9bd600168849f_0 [label="mv(35),mv(36)"];
  Xcad86353dd45ac7e_27 -> X18cc43720f5c1f92_0 [label="mv(37),mv(38)"];
  subgraph cluster_48 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#1}";
    style="filled";
    color=lightgray;
    node_49 [label="LOCALS\l0 = bool\l1 = &mut {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}\l2 = &char\l3 = char\l", style="filled", color=palegreen3];
    X895e0fc700d07783_0 [label="3 <- Use(cp((*2)))\l0 <- Eq(cp(3), const char)\lReturn\l"];
  }
  subgraph cluster_50 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#0}";
    style="filled";
    color=lightgray;
    node_51 [label="LOCALS\l0 = pinocchio_token_interface::state::mint::Mint\l1 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l2 = &pinocchio::account_info::AccountInfo\l3 = *const pinocchio_token_interface::state::mint::Mint\l4 = *const u8\l5 = &[u8]\l", style="filled", color=palegreen3];
    Xa836e23be54fe787_0 -> Xa836e23be54fe787_1 [label="5"];
    Xa836e23be54fe787_0 [label="Call\l"];
    Xa836e23be54fe787_1 -> Xa836e23be54fe787_2 [label="4"];
    Xa836e23be54fe787_1 [label="Call\l"];
    Xa836e23be54fe787_2 -> Xa836e23be54fe787_3 [label="0"];
    Xa836e23be54fe787_2 [label="3 <- Cast-PtrToPtr mv(4)\lCall\l"];
    Xa836e23be54fe787_3 [label="Return\l"];
  }
  Xa836e23be54fe787_0 -> X18b054a9564b373a_0 [label="cp(2)"];
  Xa836e23be54fe787_1 -> X9e6ee8713e773f38_0 [label="cp(5)"];
  Xa836e23be54fe787_2 -> Xe54069678bfda177_0 [label="mv(3)"];
  subgraph cluster_52 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#4}";
    style="filled";
    color=lightgray;
    node_53 [label="LOCALS\l0 = bool\l1 = {closure@p-token/src/entrypoint.rs:1403:9: 1403:20}\l2 = (&str, &str)\l3 = &str\l4 = usize\l5 = usize\l6 = usize\l7 = u8\l8 = pinocchio_token_interface::state::mint::Mint\l9 = (&pinocchio::account_info::AccountInfo,)\l10 = &pinocchio::account_info::AccountInfo\l11 = usize\l12 = usize\l13 = bool\l14 = (usize, bool)\l15 = &{closure@p-token/src/entrypoint.rs:1368:20: 1368:48}\l16 = &[pinocchio::account_info::AccountInfo; 1]\l", style="filled", color=palegreen3];
    X8696a9ad384c1cfe_0 -> X8696a9ad384c1cfe_1 [label="5"];
    X8696a9ad384c1cfe_0 [label="3 <- Use(cp(2.0))\lCall\l"];
    X8696a9ad384c1cfe_1 -> X8696a9ad384c1cfe_2;
    X8696a9ad384c1cfe_1 [label="15 <- CopyForDeref(1.0)\l11 <- Use(const ?_usize)\l12 <- Use(const ?_usize)\l13 <- Lt(cp(11), cp(12))\lAssert mv(13) == true\l"];
    X8696a9ad384c1cfe_2 -> X8696a9ad384c1cfe_3 [label="8"];
    X8696a9ad384c1cfe_2 [label="16 <- CopyForDeref(1.1)\l10 <- & (*16)[_11]\l9 <- Tuple (cp(10))\lCall\l"];
    X8696a9ad384c1cfe_3 -> X8696a9ad384c1cfe_4;
    X8696a9ad384c1cfe_3 [label="7 <- Use(cp(8.2))\l6 <- Cast-IntToInt mv(7)\l14 <- chkd-Add(cp(5), cp(6))\lAssert mv(14.1) == false\l"];
    X8696a9ad384c1cfe_4 [label="4 <- Use(mv(14.0))\l0 <- Lt(const ?_usize, mv(4))\lReturn\l"];
  }
  X8696a9ad384c1cfe_0 -> X90c8538ce85c085c_0 [label="cp(3)"];
  X8696a9ad384c1cfe_2 -> Xa836e23be54fe787_0 [label="cp(15),mv(9)"];
  subgraph cluster_54 {
    label="entrypoint::test_process_\nui_amount_to_amount::{clo\nsure#2}";
    style="filled";
    color=lightgray;
    node_55 [label="LOCALS\l0 = bool\l1 = &mut {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}\l2 = char\l", style="filled", color=palegreen3];
    X6896d4fe494131cc_0 [label="0 <- Eq(cp(2), const char)\lReturn\l"];
  }
  subgraph cluster_56 {
    label="entrypoint::inner_process\n_remaining_instruction";
    style="filled";
    color=lightgray;
    node_57 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = u8\l4 = &[pinocchio::account_info::AccountInfo; 1]\l5 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l", style="filled", color=palegreen3];
    Xda53248c0718102a_0 -> Xda53248c0718102a_2 [label="24"];
    Xda53248c0718102a_0 -> Xda53248c0718102a_1 [label="other"];
    Xda53248c0718102a_0 [label="SwitchInt cp(3)\l"];
    Xda53248c0718102a_1 -> Xda53248c0718102a_5;
    Xda53248c0718102a_1 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xda53248c0718102a_2 -> Xda53248c0718102a_3 [label="5"];
    Xda53248c0718102a_2 [label="Call\l"];
    Xda53248c0718102a_3 -> Xda53248c0718102a_4 [label="4"];
    Xda53248c0718102a_3 [label="Call\l"];
    Xda53248c0718102a_4 -> Xda53248c0718102a_5 [label="0"];
    Xda53248c0718102a_4 [label="Call\l"];
    Xda53248c0718102a_5 [label="Return\l"];
  }
  Xda53248c0718102a_2 -> Xfc3dc8b7260a8e64_0 [label="cp(1)"];
  Xda53248c0718102a_3 -> X5d66149d59dd555d_0 [label="mv(5)"];
  Xda53248c0718102a_4 -> X4f6bc10528c036e1_0 [label="cp(4),cp(2)"];
  subgraph cluster_58 {
    label="entrypoint::log_error";
    style="filled";
    color=lightgray;
    node_59 [label="LOCALS\l0 = ()\l1 = &pinocchio::program_error::ProgramError\l2 = ()\l3 = &str\l", style="filled", color=palegreen3];
    X874533c11eb9abdb_0 -> X874533c11eb9abdb_1 [label="3"];
    X874533c11eb9abdb_0 [label="Call\l"];
    X874533c11eb9abdb_1 -> X874533c11eb9abdb_2 [label="2"];
    X874533c11eb9abdb_1 [label="Call\l"];
    X874533c11eb9abdb_2 [label="Return\l"];
  }
  X874533c11eb9abdb_0 -> Xa3178b9ab8d38373_0 [label="cp(1)"];
  X874533c11eb9abdb_1 -> Xf793977e1a6d5f00_0 [label="cp(3)"];
  subgraph cluster_60 {
    label="processor::check_account_\nowner";
    style="filled";
    color=lightgray;
    node_61 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &pinocchio::account_info::AccountInfo\l2 = bool\l3 = &[u8; 32]\l4 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xaa2da689ad7cc07b_0 -> Xaa2da689ad7cc07b_1 [label="2"];
    Xaa2da689ad7cc07b_0 [label="3 <- Use(const &[u8; 32])\lCall\l"];
    Xaa2da689ad7cc07b_1 -> Xaa2da689ad7cc07b_3 [label="0"];
    Xaa2da689ad7cc07b_1 -> Xaa2da689ad7cc07b_2 [label="other"];
    Xaa2da689ad7cc07b_1 [label="SwitchInt mv(2)\l"];
    Xaa2da689ad7cc07b_2 -> Xaa2da689ad7cc07b_4;
    Xaa2da689ad7cc07b_2 [label="0 <- Adt{0} (const ())\lGoto\l"];
    Xaa2da689ad7cc07b_3 -> Xaa2da689ad7cc07b_4;
    Xaa2da689ad7cc07b_3 [label="4 <- Adt{6} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    Xaa2da689ad7cc07b_4 [label="Return\l"];
  }
  Xaa2da689ad7cc07b_0 -> X59e9e813b3803772_0 [label="cp(1),cp(3)"];
  subgraph cluster_62 {
    label="processor::ui_amount_to_a\nmount::process_ui_amount_\nto_amount";
    style="filled";
    color=lightgray;
    node_63 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &str>\l4 = core::result::Result<&str, pinocchio_token_interface::error::TokenError>\l5 = core::result::Result<&str, core::str::Utf8Error>\l6 = isize\l7 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l8 = &str\l9 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l10 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l11 = core::option::Option<&pinocchio::account_info::AccountInfo>\l12 = pinocchio::program_error::ProgramError\l13 = isize\l14 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l15 = &pinocchio::account_info::AccountInfo\l16 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l17 = core::result::Result<(), pinocchio::program_error::ProgramError>\l18 = isize\l19 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l20 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &pinocchio_token_interface::state::mint::Mint>\l21 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l22 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l23 = &[u8]\l24 = isize\l25 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l26 = &pinocchio_token_interface::state::mint::Mint\l27 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, u64>\l28 = core::result::Result<u64, pinocchio::program_error::ProgramError>\l29 = u8\l30 = isize\l31 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l32 = u64\l33 = ()\l34 = &[u8]\l35 = &[u8; 8]\l36 = [u8; 8]\l", style="filled", color=palegreen3];
    X2a3898e75ae96cb0_0 -> X2a3898e75ae96cb0_1 [label="5"];
    X2a3898e75ae96cb0_0 [label="Call\l"];
    X2a3898e75ae96cb0_1 -> X2a3898e75ae96cb0_2 [label="4"];
    X2a3898e75ae96cb0_1 [label="Call\l"];
    X2a3898e75ae96cb0_2 -> X2a3898e75ae96cb0_3 [label="3"];
    X2a3898e75ae96cb0_2 [label="Call\l"];
    X2a3898e75ae96cb0_3 -> X2a3898e75ae96cb0_5 [label="0"];
    X2a3898e75ae96cb0_3 -> X2a3898e75ae96cb0_6 [label="1"];
    X2a3898e75ae96cb0_3 -> X2a3898e75ae96cb0_4 [label="other"];
    X2a3898e75ae96cb0_3 [label="6 <- Discriminant(3)\lSwitchInt mv(6)\l"];
    X2a3898e75ae96cb0_4 [label="Unreachable\l"];
    X2a3898e75ae96cb0_5 -> X2a3898e75ae96cb0_7 [label="11"];
    X2a3898e75ae96cb0_5 [label="8 <- Use(cp((3 as variant 0).0))\lCall\l"];
    X2a3898e75ae96cb0_6 -> X2a3898e75ae96cb0_28 [label="0"];
    X2a3898e75ae96cb0_6 [label="7 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X2a3898e75ae96cb0_7 -> X2a3898e75ae96cb0_8 [label="10"];
    X2a3898e75ae96cb0_7 [label="12 <- Adt{10} ()\lCall\l"];
    X2a3898e75ae96cb0_8 -> X2a3898e75ae96cb0_9 [label="9"];
    X2a3898e75ae96cb0_8 [label="Call\l"];
    X2a3898e75ae96cb0_9 -> X2a3898e75ae96cb0_10 [label="0"];
    X2a3898e75ae96cb0_9 -> X2a3898e75ae96cb0_11 [label="1"];
    X2a3898e75ae96cb0_9 -> X2a3898e75ae96cb0_4 [label="other"];
    X2a3898e75ae96cb0_9 [label="13 <- Discriminant(9)\lSwitchInt mv(13)\l"];
    X2a3898e75ae96cb0_10 -> X2a3898e75ae96cb0_12 [label="17"];
    X2a3898e75ae96cb0_10 [label="15 <- Use(cp((9 as variant 0).0))\lCall\l"];
    X2a3898e75ae96cb0_11 -> X2a3898e75ae96cb0_28 [label="0"];
    X2a3898e75ae96cb0_11 [label="14 <- Use(mv((9 as variant 1).0))\lCall\l"];
    X2a3898e75ae96cb0_12 -> X2a3898e75ae96cb0_13 [label="16"];
    X2a3898e75ae96cb0_12 [label="Call\l"];
    X2a3898e75ae96cb0_13 -> X2a3898e75ae96cb0_14 [label="0"];
    X2a3898e75ae96cb0_13 -> X2a3898e75ae96cb0_15 [label="1"];
    X2a3898e75ae96cb0_13 -> X2a3898e75ae96cb0_4 [label="other"];
    X2a3898e75ae96cb0_13 [label="18 <- Discriminant(16)\lSwitchInt mv(18)\l"];
    X2a3898e75ae96cb0_14 -> X2a3898e75ae96cb0_16 [label="23"];
    X2a3898e75ae96cb0_14 [label="Call\l"];
    X2a3898e75ae96cb0_15 -> X2a3898e75ae96cb0_28 [label="0"];
    X2a3898e75ae96cb0_15 [label="19 <- Use(mv((16 as variant 1).0))\lCall\l"];
    X2a3898e75ae96cb0_16 -> X2a3898e75ae96cb0_17 [label="22"];
    X2a3898e75ae96cb0_16 [label="Call\l"];
    X2a3898e75ae96cb0_17 -> X2a3898e75ae96cb0_18 [label="21"];
    X2a3898e75ae96cb0_17 [label="Call\l"];
    X2a3898e75ae96cb0_18 -> X2a3898e75ae96cb0_19 [label="20"];
    X2a3898e75ae96cb0_18 [label="Call\l"];
    X2a3898e75ae96cb0_19 -> X2a3898e75ae96cb0_20 [label="0"];
    X2a3898e75ae96cb0_19 -> X2a3898e75ae96cb0_21 [label="1"];
    X2a3898e75ae96cb0_19 -> X2a3898e75ae96cb0_4 [label="other"];
    X2a3898e75ae96cb0_19 [label="24 <- Discriminant(20)\lSwitchInt mv(24)\l"];
    X2a3898e75ae96cb0_20 -> X2a3898e75ae96cb0_22 [label="28"];
    X2a3898e75ae96cb0_20 [label="26 <- Use(cp((20 as variant 0).0))\l29 <- Use(cp((*26).2))\lCall\l"];
    X2a3898e75ae96cb0_21 -> X2a3898e75ae96cb0_28 [label="0"];
    X2a3898e75ae96cb0_21 [label="25 <- Use(mv((20 as variant 1).0))\lCall\l"];
    X2a3898e75ae96cb0_22 -> X2a3898e75ae96cb0_23 [label="27"];
    X2a3898e75ae96cb0_22 [label="Call\l"];
    X2a3898e75ae96cb0_23 -> X2a3898e75ae96cb0_24 [label="0"];
    X2a3898e75ae96cb0_23 -> X2a3898e75ae96cb0_25 [label="1"];
    X2a3898e75ae96cb0_23 -> X2a3898e75ae96cb0_4 [label="other"];
    X2a3898e75ae96cb0_23 [label="30 <- Discriminant(27)\lSwitchInt mv(30)\l"];
    X2a3898e75ae96cb0_24 -> X2a3898e75ae96cb0_26 [label="36"];
    X2a3898e75ae96cb0_24 [label="32 <- Use(cp((27 as variant 0).0))\lCall\l"];
    X2a3898e75ae96cb0_25 -> X2a3898e75ae96cb0_28 [label="0"];
    X2a3898e75ae96cb0_25 [label="31 <- Use(mv((27 as variant 1).0))\lCall\l"];
    X2a3898e75ae96cb0_26 -> X2a3898e75ae96cb0_27 [label="33"];
    X2a3898e75ae96cb0_26 [label="35 <- & 36\l34 <- Cast-PointerCoercion(Unsize) cp(35)\lCall\l"];
    X2a3898e75ae96cb0_27 -> X2a3898e75ae96cb0_28;
    X2a3898e75ae96cb0_27 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X2a3898e75ae96cb0_28 [label="Return\l"];
  }
  X2a3898e75ae96cb0_0 -> X8c181cd43c321574_0 [label="cp(2)"];
  X2a3898e75ae96cb0_1 -> X2c1adf250ccbd038_0 [label="mv(5),const {closure@p-token/src/processor/ui_amount_to_amount.rs:18:57: 18:65}"];
  X2a3898e75ae96cb0_2 -> X989908b6084b83e2_0 [label="mv(4)"];
  X2a3898e75ae96cb0_5 -> X7872bd54ee488e30_0 [label="cp(1)"];
  X2a3898e75ae96cb0_6 -> X2463e75e08f1acde_0 [label="mv(7)"];
  X2a3898e75ae96cb0_7 -> X27f21f54126ae4f5_0 [label="mv(11),mv(12)"];
  X2a3898e75ae96cb0_8 -> X5872796c41a72d9e_0 [label="mv(10)"];
  X2a3898e75ae96cb0_10 -> Xaa2da689ad7cc07b_0 [label="cp(15)"];
  X2a3898e75ae96cb0_11 -> X5a1b7e395be91c95_0 [label="mv(14)"];
  X2a3898e75ae96cb0_12 -> Xa5ca904ae82432b1_0 [label="mv(17)"];
  X2a3898e75ae96cb0_14 -> X18b054a9564b373a_0 [label="cp(15)"];
  X2a3898e75ae96cb0_15 -> X5a1b7e395be91c95_0 [label="mv(19)"];
  X2a3898e75ae96cb0_16 -> Xe7e60421b7bdb777_0 [label="cp(23)"];
  X2a3898e75ae96cb0_17 -> Xbc67a0983ea6832f_0 [label="mv(22),const {closure@p-token/src/processor/ui_amount_to_amount.rs:25:65: 25:68}"];
  X2a3898e75ae96cb0_18 -> Xe6c4906ed7b13b2b_0 [label="mv(21)"];
  X2a3898e75ae96cb0_20 -> X798cb2f844cd2e97_0 [label="cp(8),mv(29)"];
  X2a3898e75ae96cb0_21 -> X2463e75e08f1acde_0 [label="mv(25)"];
  X2a3898e75ae96cb0_22 -> Xb18208f8c43f4cb1_0 [label="mv(28)"];
  X2a3898e75ae96cb0_24 -> Xd9e9b96a82ddeb95_0 [label="cp(32)"];
  X2a3898e75ae96cb0_25 -> X5a1b7e395be91c95_0 [label="mv(31)"];
  X2a3898e75ae96cb0_26 -> Xf3bdd71fa9654efd_0 [label="mv(34)"];
  subgraph cluster_64 {
    label="processor::ui_amount_to_a\nmount::process_ui_amount_\nto_amount::{closure#0}";
    style="filled";
    color=lightgray;
    node_65 [label="LOCALS\l0 = pinocchio_token_interface::error::TokenError\l1 = {closure@p-token/src/processor/ui_amount_to_amount.rs:18:57: 18:65}\l2 = core::str::Utf8Error\l", style="filled", color=palegreen3];
    X104e2817d784ba75_0 [label="0 <- Adt{12} ()\lReturn\l"];
  }
  subgraph cluster_66 {
    label="processor::ui_amount_to_a\nmount::process_ui_amount_\nto_amount::{closure#1}";
    style="filled";
    color=lightgray;
    node_67 [label="LOCALS\l0 = pinocchio_token_interface::error::TokenError\l1 = {closure@p-token/src/processor/ui_amount_to_amount.rs:25:65: 25:68}\l2 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X217b9d45c3463701_0 [label="0 <- Adt{2} ()\lReturn\l"];
  }
  subgraph cluster_68 {
    label="processor::try_ui_amount_\ninto_amount";
    style="filled";
    color=lightgray;
    node_69 [label="LOCALS\l0 = core::result::Result<u64, pinocchio::program_error::ProgramError>\l1 = &str\l2 = u8\l3 = usize\l4 = core::str::Split<'_, char>\l5 = &str\l6 = core::option::Option<&str>\l7 = &mut core::str::Split<'_, char>\l8 = &str\l9 = core::option::Option<&str>\l10 = &mut core::str::Split<'_, char>\l11 = &str\l12 = &str\l13 = usize\l14 = bool\l15 = bool\l16 = bool\l17 = &core::option::Option<&str>\l18 = core::option::Option<&str>\l19 = &mut core::str::Split<'_, char>\l20 = bool\l21 = usize\l22 = bool\l23 = usize\l24 = (usize, bool)\l25 = pinocchio::program_error::ProgramError\l26 = [u8; 257]\l27 = ()\l28 = *mut u8\l29 = &mut [u8]\l30 = &mut [u8; 257]\l31 = *const u8\l32 = u64\l33 = ()\l34 = *mut u8\l35 = *mut u8\l36 = &mut [u8]\l37 = &mut [u8; 257]\l38 = *const u8\l39 = u64\l40 = usize\l41 = usize\l42 = usize\l43 = (usize, bool)\l44 = core::result::Result<u64, core::num::ParseIntError>\l45 = &str\l46 = &[u8]\l47 = *const u8\l48 = &[u8]\l49 = &[u8; 257]\l", style="filled", color=palegreen3];
    X798cb2f844cd2e97_0 -> X798cb2f844cd2e97_1 [label="4"];
    X798cb2f844cd2e97_0 [label="3 <- Cast-IntToInt cp(2)\lCall\l"];
    X798cb2f844cd2e97_1 -> X798cb2f844cd2e97_2 [label="6"];
    X798cb2f844cd2e97_1 [label="7 <- &mut 4\lCall\l"];
    X798cb2f844cd2e97_2 -> X798cb2f844cd2e97_3 [label="5"];
    X798cb2f844cd2e97_2 [label="Call\l"];
    X798cb2f844cd2e97_3 -> X798cb2f844cd2e97_4 [label="9"];
    X798cb2f844cd2e97_3 [label="10 <- &mut 4\lCall\l"];
    X798cb2f844cd2e97_4 -> X798cb2f844cd2e97_5 [label="8"];
    X798cb2f844cd2e97_4 [label="11 <- Use(const &str)\lCall\l"];
    X798cb2f844cd2e97_5 -> X798cb2f844cd2e97_6 [label="12"];
    X798cb2f844cd2e97_5 [label="Call\l"];
    X798cb2f844cd2e97_6 -> X798cb2f844cd2e97_7 [label="13"];
    X798cb2f844cd2e97_6 [label="Call\l"];
    X798cb2f844cd2e97_7 -> X798cb2f844cd2e97_8 [label="14"];
    X798cb2f844cd2e97_7 [label="Call\l"];
    X798cb2f844cd2e97_8 -> X798cb2f844cd2e97_11 [label="0"];
    X798cb2f844cd2e97_8 -> X798cb2f844cd2e97_9 [label="other"];
    X798cb2f844cd2e97_8 [label="SwitchInt mv(14)\l"];
    X798cb2f844cd2e97_9 -> X798cb2f844cd2e97_10 [label="15"];
    X798cb2f844cd2e97_9 [label="Call\l"];
    X798cb2f844cd2e97_10 -> X798cb2f844cd2e97_11 [label="0"];
    X798cb2f844cd2e97_10 -> X798cb2f844cd2e97_18 [label="other"];
    X798cb2f844cd2e97_10 [label="SwitchInt mv(15)\l"];
    X798cb2f844cd2e97_11 -> X798cb2f844cd2e97_12 [label="18"];
    X798cb2f844cd2e97_11 [label="19 <- &mut 4\lCall\l"];
    X798cb2f844cd2e97_12 -> X798cb2f844cd2e97_13 [label="16"];
    X798cb2f844cd2e97_12 [label="17 <- & 18\lCall\l"];
    X798cb2f844cd2e97_13 -> X798cb2f844cd2e97_14 [label="0"];
    X798cb2f844cd2e97_13 -> X798cb2f844cd2e97_18 [label="other"];
    X798cb2f844cd2e97_13 [label="SwitchInt mv(16)\l"];
    X798cb2f844cd2e97_14 -> X798cb2f844cd2e97_15 [label="21"];
    X798cb2f844cd2e97_14 [label="Call\l"];
    X798cb2f844cd2e97_15 -> X798cb2f844cd2e97_16 [label="0"];
    X798cb2f844cd2e97_15 -> X798cb2f844cd2e97_18 [label="other"];
    X798cb2f844cd2e97_15 [label="20 <- Gt(mv(21), cp(3))\lSwitchInt mv(20)\l"];
    X798cb2f844cd2e97_16 -> X798cb2f844cd2e97_17;
    X798cb2f844cd2e97_16 [label="24 <- chkd-Add(cp(13), cp(3))\lAssert mv(24.1) == false\l"];
    X798cb2f844cd2e97_17 -> X798cb2f844cd2e97_19 [label="0"];
    X798cb2f844cd2e97_17 -> X798cb2f844cd2e97_18 [label="other"];
    X798cb2f844cd2e97_17 [label="23 <- Use(mv(24.0))\l22 <- Gt(mv(23), const ?_usize)\lSwitchInt mv(22)\l"];
    X798cb2f844cd2e97_18 -> X798cb2f844cd2e97_34;
    X798cb2f844cd2e97_18 [label="25 <- Adt{1} ()\l0 <- Adt{1} (mv(25))\lGoto\l"];
    X798cb2f844cd2e97_19 -> X798cb2f844cd2e97_20 [label="28"];
    X798cb2f844cd2e97_19 [label="26 <- Repeat const ?_u8\l30 <- &mut 26\l29 <- Cast-PointerCoercion(Unsize) mv(30)\lCall\l"];
    X798cb2f844cd2e97_20 -> X798cb2f844cd2e97_21 [label="31"];
    X798cb2f844cd2e97_20 [label="Call\l"];
    X798cb2f844cd2e97_21 -> X798cb2f844cd2e97_22 [label="27"];
    X798cb2f844cd2e97_21 [label="32 <- Cast-IntToInt cp(13)\lCall\l"];
    X798cb2f844cd2e97_22 -> X798cb2f844cd2e97_23 [label="35"];
    X798cb2f844cd2e97_22 [label="37 <- &mut 26\l36 <- Cast-PointerCoercion(Unsize) mv(37)\lCall\l"];
    X798cb2f844cd2e97_23 -> X798cb2f844cd2e97_24 [label="34"];
    X798cb2f844cd2e97_23 [label="Call\l"];
    X798cb2f844cd2e97_24 -> X798cb2f844cd2e97_25 [label="38"];
    X798cb2f844cd2e97_24 [label="Call\l"];
    X798cb2f844cd2e97_25 -> X798cb2f844cd2e97_26 [label="40"];
    X798cb2f844cd2e97_25 [label="Call\l"];
    X798cb2f844cd2e97_26 -> X798cb2f844cd2e97_27 [label="33"];
    X798cb2f844cd2e97_26 [label="39 <- Cast-IntToInt mv(40)\lCall\l"];
    X798cb2f844cd2e97_27 -> X798cb2f844cd2e97_28 [label="42"];
    X798cb2f844cd2e97_27 [label="Call\l"];
    X798cb2f844cd2e97_28 -> X798cb2f844cd2e97_29;
    X798cb2f844cd2e97_28 [label="43 <- chkd-Add(cp(42), cp(3))\lAssert mv(43.1) == false\l"];
    X798cb2f844cd2e97_29 -> X798cb2f844cd2e97_30 [label="47"];
    X798cb2f844cd2e97_29 [label="41 <- Use(mv(43.0))\l49 <- & 26\l48 <- Cast-PointerCoercion(Unsize) mv(49)\lCall\l"];
    X798cb2f844cd2e97_30 -> X798cb2f844cd2e97_31 [label="46"];
    X798cb2f844cd2e97_30 [label="Call\l"];
    X798cb2f844cd2e97_31 -> X798cb2f844cd2e97_32 [label="45"];
    X798cb2f844cd2e97_31 [label="Call\l"];
    X798cb2f844cd2e97_32 -> X798cb2f844cd2e97_33 [label="44"];
    X798cb2f844cd2e97_32 [label="Call\l"];
    X798cb2f844cd2e97_33 -> X798cb2f844cd2e97_34 [label="0"];
    X798cb2f844cd2e97_33 [label="Call\l"];
    X798cb2f844cd2e97_34 [label="Return\l"];
  }
  X798cb2f844cd2e97_0 -> X311345683aaaab6c_0 [label="cp(1),const char"];
  X798cb2f844cd2e97_1 -> X161ecc8db4bd8cc7_0 [label="mv(7)"];
  X798cb2f844cd2e97_2 -> X214abf5ecbf39973_0 [label="mv(6)"];
  X798cb2f844cd2e97_3 -> X161ecc8db4bd8cc7_0 [label="mv(10)"];
  X798cb2f844cd2e97_4 -> Xdad428174f5e039f_0 [label="mv(9),mv(11)"];
  X798cb2f844cd2e97_5 -> X1440fc12115968ff_0 [label="cp(8),const char"];
  X798cb2f844cd2e97_6 -> X90c8538ce85c085c_0 [label="cp(5)"];
  X798cb2f844cd2e97_7 -> Xedc5819149df218c_0 [label="cp(5)"];
  X798cb2f844cd2e97_9 -> Xedc5819149df218c_0 [label="cp(12)"];
  X798cb2f844cd2e97_11 -> X161ecc8db4bd8cc7_0 [label="mv(19)"];
  X798cb2f844cd2e97_12 -> Xb505b41144acaff7_0 [label="mv(17)"];
  X798cb2f844cd2e97_14 -> X90c8538ce85c085c_0 [label="cp(12)"];
  X798cb2f844cd2e97_19 -> Xb96d0961d524f6f8_0 [label="mv(29)"];
  X798cb2f844cd2e97_20 -> X7f30d7dbe387561f_0 [label="cp(5)"];
  X798cb2f844cd2e97_21 -> Xd5f5089a7a4a09ff_0 [label="mv(28),mv(31),mv(32)"];
  X798cb2f844cd2e97_22 -> Xb96d0961d524f6f8_0 [label="mv(36)"];
  X798cb2f844cd2e97_23 -> X99398f9f14483c90_0 [label="mv(35),cp(13)"];
  X798cb2f844cd2e97_24 -> X7f30d7dbe387561f_0 [label="cp(12)"];
  X798cb2f844cd2e97_25 -> X90c8538ce85c085c_0 [label="cp(12)"];
  X798cb2f844cd2e97_26 -> Xd5f5089a7a4a09ff_0 [label="mv(34),mv(38),mv(39)"];
  X798cb2f844cd2e97_27 -> X90c8538ce85c085c_0 [label="cp(5)"];
  X798cb2f844cd2e97_29 -> X9e6ee8713e773f38_0 [label="mv(48)"];
  X798cb2f844cd2e97_30 -> X2bbf04117b29714a_0 [label="mv(47),cp(41)"];
  X798cb2f844cd2e97_31 -> Xa8af50ae2aec905_0 [label="cp(46)"];
  X798cb2f844cd2e97_32 -> X4aefc53de15d3133_0 [label="cp(45)"];
  X798cb2f844cd2e97_33 -> Xf2e8cae96d2c6064_0 [label="mv(44),const {closure@p-token/src/processor/mod.rs:186:22: 186:25}"];
  subgraph cluster_70 {
    label="processor::try_ui_amount_\ninto_amount::{closure#0}";
    style="filled";
    color=lightgray;
    node_71 [label="LOCALS\l0 = pinocchio::program_error::ProgramError\l1 = {closure@p-token/src/processor/mod.rs:186:22: 186:25}\l2 = core::num::ParseIntError\l", style="filled", color=palegreen3];
    X84c61194b74d7a48_0 [label="0 <- Adt{1} ()\lReturn\l"];
  }
  subgraph cluster_72 {
    label="processor::batch::process\n_batch";
    style="filled";
    color=lightgray;
    node_73 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = &[u8]\l3 = bool\l4 = usize\l5 = &[u8]\l6 = pinocchio::program_error::ProgramError\l7 = pinocchio_token_interface::error::TokenError\l8 = usize\l9 = u8\l10 = &u8\l11 = &[u8]\l12 = usize\l13 = usize\l14 = u8\l15 = &u8\l16 = &[u8]\l17 = (usize, bool)\l18 = bool\l19 = usize\l20 = &[u8]\l21 = bool\l22 = pinocchio::program_error::ProgramError\l23 = pinocchio_token_interface::error::TokenError\l24 = bool\l25 = usize\l26 = &[pinocchio::account_info::AccountInfo]\l27 = pinocchio::program_error::ProgramError\l28 = &[pinocchio::account_info::AccountInfo]\l29 = &[u8]\l30 = (&[pinocchio::account_info::AccountInfo], &[u8])\l31 = &[pinocchio::account_info::AccountInfo]\l32 = &[pinocchio::account_info::AccountInfo]\l33 = core::ops::RangeTo<usize>\l34 = &[u8]\l35 = &[u8]\l36 = core::ops::Range<usize>\l37 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>>\l38 = core::result::Result<(), pinocchio::program_error::ProgramError>\l39 = isize\l40 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l41 = bool\l42 = usize\l43 = &[u8]\l44 = &[pinocchio::account_info::AccountInfo]\l45 = &[pinocchio::account_info::AccountInfo]\l46 = core::ops::RangeFrom<usize>\l47 = &[u8]\l48 = &[u8]\l49 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X15962aa79900eb2f_0 -> X15962aa79900eb2f_1;
    X15962aa79900eb2f_0 [label="Goto\l"];
    X15962aa79900eb2f_1 -> X15962aa79900eb2f_4 [label="0"];
    X15962aa79900eb2f_1 -> X15962aa79900eb2f_2 [label="other"];
    X15962aa79900eb2f_1 [label="5 <- Use(cp(2))\l4 <- PtrMetadata(mv(5))\l3 <- Lt(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    X15962aa79900eb2f_2 -> X15962aa79900eb2f_3 [label="6"];
    X15962aa79900eb2f_2 [label="7 <- Adt{12} ()\lCall\l"];
    X15962aa79900eb2f_3 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_3 [label="0 <- Adt{1} (mv(6))\lGoto\l"];
    X15962aa79900eb2f_4 -> X15962aa79900eb2f_5 [label="10"];
    X15962aa79900eb2f_4 [label="11 <- Use(cp(2))\lCall\l"];
    X15962aa79900eb2f_5 -> X15962aa79900eb2f_6 [label="15"];
    X15962aa79900eb2f_5 [label="9 <- Use(cp((*10)))\l8 <- Cast-IntToInt mv(9)\l16 <- Use(cp(2))\lCall\l"];
    X15962aa79900eb2f_6 -> X15962aa79900eb2f_7;
    X15962aa79900eb2f_6 [label="14 <- Use(cp((*15)))\l13 <- Cast-IntToInt mv(14)\l17 <- chkd-Add(const ?_usize, cp(13))\lAssert mv(17.1) == false\l"];
    X15962aa79900eb2f_7 -> X15962aa79900eb2f_8 [label="0"];
    X15962aa79900eb2f_7 -> X15962aa79900eb2f_9 [label="other"];
    X15962aa79900eb2f_7 [label="12 <- Use(mv(17.0))\l20 <- Use(cp(2))\l19 <- PtrMetadata(mv(20))\l18 <- Lt(mv(19), cp(12))\lSwitchInt mv(18)\l"];
    X15962aa79900eb2f_8 -> X15962aa79900eb2f_11 [label="0"];
    X15962aa79900eb2f_8 -> X15962aa79900eb2f_9 [label="other"];
    X15962aa79900eb2f_8 [label="21 <- Eq(cp(12), const ?_usize)\lSwitchInt mv(21)\l"];
    X15962aa79900eb2f_9 -> X15962aa79900eb2f_10 [label="22"];
    X15962aa79900eb2f_9 [label="23 <- Adt{12} ()\lCall\l"];
    X15962aa79900eb2f_10 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_10 [label="0 <- Adt{1} (mv(22))\lGoto\l"];
    X15962aa79900eb2f_11 -> X15962aa79900eb2f_13 [label="0"];
    X15962aa79900eb2f_11 -> X15962aa79900eb2f_12 [label="other"];
    X15962aa79900eb2f_11 [label="26 <- Use(cp(1))\l25 <- PtrMetadata(mv(26))\l24 <- Lt(mv(25), cp(8))\lSwitchInt mv(24)\l"];
    X15962aa79900eb2f_12 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_12 [label="27 <- Adt{10} ()\l0 <- Adt{1} (mv(27))\lGoto\l"];
    X15962aa79900eb2f_13 -> X15962aa79900eb2f_14 [label="31"];
    X15962aa79900eb2f_13 [label="32 <- Use(cp(1))\l33 <- Adt{0} (cp(8))\lCall\l"];
    X15962aa79900eb2f_14 -> X15962aa79900eb2f_15 [label="34"];
    X15962aa79900eb2f_14 [label="35 <- Use(cp(2))\l36 <- Adt{0} (const ?_usize, cp(12))\lCall\l"];
    X15962aa79900eb2f_15 -> X15962aa79900eb2f_16 [label="38"];
    X15962aa79900eb2f_15 [label="30 <- Tuple (mv(31), mv(34))\l28 <- Use(cp(30.0))\l29 <- Use(cp(30.1))\lCall\l"];
    X15962aa79900eb2f_16 -> X15962aa79900eb2f_17 [label="37"];
    X15962aa79900eb2f_16 [label="Call\l"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_19 [label="0"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_20 [label="1"];
    X15962aa79900eb2f_17 -> X15962aa79900eb2f_18 [label="other"];
    X15962aa79900eb2f_17 [label="39 <- Discriminant(37)\lSwitchInt mv(39)\l"];
    X15962aa79900eb2f_18 [label="Unreachable\l"];
    X15962aa79900eb2f_19 -> X15962aa79900eb2f_22 [label="0"];
    X15962aa79900eb2f_19 -> X15962aa79900eb2f_21 [label="other"];
    X15962aa79900eb2f_19 [label="43 <- Use(cp(2))\l42 <- PtrMetadata(mv(43))\l41 <- Eq(cp(12), mv(42))\lSwitchInt mv(41)\l"];
    X15962aa79900eb2f_20 -> X15962aa79900eb2f_25 [label="0"];
    X15962aa79900eb2f_20 [label="40 <- Use(mv((37 as variant 1).0))\lCall\l"];
    X15962aa79900eb2f_21 -> X15962aa79900eb2f_25;
    X15962aa79900eb2f_21 [label="0 <- Adt{0} (const ())\lGoto\l"];
    X15962aa79900eb2f_22 -> X15962aa79900eb2f_23 [label="44"];
    X15962aa79900eb2f_22 [label="45 <- Use(cp(1))\l46 <- Adt{0} (cp(8))\lCall\l"];
    X15962aa79900eb2f_23 -> X15962aa79900eb2f_24 [label="47"];
    X15962aa79900eb2f_23 [label="1 <- Use(cp(44))\l48 <- Use(cp(2))\l49 <- Adt{0} (cp(12))\lCall\l"];
    X15962aa79900eb2f_24 -> X15962aa79900eb2f_1;
    X15962aa79900eb2f_24 [label="2 <- Use(cp(47))\lGoto\l"];
    X15962aa79900eb2f_25 [label="Return\l"];
  }
  X15962aa79900eb2f_2 -> X3e41fe755ef8b4ae_0 [label="mv(7)"];
  X15962aa79900eb2f_4 -> X2cdd8b2d70a4eaed_0 [label="mv(11),const ?_usize"];
  X15962aa79900eb2f_5 -> X2cdd8b2d70a4eaed_0 [label="mv(16),const ?_usize"];
  X15962aa79900eb2f_9 -> X3e41fe755ef8b4ae_0 [label="mv(23)"];
  X15962aa79900eb2f_13 -> Xfafc3ed6df8f1eb_0 [label="mv(32),mv(33)"];
  X15962aa79900eb2f_14 -> X73286d278f91d44b_0 [label="mv(35),mv(36)"];
  X15962aa79900eb2f_15 -> X9595629189257c54_0 [label="cp(28),cp(29)"];
  X15962aa79900eb2f_16 -> Xa5ca904ae82432b1_0 [label="mv(38)"];
  X15962aa79900eb2f_20 -> X5a1b7e395be91c95_0 [label="mv(40)"];
  X15962aa79900eb2f_22 -> X465c7d4710d81d1e_0 [label="mv(45),mv(46)"];
  X15962aa79900eb2f_23 -> Xe8b88bdd28569b08_0 [label="mv(48),mv(49)"];
  subgraph cluster_74 {
    label="pinocchio_token_interface\n::state::load_unchecked::\n<pinocchio_token_interfac\ne::state::mint::Mint>";
    style="filled";
    color=lightgray;
    node_75 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = bool\l3 = usize\l4 = pinocchio::program_error::ProgramError\l5 = &pinocchio_token_interface::state::mint::Mint\l6 = *const pinocchio_token_interface::state::mint::Mint\l7 = *const u8\l", style="filled", color=palegreen3];
    X10a88b79c5f904a3_0 -> X10a88b79c5f904a3_2 [label="0"];
    X10a88b79c5f904a3_0 -> X10a88b79c5f904a3_1 [label="other"];
    X10a88b79c5f904a3_0 [label="3 <- PtrMetadata(cp(1))\l2 <- Ne(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    X10a88b79c5f904a3_1 -> X10a88b79c5f904a3_4;
    X10a88b79c5f904a3_1 [label="4 <- Adt{3} ()\l0 <- Adt{1} (mv(4))\lGoto\l"];
    X10a88b79c5f904a3_2 -> X10a88b79c5f904a3_3 [label="7"];
    X10a88b79c5f904a3_2 [label="Call\l"];
    X10a88b79c5f904a3_3 -> X10a88b79c5f904a3_4;
    X10a88b79c5f904a3_3 [label="6 <- Cast-PtrToPtr mv(7)\l5 <- & (*6)\l0 <- Adt{0} (cp(5))\lGoto\l"];
    X10a88b79c5f904a3_4 [label="Return\l"];
  }
  X10a88b79c5f904a3_2 -> X9e6ee8713e773f38_0 [label="cp(1)"];
  subgraph cluster_76 {
    label="pinocchio_token_interface\n::state::load::<pinocchio\n_token_interface::state::\nmint::Mint>";
    style="filled";
    color=lightgray;
    node_77 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = &[u8]\l2 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xe7e60421b7bdb777_0 -> Xe7e60421b7bdb777_1 [label="2"];
    Xe7e60421b7bdb777_0 [label="Call\l"];
    Xe7e60421b7bdb777_1 -> Xe7e60421b7bdb777_2 [label="0"];
    Xe7e60421b7bdb777_1 [label="Call\l"];
    Xe7e60421b7bdb777_2 [label="Return\l"];
  }
  Xe7e60421b7bdb777_0 -> X10a88b79c5f904a3_0 [label="cp(1)"];
  Xe7e60421b7bdb777_1 -> X241dac1a0e8e19fa_0 [label="mv(2),const {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}"];
  subgraph cluster_78 {
    label="pinocchio_token_interface\n::state::load::<pinocchio\n_token_interface::state::\nmint::Mint>::{closure#0}";
    style="filled";
    color=lightgray;
    node_79 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l2 = &pinocchio_token_interface::state::mint::Mint\l3 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l4 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l5 = isize\l6 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l7 = bool\l8 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X709ca803b6bdae19_0 -> X709ca803b6bdae19_1 [label="4"];
    X709ca803b6bdae19_0 [label="Call\l"];
    X709ca803b6bdae19_1 -> X709ca803b6bdae19_2 [label="3"];
    X709ca803b6bdae19_1 [label="Call\l"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_4 [label="0"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_5 [label="1"];
    X709ca803b6bdae19_2 -> X709ca803b6bdae19_3 [label="other"];
    X709ca803b6bdae19_2 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    X709ca803b6bdae19_3 [label="Unreachable\l"];
    X709ca803b6bdae19_4 -> X709ca803b6bdae19_7 [label="0"];
    X709ca803b6bdae19_4 -> X709ca803b6bdae19_6 [label="other"];
    X709ca803b6bdae19_4 [label="7 <- Use(cp((3 as variant 0).0))\lSwitchInt cp(7)\l"];
    X709ca803b6bdae19_5 -> X709ca803b6bdae19_8 [label="0"];
    X709ca803b6bdae19_5 [label="6 <- Use(mv((3 as variant 1).0))\lCall\l"];
    X709ca803b6bdae19_6 -> X709ca803b6bdae19_8;
    X709ca803b6bdae19_6 [label="0 <- Adt{0} (cp(2))\lGoto\l"];
    X709ca803b6bdae19_7 -> X709ca803b6bdae19_8;
    X709ca803b6bdae19_7 [label="8 <- Adt{9} ()\l0 <- Adt{1} (mv(8))\lGoto\l"];
    X709ca803b6bdae19_8 [label="Return\l"];
  }
  X709ca803b6bdae19_0 -> X81eb37da80f6fb85_0 [label="cp(2)"];
  X709ca803b6bdae19_1 -> X22ee39b8b53b763c_0 [label="mv(4)"];
  X709ca803b6bdae19_5 -> Xdaa446e4ac3a609b_0 [label="mv(6)"];
  subgraph cluster_80 {
    label="<&core::result::Result<()\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_81 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xab69f320456645b0_0 -> Xab69f320456645b0_1 [label="0"];
    Xab69f320456645b0_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xab69f320456645b0_1 [label="Return\l"];
  }
  Xab69f320456645b0_0 -> Xab8fa31025adcf5b_0 [label="mv(3),mv(2)"];
  subgraph cluster_82 {
    label="<&u8 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_83 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u8\l2 = &mut core::fmt::Formatter<'_>\l3 = &u8\l", style="filled", color=palegreen3];
    X683f0868a59c17f0_0 -> X683f0868a59c17f0_1 [label="0"];
    X683f0868a59c17f0_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X683f0868a59c17f0_1 [label="Return\l"];
  }
  X683f0868a59c17f0_0 -> X3d16d5436a0eabb7_0 [label="mv(3),mv(2)"];
  subgraph cluster_84 {
    label="<&pinocchio::program_erro\nr::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_85 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X1a0ceacdb000495d_0 -> X1a0ceacdb000495d_1 [label="0"];
    X1a0ceacdb000495d_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X1a0ceacdb000495d_1 [label="Return\l"];
  }
  X1a0ceacdb000495d_0 -> X2742b41be11e0ec6_0 [label="mv(3),mv(2)"];
  subgraph cluster_86 {
    label="<&core::option::Option<u8\n> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_87 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&core::option::Option<u8>\l2 = &mut core::fmt::Formatter<'_>\l3 = &core::option::Option<u8>\l", style="filled", color=palegreen3];
    Xa280d645dc0ec565_0 -> Xa280d645dc0ec565_1 [label="0"];
    Xa280d645dc0ec565_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xa280d645dc0ec565_1 [label="Return\l"];
  }
  Xa280d645dc0ec565_0 -> X29b19158bf1b6ca8_0 [label="mv(3),mv(2)"];
  subgraph cluster_88 {
    label="<&() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_89 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&()\l2 = &mut core::fmt::Formatter<'_>\l3 = &()\l", style="filled", color=palegreen3];
    X907d5b9a2b96cc8c_0 -> X907d5b9a2b96cc8c_1 [label="0"];
    X907d5b9a2b96cc8c_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    X907d5b9a2b96cc8c_1 [label="Return\l"];
  }
  X907d5b9a2b96cc8c_0 -> X3282849f4a2ca907_0 [label="mv(3),mv(2)"];
  subgraph cluster_90 {
    label="<&u32 \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_91 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &&u32\l2 = &mut core::fmt::Formatter<'_>\l3 = &u32\l", style="filled", color=palegreen3];
    Xbf1ab5e806a12eb3_0 -> Xbf1ab5e806a12eb3_1 [label="0"];
    Xbf1ab5e806a12eb3_0 [label="3 <- Use(cp((*1)))\lCall\l"];
    Xbf1ab5e806a12eb3_1 [label="Return\l"];
  }
  Xbf1ab5e806a12eb3_0 -> Xf8e41209cb5e3630_0 [label="mv(3),mv(2)"];
  subgraph cluster_92 {
    label="<() \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_93 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &()\l2 = &mut core::fmt::Formatter<'_>\l", style="filled", color=palegreen3];
    X3282849f4a2ca907_0 -> X3282849f4a2ca907_1 [label="0"];
    X3282849f4a2ca907_0 [label="Call\l"];
    X3282849f4a2ca907_1 [label="Return\l"];
  }
  X3282849f4a2ca907_0 -> X5b44578fd65a3909_0 [label="mv(2),const &str"];
  subgraph cluster_94 {
    label="<u8 \nas \ncore::slice::cmp::SliceOr\nd>::compare";
    style="filled";
    color=lightgray;
    node_95 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &[u8]\l2 = &[u8]\l3 = isize\l4 = isize\l5 = usize\l6 = isize\l7 = usize\l8 = usize\l9 = bool\l10 = *const u8\l11 = *const u8\l12 = *const u8\l13 = *const u8\l14 = isize\l15 = i32\l16 = usize\l17 = isize\l18 = &isize\l19 = &isize\l20 = *const [u8]\l21 = *const [u8]\l22 = isize\l23 = isize\l", style="filled", color=palegreen3];
    X530825bfbbf6cb3c_0 -> X530825bfbbf6cb3c_2 [label="0"];
    X530825bfbbf6cb3c_0 -> X530825bfbbf6cb3c_1 [label="other"];
    X530825bfbbf6cb3c_0 [label="Storage Live _4\l5 <- PtrMetadata(cp(1))\l4 <- Cast-IntToInt cp(5)\lStorage Live _6\l7 <- PtrMetadata(cp(2))\l6 <- Cast-IntToInt cp(7)\l3 <- Sub(mv(4), mv(6))\lStorage Dead _6\lStorage Dead _4\lStorage Live _8\lStorage Live _9\l9 <- Lt(cp(5), cp(7))\lSwitchInt mv(9)\l"];
    X530825bfbbf6cb3c_1 -> X530825bfbbf6cb3c_3;
    X530825bfbbf6cb3c_1 [label="8 <- Use(cp(5))\lGoto\l"];
    X530825bfbbf6cb3c_2 -> X530825bfbbf6cb3c_3;
    X530825bfbbf6cb3c_2 [label="8 <- Use(cp(7))\lGoto\l"];
    X530825bfbbf6cb3c_3 -> X530825bfbbf6cb3c_4 [label="15"];
    X530825bfbbf6cb3c_3 [label="Storage Dead _9\lStorage Live _11\l20 <- &raw (*1)\l11 <- Cast-PtrToPtr cp(20)\l10 <- Cast-PtrToPtr cp(20)\lStorage Dead _11\lStorage Live _13\l21 <- &raw (*2)\l13 <- Cast-PtrToPtr cp(21)\l12 <- Cast-PtrToPtr cp(21)\lStorage Dead _13\lStorage Live _14\lStorage Live _15\lStorage Live _16\l16 <- Use(cp(8))\lCall\l"];
    X530825bfbbf6cb3c_4 -> X530825bfbbf6cb3c_5 [label="0"];
    X530825bfbbf6cb3c_4 -> X530825bfbbf6cb3c_6 [label="other"];
    X530825bfbbf6cb3c_4 [label="Storage Dead _16\l14 <- Cast-IntToInt mv(15)\lStorage Dead _15\lStorage Live _17\l17 <- Use(cp(14))\lSwitchInt mv(17)\l"];
    X530825bfbbf6cb3c_5 -> X530825bfbbf6cb3c_7;
    X530825bfbbf6cb3c_5 [label="Storage Dead _17\l14 <- Use(cp(3))\lGoto\l"];
    X530825bfbbf6cb3c_6 -> X530825bfbbf6cb3c_7;
    X530825bfbbf6cb3c_6 [label="Storage Dead _17\lGoto\l"];
    X530825bfbbf6cb3c_7 [label="Storage Live _18\l18 <- & 14\l19 <- Use(const &isize)\lStorage Live _22\l22 <- Use(cp(14))\lStorage Live _23\l23 <- Use(cp((*19)))\l0 <- Cmp(mv(22), mv(23))\lStorage Dead _23\lStorage Dead _22\lStorage Dead _18\lStorage Dead _14\lStorage Dead _8\lReturn\l"];
  }
  X530825bfbbf6cb3c_3 -> X60cc41313a320d2_0 [label="mv(10),mv(12),mv(16)"];
  subgraph cluster_96 {
    label="<{closure@p-token/src/ent\nrypoint.rs:1413:43: \n1413:52} \nas \ncore::str::pattern::Patte\nrn>::is_contained_in";
    style="filled";
    color=lightgray;
    node_97 [label="LOCALS\l0 = bool\l1 = {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l2 = &str\l3 = core::str::pattern::MultiCharEqPattern<{closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l", style="filled", color=palegreen3];
    Xd5d399249f5b5253_0 -> Xd5d399249f5b5253_1 [label="0"];
    Xd5d399249f5b5253_0 [label="Storage Live _3\l3 <- Adt{0} (cp(1))\lCall\l"];
    Xd5d399249f5b5253_1 [label="Storage Dead _3\lReturn\l"];
  }
  Xd5d399249f5b5253_0 -> X37b7738bfd7bf732_0 [label="mv(3),mv(2)"];
  subgraph cluster_98 {
    label="<usize \nas \ncore::iter::Step>::forwar\nd_unchecked";
    style="filled";
    color=lightgray;
    node_99 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    Xdaf48124b17ea92_0 -> Xdaf48124b17ea92_2 [label="0"];
    Xdaf48124b17ea92_0 -> Xdaf48124b17ea92_1 [label="other"];
    Xdaf48124b17ea92_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xdaf48124b17ea92_1 -> Xdaf48124b17ea92_2 [label="4"];
    Xdaf48124b17ea92_1 [label="Call\l"];
    Xdaf48124b17ea92_2 [label="Storage Dead _3\l0 <- AddUnchecked(cp(1), cp(2))\lReturn\l"];
  }
  Xdaf48124b17ea92_1 -> X83d527cca8322d39_0 [label="cp(1),cp(2)"];
  subgraph cluster_100 {
    label="core::intrinsics::cold_pa\nth";
    style="filled";
    color=lightgray;
    node_101 [label="LOCALS\l0 = ()\l", style="filled", color=palegreen3];
    Xf44dc55018491642_0 [label="Return\l"];
  }
  subgraph cluster_102 {
    label="<str \nas \ncore::cmp::PartialOrd>::g\nt";
    style="filled";
    color=lightgray;
    node_103 [label="LOCALS\l0 = bool\l1 = &str\l2 = &str\l3 = core::option::Option<core::cmp::Ordering>\l4 = i8\l5 = isize\l", style="filled", color=palegreen3];
    X3a9d4a6a287c94d2_0 -> X3a9d4a6a287c94d2_1 [label="3"];
    X3a9d4a6a287c94d2_0 [label="Storage Live _3\lCall\l"];
    X3a9d4a6a287c94d2_1 -> X3a9d4a6a287c94d2_3 [label="1"];
    X3a9d4a6a287c94d2_1 -> X3a9d4a6a287c94d2_2 [label="0"];
    X3a9d4a6a287c94d2_1 -> X3a9d4a6a287c94d2_5 [label="other"];
    X3a9d4a6a287c94d2_1 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    X3a9d4a6a287c94d2_2 -> X3a9d4a6a287c94d2_4;
    X3a9d4a6a287c94d2_2 [label="0 <- Use(const bool)\lGoto\l"];
    X3a9d4a6a287c94d2_3 -> X3a9d4a6a287c94d2_4;
    X3a9d4a6a287c94d2_3 [label="4 <- Discriminant((3 as variant 1).0)\l0 <- Eq(cp(4), const ?_i8)\lGoto\l"];
    X3a9d4a6a287c94d2_4 [label="Storage Dead _3\lReturn\l"];
    X3a9d4a6a287c94d2_5 [label="Unreachable\l"];
  }
  X3a9d4a6a287c94d2_0 -> Xd64219687ab6c1bf_0 [label="mv(1),mv(2)"];
  subgraph cluster_104 {
    label="<str \nas \ncore::cmp::PartialOrd>::l\nt";
    style="filled";
    color=lightgray;
    node_105 [label="LOCALS\l0 = bool\l1 = &str\l2 = &str\l3 = core::option::Option<core::cmp::Ordering>\l4 = i8\l5 = isize\l", style="filled", color=palegreen3];
    Xe5c28c2f61009bed_0 -> Xe5c28c2f61009bed_1 [label="3"];
    Xe5c28c2f61009bed_0 [label="Storage Live _3\lCall\l"];
    Xe5c28c2f61009bed_1 -> Xe5c28c2f61009bed_3 [label="1"];
    Xe5c28c2f61009bed_1 -> Xe5c28c2f61009bed_2 [label="0"];
    Xe5c28c2f61009bed_1 -> Xe5c28c2f61009bed_5 [label="other"];
    Xe5c28c2f61009bed_1 [label="5 <- Discriminant(3)\lSwitchInt mv(5)\l"];
    Xe5c28c2f61009bed_2 -> Xe5c28c2f61009bed_4;
    Xe5c28c2f61009bed_2 [label="0 <- Use(const bool)\lGoto\l"];
    Xe5c28c2f61009bed_3 -> Xe5c28c2f61009bed_4;
    Xe5c28c2f61009bed_3 [label="4 <- Discriminant((3 as variant 1).0)\l0 <- Eq(cp(4), const ?_i8)\lGoto\l"];
    Xe5c28c2f61009bed_4 [label="Storage Dead _3\lReturn\l"];
    Xe5c28c2f61009bed_5 [label="Unreachable\l"];
  }
  Xe5c28c2f61009bed_0 -> Xd64219687ab6c1bf_0 [label="mv(1),mv(2)"];
  subgraph cluster_106 {
    label="<usize \nas \ncore::cmp::Ord>::min";
    style="filled";
    color=lightgray;
    node_107 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    X6ef12a525c09043d_0 -> X6ef12a525c09043d_1 [label="0"];
    X6ef12a525c09043d_0 [label="Call\l"];
    X6ef12a525c09043d_1 [label="Return\l"];
  }
  X6ef12a525c09043d_0 -> Xf85b79c5bd16f087_0 [label="mv(1),mv(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  subgraph cluster_108 {
    label="core::cmp::min::<usize>";
    style="filled";
    color=lightgray;
    node_109 [label="LOCALS\l0 = usize\l1 = usize\l2 = usize\l", style="filled", color=palegreen3];
    Xe9140f1d0f7f9eb4_0 -> Xe9140f1d0f7f9eb4_1 [label="0"];
    Xe9140f1d0f7f9eb4_0 [label="Call\l"];
    Xe9140f1d0f7f9eb4_1 [label="Return\l"];
  }
  Xe9140f1d0f7f9eb4_0 -> X6ef12a525c09043d_0 [label="mv(1),mv(2)"];
  subgraph cluster_110 {
    label="core::cmp::impls::<impl \ncore::cmp::Ord \nfor \nusize>::cmp";
    style="filled";
    color=lightgray;
    node_111 [label="LOCALS\l0 = core::cmp::Ordering\l1 = &usize\l2 = &usize\l3 = usize\l4 = usize\l", style="filled", color=palegreen3];
    Xf9c0f98a7bd601c9_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Cmp(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_112 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \nu32>::eq";
    style="filled";
    color=lightgray;
    node_113 [label="LOCALS\l0 = bool\l1 = &u32\l2 = &u32\l3 = u32\l4 = u32\l", style="filled", color=palegreen3];
    Xf467524343d2663e_0 [label="Storage Live _3\l3 <- Use(cp((*1)))\lStorage Live _4\l4 <- Use(cp((*2)))\l0 <- Eq(mv(3), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  subgraph cluster_114 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n()>::eq";
    style="filled";
    color=lightgray;
    node_115 [label="LOCALS\l0 = bool\l1 = &()\l2 = &()\l", style="filled", color=palegreen3];
    Xe5dce0424c1e8e0f_0 [label="0 <- Use(const bool)\lReturn\l"];
  }
  subgraph cluster_116 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_117 [label="LOCALS\l0 = bool\l1 = &&[u8; 32]\l2 = &&[u8; 32]\l3 = &[u8; 32]\l4 = &[u8; 32]\l", style="filled", color=palegreen3];
    X7d20e7238026070b_0 -> X7d20e7238026070b_1 [label="0"];
    X7d20e7238026070b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X7d20e7238026070b_1 [label="Return\l"];
  }
  X7d20e7238026070b_0 -> X7b4e898ba35115b5_0 [label="mv(3),mv(4)"];
  subgraph cluster_118 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&u32>::eq";
    style="filled";
    color=lightgray;
    node_119 [label="LOCALS\l0 = bool\l1 = &&u32\l2 = &&u32\l3 = &u32\l4 = &u32\l", style="filled", color=palegreen3];
    X1bb3de031e0823b_0 -> X1bb3de031e0823b_1 [label="0"];
    X1bb3de031e0823b_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X1bb3de031e0823b_1 [label="Return\l"];
  }
  X1bb3de031e0823b_0 -> Xf467524343d2663e_0 [label="mv(3),mv(4)"];
  subgraph cluster_120 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialEq \nfor \n&str>::eq";
    style="filled";
    color=lightgray;
    node_121 [label="LOCALS\l0 = bool\l1 = &&str\l2 = &&str\l3 = &str\l4 = &str\l", style="filled", color=palegreen3];
    X2be9bd600168849f_0 -> X2be9bd600168849f_1 [label="0"];
    X2be9bd600168849f_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X2be9bd600168849f_1 [label="Return\l"];
  }
  X2be9bd600168849f_0 -> Xbe026775e83fe740_0 [label="mv(3),mv(4)"];
  subgraph cluster_122 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \n&str>::gt";
    style="filled";
    color=lightgray;
    node_123 [label="LOCALS\l0 = bool\l1 = &&str\l2 = &&str\l3 = &str\l4 = &str\l", style="filled", color=palegreen3];
    X18cc43720f5c1f92_0 -> X18cc43720f5c1f92_1 [label="0"];
    X18cc43720f5c1f92_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    X18cc43720f5c1f92_1 [label="Return\l"];
  }
  X18cc43720f5c1f92_0 -> X3a9d4a6a287c94d2_0 [label="mv(3),mv(4)"];
  subgraph cluster_124 {
    label="core::cmp::impls::<impl \ncore::cmp::PartialOrd \nfor \n&str>::lt";
    style="filled";
    color=lightgray;
    node_125 [label="LOCALS\l0 = bool\l1 = &&str\l2 = &&str\l3 = &str\l4 = &str\l", style="filled", color=palegreen3];
    Xfd5c4e00a0c381bb_0 -> Xfd5c4e00a0c381bb_1 [label="0"];
    Xfd5c4e00a0c381bb_0 [label="3 <- Use(cp((*1)))\l4 <- Use(cp((*2)))\lCall\l"];
    Xfd5c4e00a0c381bb_1 [label="Return\l"];
  }
  Xfd5c4e00a0c381bb_0 -> Xe5c28c2f61009bed_0 [label="mv(3),mv(4)"];
  subgraph cluster_126 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu8>::fmt";
    style="filled";
    color=lightgray;
    node_127 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u8\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X3d16d5436a0eabb7_0 -> X3d16d5436a0eabb7_2 [label="0"];
    X3d16d5436a0eabb7_0 -> X3d16d5436a0eabb7_1 [label="other"];
    X3d16d5436a0eabb7_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X3d16d5436a0eabb7_1 -> X3d16d5436a0eabb7_6 [label="0"];
    X3d16d5436a0eabb7_1 [label="Storage Dead _3\lCall\l"];
    X3d16d5436a0eabb7_2 -> X3d16d5436a0eabb7_4 [label="0"];
    X3d16d5436a0eabb7_2 -> X3d16d5436a0eabb7_3 [label="other"];
    X3d16d5436a0eabb7_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X3d16d5436a0eabb7_3 -> X3d16d5436a0eabb7_5 [label="0"];
    X3d16d5436a0eabb7_3 [label="Storage Dead _5\lCall\l"];
    X3d16d5436a0eabb7_4 -> X3d16d5436a0eabb7_5 [label="0"];
    X3d16d5436a0eabb7_4 [label="Storage Dead _5\lCall\l"];
    X3d16d5436a0eabb7_5 -> X3d16d5436a0eabb7_6;
    X3d16d5436a0eabb7_5 [label="Goto\l"];
    X3d16d5436a0eabb7_6 [label="Return\l"];
  }
  X3d16d5436a0eabb7_1 -> Xc0df9b1997ac90da_0 [label="mv(1),mv(2)"];
  X3d16d5436a0eabb7_3 -> Xb4c60c8acc2aa4f0_0 [label="mv(1),mv(2)"];
  X3d16d5436a0eabb7_4 -> Xe9aeaaaf212ff5cc_0 [label="mv(1),mv(2)"];
  subgraph cluster_128 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nu32>::fmt";
    style="filled";
    color=lightgray;
    node_129 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &u32\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    Xf8e41209cb5e3630_0 -> Xf8e41209cb5e3630_2 [label="0"];
    Xf8e41209cb5e3630_0 -> Xf8e41209cb5e3630_1 [label="other"];
    Xf8e41209cb5e3630_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    Xf8e41209cb5e3630_1 -> Xf8e41209cb5e3630_6 [label="0"];
    Xf8e41209cb5e3630_1 [label="Storage Dead _3\lCall\l"];
    Xf8e41209cb5e3630_2 -> Xf8e41209cb5e3630_4 [label="0"];
    Xf8e41209cb5e3630_2 -> Xf8e41209cb5e3630_3 [label="other"];
    Xf8e41209cb5e3630_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    Xf8e41209cb5e3630_3 -> Xf8e41209cb5e3630_5 [label="0"];
    Xf8e41209cb5e3630_3 [label="Storage Dead _5\lCall\l"];
    Xf8e41209cb5e3630_4 -> Xf8e41209cb5e3630_5 [label="0"];
    Xf8e41209cb5e3630_4 [label="Storage Dead _5\lCall\l"];
    Xf8e41209cb5e3630_5 -> Xf8e41209cb5e3630_6;
    Xf8e41209cb5e3630_5 [label="Goto\l"];
    Xf8e41209cb5e3630_6 [label="Return\l"];
  }
  Xf8e41209cb5e3630_1 -> X1d0677a8f15bd47_0 [label="mv(1),mv(2)"];
  Xf8e41209cb5e3630_3 -> Xca95a9d6f7061805_0 [label="mv(1),mv(2)"];
  Xf8e41209cb5e3630_4 -> X67d151235d77b301_0 [label="mv(1),mv(2)"];
  subgraph cluster_130 {
    label="core::fmt::num::<impl \ncore::fmt::Debug \nfor \nusize>::fmt";
    style="filled";
    color=lightgray;
    node_131 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &usize\l2 = &mut core::fmt::Formatter<'_>\l3 = u32\l4 = u32\l5 = u32\l6 = u32\l", style="filled", color=palegreen3];
    X85166202678594c8_0 -> X85166202678594c8_2 [label="0"];
    X85166202678594c8_0 -> X85166202678594c8_1 [label="other"];
    X85166202678594c8_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp((*2).0))\l3 <- BitAnd(mv(4), const ?_u32)\lStorage Dead _4\lSwitchInt mv(3)\l"];
    X85166202678594c8_1 -> X85166202678594c8_6 [label="0"];
    X85166202678594c8_1 [label="Storage Dead _3\lCall\l"];
    X85166202678594c8_2 -> X85166202678594c8_4 [label="0"];
    X85166202678594c8_2 -> X85166202678594c8_3 [label="other"];
    X85166202678594c8_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*2).0))\l5 <- BitAnd(mv(6), const ?_u32)\lStorage Dead _6\lSwitchInt mv(5)\l"];
    X85166202678594c8_3 -> X85166202678594c8_5 [label="0"];
    X85166202678594c8_3 [label="Storage Dead _5\lCall\l"];
    X85166202678594c8_4 -> X85166202678594c8_5 [label="0"];
    X85166202678594c8_4 [label="Storage Dead _5\lCall\l"];
    X85166202678594c8_5 -> X85166202678594c8_6;
    X85166202678594c8_5 [label="Goto\l"];
    X85166202678594c8_6 [label="Return\l"];
  }
  X85166202678594c8_1 -> Xa5e1b7e570e84a71_0 [label="mv(1),mv(2)"];
  X85166202678594c8_3 -> X98d8f249e941dc29_0 [label="mv(1),mv(2)"];
  X85166202678594c8_4 -> Xbebabec19f277d23_0 [label="mv(1),mv(2)"];
  subgraph cluster_132 {
    label="core::mem::size_of::<u64>";
    style="filled";
    color=lightgray;
    node_133 [label="LOCALS\l0 = usize\l", style="filled", color=palegreen3];
    X31bb347943910dd2_0 [label="0 <- SizeOf :: u64\lReturn\l"];
  }
  subgraph cluster_134 {
    label="core::num::<impl \nu64>::to_le_bytes";
    style="filled";
    color=lightgray;
    node_135 [label="LOCALS\l0 = [u8; 8]\l1 = u64\l", style="filled", color=palegreen3];
    Xd9e9b96a82ddeb95_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_136 {
    label="core::num::<impl \nu64>::from_str_radix";
    style="filled";
    color=lightgray;
    node_137 [label="LOCALS\l0 = core::result::Result<u64, core::num::ParseIntError>\l1 = &str\l2 = u32\l3 = bool\l4 = bool\l5 = !\l6 = bool\l7 = &[u8]\l8 = usize\l9 = usize\l10 = bool\l11 = &[u8]\l12 = &[u8]\l13 = &&[u8]\l14 = u64\l15 = bool\l16 = u32\l17 = &[u8]\l18 = usize\l19 = bool\l20 = &u8\l21 = &[u8]\l22 = u64\l23 = u64\l24 = core::option::Option<u32>\l25 = char\l26 = u8\l27 = isize\l28 = u32\l29 = u64\l30 = u64\l31 = &u8\l32 = &[u8]\l33 = u32\l34 = u32\l35 = usize\l36 = bool\l37 = &u8\l38 = &[u8]\l39 = core::option::Option<u64>\l40 = u64\l41 = u64\l42 = u64\l43 = core::option::Option<u32>\l44 = char\l45 = u8\l46 = isize\l47 = u32\l48 = isize\l49 = u64\l50 = core::option::Option<u64>\l51 = u64\l52 = isize\l53 = u64\l54 = &u8\l55 = &[u8]\l56 = core::option::Option<u64>\l57 = u64\l58 = u64\l59 = u64\l60 = u32\l61 = u64\l62 = u64\l63 = u64\l64 = u64\l65 = u64\l66 = usize\l67 = &[u8]\l68 = bool\l69 = usize\l70 = u64\l71 = bool\l72 = (u64, bool)\l73 = ()\l74 = bool\l75 = (u64, bool)\l76 = u64\l77 = ()\l78 = u64\l79 = bool\l80 = bool\l81 = &[u8]\l", style="filled", color=palegreen3];
    Xb253c4ae5a12a829_0 -> Xb253c4ae5a12a829_1 [label="0"];
    Xb253c4ae5a12a829_0 -> Xb253c4ae5a12a829_2 [label="other"];
    Xb253c4ae5a12a829_0 [label="Storage Live _3\l3 <- Gt(const ?_u32, cp(2))\lSwitchInt mv(3)\l"];
    Xb253c4ae5a12a829_1 -> Xb253c4ae5a12a829_3 [label="0"];
    Xb253c4ae5a12a829_1 -> Xb253c4ae5a12a829_2 [label="other"];
    Xb253c4ae5a12a829_1 [label="Storage Live _4\l4 <- Gt(cp(2), const ?_u32)\lSwitchInt mv(4)\l"];
    Xb253c4ae5a12a829_2 [label="Call\l"];
    Xb253c4ae5a12a829_3 -> Xb253c4ae5a12a829_4 [label="0"];
    Xb253c4ae5a12a829_3 -> Xb253c4ae5a12a829_5 [label="other"];
    Xb253c4ae5a12a829_3 [label="Storage Dead _4\lStorage Dead _3\lStorage Live _66\l67 <- Cast-Transmute cp(1)\l66 <- PtrMetadata(cp(67))\lSwitchInt mv(66)\l"];
    Xb253c4ae5a12a829_4 -> Xb253c4ae5a12a829_32;
    Xb253c4ae5a12a829_4 [label="Storage Dead _66\l0 <- Adt{1} (const core::num::ParseIntError)\lGoto\l"];
    Xb253c4ae5a12a829_5 -> Xb253c4ae5a12a829_7 [label="1"];
    Xb253c4ae5a12a829_5 -> Xb253c4ae5a12a829_6 [label="other"];
    Xb253c4ae5a12a829_5 [label="Storage Dead _66\lStorage Live _80\lStorage Live _81\l8 <- Len((*67))\lSwitchInt mv(8)\l"];
    Xb253c4ae5a12a829_6 -> Xb253c4ae5a12a829_8 [label="0"];
    Xb253c4ae5a12a829_6 -> Xb253c4ae5a12a829_9 [label="other"];
    Xb253c4ae5a12a829_6 [label="9 <- Len((*67))\l10 <- Ge(mv(9), const ?_usize)\lSwitchInt mv(10)\l"];
    Xb253c4ae5a12a829_7 -> Xb253c4ae5a12a829_12 [label="43"];
    Xb253c4ae5a12a829_7 -> Xb253c4ae5a12a829_12 [label="45"];
    Xb253c4ae5a12a829_7 -> Xb253c4ae5a12a829_6 [label="other"];
    Xb253c4ae5a12a829_7 [label="SwitchInt cp((*67)[0])\l"];
    Xb253c4ae5a12a829_8 -> Xb253c4ae5a12a829_45 [label="0"];
    Xb253c4ae5a12a829_8 -> Xb253c4ae5a12a829_41 [label="other"];
    Xb253c4ae5a12a829_8 [label="80 <- Use(const bool)\l81 <- Use(cp(67))\l6 <- Use(cp(80))\lStorage Live _7\l7 <- Use(cp(81))\lStorage Dead _80\lStorage Dead _81\lStorage Live _14\l14 <- Use(const ?_u64)\lStorage Live _15\lStorage Live _16\l16 <- Use(cp(2))\lStorage Live _17\l17 <- Use(cp(7))\lStorage Live _68\l68 <- Le(cp(2), const ?_u32)\lSwitchInt mv(68)\l"];
    Xb253c4ae5a12a829_9 -> Xb253c4ae5a12a829_11 [label="43"];
    Xb253c4ae5a12a829_9 -> Xb253c4ae5a12a829_10 [label="45"];
    Xb253c4ae5a12a829_9 -> Xb253c4ae5a12a829_8 [label="other"];
    Xb253c4ae5a12a829_9 [label="SwitchInt cp((*67)[0])\l"];
    Xb253c4ae5a12a829_10 -> Xb253c4ae5a12a829_8;
    Xb253c4ae5a12a829_10 [label="Storage Live _13\l12 <- & (*67)[1..-0]\l13 <- & 12\lStorage Dead _13\lGoto\l"];
    Xb253c4ae5a12a829_11 -> Xb253c4ae5a12a829_47 [label="0"];
    Xb253c4ae5a12a829_11 -> Xb253c4ae5a12a829_43 [label="other"];
    Xb253c4ae5a12a829_11 [label="11 <- & (*67)[1..-0]\l80 <- Use(const bool)\l81 <- Use(cp(11))\l6 <- Use(cp(80))\lStorage Live _7\l7 <- Use(cp(81))\lStorage Dead _80\lStorage Dead _81\lStorage Live _14\l14 <- Use(const ?_u64)\lStorage Live _15\lStorage Live _16\l16 <- Use(cp(2))\lStorage Live _17\l17 <- Use(cp(7))\lStorage Live _68\l68 <- Le(cp(2), const ?_u32)\lSwitchInt mv(68)\l"];
    Xb253c4ae5a12a829_12 -> Xb253c4ae5a12a829_31;
    Xb253c4ae5a12a829_12 [label="0 <- Adt{1} (const core::num::ParseIntError)\lStorage Dead _80\lStorage Dead _81\lGoto\l"];
    Xb253c4ae5a12a829_13 -> Xb253c4ae5a12a829_28 [label="0"];
    Xb253c4ae5a12a829_13 -> Xb253c4ae5a12a829_14 [label="other"];
    Xb253c4ae5a12a829_13 [label="18 <- Len((*7))\l19 <- Ge(mv(18), const ?_usize)\lSwitchInt mv(19)\l"];
    Xb253c4ae5a12a829_14 -> Xb253c4ae5a12a829_15 [label="24"];
    Xb253c4ae5a12a829_14 [label="Storage Live _20\l20 <- & (*7)[0]\l21 <- & (*7)[1..-0]\lStorage Live _22\l22 <- Use(cp(14))\lStorage Live _23\l23 <- Cast-IntToInt cp(2)\l14 <- Mul(mv(22), mv(23))\lStorage Dead _23\lStorage Dead _22\lStorage Live _24\lStorage Live _25\lStorage Live _26\l26 <- Use(cp((*20)))\l25 <- Cast-IntToInt mv(26)\lStorage Dead _26\lCall\l"];
    Xb253c4ae5a12a829_15 -> Xb253c4ae5a12a829_17 [label="0"];
    Xb253c4ae5a12a829_15 -> Xb253c4ae5a12a829_18 [label="1"];
    Xb253c4ae5a12a829_15 -> Xb253c4ae5a12a829_16 [label="other"];
    Xb253c4ae5a12a829_15 [label="Storage Dead _25\l27 <- Discriminant(24)\lSwitchInt mv(27)\l"];
    Xb253c4ae5a12a829_16 [label="Unreachable\l"];
    Xb253c4ae5a12a829_17 -> Xb253c4ae5a12a829_30;
    Xb253c4ae5a12a829_17 [label="0 <- Adt{1} (const core::num::ParseIntError)\lStorage Dead _24\lStorage Dead _20\lGoto\l"];
    Xb253c4ae5a12a829_18 -> Xb253c4ae5a12a829_13;
    Xb253c4ae5a12a829_18 [label="28 <- Use(cp((24 as variant 1).0))\lStorage Dead _24\lStorage Live _29\l29 <- Use(cp(14))\lStorage Live _30\l30 <- Cast-IntToInt cp(28)\l14 <- Add(mv(29), mv(30))\lStorage Dead _30\lStorage Dead _29\l7 <- Use(cp(21))\lStorage Dead _20\lGoto\l"];
    Xb253c4ae5a12a829_19 -> Xb253c4ae5a12a829_28 [label="0"];
    Xb253c4ae5a12a829_19 -> Xb253c4ae5a12a829_20 [label="other"];
    Xb253c4ae5a12a829_19 [label="35 <- Len((*7))\l36 <- Ge(mv(35), const ?_usize)\lSwitchInt mv(36)\l"];
    Xb253c4ae5a12a829_20 -> Xb253c4ae5a12a829_36 [label="0"];
    Xb253c4ae5a12a829_20 -> Xb253c4ae5a12a829_34 [label="other"];
    Xb253c4ae5a12a829_20 [label="Storage Live _37\l37 <- & (*7)[0]\l38 <- & (*7)[1..-0]\lStorage Live _39\lStorage Live _40\l40 <- Use(cp(14))\lStorage Live _41\l41 <- Cast-IntToInt cp(2)\lStorage Live _70\lStorage Live _71\lStorage Live _72\l72 <- chkd-Mul(cp(40), cp(41))\l70 <- Use(cp(72.0))\l71 <- Use(cp(72.1))\lStorage Dead _72\lSwitchInt cp(71)\l"];
    Xb253c4ae5a12a829_21 -> Xb253c4ae5a12a829_22 [label="0"];
    Xb253c4ae5a12a829_21 -> Xb253c4ae5a12a829_23 [label="1"];
    Xb253c4ae5a12a829_21 -> Xb253c4ae5a12a829_16 [label="other"];
    Xb253c4ae5a12a829_21 [label="Storage Dead _44\l46 <- Discriminant(43)\lSwitchInt mv(46)\l"];
    Xb253c4ae5a12a829_22 -> Xb253c4ae5a12a829_29;
    Xb253c4ae5a12a829_22 [label="0 <- Adt{1} (const core::num::ParseIntError)\lStorage Dead _43\lGoto\l"];
    Xb253c4ae5a12a829_23 -> Xb253c4ae5a12a829_24 [label="0"];
    Xb253c4ae5a12a829_23 -> Xb253c4ae5a12a829_25 [label="1"];
    Xb253c4ae5a12a829_23 -> Xb253c4ae5a12a829_16 [label="other"];
    Xb253c4ae5a12a829_23 [label="47 <- Use(cp((43 as variant 1).0))\l42 <- Cast-IntToInt cp(47)\lStorage Dead _43\l48 <- Discriminant(39)\lSwitchInt mv(48)\l"];
    Xb253c4ae5a12a829_24 -> Xb253c4ae5a12a829_29;
    Xb253c4ae5a12a829_24 [label="0 <- Adt{1} (const core::num::ParseIntError)\lGoto\l"];
    Xb253c4ae5a12a829_25 -> Xb253c4ae5a12a829_40 [label="0"];
    Xb253c4ae5a12a829_25 -> Xb253c4ae5a12a829_38 [label="other"];
    Xb253c4ae5a12a829_25 [label="49 <- Use(cp((39 as variant 1).0))\l14 <- Use(cp(49))\lStorage Live _50\lStorage Live _51\l51 <- Use(cp(14))\lStorage Live _74\lStorage Live _75\l75 <- chkd-Add(cp(51), cp(42))\l74 <- Use(cp(75.1))\lSwitchInt cp(74)\l"];
    Xb253c4ae5a12a829_26 -> Xb253c4ae5a12a829_29;
    Xb253c4ae5a12a829_26 [label="0 <- Adt{1} (const core::num::ParseIntError)\lStorage Dead _50\lGoto\l"];
    Xb253c4ae5a12a829_27 -> Xb253c4ae5a12a829_19;
    Xb253c4ae5a12a829_27 [label="53 <- Use(cp((50 as variant 1).0))\l14 <- Use(cp(53))\lStorage Dead _50\l7 <- Use(cp(38))\lStorage Dead _39\lStorage Dead _37\lGoto\l"];
    Xb253c4ae5a12a829_28 -> Xb253c4ae5a12a829_32;
    Xb253c4ae5a12a829_28 [label="Storage Dead _15\lStorage Live _65\l65 <- Use(cp(14))\l0 <- Adt{0} (mv(65))\lStorage Dead _65\lStorage Dead _14\lStorage Dead _7\lGoto\l"];
    Xb253c4ae5a12a829_29 -> Xb253c4ae5a12a829_30;
    Xb253c4ae5a12a829_29 [label="Storage Dead _39\lStorage Dead _37\lGoto\l"];
    Xb253c4ae5a12a829_30 -> Xb253c4ae5a12a829_31;
    Xb253c4ae5a12a829_30 [label="Storage Dead _15\lStorage Dead _14\lStorage Dead _7\lGoto\l"];
    Xb253c4ae5a12a829_31 -> Xb253c4ae5a12a829_32;
    Xb253c4ae5a12a829_31 [label="Goto\l"];
    Xb253c4ae5a12a829_32 [label="Return\l"];
    Xb253c4ae5a12a829_33 -> Xb253c4ae5a12a829_21 [label="43"];
    Xb253c4ae5a12a829_33 [label="Storage Dead _71\lStorage Dead _70\lStorage Dead _41\lStorage Dead _40\lStorage Live _43\lStorage Live _44\lStorage Live _45\l45 <- Use(cp((*37)))\l44 <- Cast-IntToInt mv(45)\lStorage Dead _45\lCall\l"];
    Xb253c4ae5a12a829_34 -> Xb253c4ae5a12a829_35 [label="73"];
    Xb253c4ae5a12a829_34 [label="Call\l"];
    Xb253c4ae5a12a829_35 -> Xb253c4ae5a12a829_33;
    Xb253c4ae5a12a829_35 [label="39 <- Use(const core::option::Option<u64>)\lGoto\l"];
    Xb253c4ae5a12a829_36 -> Xb253c4ae5a12a829_33;
    Xb253c4ae5a12a829_36 [label="39 <- Adt{1} (cp(70))\lGoto\l"];
    Xb253c4ae5a12a829_37 -> Xb253c4ae5a12a829_26 [label="0"];
    Xb253c4ae5a12a829_37 -> Xb253c4ae5a12a829_27 [label="1"];
    Xb253c4ae5a12a829_37 -> Xb253c4ae5a12a829_16 [label="other"];
    Xb253c4ae5a12a829_37 [label="Storage Dead _51\l52 <- Discriminant(50)\lSwitchInt mv(52)\l"];
    Xb253c4ae5a12a829_38 -> Xb253c4ae5a12a829_39 [label="77"];
    Xb253c4ae5a12a829_38 [label="Call\l"];
    Xb253c4ae5a12a829_39 -> Xb253c4ae5a12a829_37;
    Xb253c4ae5a12a829_39 [label="Storage Dead _75\lStorage Dead _74\l50 <- Use(const core::option::Option<u64>)\lGoto\l"];
    Xb253c4ae5a12a829_40 -> Xb253c4ae5a12a829_37;
    Xb253c4ae5a12a829_40 [label="Storage Dead _75\lStorage Dead _74\lStorage Live _76\l76 <- AddUnchecked(cp(51), cp(42))\l50 <- Adt{1} (mv(76))\lStorage Dead _76\lGoto\l"];
    Xb253c4ae5a12a829_41 -> Xb253c4ae5a12a829_49 [label="0"];
    Xb253c4ae5a12a829_41 -> Xb253c4ae5a12a829_42 [label="other"];
    Xb253c4ae5a12a829_41 [label="Storage Live _69\l69 <- PtrMetadata(cp(17))\l15 <- Le(mv(69), const ?_usize)\lStorage Dead _69\lStorage Dead _68\lSwitchInt mv(15)\l"];
    Xb253c4ae5a12a829_42 -> Xb253c4ae5a12a829_13;
    Xb253c4ae5a12a829_42 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_43 -> Xb253c4ae5a12a829_50 [label="0"];
    Xb253c4ae5a12a829_43 -> Xb253c4ae5a12a829_44 [label="other"];
    Xb253c4ae5a12a829_43 [label="Storage Live _69\l69 <- PtrMetadata(cp(17))\l15 <- Le(mv(69), const ?_usize)\lStorage Dead _69\lStorage Dead _68\lSwitchInt mv(15)\l"];
    Xb253c4ae5a12a829_44 -> Xb253c4ae5a12a829_13;
    Xb253c4ae5a12a829_44 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_45 -> Xb253c4ae5a12a829_51 [label="0"];
    Xb253c4ae5a12a829_45 -> Xb253c4ae5a12a829_46 [label="other"];
    Xb253c4ae5a12a829_45 [label="15 <- Use(const bool)\lStorage Dead _68\lSwitchInt mv(15)\l"];
    Xb253c4ae5a12a829_46 -> Xb253c4ae5a12a829_13;
    Xb253c4ae5a12a829_46 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_47 -> Xb253c4ae5a12a829_52 [label="0"];
    Xb253c4ae5a12a829_47 -> Xb253c4ae5a12a829_48 [label="other"];
    Xb253c4ae5a12a829_47 [label="15 <- Use(const bool)\lStorage Dead _68\lSwitchInt mv(15)\l"];
    Xb253c4ae5a12a829_48 -> Xb253c4ae5a12a829_13;
    Xb253c4ae5a12a829_48 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_49 -> Xb253c4ae5a12a829_19;
    Xb253c4ae5a12a829_49 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_50 -> Xb253c4ae5a12a829_19;
    Xb253c4ae5a12a829_50 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_51 -> Xb253c4ae5a12a829_19;
    Xb253c4ae5a12a829_51 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
    Xb253c4ae5a12a829_52 -> Xb253c4ae5a12a829_19;
    Xb253c4ae5a12a829_52 [label="Storage Dead _17\lStorage Dead _16\lGoto\l"];
  }
  Xb253c4ae5a12a829_2 -> Xc9c7b31891babc83_0 [label="mv(2)"];
  Xb253c4ae5a12a829_14 -> X717361f9a6dc2c2a_0 [label="mv(25),cp(2)"];
  Xb253c4ae5a12a829_33 -> X717361f9a6dc2c2a_0 [label="mv(44),cp(2)"];
  Xb253c4ae5a12a829_34 -> X8fc2060ad58510d8_0 [label=""];
  Xb253c4ae5a12a829_38 -> X8fc2060ad58510d8_0 [label=""];
  subgraph cluster_138 {
    label="core::num::<impl \nisize>::unchecked_neg::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_139 [label="LOCALS\l0 = ()\l1 = isize\l2 = !\l3 = bool\l4 = ()\l", style="filled", color=palegreen3];
    X44b1b4235fabb732_0 -> X44b1b4235fabb732_3 [label="0"];
    X44b1b4235fabb732_0 -> X44b1b4235fabb732_1 [label="other"];
    X44b1b4235fabb732_0 [label="Storage Live _3\l3 <- Eq(cp(1), const ?_isize)\lSwitchInt cp(3)\l"];
    X44b1b4235fabb732_1 -> X44b1b4235fabb732_2 [label="4"];
    X44b1b4235fabb732_1 [label="Call\l"];
    X44b1b4235fabb732_2 [label="Storage Dead _3\lCall\l"];
    X44b1b4235fabb732_3 [label="Storage Dead _3\lReturn\l"];
  }
  X44b1b4235fabb732_1 -> X8fc2060ad58510d8_0 [label=""];
  X44b1b4235fabb732_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_140 {
    label="core::num::<impl \nusize>::unchecked_add::pr\necondition_check";
    style="filled";
    color=lightgray;
    node_141 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = !\l4 = u64\l5 = bool\l6 = (u64, bool)\l7 = u64\l8 = u64\l", style="filled", color=palegreen3];
    X83d527cca8322d39_0 -> X83d527cca8322d39_2 [label="0"];
    X83d527cca8322d39_0 -> X83d527cca8322d39_1 [label="other"];
    X83d527cca8322d39_0 [label="Storage Live _4\lStorage Live _6\lStorage Live _7\l7 <- Cast-IntToInt cp(1)\lStorage Live _8\l8 <- Cast-IntToInt cp(2)\l6 <- chkd-Add(mv(7), mv(8))\lStorage Dead _8\lStorage Dead _7\l4 <- Use(cp(6.0))\l5 <- Use(cp(6.1))\lStorage Dead _6\lStorage Dead _4\lSwitchInt cp(5)\l"];
    X83d527cca8322d39_1 [label="Call\l"];
    X83d527cca8322d39_2 [label="Return\l"];
  }
  X83d527cca8322d39_1 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_142 {
    label="core::num::<impl \ncore::str::FromStr \nfor \nu64>::from_str";
    style="filled";
    color=lightgray;
    node_143 [label="LOCALS\l0 = core::result::Result<u64, core::num::ParseIntError>\l1 = &str\l", style="filled", color=palegreen3];
    Xe1dbe8f798a5f54b_0 -> Xe1dbe8f798a5f54b_1 [label="0"];
    Xe1dbe8f798a5f54b_0 [label="Call\l"];
    Xe1dbe8f798a5f54b_1 [label="Return\l"];
  }
  Xe1dbe8f798a5f54b_0 -> Xb253c4ae5a12a829_0 [label="mv(1),const ?_u32"];
  subgraph cluster_144 {
    label="<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error} \nas \ncore::ops::FnOnce<(&pinoc\nchio::program_error::Prog\nramError,)>>::call_once";
    style="filled";
    color=lightgray;
    node_145 [label="LOCALS\l0 = ()\l1 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l2 = (&pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xd7455b7937af9e68_0 -> Xd7455b7937af9e68_1 [label="0"];
    Xd7455b7937af9e68_0 [label="Call\l"];
    Xd7455b7937af9e68_1 [label="Return\l"];
  }
  Xd7455b7937af9e68_0 -> Xd7455b7937af9e68_0: 1 [label="mv(2.0)"];
  subgraph cluster_146 {
    label="<fn(core::num::NonZero<us\nize>) \n-> \ncore::result::Result<(), \ncore::num::NonZero<usize>\n> \n{core::result::Result::<(\n), \ncore::num::NonZero<usize>\n>::Err} \nas \ncore::ops::FnOnce<(core::\nnum::NonZero<usize>,)>>::\ncall_once";
    style="filled";
    color=lightgray;
    node_147 [label="LOCALS\l0 = core::result::Result<(), core::num::NonZero<usize>>\l1 = fn(core::num::NonZero<usize>) -> core::result::Result<(), core::num::NonZero<usize>> {core::result::Result::<(), core::num::NonZero<usize>>::Err}\l2 = (core::num::NonZero<usize>,)\l", style="filled", color=palegreen3];
    X932b861380de84fd_0 -> X932b861380de84fd_1 [label="0"];
    X932b861380de84fd_0 [label="Call\l"];
    X932b861380de84fd_1 [label="Return\l"];
  }
  X932b861380de84fd_0 -> X932b861380de84fd_0: 1 [label="mv(2.0)"];
  subgraph cluster_148 {
    label="core::ops::try_trait::Nev\nerShortCircuit::<u8>::wra\np_mut_2::<u8, \nusize, \n{closure@<core::array::In\ntoIter<bool, \n32> \nas \ncore::iter::Iterator>::fo\nld<u8, \n{closure@core::iter::adap\nters::map::map_fold<bool,\n \nu8, \nu8, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}, \n{closure@<u8 \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::array:\n:IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}}>::{closure#\n0}}>::{closure#0}}>::{clo\nsure#0}";
    style="filled";
    color=lightgray;
    node_149 [label="LOCALS\l0 = core::ops::try_trait::NeverShortCircuit<u8>\l1 = &mut {closure@core::ops::try_trait::NeverShortCircuit<u8>::wrap_mut_2<u8, usize, {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}>::{closure#0}}\l2 = u8\l3 = usize\l4 = u8\l5 = &mut {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}\l6 = (u8, usize)\l", style="filled", color=palegreen3];
    X2b2f1937bfd7df3e_0 -> X2b2f1937bfd7df3e_1 [label="4"];
    X2b2f1937bfd7df3e_0 [label="Storage Live _4\lStorage Live _5\l5 <- &mut (*1).0\lStorage Live _6\l6 <- Tuple (cp(2), cp(3))\lCall\l"];
    X2b2f1937bfd7df3e_1 [label="Storage Dead _6\lStorage Dead _5\l0 <- Adt{0} (mv(4))\lStorage Dead _4\lReturn\l"];
  }
  X2b2f1937bfd7df3e_0 -> Xcc72308673f5c273_0 [label="mv(5),mv(6)"];
  subgraph cluster_150 {
    label="core::ptr::drop_in_place:\n:<&core::result::Result<(\n), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_151 [label="LOCALS\l0 = ()\l1 = *mut &core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X510712dba1e9a34a_0 [label="Return\l"];
  }
  subgraph cluster_152 {
    label="core::ptr::drop_in_place:\n:<usize>";
    style="filled";
    color=lightgray;
    node_153 [label="LOCALS\l0 = ()\l1 = *mut usize\l", style="filled", color=palegreen3];
    X52d835e8bd94102b_0 [label="Return\l"];
  }
  subgraph cluster_154 {
    label="core::ptr::drop_in_place:\n:<&u8>";
    style="filled";
    color=lightgray;
    node_155 [label="LOCALS\l0 = ()\l1 = *mut &u8\l", style="filled", color=palegreen3];
    Xb550bd6883153f75_0 [label="Return\l"];
  }
  subgraph cluster_156 {
    label="core::ptr::drop_in_place:\n:<&u32>";
    style="filled";
    color=lightgray;
    node_157 [label="LOCALS\l0 = ()\l1 = *mut &u32\l", style="filled", color=palegreen3];
    X30c4b72bd88588e9_0 [label="Return\l"];
  }
  subgraph cluster_158 {
    label="core::ptr::drop_in_place:\n:<&()>";
    style="filled";
    color=lightgray;
    node_159 [label="LOCALS\l0 = ()\l1 = *mut &()\l", style="filled", color=palegreen3];
    Xb1de6c64f30c28ca_0 [label="Return\l"];
  }
  subgraph cluster_160 {
    label="core::ptr::drop_in_place:\n:<core::str::Utf8Error>";
    style="filled";
    color=lightgray;
    node_161 [label="LOCALS\l0 = ()\l1 = *mut core::str::Utf8Error\l", style="filled", color=palegreen3];
    X3f5daf7eaf56a848_0 [label="Return\l"];
  }
  subgraph cluster_162 {
    label="core::ptr::drop_in_place:\n:<core::num::TryFromIntEr\nror>";
    style="filled";
    color=lightgray;
    node_163 [label="LOCALS\l0 = ()\l1 = *mut core::num::TryFromIntError\l", style="filled", color=palegreen3];
    Xeafe983e6346020c_0 [label="Return\l"];
  }
  subgraph cluster_164 {
    label="core::ptr::drop_in_place:\n:<&core::option::Option<u\n8>>";
    style="filled";
    color=lightgray;
    node_165 [label="LOCALS\l0 = ()\l1 = *mut &core::option::Option<u8>\l", style="filled", color=palegreen3];
    Xbf0fe1f8c118b95b_0 [label="Return\l"];
  }
  subgraph cluster_166 {
    label="core::ptr::drop_in_place:\n:<pinocchio::program_erro\nr::ProgramError>";
    style="filled";
    color=lightgray;
    node_167 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X5267a1347b838209_0 [label="Return\l"];
  }
  subgraph cluster_168 {
    label="core::ptr::drop_in_place:\n:<&pinocchio::program_err\nor::ProgramError>";
    style="filled";
    color=lightgray;
    node_169 [label="LOCALS\l0 = ()\l1 = *mut &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xbed7bd1a7d1dca9_0 [label="Return\l"];
  }
  subgraph cluster_170 {
    label="core::ptr::drop_in_place:\n:<core::array::IntoIter<b\nool, \n32>>";
    style="filled";
    color=lightgray;
    node_171 [label="LOCALS\l0 = ()\l1 = *mut core::array::IntoIter<bool, 32>\l2 = &mut core::array::IntoIter<bool, 32>\l3 = ()\l", style="filled", color=palegreen3];
    X6102c620651915d2_0 -> X6102c620651915d2_1 [label="3"];
    X6102c620651915d2_0 [label="2 <- &mut (*1)\lCall\l"];
    X6102c620651915d2_1 [label="Return\l"];
  }
  X6102c620651915d2_0 -> X1598c2e61cef364e_0 [label="mv(2)"];
  subgraph cluster_172 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \nu8>::add";
    style="filled";
    color=lightgray;
    node_173 [label="LOCALS\l0 = *mut u8\l1 = *mut u8\l2 = usize\l", style="filled", color=palegreen3];
    X99398f9f14483c90_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_174 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \npinocchio::account_info::\nAccountInfo>::add";
    style="filled";
    color=lightgray;
    node_175 [label="LOCALS\l0 = *mut pinocchio::account_info::AccountInfo\l1 = *mut pinocchio::account_info::AccountInfo\l2 = usize\l", style="filled", color=palegreen3];
    X921508901878e521_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_176 {
    label="core::ptr::mut_ptr::<impl\n \n*mut \npinocchio::account_info::\nAccountInfo>::write";
    style="filled";
    color=lightgray;
    node_177 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::account_info::AccountInfo\l2 = pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X9344cfdf8f55fc21_0 [label="(*1) <- Use(cp(2))\lReturn\l"];
  }
  subgraph cluster_178 {
    label="core::ptr::const_ptr::<im\npl \n*const \npinocchio::account_info::\nAccountInfo>::add";
    style="filled";
    color=lightgray;
    node_179 [label="LOCALS\l0 = *const pinocchio::account_info::AccountInfo\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l", style="filled", color=palegreen3];
    X2a511a2fc7bfad7f_0 [label="0 <- Offset(cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_180 {
    label="core::ptr::const_ptr::<im\npl \n*const \npinocchio_token_interface\n::state::mint::Mint>::rea\nd";
    style="filled";
    color=lightgray;
    node_181 [label="LOCALS\l0 = pinocchio_token_interface::state::mint::Mint\l1 = *const pinocchio_token_interface::state::mint::Mint\l", style="filled", color=palegreen3];
    Xe54069678bfda177_0 [label="0 <- Use(cp((*1)))\lReturn\l"];
  }
  subgraph cluster_182 {
    label="core::ptr::const_ptr::<im\npl \n*const \nT>::sub_ptr::precondition\n_check";
    style="filled";
    color=lightgray;
    node_183 [label="LOCALS\l0 = ()\l1 = *const ()\l2 = *const ()\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xfccd6b940db3d5e8_0 -> Xfccd6b940db3d5e8_2 [label="0"];
    Xfccd6b940db3d5e8_0 -> Xfccd6b940db3d5e8_1 [label="other"];
    Xfccd6b940db3d5e8_0 [label="Storage Live _3\l3 <- Ge(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xfccd6b940db3d5e8_1 [label="Storage Dead _3\lReturn\l"];
    Xfccd6b940db3d5e8_2 [label="Call\l"];
  }
  Xfccd6b940db3d5e8_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_184 {
    label="core::str::next_code_poin\nt::<'_, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_185 [label="LOCALS\l0 = core::option::Option<u32>\l1 = &mut core::slice::Iter<'_, u8>\l2 = u8\l3 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &u8>\l4 = core::option::Option<&u8>\l5 = &u8\l6 = bool\l7 = u32\l8 = u32\l9 = u8\l10 = &u8\l11 = core::option::Option<&u8>\l12 = u32\l13 = bool\l14 = u8\l15 = &u8\l16 = core::option::Option<&u8>\l17 = u32\l18 = u32\l19 = u8\l20 = u32\l21 = bool\l22 = u8\l23 = &u8\l24 = core::option::Option<&u8>\l25 = u32\l26 = u32\l27 = u32\l28 = u32\l29 = isize\l30 = &u8\l31 = u8\l32 = isize\l33 = bool\l34 = ()\l35 = u32\l36 = u32\l37 = u8\l38 = isize\l39 = bool\l40 = ()\l41 = u32\l42 = u32\l43 = u8\l44 = isize\l45 = bool\l46 = ()\l47 = u32\l48 = u32\l49 = u8\l", style="filled", color=palegreen3];
    Xf810b0801103927_0 -> Xf810b0801103927_1 [label="4"];
    Xf810b0801103927_0 [label="Storage Live _3\lStorage Live _4\lCall\l"];
    Xf810b0801103927_1 -> Xf810b0801103927_13 [label="0"];
    Xf810b0801103927_1 -> Xf810b0801103927_14 [label="1"];
    Xf810b0801103927_1 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_1 [label="Storage Live _29\lStorage Live _30\l29 <- Discriminant(4)\lSwitchInt mv(29)\l"];
    Xf810b0801103927_2 [label="Unreachable\l"];
    Xf810b0801103927_3 -> Xf810b0801103927_12;
    Xf810b0801103927_3 [label="Storage Live _7\l7 <- Cast-IntToInt cp(2)\l0 <- Adt{1} (mv(7))\lStorage Dead _7\lStorage Dead _6\lGoto\l"];
    Xf810b0801103927_4 -> Xf810b0801103927_5 [label="11"];
    Xf810b0801103927_4 [label="Storage Dead _6\lStorage Live _31\l31 <- BitAnd(cp(2), const ?_u8)\l8 <- Cast-IntToInt mv(31)\lStorage Dead _31\lStorage Live _10\lStorage Live _11\lCall\l"];
    Xf810b0801103927_5 -> Xf810b0801103927_15 [label="0"];
    Xf810b0801103927_5 -> Xf810b0801103927_16 [label="1"];
    Xf810b0801103927_5 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_5 [label="Storage Live _32\l32 <- Discriminant(11)\lSwitchInt mv(32)\l"];
    Xf810b0801103927_6 -> Xf810b0801103927_7 [label="16"];
    Xf810b0801103927_6 [label="Storage Live _15\lStorage Live _16\lCall\l"];
    Xf810b0801103927_7 -> Xf810b0801103927_17 [label="0"];
    Xf810b0801103927_7 -> Xf810b0801103927_18 [label="1"];
    Xf810b0801103927_7 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_7 [label="Storage Live _38\l38 <- Discriminant(16)\lSwitchInt mv(38)\l"];
    Xf810b0801103927_8 -> Xf810b0801103927_9 [label="24"];
    Xf810b0801103927_8 [label="Storage Live _23\lStorage Live _24\lCall\l"];
    Xf810b0801103927_9 -> Xf810b0801103927_19 [label="0"];
    Xf810b0801103927_9 -> Xf810b0801103927_20 [label="1"];
    Xf810b0801103927_9 -> Xf810b0801103927_2 [label="other"];
    Xf810b0801103927_9 [label="Storage Live _44\l44 <- Discriminant(24)\lSwitchInt mv(44)\l"];
    Xf810b0801103927_10 -> Xf810b0801103927_11;
    Xf810b0801103927_10 [label="Storage Dead _21\lGoto\l"];
    Xf810b0801103927_11 -> Xf810b0801103927_12;
    Xf810b0801103927_11 [label="Storage Dead _13\lStorage Live _28\l28 <- Use(cp(12))\l0 <- Adt{1} (mv(28))\lStorage Dead _28\lStorage Dead _12\lGoto\l"];
    Xf810b0801103927_12 [label="Return\l"];
    Xf810b0801103927_13 -> Xf810b0801103927_12;
    Xf810b0801103927_13 [label="Storage Dead _30\lStorage Dead _29\lStorage Dead _4\l0 <- Use(const core::option::Option<u32>)\lStorage Dead _3\lGoto\l"];
    Xf810b0801103927_14 -> Xf810b0801103927_4 [label="0"];
    Xf810b0801103927_14 -> Xf810b0801103927_3 [label="other"];
    Xf810b0801103927_14 [label="30 <- Use(mv((4 as variant 1).0))\l3 <- Adt{0} (cp(30))\lStorage Dead _30\lStorage Dead _29\lStorage Dead _4\l5 <- Use(cp((3 as variant 0).0))\l2 <- Use(cp((*5)))\lStorage Dead _3\lStorage Live _6\l6 <- Lt(cp(2), const ?_u8)\lSwitchInt mv(6)\l"];
    Xf810b0801103927_15 -> Xf810b0801103927_2 [label="34"];
    Xf810b0801103927_15 [label="Storage Live _33\l33 <- UbChecks :: bool\lIntr: Assume cp(33)\lCall\l"];
    Xf810b0801103927_16 -> Xf810b0801103927_11 [label="0"];
    Xf810b0801103927_16 -> Xf810b0801103927_6 [label="other"];
    Xf810b0801103927_16 [label="10 <- Use(mv((11 as variant 1).0))\lStorage Dead _32\lStorage Dead _11\l9 <- Use(cp((*10)))\lStorage Dead _10\lStorage Live _12\lStorage Live _35\l35 <- Shl(cp(8), const ?_i32)\lStorage Live _36\lStorage Live _37\l37 <- BitAnd(cp(9), const ?_u8)\l36 <- Cast-IntToInt mv(37)\lStorage Dead _37\l12 <- BitOr(mv(35), mv(36))\lStorage Dead _36\lStorage Dead _35\lStorage Live _13\l13 <- Ge(cp(2), const ?_u8)\lSwitchInt mv(13)\l"];
    Xf810b0801103927_17 -> Xf810b0801103927_2 [label="40"];
    Xf810b0801103927_17 [label="Storage Live _39\l39 <- UbChecks :: bool\lIntr: Assume cp(39)\lCall\l"];
    Xf810b0801103927_18 -> Xf810b0801103927_10 [label="0"];
    Xf810b0801103927_18 -> Xf810b0801103927_8 [label="other"];
    Xf810b0801103927_18 [label="15 <- Use(mv((16 as variant 1).0))\lStorage Dead _38\lStorage Dead _16\l14 <- Use(cp((*15)))\lStorage Dead _15\lStorage Live _18\lStorage Live _19\l19 <- BitAnd(cp(9), const ?_u8)\l18 <- Cast-IntToInt mv(19)\lStorage Dead _19\lStorage Live _41\l41 <- Shl(cp(18), const ?_i32)\lStorage Live _42\lStorage Live _43\l43 <- BitAnd(cp(14), const ?_u8)\l42 <- Cast-IntToInt mv(43)\lStorage Dead _43\l17 <- BitOr(mv(41), mv(42))\lStorage Dead _42\lStorage Dead _41\lStorage Dead _18\lStorage Live _20\l20 <- Shl(cp(8), const ?_i32)\l12 <- BitOr(mv(20), cp(17))\lStorage Dead _20\lStorage Live _21\l21 <- Ge(cp(2), const ?_u8)\lSwitchInt mv(21)\l"];
    Xf810b0801103927_19 -> Xf810b0801103927_2 [label="46"];
    Xf810b0801103927_19 [label="Storage Live _45\l45 <- UbChecks :: bool\lIntr: Assume cp(45)\lCall\l"];
    Xf810b0801103927_20 -> Xf810b0801103927_10;
    Xf810b0801103927_20 [label="23 <- Use(mv((24 as variant 1).0))\lStorage Dead _44\lStorage Dead _24\l22 <- Use(cp((*23)))\lStorage Dead _23\lStorage Live _25\lStorage Live _26\l26 <- BitAnd(cp(8), const ?_u32)\l25 <- Shl(mv(26), const ?_i32)\lStorage Dead _26\lStorage Live _27\lStorage Live _47\l47 <- Shl(cp(17), const ?_i32)\lStorage Live _48\lStorage Live _49\l49 <- BitAnd(cp(22), const ?_u8)\l48 <- Cast-IntToInt mv(49)\lStorage Dead _49\l27 <- BitOr(mv(47), mv(48))\lStorage Dead _48\lStorage Dead _47\l12 <- BitOr(mv(25), mv(27))\lStorage Dead _27\lStorage Dead _25\lGoto\l"];
  }
  Xf810b0801103927_0 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_4 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_6 -> X26beb3c664659c46_0 [label="cp(1)"];
  Xf810b0801103927_8 -> X26beb3c664659c46_0 [label="mv(1)"];
  Xf810b0801103927_15 -> X33a001831920b814_0 [label=""];
  Xf810b0801103927_17 -> X33a001831920b814_0 [label=""];
  Xf810b0801103927_19 -> X33a001831920b814_0 [label=""];
  subgraph cluster_186 {
    label="core::str::validations::n\next_code_point_reverse::<\n'_, \ncore::slice::Iter<'_, \nu8>>";
    style="filled";
    color=lightgray;
    node_187 [label="LOCALS\l0 = core::option::Option<u32>\l1 = &mut core::slice::Iter<'_, u8>\l2 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &u8>\l3 = core::option::Option<&u8>\l4 = &u8\l5 = u8\l6 = bool\l7 = u8\l8 = u32\l9 = u8\l10 = u32\l11 = u8\l12 = &u8\l13 = core::option::Option<&u8>\l14 = u32\l15 = bool\l16 = u8\l17 = &u8\l18 = core::option::Option<&u8>\l19 = u32\l20 = bool\l21 = u8\l22 = &u8\l23 = core::option::Option<&u8>\l24 = u32\l25 = u32\l26 = u32\l27 = u32\l28 = u32\l29 = u32\l30 = u32\l31 = u32\l32 = isize\l33 = &u8\l34 = isize\l35 = bool\l36 = ()\l37 = u8\l38 = i8\l39 = isize\l40 = bool\l41 = ()\l42 = u8\l43 = i8\l44 = isize\l45 = bool\l46 = ()\l47 = u8\l48 = u32\l49 = u32\l50 = u8\l51 = u32\l52 = u32\l53 = u8\l54 = u32\l55 = u32\l56 = u8\l", style="filled", color=palegreen3];
    X514f89d19e2bc1b0_0 -> X514f89d19e2bc1b0_1 [label="3"];
    X514f89d19e2bc1b0_0 [label="Storage Live _2\lStorage Live _3\lCall\l"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_16 [label="0"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_17 [label="1"];
    X514f89d19e2bc1b0_1 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_1 [label="Storage Live _32\lStorage Live _33\l32 <- Discriminant(3)\lSwitchInt mv(32)\l"];
    X514f89d19e2bc1b0_2 [label="Unreachable\l"];
    X514f89d19e2bc1b0_3 -> X514f89d19e2bc1b0_14;
    X514f89d19e2bc1b0_3 [label="Storage Dead _7\lStorage Dead _6\l5 <- Use(cp((*4)))\lStorage Live _8\l8 <- Cast-IntToInt cp(5)\l0 <- Adt{1} (mv(8))\lStorage Dead _8\lGoto\l"];
    X514f89d19e2bc1b0_4 -> X514f89d19e2bc1b0_5 [label="13"];
    X514f89d19e2bc1b0_4 [label="Storage Dead _7\lStorage Dead _6\l9 <- Use(cp((*4)))\lStorage Dead _2\lStorage Live _10\lStorage Live _12\lStorage Live _13\lCall\l"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_18 [label="0"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_19 [label="1"];
    X514f89d19e2bc1b0_5 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_5 [label="Storage Live _34\l34 <- Discriminant(13)\lSwitchInt mv(34)\l"];
    X514f89d19e2bc1b0_6 -> X514f89d19e2bc1b0_7 [label="18"];
    X514f89d19e2bc1b0_6 [label="Storage Live _17\lStorage Live _18\lCall\l"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_20 [label="0"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_21 [label="1"];
    X514f89d19e2bc1b0_7 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_7 [label="Storage Live _39\l39 <- Discriminant(18)\lSwitchInt mv(39)\l"];
    X514f89d19e2bc1b0_8 -> X514f89d19e2bc1b0_9 [label="23"];
    X514f89d19e2bc1b0_8 [label="Storage Live _22\lStorage Live _23\lCall\l"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_22 [label="0"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_23 [label="1"];
    X514f89d19e2bc1b0_9 -> X514f89d19e2bc1b0_2 [label="other"];
    X514f89d19e2bc1b0_9 [label="Storage Live _44\l44 <- Discriminant(23)\lSwitchInt mv(44)\l"];
    X514f89d19e2bc1b0_10 -> X514f89d19e2bc1b0_11;
    X514f89d19e2bc1b0_10 [label="Goto\l"];
    X514f89d19e2bc1b0_11 -> X514f89d19e2bc1b0_13;
    X514f89d19e2bc1b0_11 [label="Storage Dead _20\lStorage Live _27\lStorage Live _28\l28 <- Use(cp(10))\lStorage Live _51\l51 <- Shl(cp(28), const ?_i32)\lStorage Live _52\lStorage Live _53\l53 <- BitAnd(cp(11), const ?_u8)\l52 <- Cast-IntToInt mv(53)\lStorage Dead _53\l27 <- BitOr(mv(51), mv(52))\lStorage Dead _52\lStorage Dead _51\lStorage Dead _28\l10 <- Use(mv(27))\lStorage Dead _27\lGoto\l"];
    X514f89d19e2bc1b0_12 -> X514f89d19e2bc1b0_13;
    X514f89d19e2bc1b0_12 [label="Goto\l"];
    X514f89d19e2bc1b0_13 -> X514f89d19e2bc1b0_15;
    X514f89d19e2bc1b0_13 [label="Storage Dead _15\lStorage Live _29\lStorage Live _30\l30 <- Use(cp(10))\lStorage Live _54\l54 <- Shl(cp(30), const ?_i32)\lStorage Live _55\lStorage Live _56\l56 <- BitAnd(cp(9), const ?_u8)\l55 <- Cast-IntToInt mv(56)\lStorage Dead _56\l29 <- BitOr(mv(54), mv(55))\lStorage Dead _55\lStorage Dead _54\lStorage Dead _30\l10 <- Use(mv(29))\lStorage Dead _29\lStorage Live _31\l31 <- Use(cp(10))\l0 <- Adt{1} (mv(31))\lStorage Dead _31\lStorage Dead _10\lGoto\l"];
    X514f89d19e2bc1b0_14 -> X514f89d19e2bc1b0_15;
    X514f89d19e2bc1b0_14 [label="Storage Dead _2\lGoto\l"];
    X514f89d19e2bc1b0_15 [label="Return\l"];
    X514f89d19e2bc1b0_16 -> X514f89d19e2bc1b0_14;
    X514f89d19e2bc1b0_16 [label="Storage Dead _33\lStorage Dead _32\lStorage Dead _3\l0 <- Use(const core::option::Option<u32>)\lGoto\l"];
    X514f89d19e2bc1b0_17 -> X514f89d19e2bc1b0_4 [label="0"];
    X514f89d19e2bc1b0_17 -> X514f89d19e2bc1b0_3 [label="other"];
    X514f89d19e2bc1b0_17 [label="33 <- Use(mv((3 as variant 1).0))\l2 <- Adt{0} (cp(33))\lStorage Dead _33\lStorage Dead _32\lStorage Dead _3\l4 <- Use(cp((2 as variant 0).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(cp((*4)))\l6 <- Lt(mv(7), const ?_u8)\lSwitchInt mv(6)\l"];
    X514f89d19e2bc1b0_18 -> X514f89d19e2bc1b0_2 [label="36"];
    X514f89d19e2bc1b0_18 [label="Storage Live _35\l35 <- UbChecks :: bool\lIntr: Assume cp(35)\lCall\l"];
    X514f89d19e2bc1b0_19 -> X514f89d19e2bc1b0_12 [label="0"];
    X514f89d19e2bc1b0_19 -> X514f89d19e2bc1b0_6 [label="other"];
    X514f89d19e2bc1b0_19 [label="12 <- Use(mv((13 as variant 1).0))\lStorage Dead _34\lStorage Dead _13\l11 <- Use(cp((*12)))\lStorage Dead _12\lStorage Live _14\lStorage Live _37\l37 <- BitAnd(cp(11), const ?_u8)\l14 <- Cast-IntToInt mv(37)\lStorage Dead _37\l10 <- Use(mv(14))\lStorage Dead _14\lStorage Live _15\lStorage Live _38\l38 <- Cast-IntToInt cp(11)\l15 <- Lt(mv(38), const ?_i8)\lStorage Dead _38\lSwitchInt mv(15)\l"];
    X514f89d19e2bc1b0_20 -> X514f89d19e2bc1b0_2 [label="41"];
    X514f89d19e2bc1b0_20 [label="Storage Live _40\l40 <- UbChecks :: bool\lIntr: Assume cp(40)\lCall\l"];
    X514f89d19e2bc1b0_21 -> X514f89d19e2bc1b0_10 [label="0"];
    X514f89d19e2bc1b0_21 -> X514f89d19e2bc1b0_8 [label="other"];
    X514f89d19e2bc1b0_21 [label="17 <- Use(mv((18 as variant 1).0))\lStorage Dead _39\lStorage Dead _18\l16 <- Use(cp((*17)))\lStorage Dead _17\lStorage Live _19\lStorage Live _42\l42 <- BitAnd(cp(16), const ?_u8)\l19 <- Cast-IntToInt mv(42)\lStorage Dead _42\l10 <- Use(mv(19))\lStorage Dead _19\lStorage Live _20\lStorage Live _43\l43 <- Cast-IntToInt cp(16)\l20 <- Lt(mv(43), const ?_i8)\lStorage Dead _43\lSwitchInt mv(20)\l"];
    X514f89d19e2bc1b0_22 -> X514f89d19e2bc1b0_2 [label="46"];
    X514f89d19e2bc1b0_22 [label="Storage Live _45\l45 <- UbChecks :: bool\lIntr: Assume cp(45)\lCall\l"];
    X514f89d19e2bc1b0_23 -> X514f89d19e2bc1b0_11;
    X514f89d19e2bc1b0_23 [label="22 <- Use(mv((23 as variant 1).0))\lStorage Dead _44\lStorage Dead _23\l21 <- Use(cp((*22)))\lStorage Dead _22\lStorage Live _24\lStorage Live _47\l47 <- BitAnd(cp(21), const ?_u8)\l24 <- Cast-IntToInt mv(47)\lStorage Dead _47\l10 <- Use(mv(24))\lStorage Dead _24\lStorage Live _25\lStorage Live _26\l26 <- Use(cp(10))\lStorage Live _48\l48 <- Shl(cp(26), const ?_i32)\lStorage Live _49\lStorage Live _50\l50 <- BitAnd(cp(16), const ?_u8)\l49 <- Cast-IntToInt mv(50)\lStorage Dead _50\l25 <- BitOr(mv(48), mv(49))\lStorage Dead _49\lStorage Dead _48\lStorage Dead _26\l10 <- Use(mv(25))\lStorage Dead _25\lGoto\l"];
  }
  X514f89d19e2bc1b0_0 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_4 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_6 -> X40f037eb7ab6abf7_0 [label="cp(1)"];
  X514f89d19e2bc1b0_8 -> X40f037eb7ab6abf7_0 [label="mv(1)"];
  X514f89d19e2bc1b0_18 -> X33a001831920b814_0 [label=""];
  X514f89d19e2bc1b0_20 -> X33a001831920b814_0 [label=""];
  X514f89d19e2bc1b0_22 -> X33a001831920b814_0 [label=""];
  subgraph cluster_188 {
    label="core::str::<impl \nstr>::split_once::<char>";
    style="filled";
    color=lightgray;
    node_189 [label="LOCALS\l0 = core::option::Option<(&str, &str)>\l1 = &str\l2 = char\l3 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, (usize, usize)>\l4 = core::option::Option<(usize, usize)>\l5 = &mut core::str::pattern::CharSearcher<'_>\l6 = core::str::pattern::CharSearcher<'_>\l7 = (&str, &str)\l8 = &str\l9 = &str\l10 = isize\l11 = (usize, usize)\l12 = *const str\l13 = *const str\l14 = *const [u8]\l15 = bool\l16 = ()\l17 = usize\l18 = usize\l19 = *const [u8]\l20 = *const u8\l21 = *const u8\l22 = *const str\l23 = *const str\l24 = usize\l25 = *const [u8]\l26 = usize\l27 = ()\l28 = usize\l29 = *const [u8]\l30 = *const u8\l31 = *const u8\l32 = usize\l33 = usize\l34 = usize\l", style="filled", color=palegreen3];
    X88c36d043b5866fd_0 -> X88c36d043b5866fd_1 [label="6"];
    X88c36d043b5866fd_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _5\lStorage Live _6\lCall\l"];
    X88c36d043b5866fd_1 -> X88c36d043b5866fd_7 [label="Cleanup"];
    X88c36d043b5866fd_1 -> X88c36d043b5866fd_2 [label="4"];
    X88c36d043b5866fd_1 [label="5 <- &mut 6\lCall\l"];
    X88c36d043b5866fd_2 -> X88c36d043b5866fd_9 [label="0"];
    X88c36d043b5866fd_2 -> X88c36d043b5866fd_10 [label="1"];
    X88c36d043b5866fd_2 -> X88c36d043b5866fd_3 [label="other"];
    X88c36d043b5866fd_2 [label="Storage Dead _5\lStorage Live _10\lStorage Live _11\l10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    X88c36d043b5866fd_3 [label="Unreachable\l"];
    X88c36d043b5866fd_4 -> X88c36d043b5866fd_13 [label="0"];
    X88c36d043b5866fd_4 -> X88c36d043b5866fd_11 [label="other"];
    X88c36d043b5866fd_4 [label="Storage Dead _6\lStorage Dead _3\lStorage Live _7\lStorage Live _12\lStorage Live _13\l13 <- &raw (*1)\lStorage Live _14\lStorage Live _18\l14 <- Cast-PtrToPtr cp(13)\l15 <- UbChecks :: bool\lSwitchInt cp(15)\l"];
    X88c36d043b5866fd_5 -> X88c36d043b5866fd_6;
    X88c36d043b5866fd_5 [label="Storage Dead _6\lStorage Dead _3\lGoto\l"];
    X88c36d043b5866fd_6 [label="Return\l"];
    X88c36d043b5866fd_7 -> X88c36d043b5866fd_8;
    X88c36d043b5866fd_7 [label="Drop 6\l"];
    X88c36d043b5866fd_8 [label="Resume\l"];
    X88c36d043b5866fd_9 -> X88c36d043b5866fd_5;
    X88c36d043b5866fd_9 [label="Storage Dead _11\lStorage Dead _10\lStorage Dead _4\l0 <- Adt{0} ()\lDrop 6\l"];
    X88c36d043b5866fd_10 -> X88c36d043b5866fd_4;
    X88c36d043b5866fd_10 [label="11 <- Use(mv((4 as variant 1).0))\l3 <- Adt{0} (cp(11))\lStorage Dead _11\lStorage Dead _10\lStorage Dead _4\l33 <- Use(cp((3 as variant 0).0.0))\l34 <- Use(cp((3 as variant 0).0.1))\lDrop 6\l"];
    X88c36d043b5866fd_11 -> X88c36d043b5866fd_12 [label="16"];
    X88c36d043b5866fd_11 [label="Storage Live _17\l17 <- PtrMetadata(cp(1))\lCall\l"];
    X88c36d043b5866fd_12 -> X88c36d043b5866fd_14;
    X88c36d043b5866fd_12 [label="Storage Dead _17\l18 <- Use(cp(33))\lStorage Live _19\lStorage Live _20\l21 <- Cast-PtrToPtr cp(13)\l20 <- Use(cp(21))\l19 <- *([u8]) (cp(21), cp(33))\lStorage Dead _20\l12 <- Cast-PtrToPtr mv(19)\lStorage Dead _19\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\l8 <- & (*12)\lStorage Dead _12\lStorage Live _32\l32 <- Use(cp(34))\lStorage Live _22\lStorage Live _23\l23 <- &raw (*1)\lStorage Live _24\lStorage Live _25\lStorage Live _26\l25 <- Cast-PtrToPtr cp(23)\l24 <- PtrMetadata(cp(1))\l26 <- Use(cp(34))\lStorage Live _28\lGoto\l"];
    X88c36d043b5866fd_13 -> X88c36d043b5866fd_15 [label="0"];
    X88c36d043b5866fd_13 -> X88c36d043b5866fd_14 [label="other"];
    X88c36d043b5866fd_13 [label="18 <- Use(cp(33))\lStorage Live _19\lStorage Live _20\l21 <- Cast-PtrToPtr cp(13)\l20 <- Use(cp(21))\l19 <- *([u8]) (cp(21), cp(33))\lStorage Dead _20\l12 <- Cast-PtrToPtr mv(19)\lStorage Dead _19\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\l8 <- & (*12)\lStorage Dead _12\lStorage Live _32\l32 <- Use(cp(34))\lStorage Live _22\lStorage Live _23\l23 <- &raw (*1)\lStorage Live _24\lStorage Live _25\lStorage Live _26\l25 <- Cast-PtrToPtr cp(23)\l24 <- PtrMetadata(cp(1))\l26 <- Use(cp(34))\lStorage Live _28\lSwitchInt cp(15)\l"];
    X88c36d043b5866fd_14 -> X88c36d043b5866fd_15 [label="27"];
    X88c36d043b5866fd_14 [label="Call\l"];
    X88c36d043b5866fd_15 -> X88c36d043b5866fd_6;
    X88c36d043b5866fd_15 [label="28 <- SubUnchecked(cp(24), cp(34))\lStorage Live _29\lStorage Live _30\lStorage Live _31\l31 <- Cast-PtrToPtr cp(23)\l30 <- Offset(cp(31), cp(34))\lStorage Dead _31\l29 <- *([u8]) (cp(30), cp(28))\lStorage Dead _30\l22 <- Cast-PtrToPtr mv(29)\lStorage Dead _29\lStorage Dead _28\lStorage Dead _26\lStorage Dead _25\lStorage Dead _24\lStorage Dead _23\l9 <- & (*22)\lStorage Dead _22\lStorage Dead _32\l7 <- Tuple (cp(8), cp(9))\l0 <- Adt{1} (mv(7))\lStorage Dead _7\lGoto\l"];
  }
  X88c36d043b5866fd_0 -> Xc18a98127535c7df_0 [label="mv(2),cp(1)"];
  X88c36d043b5866fd_1 -> Xa28ec11a161e0c4_0 [label="mv(5)"];
  X88c36d043b5866fd_11 -> X371ee97037325b3b_0 [label="const ?_usize,cp(33),mv(17)"];
  X88c36d043b5866fd_14 -> X371ee97037325b3b_0 [label="cp(34),cp(24),cp(24)"];
  subgraph cluster_190 {
    label="core::str::<impl \nstr>::starts_with::<char>";
    style="filled";
    color=lightgray;
    node_191 [label="LOCALS\l0 = bool\l1 = &str\l2 = char\l", style="filled", color=palegreen3];
    X85f32405e1fc45be_0 -> X85f32405e1fc45be_1 [label="0"];
    X85f32405e1fc45be_0 [label="Call\l"];
    X85f32405e1fc45be_1 [label="Return\l"];
  }
  X85f32405e1fc45be_0 -> Xfdbd73ac07cd7139_0 [label="mv(2),mv(1)"];
  subgraph cluster_192 {
    label="core::str::<impl \nstr>::strip_prefix::<char\n>";
    style="filled";
    color=lightgray;
    node_193 [label="LOCALS\l0 = core::option::Option<&str>\l1 = &str\l2 = char\l", style="filled", color=palegreen3];
    X1f226572c767e3da_0 -> X1f226572c767e3da_1 [label="0"];
    X1f226572c767e3da_0 [label="Call\l"];
    X1f226572c767e3da_1 [label="Return\l"];
  }
  X1f226572c767e3da_0 -> X99a1d4d809be4555_0 [label="mv(2),mv(1)"];
  subgraph cluster_194 {
    label="core::str::<impl \nstr>::split_at_checked";
    style="filled";
    color=lightgray;
    node_195 [label="LOCALS\l0 = core::option::Option<(&str, &str)>\l1 = &str\l2 = usize\l3 = bool\l4 = (&str, &str)\l5 = bool\l6 = usize\l7 = u8\l8 = usize\l9 = bool\l10 = &[u8]\l11 = i8\l", style="filled", color=palegreen3];
    X963e01adc5b77b13_0 -> X963e01adc5b77b13_5 [label="0"];
    X963e01adc5b77b13_0 -> X963e01adc5b77b13_6 [label="other"];
    X963e01adc5b77b13_0 [label="Storage Live _3\lStorage Live _6\lStorage Live _8\lStorage Live _9\lStorage Live _10\lSwitchInt cp(2)\l"];
    X963e01adc5b77b13_1 -> X963e01adc5b77b13_2 [label="4"];
    X963e01adc5b77b13_1 [label="Storage Live _4\lCall\l"];
    X963e01adc5b77b13_2 -> X963e01adc5b77b13_4;
    X963e01adc5b77b13_2 [label="0 <- Adt{1} (mv(4))\lStorage Dead _4\lGoto\l"];
    X963e01adc5b77b13_3 -> X963e01adc5b77b13_4;
    X963e01adc5b77b13_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X963e01adc5b77b13_4 [label="Storage Dead _3\lReturn\l"];
    X963e01adc5b77b13_5 -> X963e01adc5b77b13_1;
    X963e01adc5b77b13_5 [label="Storage Dead _10\lStorage Dead _9\lStorage Dead _8\lStorage Dead _6\lGoto\l"];
    X963e01adc5b77b13_6 -> X963e01adc5b77b13_8 [label="0"];
    X963e01adc5b77b13_6 -> X963e01adc5b77b13_7 [label="other"];
    X963e01adc5b77b13_6 [label="Storage Live _5\l10 <- Cast-Transmute cp(1)\l6 <- PtrMetadata(cp(10))\l5 <- Ge(cp(2), cp(6))\lSwitchInt mv(5)\l"];
    X963e01adc5b77b13_7 -> X963e01adc5b77b13_10;
    X963e01adc5b77b13_7 [label="3 <- Eq(cp(2), cp(6))\lGoto\l"];
    X963e01adc5b77b13_8 -> X963e01adc5b77b13_9;
    X963e01adc5b77b13_8 [label="Storage Live _7\l8 <- Len((*10))\l9 <- Lt(cp(2), cp(8))\lAssert mv(9) == true\l"];
    X963e01adc5b77b13_9 -> X963e01adc5b77b13_10;
    X963e01adc5b77b13_9 [label="7 <- Use(cp((*10)[_2]))\lStorage Live _11\l11 <- Cast-IntToInt cp(7)\l3 <- Ge(mv(11), const ?_i8)\lStorage Dead _11\lStorage Dead _7\lGoto\l"];
    X963e01adc5b77b13_10 -> X963e01adc5b77b13_3 [label="0"];
    X963e01adc5b77b13_10 -> X963e01adc5b77b13_1 [label="other"];
    X963e01adc5b77b13_10 [label="Storage Dead _5\lStorage Dead _10\lStorage Dead _9\lStorage Dead _8\lStorage Dead _6\lSwitchInt mv(3)\l"];
  }
  X963e01adc5b77b13_1 -> Xfeeb81e9512374d9_0 [label="mv(1),mv(2)"];
  subgraph cluster_196 {
    label="core::str::<impl \nstr>::trim_end_matches::<\nchar>";
    style="filled";
    color=lightgray;
    node_197 [label="LOCALS\l0 = &str\l1 = &str\l2 = char\l3 = usize\l4 = core::str::pattern::CharSearcher<'_>\l5 = core::option::Option<(usize, usize)>\l6 = &mut core::str::pattern::CharSearcher<'_>\l7 = isize\l8 = usize\l9 = usize\l10 = *const str\l11 = *const str\l12 = *const [u8]\l13 = bool\l14 = ()\l15 = usize\l16 = *const [u8]\l17 = *const u8\l", style="filled", color=palegreen3];
    X1440fc12115968ff_0 -> X1440fc12115968ff_1 [label="4"];
    X1440fc12115968ff_0 [label="Storage Live _3\l3 <- Use(const ?_usize)\lStorage Live _4\lCall\l"];
    X1440fc12115968ff_1 -> X1440fc12115968ff_6 [label="Cleanup"];
    X1440fc12115968ff_1 -> X1440fc12115968ff_2 [label="5"];
    X1440fc12115968ff_1 [label="Storage Live _5\lStorage Live _6\l6 <- &mut 4\lCall\l"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_3 [label="1"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_4 [label="0"];
    X1440fc12115968ff_2 -> X1440fc12115968ff_11 [label="other"];
    X1440fc12115968ff_2 [label="Storage Dead _6\l7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    X1440fc12115968ff_3 -> X1440fc12115968ff_4;
    X1440fc12115968ff_3 [label="8 <- Use(cp((5 as variant 1).0.1))\l3 <- Use(cp(8))\lGoto\l"];
    X1440fc12115968ff_4 -> X1440fc12115968ff_10 [label="0"];
    X1440fc12115968ff_4 -> X1440fc12115968ff_8 [label="other"];
    X1440fc12115968ff_4 [label="Storage Dead _5\l9 <- Use(cp(3))\lStorage Live _10\lStorage Live _11\l11 <- &raw (*1)\lStorage Live _12\l12 <- Cast-PtrToPtr cp(11)\lStorage Live _13\l13 <- UbChecks :: bool\lSwitchInt mv(13)\l"];
    X1440fc12115968ff_5 [label="Storage Dead _4\lStorage Dead _3\lReturn\l"];
    X1440fc12115968ff_6 -> X1440fc12115968ff_7;
    X1440fc12115968ff_6 [label="Drop 4\l"];
    X1440fc12115968ff_7 [label="Resume\l"];
    X1440fc12115968ff_8 -> X1440fc12115968ff_9 [label="14"];
    X1440fc12115968ff_8 [label="Storage Live _15\l15 <- PtrMetadata(cp(1))\lCall\l"];
    X1440fc12115968ff_9 -> X1440fc12115968ff_10;
    X1440fc12115968ff_9 [label="Storage Dead _15\lGoto\l"];
    X1440fc12115968ff_10 -> X1440fc12115968ff_5;
    X1440fc12115968ff_10 [label="Storage Dead _13\lStorage Live _16\l17 <- Cast-PtrToPtr cp(11)\l16 <- *([u8]) (cp(17), cp(9))\l10 <- Cast-PtrToPtr mv(16)\lStorage Dead _16\lStorage Dead _12\lStorage Dead _11\l0 <- & (*10)\lStorage Dead _10\lDrop 4\l"];
    X1440fc12115968ff_11 [label="Unreachable\l"];
  }
  X1440fc12115968ff_0 -> Xc18a98127535c7df_0 [label="mv(2),cp(1)"];
  X1440fc12115968ff_1 -> X17cb78685fd546e8_0 [label="mv(6)"];
  X1440fc12115968ff_8 -> X371ee97037325b3b_0 [label="const ?_usize,cp(9),mv(15)"];
  subgraph cluster_198 {
    label="core::str::<impl \nstr>::trim_start_matches:\n:<char>";
    style="filled";
    color=lightgray;
    node_199 [label="LOCALS\l0 = &str\l1 = &str\l2 = char\l3 = usize\l4 = core::str::pattern::CharSearcher<'_>\l5 = core::option::Option<(usize, usize)>\l6 = &mut core::str::pattern::CharSearcher<'_>\l7 = isize\l8 = usize\l9 = usize\l10 = usize\l11 = &[u8]\l12 = *const str\l13 = *const str\l14 = *const [u8]\l15 = bool\l16 = ()\l17 = usize\l18 = usize\l19 = *const [u8]\l20 = *const u8\l21 = *const u8\l", style="filled", color=palegreen3];
    X415ffaba2ced770a_0 -> X415ffaba2ced770a_1 [label="4"];
    X415ffaba2ced770a_0 [label="Storage Live _3\l11 <- Cast-Transmute cp(1)\l3 <- PtrMetadata(cp(11))\lStorage Live _4\lCall\l"];
    X415ffaba2ced770a_1 -> X415ffaba2ced770a_6 [label="Cleanup"];
    X415ffaba2ced770a_1 -> X415ffaba2ced770a_2 [label="5"];
    X415ffaba2ced770a_1 [label="Storage Live _5\lStorage Live _6\l6 <- &mut 4\lCall\l"];
    X415ffaba2ced770a_2 -> X415ffaba2ced770a_3 [label="1"];
    X415ffaba2ced770a_2 -> X415ffaba2ced770a_4 [label="0"];
    X415ffaba2ced770a_2 -> X415ffaba2ced770a_11 [label="other"];
    X415ffaba2ced770a_2 [label="Storage Dead _6\l7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    X415ffaba2ced770a_3 -> X415ffaba2ced770a_4;
    X415ffaba2ced770a_3 [label="8 <- Use(cp((5 as variant 1).0.0))\l3 <- Use(cp(8))\lGoto\l"];
    X415ffaba2ced770a_4 -> X415ffaba2ced770a_10 [label="0"];
    X415ffaba2ced770a_4 -> X415ffaba2ced770a_8 [label="other"];
    X415ffaba2ced770a_4 [label="Storage Dead _5\l9 <- Use(cp(3))\l10 <- PtrMetadata(cp(11))\lStorage Live _12\lStorage Live _13\l13 <- &raw (*1)\lStorage Live _14\lStorage Live _18\l14 <- Cast-PtrToPtr cp(13)\lStorage Live _15\l15 <- UbChecks :: bool\lSwitchInt mv(15)\l"];
    X415ffaba2ced770a_5 [label="Storage Dead _4\lStorage Dead _3\lReturn\l"];
    X415ffaba2ced770a_6 -> X415ffaba2ced770a_7;
    X415ffaba2ced770a_6 [label="Drop 4\l"];
    X415ffaba2ced770a_7 [label="Resume\l"];
    X415ffaba2ced770a_8 -> X415ffaba2ced770a_9 [label="16"];
    X415ffaba2ced770a_8 [label="Storage Live _17\l17 <- PtrMetadata(cp(1))\lCall\l"];
    X415ffaba2ced770a_9 -> X415ffaba2ced770a_10;
    X415ffaba2ced770a_9 [label="Storage Dead _17\lGoto\l"];
    X415ffaba2ced770a_10 -> X415ffaba2ced770a_5;
    X415ffaba2ced770a_10 [label="Storage Dead _15\l18 <- SubUnchecked(cp(10), cp(9))\lStorage Live _19\lStorage Live _20\lStorage Live _21\l21 <- Cast-PtrToPtr cp(13)\l20 <- Offset(cp(21), cp(9))\lStorage Dead _21\l19 <- *([u8]) (cp(20), cp(18))\lStorage Dead _20\l12 <- Cast-PtrToPtr mv(19)\lStorage Dead _19\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\l0 <- & (*12)\lStorage Dead _12\lDrop 4\l"];
    X415ffaba2ced770a_11 [label="Unreachable\l"];
  }
  X415ffaba2ced770a_0 -> Xc18a98127535c7df_0 [label="mv(2),cp(1)"];
  X415ffaba2ced770a_1 -> X94575477f983eb97_0 [label="mv(6)"];
  X415ffaba2ced770a_8 -> X371ee97037325b3b_0 [label="cp(9),cp(10),mv(17)"];
  subgraph cluster_200 {
    label="core::str::<impl \nstr>::len";
    style="filled";
    color=lightgray;
    node_201 [label="LOCALS\l0 = usize\l1 = &str\l2 = &[u8]\l", style="filled", color=palegreen3];
    X90c8538ce85c085c_0 [label="2 <- Cast-Transmute cp(1)\l0 <- PtrMetadata(cp(2))\lReturn\l"];
  }
  subgraph cluster_202 {
    label="core::str::<impl \nstr>::chars";
    style="filled";
    color=lightgray;
    node_203 [label="LOCALS\l0 = core::str::Chars<'_>\l1 = &str\l2 = core::slice::Iter<'_, u8>\l3 = &[u8]\l4 = usize\l5 = core::ptr::NonNull<u8>\l6 = core::ptr::NonNull<[u8]>\l7 = *const u8\l8 = *mut u8\l9 = *mut u8\l10 = *const [u8]\l11 = *const u8\l", style="filled", color=palegreen3];
    X4a1a662fe4c6cd2b_0 [label="Storage Live _2\l3 <- Cast-Transmute cp(1)\lStorage Live _4\lStorage Live _5\lStorage Live _10\lStorage Live _11\l4 <- PtrMetadata(cp(3))\lStorage Live _6\l10 <- &raw (*3)\l6 <- Adt{0} (cp(10))\l11 <- Cast-PtrToPtr cp(10)\l5 <- Adt{0} (cp(11))\lStorage Dead _6\lStorage Live _8\lStorage Live _9\l9 <- Cast-PtrToPtr cp(10)\l8 <- Offset(cp(9), cp(4))\lStorage Dead _9\l7 <- Cast-PtrToPtr mv(8)\lStorage Dead _8\l2 <- Adt{0} (cp(5), cp(7), const core::marker::PhantomData<&u8>)\lStorage Dead _11\lStorage Dead _10\lStorage Dead _5\lStorage Dead _4\l0 <- Adt{0} (mv(2))\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_204 {
    label="core::str::<impl \nstr>::parse::<u64>";
    style="filled";
    color=lightgray;
    node_205 [label="LOCALS\l0 = core::result::Result<u64, core::num::ParseIntError>\l1 = &str\l", style="filled", color=palegreen3];
    X4aefc53de15d3133_0 -> X4aefc53de15d3133_1 [label="0"];
    X4aefc53de15d3133_0 [label="Call\l"];
    X4aefc53de15d3133_1 [label="Return\l"];
  }
  X4aefc53de15d3133_0 -> Xe1dbe8f798a5f54b_0 [label="mv(1)"];
  subgraph cluster_206 {
    label="core::str::<impl \nstr>::split::<char>";
    style="filled";
    color=lightgray;
    node_207 [label="LOCALS\l0 = core::str::Split<'_, char>\l1 = &str\l2 = char\l3 = core::str::iter::SplitInternal<'_, char>\l4 = usize\l5 = core::str::pattern::CharSearcher<'_>\l6 = &[u8]\l", style="filled", color=palegreen3];
    X311345683aaaab6c_0 -> X311345683aaaab6c_1 [label="5"];
    X311345683aaaab6c_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _6\l6 <- Cast-Transmute cp(1)\l4 <- PtrMetadata(cp(6))\lStorage Dead _6\lStorage Live _5\lCall\l"];
    X311345683aaaab6c_1 [label="3 <- Adt{0} (const ?_usize, mv(4), mv(5), const bool, const bool)\lStorage Dead _5\lStorage Dead _4\l0 <- Adt{0} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  X311345683aaaab6c_0 -> Xc18a98127535c7df_0 [label="mv(2),mv(1)"];
  subgraph cluster_208 {
    label="core::str::<impl \nstr>::as_ptr";
    style="filled";
    color=lightgray;
    node_209 [label="LOCALS\l0 = *const u8\l1 = &str\l2 = *const str\l", style="filled", color=palegreen3];
    X7f30d7dbe387561f_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_210 {
    label="core::str::<impl \nstr>::contains::<{closure\n@p-token/src/entrypoint.r\ns:1413:43: \n1413:52}>";
    style="filled";
    color=lightgray;
    node_211 [label="LOCALS\l0 = bool\l1 = &str\l2 = {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l", style="filled", color=palegreen3];
    X878525d2649db5e0_0 -> X878525d2649db5e0_1 [label="0"];
    X878525d2649db5e0_0 [label="Call\l"];
    X878525d2649db5e0_1 [label="Return\l"];
  }
  X878525d2649db5e0_0 -> Xd5d399249f5b5253_0 [label="mv(2),mv(1)"];
  subgraph cluster_212 {
    label="core::str::<impl \nstr>::is_empty";
    style="filled";
    color=lightgray;
    node_213 [label="LOCALS\l0 = bool\l1 = &str\l2 = usize\l3 = &[u8]\l", style="filled", color=palegreen3];
    Xedc5819149df218c_0 [label="Storage Live _2\lStorage Live _3\l3 <- Cast-Transmute cp(1)\l2 <- PtrMetadata(cp(3))\lStorage Dead _3\l0 <- Eq(mv(2), const ?_usize)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_214 {
    label="core::str::<impl \nstr>::split_at";
    style="filled";
    color=lightgray;
    node_215 [label="LOCALS\l0 = (&str, &str)\l1 = &str\l2 = usize\l3 = core::option::Option<(&str, &str)>\l4 = isize\l5 = !\l", style="filled", color=palegreen3];
    X5bb7b3b3df1f1b04_0 -> X5bb7b3b3df1f1b04_1 [label="3"];
    X5bb7b3b3df1f1b04_0 [label="Storage Live _3\lCall\l"];
    X5bb7b3b3df1f1b04_1 -> X5bb7b3b3df1f1b04_4 [label="0"];
    X5bb7b3b3df1f1b04_1 -> X5bb7b3b3df1f1b04_3 [label="1"];
    X5bb7b3b3df1f1b04_1 -> X5bb7b3b3df1f1b04_2 [label="other"];
    X5bb7b3b3df1f1b04_1 [label="4 <- Discriminant(3)\lSwitchInt mv(4)\l"];
    X5bb7b3b3df1f1b04_2 [label="Unreachable\l"];
    X5bb7b3b3df1f1b04_3 [label="0 <- Use(cp((3 as variant 1).0))\lStorage Dead _3\lReturn\l"];
    X5bb7b3b3df1f1b04_4 [label="Call\l"];
  }
  X5bb7b3b3df1f1b04_0 -> X963e01adc5b77b13_0 [label="cp(1),cp(2)"];
  X5bb7b3b3df1f1b04_4 -> Xc370cd96d12e6547_0 [label="mv(1),const ?_usize,mv(2)"];
  subgraph cluster_216 {
    label="core::str::iter::SplitInt\nernal::<'_, \nchar>::next";
    style="filled";
    color=lightgray;
    node_217 [label="LOCALS\l0 = core::option::Option<&str>\l1 = &mut core::str::iter::SplitInternal<'_, char>\l2 = bool\l3 = &str\l4 = &core::str::pattern::CharSearcher<'_>\l5 = core::option::Option<(usize, usize)>\l6 = &mut core::str::pattern::CharSearcher<'_>\l7 = isize\l8 = usize\l9 = usize\l10 = &str\l11 = usize\l12 = *const str\l13 = *const str\l14 = *const [u8]\l15 = bool\l16 = ()\l17 = usize\l18 = usize\l19 = *const [u8]\l20 = *const u8\l21 = *const u8\l", style="filled", color=palegreen3];
    X572991eb5fbc0f28_0 -> X572991eb5fbc0f28_2 [label="0"];
    X572991eb5fbc0f28_0 -> X572991eb5fbc0f28_1 [label="other"];
    X572991eb5fbc0f28_0 [label="Storage Live _2\l2 <- Use(cp((*1).4))\lSwitchInt mv(2)\l"];
    X572991eb5fbc0f28_1 -> X572991eb5fbc0f28_9;
    X572991eb5fbc0f28_1 [label="0 <- Use(const core::option::Option<&str>)\lStorage Dead _2\lGoto\l"];
    X572991eb5fbc0f28_2 -> X572991eb5fbc0f28_3 [label="3"];
    X572991eb5fbc0f28_2 [label="Storage Dead _2\lStorage Live _4\l4 <- & (*1).2\lCall\l"];
    X572991eb5fbc0f28_3 -> X572991eb5fbc0f28_4 [label="5"];
    X572991eb5fbc0f28_3 [label="Storage Dead _4\lStorage Live _5\lStorage Live _6\l6 <- &mut (*1).2\lCall\l"];
    X572991eb5fbc0f28_4 -> X572991eb5fbc0f28_6 [label="0"];
    X572991eb5fbc0f28_4 -> X572991eb5fbc0f28_7 [label="1"];
    X572991eb5fbc0f28_4 -> X572991eb5fbc0f28_5 [label="other"];
    X572991eb5fbc0f28_4 [label="Storage Dead _6\l7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    X572991eb5fbc0f28_5 [label="Unreachable\l"];
    X572991eb5fbc0f28_6 -> X572991eb5fbc0f28_8 [label="0"];
    X572991eb5fbc0f28_6 [label="Call\l"];
    X572991eb5fbc0f28_7 -> X572991eb5fbc0f28_12 [label="0"];
    X572991eb5fbc0f28_7 -> X572991eb5fbc0f28_10 [label="other"];
    X572991eb5fbc0f28_7 [label="8 <- Use(cp((5 as variant 1).0.0))\l9 <- Use(cp((5 as variant 1).0.1))\l11 <- Use(cp((*1).0))\lStorage Live _12\lStorage Live _13\l13 <- &raw (*3)\lStorage Live _14\lStorage Live _18\l14 <- Cast-PtrToPtr cp(13)\lStorage Live _15\l15 <- UbChecks :: bool\lSwitchInt mv(15)\l"];
    X572991eb5fbc0f28_8 -> X572991eb5fbc0f28_9;
    X572991eb5fbc0f28_8 [label="Storage Dead _5\lGoto\l"];
    X572991eb5fbc0f28_9 [label="Return\l"];
    X572991eb5fbc0f28_10 -> X572991eb5fbc0f28_11 [label="16"];
    X572991eb5fbc0f28_10 [label="Storage Live _17\l17 <- PtrMetadata(cp(3))\lCall\l"];
    X572991eb5fbc0f28_11 -> X572991eb5fbc0f28_12;
    X572991eb5fbc0f28_11 [label="Storage Dead _17\lGoto\l"];
    X572991eb5fbc0f28_12 -> X572991eb5fbc0f28_8;
    X572991eb5fbc0f28_12 [label="Storage Dead _15\l18 <- SubUnchecked(cp(8), cp(11))\lStorage Live _19\lStorage Live _20\lStorage Live _21\l21 <- Cast-PtrToPtr cp(13)\l20 <- Offset(cp(21), cp(11))\lStorage Dead _21\l19 <- *([u8]) (cp(20), cp(18))\lStorage Dead _20\l12 <- Cast-PtrToPtr mv(19)\lStorage Dead _19\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\l10 <- & (*12)\lStorage Dead _12\l(*1).0 <- Use(cp(9))\l0 <- Adt{1} (cp(10))\lGoto\l"];
  }
  X572991eb5fbc0f28_2 -> X1832b8a07e259c1e_0 [label="mv(4)"];
  X572991eb5fbc0f28_3 -> Xa28ec11a161e0c4_0 [label="mv(6)"];
  X572991eb5fbc0f28_6 -> Xa189ee119460af7_0 [label="mv(1)"];
  X572991eb5fbc0f28_10 -> X371ee97037325b3b_0 [label="cp(11),cp(8),mv(17)"];
  subgraph cluster_218 {
    label="core::str::iter::SplitInt\nernal::<'_, \nchar>::get_end";
    style="filled";
    color=lightgray;
    node_219 [label="LOCALS\l0 = core::option::Option<&str>\l1 = &mut core::str::iter::SplitInternal<'_, char>\l2 = bool\l3 = bool\l4 = bool\l5 = usize\l6 = usize\l7 = usize\l8 = &str\l9 = &str\l10 = &core::str::pattern::CharSearcher<'_>\l11 = usize\l12 = usize\l13 = *const str\l14 = *const str\l15 = *const [u8]\l16 = bool\l17 = ()\l18 = usize\l19 = usize\l20 = *const [u8]\l21 = *const u8\l22 = *const u8\l", style="filled", color=palegreen3];
    Xa189ee119460af7_0 -> Xa189ee119460af7_1 [label="0"];
    Xa189ee119460af7_0 -> Xa189ee119460af7_7 [label="other"];
    Xa189ee119460af7_0 [label="Storage Live _2\l2 <- Use(cp((*1).4))\lSwitchInt mv(2)\l"];
    Xa189ee119460af7_1 -> Xa189ee119460af7_2 [label="0"];
    Xa189ee119460af7_1 -> Xa189ee119460af7_4 [label="other"];
    Xa189ee119460af7_1 [label="(*1).4 <- Use(const bool)\lStorage Live _3\l3 <- Use(cp((*1).3))\lSwitchInt mv(3)\l"];
    Xa189ee119460af7_2 -> Xa189ee119460af7_6 [label="0"];
    Xa189ee119460af7_2 -> Xa189ee119460af7_3 [label="other"];
    Xa189ee119460af7_2 [label="Storage Live _4\lStorage Live _5\lStorage Live _6\l6 <- Use(cp((*1).1))\lStorage Live _7\l7 <- Use(cp((*1).0))\l5 <- Sub(mv(6), mv(7))\lStorage Dead _7\lStorage Dead _6\l4 <- Gt(mv(5), const ?_usize)\lSwitchInt mv(4)\l"];
    Xa189ee119460af7_3 -> Xa189ee119460af7_4;
    Xa189ee119460af7_3 [label="Storage Dead _5\lGoto\l"];
    Xa189ee119460af7_4 -> Xa189ee119460af7_5 [label="9"];
    Xa189ee119460af7_4 [label="Storage Live _10\l10 <- & (*1).2\lCall\l"];
    Xa189ee119460af7_5 -> Xa189ee119460af7_11 [label="0"];
    Xa189ee119460af7_5 -> Xa189ee119460af7_9 [label="other"];
    Xa189ee119460af7_5 [label="Storage Dead _10\l11 <- Use(cp((*1).0))\l12 <- Use(cp((*1).1))\lStorage Live _13\lStorage Live _14\l14 <- &raw (*9)\lStorage Live _15\lStorage Live _19\l15 <- Cast-PtrToPtr cp(14)\lStorage Live _16\l16 <- UbChecks :: bool\lSwitchInt mv(16)\l"];
    Xa189ee119460af7_6 -> Xa189ee119460af7_7;
    Xa189ee119460af7_6 [label="Storage Dead _5\lStorage Dead _4\lStorage Dead _3\lGoto\l"];
    Xa189ee119460af7_7 -> Xa189ee119460af7_8;
    Xa189ee119460af7_7 [label="Storage Dead _2\l0 <- Use(const core::option::Option<&str>)\lGoto\l"];
    Xa189ee119460af7_8 [label="Return\l"];
    Xa189ee119460af7_9 -> Xa189ee119460af7_10 [label="17"];
    Xa189ee119460af7_9 [label="Storage Live _18\l18 <- PtrMetadata(cp(9))\lCall\l"];
    Xa189ee119460af7_10 -> Xa189ee119460af7_11;
    Xa189ee119460af7_10 [label="Storage Dead _18\lGoto\l"];
    Xa189ee119460af7_11 -> Xa189ee119460af7_8;
    Xa189ee119460af7_11 [label="Storage Dead _16\l19 <- SubUnchecked(cp(12), cp(11))\lStorage Live _20\lStorage Live _21\lStorage Live _22\l22 <- Cast-PtrToPtr cp(14)\l21 <- Offset(cp(22), cp(11))\lStorage Dead _22\l20 <- *([u8]) (cp(21), cp(19))\lStorage Dead _21\l13 <- Cast-PtrToPtr mv(20)\lStorage Dead _20\lStorage Dead _19\lStorage Dead _15\lStorage Dead _14\l8 <- & (*13)\lStorage Dead _13\l0 <- Adt{1} (cp(8))\lStorage Dead _4\lStorage Dead _3\lStorage Dead _2\lGoto\l"];
  }
  Xa189ee119460af7_4 -> X1832b8a07e259c1e_0 [label="mv(10)"];
  Xa189ee119460af7_9 -> X371ee97037325b3b_0 [label="cp(11),cp(12),mv(18)"];
  subgraph cluster_220 {
    label="core::str::traits::<impl \ncore::slice::SliceIndex<s\ntr> \nfor \ncore::ops::Range<usize>>:\n:get_unchecked::precondit\nion_check";
    style="filled";
    color=lightgray;
    node_221 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = bool\l6 = !\l", style="filled", color=palegreen3];
    X371ee97037325b3b_0 -> X371ee97037325b3b_3 [label="0"];
    X371ee97037325b3b_0 -> X371ee97037325b3b_1 [label="other"];
    X371ee97037325b3b_0 [label="Storage Live _4\l4 <- Ge(cp(2), cp(1))\lSwitchInt mv(4)\l"];
    X371ee97037325b3b_1 -> X371ee97037325b3b_3 [label="0"];
    X371ee97037325b3b_1 -> X371ee97037325b3b_2 [label="other"];
    X371ee97037325b3b_1 [label="Storage Live _5\l5 <- Le(cp(2), cp(3))\lSwitchInt mv(5)\l"];
    X371ee97037325b3b_2 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    X371ee97037325b3b_3 [label="Call\l"];
  }
  X371ee97037325b3b_3 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_222 {
    label="core::str::traits::<impl \ncore::cmp::PartialEq \nfor \nstr>::eq";
    style="filled";
    color=lightgray;
    node_223 [label="LOCALS\l0 = bool\l1 = &str\l2 = &str\l3 = &&[u8]\l4 = &[u8]\l5 = &&[u8]\l6 = &[u8]\l", style="filled", color=palegreen3];
    Xbe026775e83fe740_0 -> Xbe026775e83fe740_1 [label="0"];
    Xbe026775e83fe740_0 [label="Storage Live _3\l4 <- Cast-Transmute cp(1)\l3 <- & 4\lStorage Live _5\l6 <- Cast-Transmute cp(2)\l5 <- & 6\lCall\l"];
    Xbe026775e83fe740_1 [label="Storage Dead _5\lStorage Dead _3\lReturn\l"];
  }
  Xbe026775e83fe740_0 -> X9d8f98d3704e8fd6_0 [label="cp(4),cp(6)"];
  subgraph cluster_224 {
    label="core::str::traits::<impl \ncore::cmp::PartialOrd \nfor \nstr>::partial_cmp";
    style="filled";
    color=lightgray;
    node_225 [label="LOCALS\l0 = core::option::Option<core::cmp::Ordering>\l1 = &str\l2 = &str\l3 = core::cmp::Ordering\l4 = &[u8]\l5 = &[u8]\l", style="filled", color=palegreen3];
    Xd64219687ab6c1bf_0 -> Xd64219687ab6c1bf_1 [label="3"];
    Xd64219687ab6c1bf_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _5\l4 <- Cast-Transmute cp(1)\l5 <- Cast-Transmute cp(2)\lCall\l"];
    Xd64219687ab6c1bf_1 [label="Storage Dead _5\lStorage Dead _4\l0 <- Adt{1} (mv(3))\lStorage Dead _3\lReturn\l"];
  }
  Xd64219687ab6c1bf_0 -> X530825bfbbf6cb3c_0 [label="mv(4),mv(5)"];
  subgraph cluster_226 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Rever\nseSearcher<'_>>::next_rej\nect_back";
    style="filled";
    color=lightgray;
    node_227 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = core::str::pattern::SearchStep\l3 = isize\l4 = usize\l5 = usize\l6 = (usize, usize)\l", style="filled", color=palegreen3];
    X17cb78685fd546e8_0 -> X17cb78685fd546e8_1;
    X17cb78685fd546e8_0 [label="Goto\l"];
    X17cb78685fd546e8_1 -> X17cb78685fd546e8_2 [label="2"];
    X17cb78685fd546e8_1 [label="Storage Live _2\lCall\l"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_4 [label="1"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_3 [label="2"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_5 [label="0"];
    X17cb78685fd546e8_2 -> X17cb78685fd546e8_7 [label="other"];
    X17cb78685fd546e8_2 [label="3 <- Discriminant(2)\lSwitchInt mv(3)\l"];
    X17cb78685fd546e8_3 -> X17cb78685fd546e8_6;
    X17cb78685fd546e8_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X17cb78685fd546e8_4 -> X17cb78685fd546e8_6;
    X17cb78685fd546e8_4 [label="4 <- Use(cp((2 as variant 1).0))\l5 <- Use(cp((2 as variant 1).1))\lStorage Live _6\l6 <- Tuple (cp(4), cp(5))\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X17cb78685fd546e8_5 -> X17cb78685fd546e8_1;
    X17cb78685fd546e8_5 [label="Storage Dead _2\lGoto\l"];
    X17cb78685fd546e8_6 [label="Storage Dead _2\lReturn\l"];
    X17cb78685fd546e8_7 [label="Unreachable\l"];
  }
  X17cb78685fd546e8_1 -> Xa12778c1e9fbfec3_0 [label="cp(1)"];
  subgraph cluster_228 {
    label="<core::str::pattern::Mult\niCharEqPattern<{closure@p\n-token/src/entrypoint.rs:\n1413:43: \n1413:52}> \nas \ncore::str::pattern::Patte\nrn>::is_contained_in";
    style="filled";
    color=lightgray;
    node_229 [label="LOCALS\l0 = bool\l1 = core::str::pattern::MultiCharEqPattern<{closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l2 = &str\l3 = &core::option::Option<(usize, usize)>\l4 = core::option::Option<(usize, usize)>\l5 = &mut core::str::pattern::MultiCharEqSearcher<'_, {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l6 = core::str::pattern::MultiCharEqSearcher<'_, {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l7 = isize\l", style="filled", color=palegreen3];
    X37b7738bfd7bf732_0 -> X37b7738bfd7bf732_1 [label="6"];
    X37b7738bfd7bf732_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _5\lStorage Live _6\lCall\l"];
    X37b7738bfd7bf732_1 -> X37b7738bfd7bf732_4 [label="Cleanup"];
    X37b7738bfd7bf732_1 -> X37b7738bfd7bf732_2 [label="4"];
    X37b7738bfd7bf732_1 [label="5 <- &mut 6\lCall\l"];
    X37b7738bfd7bf732_2 -> X37b7738bfd7bf732_8 [label="1"];
    X37b7738bfd7bf732_2 -> X37b7738bfd7bf732_7 [label="0"];
    X37b7738bfd7bf732_2 -> X37b7738bfd7bf732_9 [label="other"];
    X37b7738bfd7bf732_2 [label="3 <- & 4\lStorage Dead _5\lStorage Live _7\l7 <- Discriminant(4)\lSwitchInt mv(7)\l"];
    X37b7738bfd7bf732_3 [label="Storage Dead _6\lStorage Dead _4\lReturn\l"];
    X37b7738bfd7bf732_4 -> X37b7738bfd7bf732_5;
    X37b7738bfd7bf732_4 [label="Drop 6\l"];
    X37b7738bfd7bf732_5 [label="Resume\l"];
    X37b7738bfd7bf732_6 -> X37b7738bfd7bf732_3;
    X37b7738bfd7bf732_6 [label="Storage Dead _7\lStorage Dead _3\lDrop 6\l"];
    X37b7738bfd7bf732_7 -> X37b7738bfd7bf732_6;
    X37b7738bfd7bf732_7 [label="0 <- Use(const bool)\lGoto\l"];
    X37b7738bfd7bf732_8 -> X37b7738bfd7bf732_6;
    X37b7738bfd7bf732_8 [label="0 <- Use(const bool)\lGoto\l"];
    X37b7738bfd7bf732_9 [label="Unreachable\l"];
  }
  X37b7738bfd7bf732_0 -> Xce410a6aef4e2b80_0 [label="mv(1),mv(2)"];
  X37b7738bfd7bf732_1 -> X5ec381b98997d29e_0 [label="mv(5)"];
  subgraph cluster_230 {
    label="<core::str::pattern::Mult\niCharEqSearcher<'_, \n{closure@p-token/src/entr\nypoint.rs:1413:43: \n1413:52}> \nas \ncore::str::pattern::Searc\nher<'_>>::next_match";
    style="filled";
    color=lightgray;
    node_231 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::MultiCharEqSearcher<'_, {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l2 = core::str::pattern::SearchStep\l3 = isize\l4 = usize\l5 = usize\l6 = (usize, usize)\l", style="filled", color=palegreen3];
    X5ec381b98997d29e_0 -> X5ec381b98997d29e_1;
    X5ec381b98997d29e_0 [label="Goto\l"];
    X5ec381b98997d29e_1 -> X5ec381b98997d29e_2 [label="2"];
    X5ec381b98997d29e_1 [label="Storage Live _2\lCall\l"];
    X5ec381b98997d29e_2 -> X5ec381b98997d29e_4 [label="0"];
    X5ec381b98997d29e_2 -> X5ec381b98997d29e_3 [label="2"];
    X5ec381b98997d29e_2 -> X5ec381b98997d29e_5 [label="1"];
    X5ec381b98997d29e_2 -> X5ec381b98997d29e_7 [label="other"];
    X5ec381b98997d29e_2 [label="3 <- Discriminant(2)\lSwitchInt mv(3)\l"];
    X5ec381b98997d29e_3 -> X5ec381b98997d29e_6;
    X5ec381b98997d29e_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X5ec381b98997d29e_4 -> X5ec381b98997d29e_6;
    X5ec381b98997d29e_4 [label="4 <- Use(cp((2 as variant 0).0))\l5 <- Use(cp((2 as variant 0).1))\lStorage Live _6\l6 <- Tuple (cp(4), cp(5))\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X5ec381b98997d29e_5 -> X5ec381b98997d29e_1;
    X5ec381b98997d29e_5 [label="Storage Dead _2\lGoto\l"];
    X5ec381b98997d29e_6 [label="Storage Dead _2\lReturn\l"];
    X5ec381b98997d29e_7 [label="Unreachable\l"];
  }
  X5ec381b98997d29e_1 -> X5aba2fb7a5ac2830_0 [label="cp(1)"];
  subgraph cluster_232 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Searc\nher<'_>>::next_reject";
    style="filled";
    color=lightgray;
    node_233 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = core::str::pattern::SearchStep\l3 = isize\l4 = usize\l5 = usize\l6 = (usize, usize)\l", style="filled", color=palegreen3];
    X94575477f983eb97_0 -> X94575477f983eb97_1;
    X94575477f983eb97_0 [label="Goto\l"];
    X94575477f983eb97_1 -> X94575477f983eb97_2 [label="2"];
    X94575477f983eb97_1 [label="Storage Live _2\lCall\l"];
    X94575477f983eb97_2 -> X94575477f983eb97_4 [label="1"];
    X94575477f983eb97_2 -> X94575477f983eb97_3 [label="2"];
    X94575477f983eb97_2 -> X94575477f983eb97_5 [label="0"];
    X94575477f983eb97_2 -> X94575477f983eb97_7 [label="other"];
    X94575477f983eb97_2 [label="3 <- Discriminant(2)\lSwitchInt mv(3)\l"];
    X94575477f983eb97_3 -> X94575477f983eb97_6;
    X94575477f983eb97_3 [label="0 <- Adt{0} ()\lGoto\l"];
    X94575477f983eb97_4 -> X94575477f983eb97_6;
    X94575477f983eb97_4 [label="4 <- Use(cp((2 as variant 1).0))\l5 <- Use(cp((2 as variant 1).1))\lStorage Live _6\l6 <- Tuple (cp(4), cp(5))\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X94575477f983eb97_5 -> X94575477f983eb97_1;
    X94575477f983eb97_5 [label="Storage Dead _2\lGoto\l"];
    X94575477f983eb97_6 [label="Storage Dead _2\lReturn\l"];
    X94575477f983eb97_7 [label="Unreachable\l"];
  }
  X94575477f983eb97_1 -> X834dc2888d69dd6d_0 [label="cp(1)"];
  subgraph cluster_234 {
    label="core::str::from_utf8_unch\necked";
    style="filled";
    color=lightgray;
    node_235 [label="LOCALS\l0 = &str\l1 = &[u8]\l", style="filled", color=palegreen3];
    Xa8af50ae2aec905_0 [label="0 <- Cast-Transmute cp(1)\lReturn\l"];
  }
  subgraph cluster_236 {
    label="core::char::convert::from\n_u32_unchecked::precondit\nion_check";
    style="filled";
    color=lightgray;
    node_237 [label="LOCALS\l0 = ()\l1 = u32\l2 = &core::result::Result<char, core::char::CharTryFromError>\l3 = core::result::Result<char, core::char::CharTryFromError>\l4 = !\l5 = bool\l6 = u32\l7 = u32\l8 = char\l9 = isize\l", style="filled", color=palegreen3];
    Xeeb9aa05dcd0eaef_0 -> Xeeb9aa05dcd0eaef_2 [label="0"];
    Xeeb9aa05dcd0eaef_0 -> Xeeb9aa05dcd0eaef_1 [label="other"];
    Xeeb9aa05dcd0eaef_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _5\lStorage Live _6\lStorage Live _7\l7 <- BitXor(cp(1), const ?_u32)\l6 <- Sub(cp(7), const ?_u32)\lStorage Dead _7\l5 <- Ge(mv(6), const ?_u32)\lSwitchInt mv(5)\l"];
    Xeeb9aa05dcd0eaef_1 -> Xeeb9aa05dcd0eaef_3;
    Xeeb9aa05dcd0eaef_1 [label="Storage Dead _6\l3 <- Use(const core::result::Result<char, core::char::CharTryFromError>)\lGoto\l"];
    Xeeb9aa05dcd0eaef_2 -> Xeeb9aa05dcd0eaef_3;
    Xeeb9aa05dcd0eaef_2 [label="Storage Dead _6\lStorage Live _8\l8 <- Cast-Transmute cp(1)\l3 <- Adt{0} (mv(8))\lStorage Dead _8\lGoto\l"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_5 [label="0"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_4 [label="1"];
    Xeeb9aa05dcd0eaef_3 -> Xeeb9aa05dcd0eaef_6 [label="other"];
    Xeeb9aa05dcd0eaef_3 [label="Storage Dead _5\l2 <- & 3\lStorage Live _9\l9 <- Discriminant(3)\lSwitchInt mv(9)\l"];
    Xeeb9aa05dcd0eaef_4 [label="Storage Dead _9\lStorage Dead _2\lStorage Dead _3\lCall\l"];
    Xeeb9aa05dcd0eaef_5 [label="Storage Dead _9\lStorage Dead _2\lStorage Dead _3\lReturn\l"];
    Xeeb9aa05dcd0eaef_6 [label="Unreachable\l"];
  }
  Xeeb9aa05dcd0eaef_4 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_238 {
    label="core::char::encode_utf8_r\naw";
    style="filled";
    color=lightgray;
    node_239 [label="LOCALS\l0 = &mut [u8]\l1 = u32\l2 = &mut [u8]\l3 = usize\l4 = usize\l5 = bool\l6 = usize\l7 = bool\l8 = usize\l9 = bool\l10 = usize\l11 = bool\l12 = &mut u8\l13 = &mut u8\l14 = &mut u8\l15 = u8\l16 = u32\l17 = u32\l18 = u8\l19 = u32\l20 = &mut u8\l21 = &mut u8\l22 = &mut u8\l23 = u8\l24 = u32\l25 = u32\l26 = u8\l27 = u32\l28 = u32\l29 = u8\l30 = u32\l31 = &mut u8\l32 = &mut u8\l33 = &mut u8\l34 = &mut u8\l35 = u8\l36 = u32\l37 = u32\l38 = u8\l39 = u32\l40 = u32\l41 = u8\l42 = u32\l43 = u32\l44 = u8\l45 = u32\l46 = !\l47 = usize\l48 = usize\l49 = *mut u8\l50 = usize\l51 = bool\l52 = bool\l53 = bool\l54 = *mut [u8]\l55 = bool\l56 = ()\l57 = *mut ()\l58 = *mut [u8]\l", style="filled", color=palegreen3];
    X99903dfa6b5cd43f_0 -> X99903dfa6b5cd43f_7 [label="0"];
    X99903dfa6b5cd43f_0 -> X99903dfa6b5cd43f_12 [label="other"];
    X99903dfa6b5cd43f_0 [label="Storage Live _3\lStorage Live _51\lStorage Live _52\lStorage Live _53\l51 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(51)\l"];
    X99903dfa6b5cd43f_1 [label="Storage Live _47\l47 <- Use(cp(3))\lStorage Live _48\l48 <- PtrMetadata(cp(2))\lCall\l"];
    X99903dfa6b5cd43f_2 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_2 [label="Storage Live _31\l31 <- &mut (*2)[0]\lStorage Live _32\l32 <- &mut (*2)[1]\lStorage Live _33\l33 <- &mut (*2)[2]\lStorage Live _34\l34 <- &mut (*2)[3]\lStorage Live _35\lStorage Live _36\lStorage Live _37\l37 <- Shr(cp(1), const ?_i32)\l36 <- BitAnd(mv(37), const ?_u32)\lStorage Dead _37\l35 <- Cast-IntToInt mv(36)\lStorage Dead _36\l(*2)[0] <- BitOr(mv(35), const ?_u8)\lStorage Dead _35\lStorage Live _38\lStorage Live _39\lStorage Live _40\l40 <- Shr(cp(1), const ?_i32)\l39 <- BitAnd(mv(40), const ?_u32)\lStorage Dead _40\l38 <- Cast-IntToInt mv(39)\lStorage Dead _39\l(*2)[1] <- BitOr(mv(38), const ?_u8)\lStorage Dead _38\lStorage Live _41\lStorage Live _42\lStorage Live _43\l43 <- Shr(cp(1), const ?_i32)\l42 <- BitAnd(mv(43), const ?_u32)\lStorage Dead _43\l41 <- Cast-IntToInt mv(42)\lStorage Dead _42\l(*2)[2] <- BitOr(mv(41), const ?_u8)\lStorage Dead _41\lStorage Live _44\lStorage Live _45\l45 <- BitAnd(cp(1), const ?_u32)\l44 <- Cast-IntToInt mv(45)\lStorage Dead _45\l(*2)[3] <- BitOr(mv(44), const ?_u8)\lStorage Dead _44\lStorage Dead _34\lStorage Dead _33\lStorage Dead _32\lStorage Dead _31\lGoto\l"];
    X99903dfa6b5cd43f_3 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_3 [label="Storage Live _20\l20 <- &mut (*2)[0]\lStorage Live _21\l21 <- &mut (*2)[1]\lStorage Live _22\l22 <- &mut (*2)[2]\lStorage Live _23\lStorage Live _24\lStorage Live _25\l25 <- Shr(cp(1), const ?_i32)\l24 <- BitAnd(mv(25), const ?_u32)\lStorage Dead _25\l23 <- Cast-IntToInt mv(24)\lStorage Dead _24\l(*2)[0] <- BitOr(mv(23), const ?_u8)\lStorage Dead _23\lStorage Live _26\lStorage Live _27\lStorage Live _28\l28 <- Shr(cp(1), const ?_i32)\l27 <- BitAnd(mv(28), const ?_u32)\lStorage Dead _28\l26 <- Cast-IntToInt mv(27)\lStorage Dead _27\l(*2)[1] <- BitOr(mv(26), const ?_u8)\lStorage Dead _26\lStorage Live _29\lStorage Live _30\l30 <- BitAnd(cp(1), const ?_u32)\l29 <- Cast-IntToInt mv(30)\lStorage Dead _30\l(*2)[2] <- BitOr(mv(29), const ?_u8)\lStorage Dead _29\lStorage Dead _22\lStorage Dead _21\lStorage Dead _20\lGoto\l"];
    X99903dfa6b5cd43f_4 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_4 [label="Storage Live _13\l13 <- &mut (*2)[0]\lStorage Live _14\l14 <- &mut (*2)[1]\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Shr(cp(1), const ?_i32)\l16 <- BitAnd(mv(17), const ?_u32)\lStorage Dead _17\l15 <- Cast-IntToInt mv(16)\lStorage Dead _16\l(*2)[0] <- BitOr(mv(15), const ?_u8)\lStorage Dead _15\lStorage Live _18\lStorage Live _19\l19 <- BitAnd(cp(1), const ?_u32)\l18 <- Cast-IntToInt mv(19)\lStorage Dead _19\l(*2)[1] <- BitOr(mv(18), const ?_u8)\lStorage Dead _18\lStorage Dead _14\lStorage Dead _13\lGoto\l"];
    X99903dfa6b5cd43f_5 -> X99903dfa6b5cd43f_6;
    X99903dfa6b5cd43f_5 [label="Storage Live _12\l12 <- &mut (*2)[0]\l(*2)[0] <- Cast-IntToInt cp(1)\lStorage Dead _12\lGoto\l"];
    X99903dfa6b5cd43f_6 -> X99903dfa6b5cd43f_15 [label="0"];
    X99903dfa6b5cd43f_6 -> X99903dfa6b5cd43f_13 [label="other"];
    X99903dfa6b5cd43f_6 [label="Storage Live _49\l54 <- &raw mut (*2)\l49 <- Cast-PtrToPtr cp(54)\lStorage Live _50\l50 <- Use(cp(3))\lStorage Live _55\l55 <- UbChecks :: bool\lSwitchInt mv(55)\l"];
    X99903dfa6b5cd43f_7 -> X99903dfa6b5cd43f_8 [label="0"];
    X99903dfa6b5cd43f_7 -> X99903dfa6b5cd43f_11 [label="other"];
    X99903dfa6b5cd43f_7 [label="52 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(52)\l"];
    X99903dfa6b5cd43f_8 -> X99903dfa6b5cd43f_9 [label="0"];
    X99903dfa6b5cd43f_8 -> X99903dfa6b5cd43f_10 [label="other"];
    X99903dfa6b5cd43f_8 [label="53 <- Lt(cp(1), const ?_u32)\lSwitchInt mv(53)\l"];
    X99903dfa6b5cd43f_9 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_9 -> X99903dfa6b5cd43f_2 [label="other"];
    X99903dfa6b5cd43f_9 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l10 <- Len((*2))\l11 <- Ge(mv(10), const ?_usize)\lSwitchInt mv(11)\l"];
    X99903dfa6b5cd43f_10 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_10 -> X99903dfa6b5cd43f_3 [label="other"];
    X99903dfa6b5cd43f_10 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l8 <- Len((*2))\l9 <- Ge(mv(8), const ?_usize)\lSwitchInt mv(9)\l"];
    X99903dfa6b5cd43f_11 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_11 -> X99903dfa6b5cd43f_4 [label="other"];
    X99903dfa6b5cd43f_11 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l6 <- Len((*2))\l7 <- Ge(mv(6), const ?_usize)\lSwitchInt mv(7)\l"];
    X99903dfa6b5cd43f_12 -> X99903dfa6b5cd43f_1 [label="0"];
    X99903dfa6b5cd43f_12 -> X99903dfa6b5cd43f_5 [label="other"];
    X99903dfa6b5cd43f_12 [label="3 <- Use(const ?_usize)\lStorage Dead _53\lStorage Dead _52\lStorage Dead _51\l4 <- Len((*2))\l5 <- Ge(mv(4), const ?_usize)\lSwitchInt mv(5)\l"];
    X99903dfa6b5cd43f_13 -> X99903dfa6b5cd43f_14 [label="56"];
    X99903dfa6b5cd43f_13 [label="Storage Live _57\l57 <- Cast-PtrToPtr cp(54)\lCall\l"];
    X99903dfa6b5cd43f_14 -> X99903dfa6b5cd43f_15;
    X99903dfa6b5cd43f_14 [label="Storage Dead _57\lGoto\l"];
    X99903dfa6b5cd43f_15 [label="Storage Dead _55\lStorage Live _58\l58 <- *mut ([u8]) (cp(49), cp(50))\l0 <- &mut (*58)\lStorage Dead _58\lStorage Dead _50\lStorage Dead _49\lStorage Dead _3\lReturn\l"];
  }
  X99903dfa6b5cd43f_1 -> X18cbc2f348c9e06e_0 [label="mv(1),mv(47),mv(48)"];
  X99903dfa6b5cd43f_13 -> X63018216f9c6ad5a_0 [label="mv(57),const ?_usize,const ?_usize,cp(50)"];
  subgraph cluster_240 {
    label="core::char::methods::<imp\nl \nchar>::is_digit";
    style="filled";
    color=lightgray;
    node_241 [label="LOCALS\l0 = bool\l1 = char\l2 = u32\l3 = &core::option::Option<u32>\l4 = core::option::Option<u32>\l5 = isize\l", style="filled", color=palegreen3];
    X29ec41623bcab054_0 -> X29ec41623bcab054_1 [label="4"];
    X29ec41623bcab054_0 [label="Storage Live _3\lStorage Live _4\lCall\l"];
    X29ec41623bcab054_1 -> X29ec41623bcab054_4 [label="1"];
    X29ec41623bcab054_1 -> X29ec41623bcab054_3 [label="0"];
    X29ec41623bcab054_1 -> X29ec41623bcab054_5 [label="other"];
    X29ec41623bcab054_1 [label="3 <- & 4\lStorage Live _5\l5 <- Discriminant(4)\lSwitchInt mv(5)\l"];
    X29ec41623bcab054_2 [label="Storage Dead _5\lStorage Dead _3\lStorage Dead _4\lReturn\l"];
    X29ec41623bcab054_3 -> X29ec41623bcab054_2;
    X29ec41623bcab054_3 [label="0 <- Use(const bool)\lGoto\l"];
    X29ec41623bcab054_4 -> X29ec41623bcab054_2;
    X29ec41623bcab054_4 [label="0 <- Use(const bool)\lGoto\l"];
    X29ec41623bcab054_5 [label="Unreachable\l"];
  }
  X29ec41623bcab054_0 -> X717361f9a6dc2c2a_0 [label="mv(1),mv(2)"];
  subgraph cluster_242 {
    label="core::char::methods::<imp\nl \nchar>::to_digit";
    style="filled";
    color=lightgray;
    node_243 [label="LOCALS\l0 = core::option::Option<u32>\l1 = char\l2 = u32\l3 = bool\l4 = bool\l5 = !\l6 = core::fmt::Arguments<'_>\l7 = u64\l8 = bool\l9 = bool\l10 = u32\l11 = u32\l12 = u64\l13 = u32\l14 = u32\l15 = u32\l16 = bool\l17 = u64\l18 = u64\l19 = u32\l20 = u64\l21 = &[&str]\l22 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X717361f9a6dc2c2a_0 -> X717361f9a6dc2c2a_3 [label="0"];
    X717361f9a6dc2c2a_0 -> X717361f9a6dc2c2a_1 [label="other"];
    X717361f9a6dc2c2a_0 [label="Storage Live _3\l3 <- Ge(cp(2), const ?_u32)\lSwitchInt mv(3)\l"];
    X717361f9a6dc2c2a_1 -> X717361f9a6dc2c2a_3 [label="0"];
    X717361f9a6dc2c2a_1 -> X717361f9a6dc2c2a_2 [label="other"];
    X717361f9a6dc2c2a_1 [label="Storage Live _4\l4 <- Le(cp(2), const ?_u32)\lSwitchInt mv(4)\l"];
    X717361f9a6dc2c2a_2 -> X717361f9a6dc2c2a_6 [label="0"];
    X717361f9a6dc2c2a_2 -> X717361f9a6dc2c2a_4 [label="other"];
    X717361f9a6dc2c2a_2 [label="Storage Dead _4\lStorage Dead _3\lStorage Live _7\lStorage Live _8\l8 <- Gt(cp(1), const char)\lSwitchInt mv(8)\l"];
    X717361f9a6dc2c2a_3 [label="Storage Live _6\lStorage Live _21\l21 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _22\l22 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l6 <- Adt{0} (mv(21), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(22))\lStorage Dead _22\lStorage Dead _21\lCall\l"];
    X717361f9a6dc2c2a_4 -> X717361f9a6dc2c2a_6 [label="0"];
    X717361f9a6dc2c2a_4 -> X717361f9a6dc2c2a_5 [label="other"];
    X717361f9a6dc2c2a_4 [label="Storage Live _9\l9 <- Gt(cp(2), const ?_u32)\lSwitchInt mv(9)\l"];
    X717361f9a6dc2c2a_5 -> X717361f9a6dc2c2a_7;
    X717361f9a6dc2c2a_5 [label="Storage Live _11\l11 <- Cast-IntToInt cp(1)\l10 <- BitOr(mv(11), const ?_u32)\lStorage Dead _11\lStorage Live _12\lStorage Live _13\l13 <- Sub(cp(10), const ?_u32)\l12 <- Cast-IntToInt mv(13)\lStorage Dead _13\l7 <- Add(mv(12), const ?_u64)\lStorage Dead _12\lGoto\l"];
    X717361f9a6dc2c2a_6 -> X717361f9a6dc2c2a_7;
    X717361f9a6dc2c2a_6 [label="Storage Live _14\lStorage Live _15\l15 <- Cast-IntToInt cp(1)\l14 <- Sub(cp(15), const ?_u32)\lStorage Dead _15\l7 <- Cast-IntToInt mv(14)\lStorage Dead _14\lGoto\l"];
    X717361f9a6dc2c2a_7 -> X717361f9a6dc2c2a_9 [label="0"];
    X717361f9a6dc2c2a_7 -> X717361f9a6dc2c2a_8 [label="other"];
    X717361f9a6dc2c2a_7 [label="Storage Dead _9\lStorage Dead _8\lStorage Live _16\lStorage Live _17\l17 <- Use(cp(7))\lStorage Live _18\l18 <- Cast-IntToInt cp(2)\l16 <- Lt(mv(17), mv(18))\lSwitchInt mv(16)\l"];
    X717361f9a6dc2c2a_8 -> X717361f9a6dc2c2a_10;
    X717361f9a6dc2c2a_8 [label="Storage Dead _18\lStorage Dead _17\lStorage Live _19\lStorage Live _20\l20 <- Use(cp(7))\l19 <- Cast-IntToInt mv(20)\lStorage Dead _20\l0 <- Adt{1} (mv(19))\lStorage Dead _19\lGoto\l"];
    X717361f9a6dc2c2a_9 -> X717361f9a6dc2c2a_10;
    X717361f9a6dc2c2a_9 [label="Storage Dead _18\lStorage Dead _17\l0 <- Use(const core::option::Option<u32>)\lGoto\l"];
    X717361f9a6dc2c2a_10 [label="Storage Dead _16\lStorage Dead _7\lReturn\l"];
  }
  X717361f9a6dc2c2a_3 -> Xfffaab11503b9894_0 [label="mv(6)"];
  subgraph cluster_244 {
    label="core::hint::unreachable_u\nnchecked";
    style="filled";
    color=lightgray;
    node_245 [label="LOCALS\l0 = !\l1 = bool\l2 = ()\l", style="filled", color=palegreen3];
    X8452db9b8b2010e2_0 -> X8452db9b8b2010e2_1 [label="2"];
    X8452db9b8b2010e2_0 [label="1 <- UbChecks :: bool\lIntr: Assume cp(1)\lCall\l"];
    X8452db9b8b2010e2_1 [label="Unreachable\l"];
  }
  X8452db9b8b2010e2_0 -> X33a001831920b814_0 [label=""];
  subgraph cluster_246 {
    label="core::hint::unreachable_u\nnchecked::precondition_ch\neck";
    style="filled";
    color=lightgray;
    node_247 [label="LOCALS\l0 = ()\l1 = !\l", style="filled", color=palegreen3];
    X33a001831920b814_0 [label="Call\l"];
  }
  X33a001831920b814_0 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_248 {
    label="core::hint::black_box::<&\n[u8]>";
    style="filled";
    color=lightgray;
    node_249 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l", style="filled", color=palegreen3];
    X780f31d308d65371_0 -> X780f31d308d65371_1 [label="0"];
    X780f31d308d65371_0 [label="Call\l"];
    X780f31d308d65371_1 [label="Return\l"];
  }
  X780f31d308d65371_0 -> X3c6542d96320ad67_0 [label="mv(1)"];
  subgraph cluster_250 {
    label="<core::iter::Skip<core::s\ntr::Chars<'_>> \nas \ncore::iter::Iterator>::al\nl::<{closure@p-token/src/\nentrypoint.rs:1397:93: \n1397:96}>";
    style="filled";
    color=lightgray;
    node_251 [label="LOCALS\l0 = bool\l1 = &mut core::iter::Skip<core::str::Chars<'_>>\l2 = {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}\l3 = &core::ops::ControlFlow<()>\l4 = core::ops::ControlFlow<()>\l5 = {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l", style="filled", color=palegreen3];
    Xc58124057b7df470_0 -> Xc58124057b7df470_1 [label="4"];
    Xc58124057b7df470_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _5\l5 <- Closure (cp(2))\lCall\l"];
    Xc58124057b7df470_1 -> Xc58124057b7df470_2 [label="0"];
    Xc58124057b7df470_1 [label="3 <- & 4\lStorage Dead _5\lCall\l"];
    Xc58124057b7df470_2 [label="Storage Dead _3\lStorage Dead _4\lReturn\l"];
  }
  Xc58124057b7df470_0 -> Xbfe99f132f8ade2a_0 [label="mv(1),const (),mv(5)"];
  Xc58124057b7df470_1 -> X43e1d3a9fc1a8e12_0 [label="mv(3),const &core::ops::ControlFlow<()>"];
  subgraph cluster_252 {
    label="core::iter::Iterator::all\n::check::<char, \n{closure@p-token/src/entr\nypoint.rs:1397:93: \n1397:96}>::{closure#0}";
    style="filled";
    color=lightgray;
    node_253 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = &mut {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l2 = ()\l3 = char\l4 = bool\l5 = &mut {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}\l6 = (char,)\l", style="filled", color=palegreen3];
    Xe2805641778070a6_0 -> Xe2805641778070a6_1 [label="4"];
    Xe2805641778070a6_0 [label="Storage Live _4\lStorage Live _5\l5 <- &mut (*1).0\lStorage Live _6\l6 <- Tuple (cp(3))\lCall\l"];
    Xe2805641778070a6_1 -> Xe2805641778070a6_3 [label="0"];
    Xe2805641778070a6_1 -> Xe2805641778070a6_2 [label="other"];
    Xe2805641778070a6_1 [label="SwitchInt mv(4)\l"];
    Xe2805641778070a6_2 -> Xe2805641778070a6_4;
    Xe2805641778070a6_2 [label="Storage Dead _6\lStorage Dead _5\l0 <- Use(const core::ops::ControlFlow<()>)\lGoto\l"];
    Xe2805641778070a6_3 -> Xe2805641778070a6_4;
    Xe2805641778070a6_3 [label="Storage Dead _6\lStorage Dead _5\l0 <- Use(const core::ops::ControlFlow<()>)\lGoto\l"];
    Xe2805641778070a6_4 [label="Storage Dead _4\lReturn\l"];
  }
  Xe2805641778070a6_0 -> X6896d4fe494131cc_0 [label="mv(5),mv(6)"];
  subgraph cluster_254 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::ma\np::<usize, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}>";
    style="filled";
    color=lightgray;
    node_255 [label="LOCALS\l0 = core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>\l1 = core::str::Chars<'_>\l2 = {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}\l", style="filled", color=palegreen3];
    X8e7536494f3ec4ab_0 [label="0 <- Adt{0} (cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_256 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::nt\nh";
    style="filled";
    color=lightgray;
    node_257 [label="LOCALS\l0 = core::option::Option<char>\l1 = &mut core::str::Chars<'_>\l2 = usize\l3 = core::option::Option<()>\l4 = core::result::Result<(), core::num::NonZero<usize>>\l5 = isize\l6 = isize\l", style="filled", color=palegreen3];
    Xe7a56560380956ca_0 -> Xe7a56560380956ca_1 [label="4"];
    Xe7a56560380956ca_0 [label="Storage Live _3\lStorage Live _4\lCall\l"];
    Xe7a56560380956ca_1 -> Xe7a56560380956ca_5 [label="0"];
    Xe7a56560380956ca_1 -> Xe7a56560380956ca_4 [label="1"];
    Xe7a56560380956ca_1 -> Xe7a56560380956ca_2 [label="other"];
    Xe7a56560380956ca_1 [label="5 <- Discriminant(4)\lSwitchInt cp(5)\l"];
    Xe7a56560380956ca_2 [label="Unreachable\l"];
    Xe7a56560380956ca_3 [label="Return\l"];
    Xe7a56560380956ca_4 -> Xe7a56560380956ca_6;
    Xe7a56560380956ca_4 [label="3 <- Use(const core::option::Option<()>)\lGoto\l"];
    Xe7a56560380956ca_5 -> Xe7a56560380956ca_6;
    Xe7a56560380956ca_5 [label="3 <- Use(const core::option::Option<()>)\lGoto\l"];
    Xe7a56560380956ca_6 -> Xe7a56560380956ca_7 [label="0"];
    Xe7a56560380956ca_6 -> Xe7a56560380956ca_8 [label="1"];
    Xe7a56560380956ca_6 -> Xe7a56560380956ca_2 [label="other"];
    Xe7a56560380956ca_6 [label="Storage Dead _4\lStorage Live _6\l6 <- Discriminant(3)\lSwitchInt mv(6)\l"];
    Xe7a56560380956ca_7 -> Xe7a56560380956ca_3;
    Xe7a56560380956ca_7 [label="Storage Dead _6\lStorage Dead _3\l0 <- Adt{0} ()\lGoto\l"];
    Xe7a56560380956ca_8 -> Xe7a56560380956ca_3 [label="0"];
    Xe7a56560380956ca_8 [label="Storage Dead _6\lStorage Dead _3\lCall\l"];
  }
  Xe7a56560380956ca_0 -> Xd663680a382da43_0 [label="cp(1),mv(2)"];
  Xe7a56560380956ca_8 -> Xbbbb9871203f266f_0 [label="mv(1)"];
  subgraph cluster_258 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::fo\nld::<usize, \n{closure@core::iter::adap\nters::map::map_fold<char,\n \nusize, \nusize, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}, \n{closure@<usize \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::str::C\nhars<'_>, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}>>\n::{closure#0}}>::{closure\n#0}}>";
    style="filled";
    color=lightgray;
    node_259 [label="LOCALS\l0 = usize\l1 = core::str::Chars<'_>\l2 = usize\l3 = {closure@core::iter::adapters::map::map_fold<char, usize, usize, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}, {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}>::{closure#0}}\l4 = usize\l5 = core::option::Option<char>\l6 = &mut core::str::Chars<'_>\l7 = isize\l8 = char\l9 = usize\l10 = &mut {closure@core::iter::adapters::map::map_fold<char, usize, usize, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}, {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}>::{closure#0}}\l11 = (usize, char)\l12 = usize\l13 = bool\l", style="filled", color=palegreen3];
    X5fb562383e7f44cb_0 -> X5fb562383e7f44cb_1;
    X5fb562383e7f44cb_0 [label="Storage Live _4\l13 <- Use(const bool)\l4 <- Use(mv(2))\lGoto\l"];
    X5fb562383e7f44cb_1 -> X5fb562383e7f44cb_13 [label="Cleanup"];
    X5fb562383e7f44cb_1 -> X5fb562383e7f44cb_2 [label="5"];
    X5fb562383e7f44cb_1 [label="Storage Live _5\lStorage Live _6\l6 <- &mut 1\lCall\l"];
    X5fb562383e7f44cb_2 -> X5fb562383e7f44cb_3 [label="1"];
    X5fb562383e7f44cb_2 -> X5fb562383e7f44cb_5 [label="0"];
    X5fb562383e7f44cb_2 -> X5fb562383e7f44cb_14 [label="other"];
    X5fb562383e7f44cb_2 [label="Storage Dead _6\l7 <- Discriminant(5)\lSwitchInt mv(7)\l"];
    X5fb562383e7f44cb_3 -> X5fb562383e7f44cb_13 [label="Cleanup"];
    X5fb562383e7f44cb_3 -> X5fb562383e7f44cb_4 [label="9"];
    X5fb562383e7f44cb_3 [label="8 <- Use(mv((5 as variant 1).0))\lStorage Live _9\lStorage Live _10\l10 <- &mut 3\lStorage Live _11\lStorage Live _12\l13 <- Use(const bool)\l12 <- Use(mv(4))\l11 <- Tuple (mv(12), cp(8))\lCall\l"];
    X5fb562383e7f44cb_4 -> X5fb562383e7f44cb_1;
    X5fb562383e7f44cb_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _10\l13 <- Use(const bool)\l4 <- Use(mv(9))\lStorage Dead _9\lStorage Dead _5\lGoto\l"];
    X5fb562383e7f44cb_5 -> X5fb562383e7f44cb_13 [label="Cleanup"];
    X5fb562383e7f44cb_5 -> X5fb562383e7f44cb_6;
    X5fb562383e7f44cb_5 [label="Drop 5\l"];
    X5fb562383e7f44cb_6 -> X5fb562383e7f44cb_10 [label="Cleanup"];
    X5fb562383e7f44cb_6 -> X5fb562383e7f44cb_7;
    X5fb562383e7f44cb_6 [label="Storage Dead _5\l0 <- Use(mv(4))\lStorage Dead _4\lDrop 3\l"];
    X5fb562383e7f44cb_7 -> X5fb562383e7f44cb_8;
    X5fb562383e7f44cb_7 [label="Drop 1\l"];
    X5fb562383e7f44cb_8 [label="Return\l"];
    X5fb562383e7f44cb_9 -> X5fb562383e7f44cb_10;
    X5fb562383e7f44cb_9 [label="Drop 3\l"];
    X5fb562383e7f44cb_10 -> X5fb562383e7f44cb_11;
    X5fb562383e7f44cb_10 [label="Drop 1\l"];
    X5fb562383e7f44cb_11 [label="Resume\l"];
    X5fb562383e7f44cb_12 -> X5fb562383e7f44cb_9;
    X5fb562383e7f44cb_12 [label="Drop 4\l"];
    X5fb562383e7f44cb_13 -> X5fb562383e7f44cb_9 [label="0"];
    X5fb562383e7f44cb_13 -> X5fb562383e7f44cb_12 [label="other"];
    X5fb562383e7f44cb_13 [label="SwitchInt cp(13)\l"];
    X5fb562383e7f44cb_14 [label="Unreachable\l"];
  }
  X5fb562383e7f44cb_1 -> Xbbbb9871203f266f_0 [label="mv(6)"];
  X5fb562383e7f44cb_3 -> Xf47b44c067a3634d_0 [label="mv(10),mv(11)"];
  subgraph cluster_260 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::sk\nip";
    style="filled";
    color=lightgray;
    node_261 [label="LOCALS\l0 = core::iter::Skip<core::str::Chars<'_>>\l1 = core::str::Chars<'_>\l2 = usize\l", style="filled", color=palegreen3];
    X2b41c57b1a779fee_0 [label="0 <- Adt{0} (cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_262 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::fi\nlter::<{closure@p-token/s\nrc/entrypoint.rs:1395:53:\n \n1395:57}>";
    style="filled";
    color=lightgray;
    node_263 [label="LOCALS\l0 = core::iter::Filter<core::str::Chars<'_>, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>\l1 = core::str::Chars<'_>\l2 = {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}\l", style="filled", color=palegreen3];
    Xdbeb23f3b0b50d09_0 [label="0 <- Adt{0} (cp(1), cp(2))\lReturn\l"];
  }
  subgraph cluster_264 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::tr\ny_fold::<(), \n{closure@core::iter::Iter\nator::all::check<char, \n{closure@p-token/src/entr\nypoint.rs:1397:93: \n1397:96}>::{closure#0}}, \ncore::ops::ControlFlow<()\n>>";
    style="filled";
    color=lightgray;
    node_265 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = &mut core::str::Chars<'_>\l2 = ()\l3 = {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l4 = ()\l5 = core::option::Option<char>\l6 = isize\l7 = char\l8 = core::ops::ControlFlow<core::ops::ControlFlow<(), core::convert::Infallible>>\l9 = core::ops::ControlFlow<()>\l10 = &mut {closure@core::iter::Iterator::all::check<char, {closure@p-token/src/entrypoint.rs:1397:93: 1397:96}>::{closure#0}}\l11 = ((), char)\l12 = ()\l13 = isize\l14 = core::ops::ControlFlow<(), core::convert::Infallible>\l15 = ()\l16 = ()\l17 = bool\l", style="filled", color=palegreen3];
    X78e8e99cf5cec23f_0 -> X78e8e99cf5cec23f_1;
    X78e8e99cf5cec23f_0 [label="Storage Live _4\l17 <- Use(const bool)\l4 <- Use(mv(2))\lGoto\l"];
    X78e8e99cf5cec23f_1 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_1 -> X78e8e99cf5cec23f_2 [label="5"];
    X78e8e99cf5cec23f_1 [label="Storage Live _5\lCall\l"];
    X78e8e99cf5cec23f_2 -> X78e8e99cf5cec23f_3 [label="1"];
    X78e8e99cf5cec23f_2 -> X78e8e99cf5cec23f_10 [label="0"];
    X78e8e99cf5cec23f_2 -> X78e8e99cf5cec23f_6 [label="other"];
    X78e8e99cf5cec23f_2 [label="6 <- Discriminant(5)\lSwitchInt mv(6)\l"];
    X78e8e99cf5cec23f_3 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_3 -> X78e8e99cf5cec23f_4 [label="9"];
    X78e8e99cf5cec23f_3 [label="7 <- Use(mv((5 as variant 1).0))\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- &mut 3\lStorage Live _11\lStorage Live _12\l17 <- Use(const bool)\l12 <- Use(mv(4))\l11 <- Tuple (mv(12), cp(7))\lCall\l"];
    X78e8e99cf5cec23f_4 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_4 -> X78e8e99cf5cec23f_5 [label="8"];
    X78e8e99cf5cec23f_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _10\lCall\l"];
    X78e8e99cf5cec23f_5 -> X78e8e99cf5cec23f_7 [label="0"];
    X78e8e99cf5cec23f_5 -> X78e8e99cf5cec23f_8 [label="1"];
    X78e8e99cf5cec23f_5 -> X78e8e99cf5cec23f_6 [label="other"];
    X78e8e99cf5cec23f_5 [label="Storage Dead _9\l13 <- Discriminant(8)\lSwitchInt mv(13)\l"];
    X78e8e99cf5cec23f_6 [label="Unreachable\l"];
    X78e8e99cf5cec23f_7 -> X78e8e99cf5cec23f_1;
    X78e8e99cf5cec23f_7 [label="15 <- Use(mv((8 as variant 0).0))\l17 <- Use(const bool)\l4 <- Use(cp(15))\lStorage Dead _8\lStorage Dead _5\lGoto\l"];
    X78e8e99cf5cec23f_8 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_8 -> X78e8e99cf5cec23f_9 [label="0"];
    X78e8e99cf5cec23f_8 [label="14 <- Use(mv((8 as variant 1).0))\lCall\l"];
    X78e8e99cf5cec23f_9 -> X78e8e99cf5cec23f_13;
    X78e8e99cf5cec23f_9 [label="Storage Dead _8\lStorage Dead _5\lStorage Dead _4\lDrop 3\l"];
    X78e8e99cf5cec23f_10 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_10 -> X78e8e99cf5cec23f_11;
    X78e8e99cf5cec23f_10 [label="Drop 5\l"];
    X78e8e99cf5cec23f_11 -> X78e8e99cf5cec23f_17 [label="Cleanup"];
    X78e8e99cf5cec23f_11 -> X78e8e99cf5cec23f_12 [label="0"];
    X78e8e99cf5cec23f_11 [label="Storage Dead _5\lStorage Live _16\l17 <- Use(const bool)\l16 <- Use(mv(4))\lCall\l"];
    X78e8e99cf5cec23f_12 -> X78e8e99cf5cec23f_13;
    X78e8e99cf5cec23f_12 [label="Storage Dead _16\lStorage Dead _4\lDrop 3\l"];
    X78e8e99cf5cec23f_13 [label="Return\l"];
    X78e8e99cf5cec23f_14 -> X78e8e99cf5cec23f_15;
    X78e8e99cf5cec23f_14 [label="Drop 3\l"];
    X78e8e99cf5cec23f_15 [label="Resume\l"];
    X78e8e99cf5cec23f_16 -> X78e8e99cf5cec23f_14;
    X78e8e99cf5cec23f_16 [label="Drop 4\l"];
    X78e8e99cf5cec23f_17 -> X78e8e99cf5cec23f_14 [label="0"];
    X78e8e99cf5cec23f_17 -> X78e8e99cf5cec23f_16 [label="other"];
    X78e8e99cf5cec23f_17 [label="SwitchInt cp(17)\l"];
  }
  X78e8e99cf5cec23f_1 -> Xbbbb9871203f266f_0 [label="cp(1)"];
  X78e8e99cf5cec23f_3 -> Xe2805641778070a6_0 [label="mv(10),mv(11)"];
  X78e8e99cf5cec23f_4 -> X520c4c982105df50_0 [label="mv(9)"];
  X78e8e99cf5cec23f_8 -> Xdbc4cc7f242d80ee_0 [label="mv(14)"];
  X78e8e99cf5cec23f_11 -> X28203ac4004097e4_0 [label="mv(16)"];
  subgraph cluster_266 {
    label="<core::ops::index_range::\nIndexRange \nas \ncore::iter::Iterator>::tr\ny_fold::<u8, \n{closure@core::ops::try_t\nrait::NeverShortCircuit<u\n8>::wrap_mut_2<u8, \nusize, \n{closure@<core::array::In\ntoIter<bool, \n32> \nas \ncore::iter::Iterator>::fo\nld<u8, \n{closure@core::iter::adap\nters::map::map_fold<bool,\n \nu8, \nu8, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}, \n{closure@<u8 \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::array:\n:IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}}>::{closure#\n0}}>::{closure#0}}>::{clo\nsure#0}}, \ncore::ops::try_trait::Nev\nerShortCircuit<u8>>";
    style="filled";
    color=lightgray;
    node_267 [label="LOCALS\l0 = core::ops::try_trait::NeverShortCircuit<u8>\l1 = &mut core::ops::index_range::IndexRange\l2 = u8\l3 = {closure@core::ops::try_trait::NeverShortCircuit<u8>::wrap_mut_2<u8, usize, {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}>::{closure#0}}\l4 = u8\l5 = core::option::Option<usize>\l6 = isize\l7 = usize\l8 = core::ops::ControlFlow<core::ops::try_trait::NeverShortCircuitResidual, u8>\l9 = core::ops::try_trait::NeverShortCircuit<u8>\l10 = &mut {closure@core::ops::try_trait::NeverShortCircuit<u8>::wrap_mut_2<u8, usize, {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}>::{closure#0}}\l11 = (u8, usize)\l12 = u8\l13 = isize\l14 = core::ops::try_trait::NeverShortCircuitResidual\l15 = u8\l16 = u8\l17 = bool\l", style="filled", color=palegreen3];
    Xb464dde21e0c8607_0 -> Xb464dde21e0c8607_1;
    Xb464dde21e0c8607_0 [label="Storage Live _4\l17 <- Use(const bool)\l4 <- Use(mv(2))\lGoto\l"];
    Xb464dde21e0c8607_1 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_1 -> Xb464dde21e0c8607_2 [label="5"];
    Xb464dde21e0c8607_1 [label="Storage Live _5\lCall\l"];
    Xb464dde21e0c8607_2 -> Xb464dde21e0c8607_3 [label="1"];
    Xb464dde21e0c8607_2 -> Xb464dde21e0c8607_10 [label="0"];
    Xb464dde21e0c8607_2 -> Xb464dde21e0c8607_6 [label="other"];
    Xb464dde21e0c8607_2 [label="6 <- Discriminant(5)\lSwitchInt mv(6)\l"];
    Xb464dde21e0c8607_3 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_3 -> Xb464dde21e0c8607_4 [label="9"];
    Xb464dde21e0c8607_3 [label="7 <- Use(mv((5 as variant 1).0))\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- &mut 3\lStorage Live _11\lStorage Live _12\l17 <- Use(const bool)\l12 <- Use(mv(4))\l11 <- Tuple (mv(12), cp(7))\lCall\l"];
    Xb464dde21e0c8607_4 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_4 -> Xb464dde21e0c8607_5 [label="8"];
    Xb464dde21e0c8607_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _10\lCall\l"];
    Xb464dde21e0c8607_5 -> Xb464dde21e0c8607_7 [label="0"];
    Xb464dde21e0c8607_5 -> Xb464dde21e0c8607_8 [label="1"];
    Xb464dde21e0c8607_5 -> Xb464dde21e0c8607_6 [label="other"];
    Xb464dde21e0c8607_5 [label="Storage Dead _9\l13 <- Discriminant(8)\lSwitchInt mv(13)\l"];
    Xb464dde21e0c8607_6 [label="Unreachable\l"];
    Xb464dde21e0c8607_7 -> Xb464dde21e0c8607_1;
    Xb464dde21e0c8607_7 [label="15 <- Use(mv((8 as variant 0).0))\l17 <- Use(const bool)\l4 <- Use(cp(15))\lStorage Dead _8\lStorage Dead _5\lGoto\l"];
    Xb464dde21e0c8607_8 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_8 -> Xb464dde21e0c8607_9 [label="0"];
    Xb464dde21e0c8607_8 [label="14 <- Use(mv((8 as variant 1).0))\lCall\l"];
    Xb464dde21e0c8607_9 -> Xb464dde21e0c8607_13;
    Xb464dde21e0c8607_9 [label="Storage Dead _8\lStorage Dead _5\lStorage Dead _4\lDrop 3\l"];
    Xb464dde21e0c8607_10 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_10 -> Xb464dde21e0c8607_11;
    Xb464dde21e0c8607_10 [label="Drop 5\l"];
    Xb464dde21e0c8607_11 -> Xb464dde21e0c8607_17 [label="Cleanup"];
    Xb464dde21e0c8607_11 -> Xb464dde21e0c8607_12 [label="0"];
    Xb464dde21e0c8607_11 [label="Storage Dead _5\lStorage Live _16\l17 <- Use(const bool)\l16 <- Use(mv(4))\lCall\l"];
    Xb464dde21e0c8607_12 -> Xb464dde21e0c8607_13;
    Xb464dde21e0c8607_12 [label="Storage Dead _16\lStorage Dead _4\lDrop 3\l"];
    Xb464dde21e0c8607_13 [label="Return\l"];
    Xb464dde21e0c8607_14 -> Xb464dde21e0c8607_15;
    Xb464dde21e0c8607_14 [label="Drop 3\l"];
    Xb464dde21e0c8607_15 [label="Resume\l"];
    Xb464dde21e0c8607_16 -> Xb464dde21e0c8607_14;
    Xb464dde21e0c8607_16 [label="Drop 4\l"];
    Xb464dde21e0c8607_17 -> Xb464dde21e0c8607_14 [label="0"];
    Xb464dde21e0c8607_17 -> Xb464dde21e0c8607_16 [label="other"];
    Xb464dde21e0c8607_17 [label="SwitchInt cp(17)\l"];
  }
  Xb464dde21e0c8607_1 -> Xa984d43e58a62b84_0 [label="cp(1)"];
  Xb464dde21e0c8607_3 -> X2b2f1937bfd7df3e_0 [label="mv(10),mv(11)"];
  Xb464dde21e0c8607_4 -> X488d4ef79e3074a1_0 [label="mv(9)"];
  Xb464dde21e0c8607_8 -> X1204e78c96d6e5fc_0 [label="mv(14)"];
  Xb464dde21e0c8607_11 -> X5558a9c5e2f702e3_0 [label="mv(16)"];
  subgraph cluster_268 {
    label="core::iter::adapters::map\n::map_fold::<char, \nusize, \nusize, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}, \n{closure@<usize \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::str::C\nhars<'_>, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}>>\n::{closure#0}}>::{closure\n#0}";
    style="filled";
    color=lightgray;
    node_269 [label="LOCALS\l0 = usize\l1 = &mut {closure@core::iter::adapters::map::map_fold<char, usize, usize, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}, {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}>::{closure#0}}\l2 = usize\l3 = char\l4 = &mut {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}\l5 = (usize, usize)\l6 = usize\l7 = usize\l8 = &mut {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}\l9 = (char,)\l10 = bool\l", style="filled", color=palegreen3];
    Xf47b44c067a3634d_0 -> Xf47b44c067a3634d_5 [label="Cleanup"];
    Xf47b44c067a3634d_0 -> Xf47b44c067a3634d_1 [label="7"];
    Xf47b44c067a3634d_0 [label="Storage Live _4\l4 <- &mut (*1).0\lStorage Live _5\lStorage Live _6\l10 <- Use(const bool)\l6 <- Use(mv(2))\lStorage Live _7\lStorage Live _8\l8 <- &mut (*1).1\lStorage Live _9\l9 <- Tuple (cp(3))\lCall\l"];
    Xf47b44c067a3634d_1 -> Xf47b44c067a3634d_5 [label="Cleanup"];
    Xf47b44c067a3634d_1 -> Xf47b44c067a3634d_2 [label="0"];
    Xf47b44c067a3634d_1 [label="Storage Dead _9\lStorage Dead _8\l10 <- Use(const bool)\l5 <- Tuple (mv(6), mv(7))\lCall\l"];
    Xf47b44c067a3634d_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lStorage Dead _4\lReturn\l"];
    Xf47b44c067a3634d_3 [label="Resume\l"];
    Xf47b44c067a3634d_4 -> Xf47b44c067a3634d_3;
    Xf47b44c067a3634d_4 [label="Drop 6\l"];
    Xf47b44c067a3634d_5 -> Xf47b44c067a3634d_3 [label="0"];
    Xf47b44c067a3634d_5 -> Xf47b44c067a3634d_4 [label="other"];
    Xf47b44c067a3634d_5 [label="SwitchInt cp(10)\l"];
  }
  Xf47b44c067a3634d_0 -> Xf28540087b6c8498_0 [label="mv(8),mv(9)"];
  Xf47b44c067a3634d_1 -> X3e47db7ce1d99ccb_0 [label="mv(4),mv(5)"];
  subgraph cluster_270 {
    label="core::iter::adapters::map\n::map_fold::<bool, \nu8, \nu8, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}, \n{closure@<u8 \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::array:\n:IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}}>::{closure#\n0}";
    style="filled";
    color=lightgray;
    node_271 [label="LOCALS\l0 = u8\l1 = &mut {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}\l2 = u8\l3 = bool\l4 = &mut {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}\l5 = (u8, u8)\l6 = u8\l7 = u8\l8 = &mut {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}\l9 = (bool,)\l10 = bool\l", style="filled", color=palegreen3];
    Xb73166558f92a8e2_0 -> Xb73166558f92a8e2_5 [label="Cleanup"];
    Xb73166558f92a8e2_0 -> Xb73166558f92a8e2_1 [label="7"];
    Xb73166558f92a8e2_0 [label="Storage Live _4\l4 <- &mut (*1).0\lStorage Live _5\lStorage Live _6\l10 <- Use(const bool)\l6 <- Use(mv(2))\lStorage Live _7\lStorage Live _8\l8 <- &mut (*1).1\lStorage Live _9\l9 <- Tuple (cp(3))\lCall\l"];
    Xb73166558f92a8e2_1 -> Xb73166558f92a8e2_5 [label="Cleanup"];
    Xb73166558f92a8e2_1 -> Xb73166558f92a8e2_2 [label="0"];
    Xb73166558f92a8e2_1 [label="Storage Dead _9\lStorage Dead _8\l10 <- Use(const bool)\l5 <- Tuple (mv(6), mv(7))\lCall\l"];
    Xb73166558f92a8e2_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lStorage Dead _4\lReturn\l"];
    Xb73166558f92a8e2_3 [label="Resume\l"];
    Xb73166558f92a8e2_4 -> Xb73166558f92a8e2_3;
    Xb73166558f92a8e2_4 [label="Drop 6\l"];
    Xb73166558f92a8e2_5 -> Xb73166558f92a8e2_3 [label="0"];
    Xb73166558f92a8e2_5 -> Xb73166558f92a8e2_4 [label="other"];
    Xb73166558f92a8e2_5 [label="SwitchInt cp(10)\l"];
  }
  Xb73166558f92a8e2_0 -> Xe8e315be92f02c14_0 [label="mv(8),mv(9)"];
  Xb73166558f92a8e2_1 -> X45ef6e6e4352c05b_0 [label="mv(4),mv(5)"];
  subgraph cluster_272 {
    label="core::array::IntoIter::<b\nool, \n32>::as_mut_slice";
    style="filled";
    color=lightgray;
    node_273 [label="LOCALS\l0 = &mut [bool]\l1 = &mut core::array::IntoIter<bool, 32>\l2 = &mut [core::mem::MaybeUninit<bool>]\l3 = &mut [core::mem::MaybeUninit<bool>; 32]\l4 = core::ops::index_range::IndexRange\l5 = &core::ops::index_range::IndexRange\l6 = usize\l7 = usize\l8 = *mut [core::mem::MaybeUninit<bool>]\l9 = *mut [core::mem::MaybeUninit<bool>]\l10 = bool\l11 = ()\l12 = &core::ops::index_range::IndexRange\l13 = &core::ops::index_range::IndexRange\l14 = usize\l15 = &core::ops::index_range::IndexRange\l16 = *const [core::mem::MaybeUninit<bool>]\l17 = *mut core::mem::MaybeUninit<bool>\l18 = *mut core::mem::MaybeUninit<bool>\l19 = *mut [bool]\l", style="filled", color=palegreen3];
    X1dba23ab093668c2_0 -> X1dba23ab093668c2_2 [label="0"];
    X1dba23ab093668c2_0 -> X1dba23ab093668c2_1 [label="other"];
    X1dba23ab093668c2_0 [label="Storage Live _3\l3 <- &mut (*1).0\l2 <- Cast-PointerCoercion(Unsize) mv(3)\lStorage Dead _3\lStorage Live _4\lStorage Live _5\l5 <- & (*1).1\l6 <- Use(cp((*1).1.0))\l7 <- Use(cp((*1).1.1))\l4 <- Adt{0} (cp(6), cp(7))\lStorage Dead _5\lStorage Live _9\l9 <- &raw mut (*2)\lStorage Live _10\l10 <- UbChecks :: bool\lSwitchInt mv(10)\l"];
    X1dba23ab093668c2_1 -> X1dba23ab093668c2_2 [label="11"];
    X1dba23ab093668c2_1 [label="Storage Live _12\l12 <- & 4\lStorage Dead _12\lStorage Live _16\l16 <- Cast-PtrToPtr cp(9)\lStorage Dead _16\lCall\l"];
    X1dba23ab093668c2_2 [label="Storage Dead _10\lStorage Live _13\l13 <- & 4\lStorage Dead _13\lStorage Live _14\lStorage Live _15\l15 <- & 4\l14 <- SubUnchecked(cp(7), cp(6))\lStorage Dead _15\lStorage Live _17\lStorage Live _18\l18 <- Cast-PtrToPtr cp(9)\l17 <- Offset(cp(18), cp(6))\lStorage Dead _18\l8 <- *mut ([core::mem::MaybeUninit<bool>]) (cp(17), cp(14))\lStorage Dead _17\lStorage Dead _14\lStorage Dead _9\lStorage Dead _4\lStorage Live _19\l19 <- Cast-PtrToPtr cp(8)\l0 <- &mut (*19)\lStorage Dead _19\lReturn\l"];
  }
  X1dba23ab093668c2_1 -> Xf9189f0cbf6ad92d_0 [label="cp(7),const ?_usize"];
  subgraph cluster_274 {
    label="core::array::equality::<i\nmpl \ncore::cmp::PartialEq \nfor \n[u8; \n32]>::eq";
    style="filled";
    color=lightgray;
    node_275 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l", style="filled", color=palegreen3];
    X7b4e898ba35115b5_0 -> X7b4e898ba35115b5_1 [label="0"];
    X7b4e898ba35115b5_0 [label="Call\l"];
    X7b4e898ba35115b5_1 [label="Return\l"];
  }
  X7b4e898ba35115b5_0 -> X1ccfc07345856a22_0 [label="mv(1),mv(2)"];
  subgraph cluster_276 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_277 [label="LOCALS\l0 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X227aea0ec470d5ba_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_278 {
    label="core::slice::<impl \n[u8]>::as_mut_ptr";
    style="filled";
    color=lightgray;
    node_279 [label="LOCALS\l0 = *mut u8\l1 = &mut [u8]\l2 = *mut [u8]\l", style="filled", color=palegreen3];
    Xb96d0961d524f6f8_0 [label="Storage Live _2\l2 <- &raw mut (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_280 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first_chu\nnk::<1>";
    style="filled";
    color=lightgray;
    node_281 [label="LOCALS\l0 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = bool\l3 = usize\l4 = &[pinocchio::account_info::AccountInfo; 1]\l5 = *const [pinocchio::account_info::AccountInfo; 1]\l6 = *const pinocchio::account_info::AccountInfo\l7 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    Xfc3dc8b7260a8e64_0 -> Xfc3dc8b7260a8e64_2 [label="0"];
    Xfc3dc8b7260a8e64_0 -> Xfc3dc8b7260a8e64_1 [label="other"];
    Xfc3dc8b7260a8e64_0 [label="Storage Live _2\lStorage Live _3\l3 <- PtrMetadata(cp(1))\l2 <- Lt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xfc3dc8b7260a8e64_1 -> Xfc3dc8b7260a8e64_3;
    Xfc3dc8b7260a8e64_1 [label="Storage Dead _3\l0 <- Use(const core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>)\lGoto\l"];
    Xfc3dc8b7260a8e64_2 -> Xfc3dc8b7260a8e64_3;
    Xfc3dc8b7260a8e64_2 [label="Storage Dead _3\lStorage Live _5\lStorage Live _6\l7 <- &raw (*1)\l6 <- Cast-PtrToPtr cp(7)\l5 <- Cast-PtrToPtr cp(7)\lStorage Dead _6\l4 <- & (*5)\l0 <- Adt{1} (cp(4))\lStorage Dead _5\lGoto\l"];
    Xfc3dc8b7260a8e64_3 [label="Storage Dead _2\lReturn\l"];
  }
  subgraph cluster_282 {
    label="core::slice::<impl \n[u8]>::array_chunks::<32>";
    style="filled";
    color=lightgray;
    node_283 [label="LOCALS\l0 = core::slice::ArrayChunks<'_, u8, 32>\l1 = &[u8]\l2 = bool\l3 = !\l4 = core::fmt::Arguments<'_>\l5 = &[&str]\l6 = &[core::fmt::rt::Argument<'_>]\l7 = &[[u8; 32]]\l8 = &[u8]\l9 = (&[[u8; 32]], &[u8])\l10 = core::slice::Iter<'_, [u8; 32]>\l11 = usize\l12 = core::ptr::NonNull<[u8; 32]>\l13 = core::ptr::NonNull<[[u8; 32]]>\l14 = *const [u8; 32]\l15 = *mut [u8; 32]\l16 = *mut [u8; 32]\l17 = *const [u8; 32]\l18 = *const [[u8; 32]]\l19 = *const [u8; 32]\l", style="filled", color=palegreen3];
    X6bd7b8031b9e70c1_0 -> X6bd7b8031b9e70c1_1 [label="0"];
    X6bd7b8031b9e70c1_0 -> X6bd7b8031b9e70c1_2 [label="other"];
    X6bd7b8031b9e70c1_0 [label="Storage Live _2\l2 <- Ne(const ?_usize, const ?_usize)\lSwitchInt mv(2)\l"];
    X6bd7b8031b9e70c1_1 [label="Storage Live _4\lStorage Live _5\l5 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _6\l6 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l4 <- Adt{0} (mv(5), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(6))\lStorage Dead _6\lStorage Dead _5\lCall\l"];
    X6bd7b8031b9e70c1_2 -> X6bd7b8031b9e70c1_3 [label="9"];
    X6bd7b8031b9e70c1_2 [label="Storage Dead _2\lStorage Live _7\lStorage Live _8\lStorage Live _9\lCall\l"];
    X6bd7b8031b9e70c1_3 -> X6bd7b8031b9e70c1_5 [label="0"];
    X6bd7b8031b9e70c1_3 -> X6bd7b8031b9e70c1_4 [label="other"];
    X6bd7b8031b9e70c1_3 [label="7 <- Use(cp(9.0))\l8 <- Use(cp(9.1))\lStorage Dead _9\lStorage Live _10\lStorage Live _11\lStorage Live _12\lStorage Live _18\lStorage Live _19\l11 <- PtrMetadata(cp(7))\lStorage Live _13\l18 <- &raw (*7)\l13 <- Adt{0} (cp(18))\l19 <- Cast-PtrToPtr cp(18)\l12 <- Adt{0} (cp(19))\lStorage Dead _13\lStorage Live _14\lSwitchInt const bool\l"];
    X6bd7b8031b9e70c1_4 -> X6bd7b8031b9e70c1_6;
    X6bd7b8031b9e70c1_4 [label="14 <- Cast-Transmute cp(11)\lGoto\l"];
    X6bd7b8031b9e70c1_5 -> X6bd7b8031b9e70c1_6;
    X6bd7b8031b9e70c1_5 [label="Storage Live _15\lStorage Live _16\l16 <- Cast-PtrToPtr cp(18)\l15 <- Offset(cp(16), cp(11))\lStorage Dead _16\l14 <- Cast-PtrToPtr mv(15)\lStorage Dead _15\lGoto\l"];
    X6bd7b8031b9e70c1_6 [label="Storage Live _17\l17 <- Use(cp(14))\l10 <- Adt{0} (cp(12), mv(17), const core::marker::PhantomData<&[u8; 32]>)\lStorage Dead _17\lStorage Dead _14\lStorage Dead _19\lStorage Dead _18\lStorage Dead _12\lStorage Dead _11\l0 <- Adt{0} (mv(10), cp(8))\lStorage Dead _10\lStorage Dead _8\lStorage Dead _7\lReturn\l"];
  }
  X6bd7b8031b9e70c1_1 -> Xfffaab11503b9894_0 [label="mv(4)"];
  X6bd7b8031b9e70c1_2 -> X9abcdc8c0301b8cf_0 [label="mv(1)"];
  subgraph cluster_284 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::get_unche\ncked::<core::ops::RangeTo\n<usize>>";
    style="filled";
    color=lightgray;
    node_285 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeTo<usize>\l3 = *const [pinocchio::account_info::AccountInfo]\l4 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    Xfafc3ed6df8f1eb_0 -> Xfafc3ed6df8f1eb_1 [label="3"];
    Xfafc3ed6df8f1eb_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    Xfafc3ed6df8f1eb_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  Xfafc3ed6df8f1eb_0 -> Xf36307cdfb4d1bcc_0 [label="mv(2),mv(4)"];
  subgraph cluster_286 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<us\nize>";
    style="filled";
    color=lightgray;
    node_287 [label="LOCALS\l0 = &u8\l1 = &[u8]\l2 = usize\l3 = *const u8\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X2cdd8b2d70a4eaed_0 -> X2cdd8b2d70a4eaed_1 [label="3"];
    X2cdd8b2d70a4eaed_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X2cdd8b2d70a4eaed_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X2cdd8b2d70a4eaed_0 -> Xfb10f054466970ae_0 [label="mv(2),mv(4)"];
  subgraph cluster_288 {
    label="core::slice::<impl \n[u8]>::get_unchecked::<co\nre::ops::Range<usize>>";
    style="filled";
    color=lightgray;
    node_289 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::Range<usize>\l3 = *const [u8]\l4 = *const [u8]\l", style="filled", color=palegreen3];
    X73286d278f91d44b_0 -> X73286d278f91d44b_1 [label="3"];
    X73286d278f91d44b_0 [label="Storage Live _3\lStorage Live _4\l4 <- &raw (*1)\lCall\l"];
    X73286d278f91d44b_1 [label="Storage Dead _4\l0 <- & (*3)\lStorage Dead _3\lReturn\l"];
  }
  X73286d278f91d44b_0 -> Xc1e109de9d1a8745_0 [label="mv(2),mv(4)"];
  subgraph cluster_290 {
    label="core::slice::<impl \n[u8]>::split_at_unchecked";
    style="filled";
    color=lightgray;
    node_291 [label="LOCALS\l0 = (&[u8], &[u8])\l1 = &[u8]\l2 = usize\l3 = usize\l4 = *const u8\l5 = bool\l6 = ()\l7 = &[u8]\l8 = usize\l9 = &[u8]\l10 = *const u8\l11 = usize\l12 = usize\l13 = *const [u8]\l14 = ()\l15 = *mut ()\l16 = usize\l17 = usize\l18 = *const [u8]\l19 = ()\l20 = *mut ()\l21 = usize\l22 = usize\l23 = *const [u8]\l", style="filled", color=palegreen3];
    X9ebde54edb375686_0 -> X9ebde54edb375686_2 [label="0"];
    X9ebde54edb375686_0 -> X9ebde54edb375686_1 [label="other"];
    X9ebde54edb375686_0 [label="3 <- PtrMetadata(cp(1))\l13 <- &raw (*1)\l4 <- Cast-PtrToPtr cp(13)\l5 <- UbChecks :: bool\lSwitchInt cp(5)\l"];
    X9ebde54edb375686_1 -> X9ebde54edb375686_9 [label="6"];
    X9ebde54edb375686_1 [label="Call\l"];
    X9ebde54edb375686_2 -> X9ebde54edb375686_5 [label="0"];
    X9ebde54edb375686_2 -> X9ebde54edb375686_3 [label="other"];
    X9ebde54edb375686_2 [label="Storage Live _8\l8 <- Use(cp(2))\lSwitchInt cp(5)\l"];
    X9ebde54edb375686_3 -> X9ebde54edb375686_4 [label="14"];
    X9ebde54edb375686_3 [label="Storage Live _15\l15 <- Cast-PtrToPtr cp(13)\lStorage Live _16\l16 <- SizeOf :: u8\lStorage Live _17\l17 <- AlignOf :: u8\lCall\l"];
    X9ebde54edb375686_4 -> X9ebde54edb375686_6;
    X9ebde54edb375686_4 [label="Storage Dead _17\lStorage Dead _16\lStorage Dead _15\lStorage Live _18\l18 <- *([u8]) (cp(4), cp(2))\l7 <- & (*18)\lStorage Dead _18\lStorage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Use(cp(2))\l10 <- Offset(cp(4), cp(2))\lStorage Dead _11\lStorage Live _12\l12 <- SubUnchecked(cp(3), cp(2))\lGoto\l"];
    X9ebde54edb375686_5 -> X9ebde54edb375686_8 [label="0"];
    X9ebde54edb375686_5 -> X9ebde54edb375686_6 [label="other"];
    X9ebde54edb375686_5 [label="Storage Live _18\l18 <- *([u8]) (cp(4), cp(2))\l7 <- & (*18)\lStorage Dead _18\lStorage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Use(cp(2))\l10 <- Offset(cp(4), cp(2))\lStorage Dead _11\lStorage Live _12\l12 <- SubUnchecked(cp(3), cp(2))\lSwitchInt cp(5)\l"];
    X9ebde54edb375686_6 -> X9ebde54edb375686_7 [label="19"];
    X9ebde54edb375686_6 [label="Storage Live _20\l20 <- Cast-PtrToPtr cp(10)\lStorage Live _21\l21 <- SizeOf :: u8\lStorage Live _22\l22 <- AlignOf :: u8\lCall\l"];
    X9ebde54edb375686_7 -> X9ebde54edb375686_8;
    X9ebde54edb375686_7 [label="Storage Dead _22\lStorage Dead _21\lStorage Dead _20\lGoto\l"];
    X9ebde54edb375686_8 [label="Storage Live _23\l23 <- *([u8]) (cp(10), cp(12))\l9 <- & (*23)\lStorage Dead _23\lStorage Dead _12\lStorage Dead _10\l0 <- Tuple (cp(7), cp(9))\lReturn\l"];
    X9ebde54edb375686_9 -> X9ebde54edb375686_3;
    X9ebde54edb375686_9 [label="Storage Live _8\l8 <- Use(cp(2))\lGoto\l"];
  }
  X9ebde54edb375686_1 -> Xd0fb638e1b6fde24_0 [label="cp(2),cp(3)"];
  X9ebde54edb375686_3 -> X63f7a61774eb1235_0 [label="mv(15),mv(16),mv(17),cp(2)"];
  X9ebde54edb375686_6 -> X63f7a61774eb1235_0 [label="mv(20),mv(21),mv(22),cp(12)"];
  subgraph cluster_292 {
    label="core::slice::<impl \n[T]>::split_at_unchecked:\n:precondition_check";
    style="filled";
    color=lightgray;
    node_293 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    Xd0fb638e1b6fde24_0 -> Xd0fb638e1b6fde24_2 [label="0"];
    Xd0fb638e1b6fde24_0 -> Xd0fb638e1b6fde24_1 [label="other"];
    Xd0fb638e1b6fde24_0 [label="Storage Live _3\l3 <- Le(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    Xd0fb638e1b6fde24_1 [label="Storage Dead _3\lReturn\l"];
    Xd0fb638e1b6fde24_2 [label="Call\l"];
  }
  Xd0fb638e1b6fde24_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_294 {
    label="core::slice::<impl \n[u8]>::as_chunks_unchecke\nd::<32>";
    style="filled";
    color=lightgray;
    node_295 [label="LOCALS\l0 = &[[u8; 32]]\l1 = &[u8]\l2 = bool\l3 = ()\l4 = usize\l5 = usize\l6 = usize\l7 = *const [u8; 32]\l8 = *const u8\l9 = usize\l10 = *const [u8]\l11 = ()\l12 = *mut ()\l13 = usize\l14 = usize\l15 = *const [[u8; 32]]\l", style="filled", color=palegreen3];
    Xb35b63bc6252c40d_0 -> Xb35b63bc6252c40d_3 [label="0"];
    Xb35b63bc6252c40d_0 -> Xb35b63bc6252c40d_1 [label="other"];
    Xb35b63bc6252c40d_0 [label="2 <- UbChecks :: bool\lSwitchInt cp(2)\l"];
    Xb35b63bc6252c40d_1 -> Xb35b63bc6252c40d_2 [label="3"];
    Xb35b63bc6252c40d_1 [label="Storage Live _4\l4 <- PtrMetadata(cp(1))\lCall\l"];
    Xb35b63bc6252c40d_2 -> Xb35b63bc6252c40d_8 [label="5"];
    Xb35b63bc6252c40d_2 [label="Storage Dead _4\lStorage Live _6\l6 <- PtrMetadata(cp(1))\lCall\l"];
    Xb35b63bc6252c40d_3 -> Xb35b63bc6252c40d_4 [label="5"];
    Xb35b63bc6252c40d_3 [label="Storage Live _6\l6 <- PtrMetadata(cp(1))\lCall\l"];
    Xb35b63bc6252c40d_4 -> Xb35b63bc6252c40d_7 [label="0"];
    Xb35b63bc6252c40d_4 -> Xb35b63bc6252c40d_5 [label="other"];
    Xb35b63bc6252c40d_4 [label="Storage Dead _6\lStorage Live _7\lStorage Live _8\l10 <- &raw (*1)\l8 <- Cast-PtrToPtr cp(10)\l7 <- Cast-PtrToPtr cp(10)\lStorage Dead _8\lStorage Live _9\l9 <- Use(cp(5))\lSwitchInt cp(2)\l"];
    Xb35b63bc6252c40d_5 -> Xb35b63bc6252c40d_6 [label="11"];
    Xb35b63bc6252c40d_5 [label="Storage Live _12\l12 <- Cast-PtrToPtr cp(10)\lStorage Live _13\l13 <- SizeOf :: [u8; 32]\lStorage Live _14\l14 <- AlignOf :: [u8; 32]\lCall\l"];
    Xb35b63bc6252c40d_6 -> Xb35b63bc6252c40d_7;
    Xb35b63bc6252c40d_6 [label="Storage Dead _14\lStorage Dead _13\lStorage Dead _12\lGoto\l"];
    Xb35b63bc6252c40d_7 [label="Storage Live _15\l15 <- *([[u8; 32]]) (cp(7), cp(5))\l0 <- & (*15)\lStorage Dead _15\lStorage Dead _9\lStorage Dead _7\lReturn\l"];
    Xb35b63bc6252c40d_8 -> Xb35b63bc6252c40d_5;
    Xb35b63bc6252c40d_8 [label="Storage Dead _6\lStorage Live _7\lStorage Live _8\l10 <- &raw (*1)\l8 <- Cast-PtrToPtr cp(10)\l7 <- Cast-PtrToPtr cp(10)\lStorage Dead _8\lStorage Live _9\l9 <- Use(cp(5))\lGoto\l"];
  }
  Xb35b63bc6252c40d_1 -> X8083e8cbd15b6a48_0 [label="const ?_usize,mv(4)"];
  Xb35b63bc6252c40d_2 -> Xab38848ab7f87cef_0 [label="mv(6),const ?_usize"];
  Xb35b63bc6252c40d_3 -> Xab38848ab7f87cef_0 [label="mv(6),const ?_usize"];
  Xb35b63bc6252c40d_5 -> X63f7a61774eb1235_0 [label="mv(12),mv(13),mv(14),cp(5)"];
  subgraph cluster_296 {
    label="core::slice::<impl \n[T]>::as_chunks_unchecked\n::precondition_check";
    style="filled";
    color=lightgray;
    node_297 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = usize\l4 = bool\l5 = !\l", style="filled", color=palegreen3];
    X8083e8cbd15b6a48_0 -> X8083e8cbd15b6a48_5 [label="0"];
    X8083e8cbd15b6a48_0 -> X8083e8cbd15b6a48_1 [label="other"];
    X8083e8cbd15b6a48_0 [label="SwitchInt mv(1)\l"];
    X8083e8cbd15b6a48_1 -> X8083e8cbd15b6a48_2;
    X8083e8cbd15b6a48_1 [label="Storage Live _3\l4 <- Eq(cp(1), const ?_usize)\lAssert mv(4) == false\l"];
    X8083e8cbd15b6a48_2 -> X8083e8cbd15b6a48_3 [label="0"];
    X8083e8cbd15b6a48_2 -> X8083e8cbd15b6a48_4 [label="other"];
    X8083e8cbd15b6a48_2 [label="3 <- Rem(cp(2), cp(1))\lSwitchInt mv(3)\l"];
    X8083e8cbd15b6a48_3 [label="Storage Dead _3\lReturn\l"];
    X8083e8cbd15b6a48_4 -> X8083e8cbd15b6a48_5;
    X8083e8cbd15b6a48_4 [label="Storage Dead _3\lGoto\l"];
    X8083e8cbd15b6a48_5 [label="Call\l"];
  }
  X8083e8cbd15b6a48_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_298 {
    label="core::slice::<impl \n[pinocchio::account_info:\n:AccountInfo]>::first";
    style="filled";
    color=lightgray;
    node_299 [label="LOCALS\l0 = core::option::Option<&pinocchio::account_info::AccountInfo>\l1 = &[pinocchio::account_info::AccountInfo]\l2 = usize\l3 = bool\l4 = &pinocchio::account_info::AccountInfo\l", style="filled", color=palegreen3];
    X7872bd54ee488e30_0 -> X7872bd54ee488e30_2 [label="0"];
    X7872bd54ee488e30_0 -> X7872bd54ee488e30_1 [label="other"];
    X7872bd54ee488e30_0 [label="2 <- Len((*1))\l3 <- Ge(mv(2), const ?_usize)\lSwitchInt mv(3)\l"];
    X7872bd54ee488e30_1 -> X7872bd54ee488e30_3;
    X7872bd54ee488e30_1 [label="4 <- & (*1)[0]\l0 <- Adt{1} (cp(4))\lGoto\l"];
    X7872bd54ee488e30_2 -> X7872bd54ee488e30_3;
    X7872bd54ee488e30_2 [label="0 <- Use(const core::option::Option<&pinocchio::account_info::AccountInfo>)\lGoto\l"];
    X7872bd54ee488e30_3 [label="Return\l"];
  }
  subgraph cluster_300 {
    label="core::slice::<impl \n[u8]>::as_ptr";
    style="filled";
    color=lightgray;
    node_301 [label="LOCALS\l0 = *const u8\l1 = &[u8]\l2 = *const [u8]\l", style="filled", color=palegreen3];
    X9e6ee8713e773f38_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_302 {
    label="core::slice::<impl \n[core::mem::MaybeUninit<p\ninocchio::account_info::A\nccountInfo>]>::as_ptr";
    style="filled";
    color=lightgray;
    node_303 [label="LOCALS\l0 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l1 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l2 = *const [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l", style="filled", color=palegreen3];
    X2eb64500281ee9c3_0 [label="Storage Live _2\l2 <- &raw (*1)\l0 <- Cast-PtrToPtr mv(2)\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_304 {
    label="core::slice::<impl \n[u8]>::as_chunks::<32>";
    style="filled";
    color=lightgray;
    node_305 [label="LOCALS\l0 = (&[[u8; 32]], &[u8])\l1 = &[u8]\l2 = bool\l3 = !\l4 = core::fmt::Arguments<'_>\l5 = usize\l6 = usize\l7 = usize\l8 = bool\l9 = &[u8]\l10 = &[u8]\l11 = (&[u8], &[u8])\l12 = &[[u8; 32]]\l13 = &[&str]\l14 = &[core::fmt::rt::Argument<'_>]\l", style="filled", color=palegreen3];
    X9abcdc8c0301b8cf_0 -> X9abcdc8c0301b8cf_1 [label="0"];
    X9abcdc8c0301b8cf_0 -> X9abcdc8c0301b8cf_2 [label="other"];
    X9abcdc8c0301b8cf_0 [label="Storage Live _2\l2 <- Ne(const ?_usize, const ?_usize)\lSwitchInt mv(2)\l"];
    X9abcdc8c0301b8cf_1 [label="Storage Live _4\lStorage Live _13\l13 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _14\l14 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l4 <- Adt{0} (mv(13), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(14))\lStorage Dead _14\lStorage Dead _13\lCall\l"];
    X9abcdc8c0301b8cf_2 -> X9abcdc8c0301b8cf_3;
    X9abcdc8c0301b8cf_2 [label="Storage Dead _2\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(1))\l8 <- Eq(const ?_usize, const ?_usize)\lAssert mv(8) == false\l"];
    X9abcdc8c0301b8cf_3 -> X9abcdc8c0301b8cf_4 [label="11"];
    X9abcdc8c0301b8cf_3 [label="6 <- Div(mv(7), const ?_usize)\lStorage Dead _7\l5 <- Mul(mv(6), const ?_usize)\lStorage Dead _6\lStorage Live _11\lCall\l"];
    X9abcdc8c0301b8cf_4 -> X9abcdc8c0301b8cf_5 [label="12"];
    X9abcdc8c0301b8cf_4 [label="9 <- Use(cp(11.0))\l10 <- Use(cp(11.1))\lStorage Dead _11\lCall\l"];
    X9abcdc8c0301b8cf_5 [label="0 <- Tuple (cp(12), cp(10))\lReturn\l"];
  }
  X9abcdc8c0301b8cf_1 -> Xfffaab11503b9894_0 [label="mv(4)"];
  X9abcdc8c0301b8cf_3 -> X9ebde54edb375686_0 [label="mv(1),mv(5)"];
  X9abcdc8c0301b8cf_4 -> Xb35b63bc6252c40d_0 [label="mv(9)"];
  subgraph cluster_306 {
    label="core::slice::from_raw_par\nts::<'_, \npinocchio::account_info::\nAccountInfo>";
    style="filled";
    color=lightgray;
    node_307 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = *const pinocchio::account_info::AccountInfo\l2 = usize\l3 = bool\l4 = ()\l5 = *mut ()\l6 = usize\l7 = usize\l8 = *const [pinocchio::account_info::AccountInfo]\l", style="filled", color=palegreen3];
    X3ef89f86f6c5d4d6_0 -> X3ef89f86f6c5d4d6_3 [label="0"];
    X3ef89f86f6c5d4d6_0 -> X3ef89f86f6c5d4d6_1 [label="other"];
    X3ef89f86f6c5d4d6_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    X3ef89f86f6c5d4d6_1 -> X3ef89f86f6c5d4d6_2 [label="4"];
    X3ef89f86f6c5d4d6_1 [label="Storage Live _5\l5 <- Cast-PtrToPtr cp(1)\lStorage Live _6\l6 <- SizeOf :: pinocchio::account_info::AccountInfo\lStorage Live _7\l7 <- AlignOf :: pinocchio::account_info::AccountInfo\lCall\l"];
    X3ef89f86f6c5d4d6_2 -> X3ef89f86f6c5d4d6_3;
    X3ef89f86f6c5d4d6_2 [label="Storage Dead _7\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    X3ef89f86f6c5d4d6_3 [label="Storage Dead _3\lStorage Live _8\l8 <- *([pinocchio::account_info::AccountInfo]) (cp(1), cp(2))\l0 <- & (*8)\lStorage Dead _8\lReturn\l"];
  }
  X3ef89f86f6c5d4d6_1 -> X63f7a61774eb1235_0 [label="mv(5),mv(6),mv(7),cp(2)"];
  subgraph cluster_308 {
    label="core::slice::from_raw_par\nts::precondition_check";
    style="filled";
    color=lightgray;
    node_309 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X63f7a61774eb1235_0 -> X63f7a61774eb1235_10 [label="15"];
    X63f7a61774eb1235_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X63f7a61774eb1235_1 -> X63f7a61774eb1235_11 [label="0"];
    X63f7a61774eb1235_1 -> X63f7a61774eb1235_12 [label="other"];
    X63f7a61774eb1235_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X63f7a61774eb1235_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X63f7a61774eb1235_3 -> X63f7a61774eb1235_5;
    X63f7a61774eb1235_3 [label="Goto\l"];
    X63f7a61774eb1235_4 -> X63f7a61774eb1235_5;
    X63f7a61774eb1235_4 [label="Storage Dead _6\lGoto\l"];
    X63f7a61774eb1235_5 [label="Call\l"];
    X63f7a61774eb1235_6 -> X63f7a61774eb1235_4 [label="0"];
    X63f7a61774eb1235_6 -> X63f7a61774eb1235_1 [label="other"];
    X63f7a61774eb1235_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X63f7a61774eb1235_7 -> X63f7a61774eb1235_4;
    X63f7a61774eb1235_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X63f7a61774eb1235_8 -> X63f7a61774eb1235_6 [label="0"];
    X63f7a61774eb1235_8 -> X63f7a61774eb1235_7 [label="other"];
    X63f7a61774eb1235_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X63f7a61774eb1235_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X63f7a61774eb1235_10 -> X63f7a61774eb1235_8 [label="1"];
    X63f7a61774eb1235_10 -> X63f7a61774eb1235_9 [label="other"];
    X63f7a61774eb1235_10 [label="SwitchInt mv(15)\l"];
    X63f7a61774eb1235_11 -> X63f7a61774eb1235_14;
    X63f7a61774eb1235_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X63f7a61774eb1235_12 -> X63f7a61774eb1235_13;
    X63f7a61774eb1235_12 [label="Assert cp(20) == false\l"];
    X63f7a61774eb1235_13 -> X63f7a61774eb1235_14;
    X63f7a61774eb1235_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X63f7a61774eb1235_14 -> X63f7a61774eb1235_3 [label="0"];
    X63f7a61774eb1235_14 -> X63f7a61774eb1235_2 [label="other"];
    X63f7a61774eb1235_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X63f7a61774eb1235_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X63f7a61774eb1235_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X63f7a61774eb1235_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_310 {
    label="core::slice::from_raw_par\nts_mut::precondition_chec\nk";
    style="filled";
    color=lightgray;
    node_311 [label="LOCALS\l0 = ()\l1 = *mut ()\l2 = usize\l3 = usize\l4 = usize\l5 = bool\l6 = *const ()\l7 = bool\l8 = !\l9 = bool\l10 = !\l11 = core::fmt::Arguments<'_>\l12 = usize\l13 = usize\l14 = usize\l15 = u32\l16 = &[&str]\l17 = &[core::fmt::rt::Argument<'_>]\l18 = *const u8\l19 = usize\l20 = bool\l21 = usize\l", style="filled", color=palegreen3];
    X63018216f9c6ad5a_0 -> X63018216f9c6ad5a_10 [label="15"];
    X63018216f9c6ad5a_0 [label="Storage Live _5\lStorage Live _6\l6 <- Cast-PtrToPtr cp(1)\lStorage Live _13\lStorage Live _15\lCall\l"];
    X63018216f9c6ad5a_1 -> X63018216f9c6ad5a_11 [label="0"];
    X63018216f9c6ad5a_1 -> X63018216f9c6ad5a_12 [label="other"];
    X63018216f9c6ad5a_1 [label="Storage Dead _6\lStorage Live _7\lStorage Live _20\lStorage Live _19\l20 <- Eq(cp(2), const ?_usize)\lSwitchInt cp(2)\l"];
    X63018216f9c6ad5a_2 [label="Storage Dead _7\lStorage Dead _5\lReturn\l"];
    X63018216f9c6ad5a_3 -> X63018216f9c6ad5a_5;
    X63018216f9c6ad5a_3 [label="Goto\l"];
    X63018216f9c6ad5a_4 -> X63018216f9c6ad5a_5;
    X63018216f9c6ad5a_4 [label="Storage Dead _6\lGoto\l"];
    X63018216f9c6ad5a_5 [label="Call\l"];
    X63018216f9c6ad5a_6 -> X63018216f9c6ad5a_4 [label="0"];
    X63018216f9c6ad5a_6 -> X63018216f9c6ad5a_1 [label="other"];
    X63018216f9c6ad5a_6 [label="Storage Dead _12\lStorage Live _9\lStorage Live _18\l18 <- Cast-PtrToPtr cp(1)\l9 <- Eq(cp(13), const ?_usize)\lStorage Dead _18\l5 <- Not(mv(9))\lStorage Dead _9\lStorage Dead _13\lSwitchInt mv(5)\l"];
    X63018216f9c6ad5a_7 -> X63018216f9c6ad5a_4;
    X63018216f9c6ad5a_7 [label="Storage Dead _12\lStorage Dead _13\lGoto\l"];
    X63018216f9c6ad5a_8 -> X63018216f9c6ad5a_6 [label="0"];
    X63018216f9c6ad5a_8 -> X63018216f9c6ad5a_7 [label="other"];
    X63018216f9c6ad5a_8 [label="Storage Dead _15\lStorage Live _12\l13 <- Cast-Transmute cp(1)\lStorage Live _14\l14 <- Sub(cp(3), const ?_usize)\l12 <- BitAnd(cp(13), mv(14))\lStorage Dead _14\lSwitchInt mv(12)\l"];
    X63018216f9c6ad5a_9 [label="Storage Dead _15\lStorage Live _11\lStorage Live _16\l16 <- Cast-PointerCoercion(Unsize) const &[&str; 1]\lStorage Live _17\l17 <- Cast-PointerCoercion(Unsize) const &[core::fmt::rt::Argument<'_>; 0]\l11 <- Adt{0} (mv(16), const core::option::Option<&[core::fmt::rt::Placeholder]>, mv(17))\lStorage Dead _17\lStorage Dead _16\lCall\l"];
    X63018216f9c6ad5a_10 -> X63018216f9c6ad5a_8 [label="1"];
    X63018216f9c6ad5a_10 -> X63018216f9c6ad5a_9 [label="other"];
    X63018216f9c6ad5a_10 [label="SwitchInt mv(15)\l"];
    X63018216f9c6ad5a_11 -> X63018216f9c6ad5a_14;
    X63018216f9c6ad5a_11 [label="19 <- Use(const ?_usize)\lGoto\l"];
    X63018216f9c6ad5a_12 -> X63018216f9c6ad5a_13;
    X63018216f9c6ad5a_12 [label="Assert cp(20) == false\l"];
    X63018216f9c6ad5a_13 -> X63018216f9c6ad5a_14;
    X63018216f9c6ad5a_13 [label="19 <- Div(const ?_usize, cp(2))\lGoto\l"];
    X63018216f9c6ad5a_14 -> X63018216f9c6ad5a_3 [label="0"];
    X63018216f9c6ad5a_14 -> X63018216f9c6ad5a_2 [label="other"];
    X63018216f9c6ad5a_14 [label="Storage Live _21\l21 <- Use(cp(19))\l7 <- Le(cp(4), mv(21))\lStorage Dead _21\lStorage Dead _19\lStorage Dead _20\lSwitchInt mv(7)\l"];
  }
  X63018216f9c6ad5a_0 -> X5ea6c111b835a80f_0 [label="cp(3)"];
  X63018216f9c6ad5a_5 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  X63018216f9c6ad5a_9 -> Xfffaab11503b9894_0 [label="mv(11)"];
  subgraph cluster_312 {
    label="core::slice::Iter::<'_, \nu8>::make_slice";
    style="filled";
    color=lightgray;
    node_313 [label="LOCALS\l0 = &[u8]\l1 = &core::slice::Iter<'_, u8>\l2 = core::ptr::NonNull<u8>\l3 = usize\l4 = usize\l5 = *const u8\l6 = core::ptr::NonNull<u8>\l7 = *const core::ptr::NonNull<u8>\l8 = *const *const u8\l9 = core::ptr::NonNull<u8>\l10 = *const u8\l11 = *const u8\l12 = *const u8\l13 = bool\l14 = ()\l15 = *const ()\l16 = *const ()\l17 = usize\l18 = bool\l19 = bool\l20 = !\l21 = bool\l22 = ()\l23 = *mut ()\l24 = usize\l25 = usize\l26 = *const [u8]\l", style="filled", color=palegreen3];
    X2000e4c8ac402ee9_0 -> X2000e4c8ac402ee9_2 [label="0"];
    X2000e4c8ac402ee9_0 -> X2000e4c8ac402ee9_1 [label="other"];
    X2000e4c8ac402ee9_0 [label="Storage Live _2\l2 <- Use(cp((*1).0))\l10 <- Use(cp(2.0))\lStorage Dead _2\lStorage Live _3\lSwitchInt const bool\l"];
    X2000e4c8ac402ee9_1 -> X2000e4c8ac402ee9_3;
    X2000e4c8ac402ee9_1 [label="5 <- Use(cp((*1).1))\l4 <- Cast-Transmute cp(5)\l3 <- Use(cp(4))\lGoto\l"];
    X2000e4c8ac402ee9_2 -> X2000e4c8ac402ee9_7 [label="0"];
    X2000e4c8ac402ee9_2 -> X2000e4c8ac402ee9_5 [label="other"];
    X2000e4c8ac402ee9_2 [label="Storage Live _7\lStorage Live _8\l8 <- &raw (*1).1\l7 <- Cast-PtrToPtr cp(8)\lStorage Dead _8\l6 <- Use(cp((*7)))\lStorage Dead _7\lStorage Live _9\l9 <- Use(cp((*1).0))\lStorage Live _11\l11 <- Use(cp(6.0))\lStorage Live _12\l12 <- Use(cp(9.0))\lStorage Live _17\lStorage Live _13\l13 <- UbChecks :: bool\lSwitchInt mv(13)\l"];
    X2000e4c8ac402ee9_3 -> X2000e4c8ac402ee9_13 [label="0"];
    X2000e4c8ac402ee9_3 -> X2000e4c8ac402ee9_11 [label="other"];
    X2000e4c8ac402ee9_3 [label="Storage Live _21\l21 <- UbChecks :: bool\lSwitchInt mv(21)\l"];
    X2000e4c8ac402ee9_4 -> X2000e4c8ac402ee9_3;
    X2000e4c8ac402ee9_4 [label="Storage Dead _17\lStorage Dead _12\lStorage Dead _11\lStorage Dead _9\lGoto\l"];
    X2000e4c8ac402ee9_5 -> X2000e4c8ac402ee9_6 [label="14"];
    X2000e4c8ac402ee9_5 [label="Storage Live _15\l15 <- Cast-PtrToPtr cp(11)\lStorage Live _16\l16 <- Cast-PtrToPtr cp(12)\lCall\l"];
    X2000e4c8ac402ee9_6 -> X2000e4c8ac402ee9_7;
    X2000e4c8ac402ee9_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X2000e4c8ac402ee9_7 -> X2000e4c8ac402ee9_10 [label="0"];
    X2000e4c8ac402ee9_7 -> X2000e4c8ac402ee9_8 [label="other"];
    X2000e4c8ac402ee9_7 [label="Storage Dead _13\l17 <- SizeOf :: u8\lStorage Live _18\l18 <- Lt(const ?_usize, cp(17))\lSwitchInt mv(18)\l"];
    X2000e4c8ac402ee9_8 -> X2000e4c8ac402ee9_10 [label="0"];
    X2000e4c8ac402ee9_8 -> X2000e4c8ac402ee9_9 [label="other"];
    X2000e4c8ac402ee9_8 [label="Storage Live _19\l19 <- Le(cp(17), const ?_usize)\lSwitchInt mv(19)\l"];
    X2000e4c8ac402ee9_9 -> X2000e4c8ac402ee9_4 [label="3"];
    X2000e4c8ac402ee9_9 [label="Storage Dead _19\lStorage Dead _18\lCall\l"];
    X2000e4c8ac402ee9_10 [label="Call\l"];
    X2000e4c8ac402ee9_11 -> X2000e4c8ac402ee9_12 [label="22"];
    X2000e4c8ac402ee9_11 [label="Storage Live _23\l23 <- Cast-PtrToPtr cp(10)\lStorage Live _24\l24 <- SizeOf :: u8\lStorage Live _25\l25 <- AlignOf :: u8\lCall\l"];
    X2000e4c8ac402ee9_12 -> X2000e4c8ac402ee9_13;
    X2000e4c8ac402ee9_12 [label="Storage Dead _25\lStorage Dead _24\lStorage Dead _23\lGoto\l"];
    X2000e4c8ac402ee9_13 [label="Storage Dead _21\lStorage Live _26\l26 <- *([u8]) (cp(10), cp(3))\l0 <- & (*26)\lStorage Dead _26\lStorage Dead _3\lReturn\l"];
  }
  X2000e4c8ac402ee9_5 -> Xfccd6b940db3d5e8_0 [label="mv(15),mv(16)"];
  X2000e4c8ac402ee9_9 -> Xfd88df1009b24094_0 [label="mv(11),mv(12)"];
  X2000e4c8ac402ee9_10 -> Xac08878333d72e42_0 [label="const &str"];
  X2000e4c8ac402ee9_11 -> X63f7a61774eb1235_0 [label="mv(23),mv(24),mv(25),cp(3)"];
  subgraph cluster_314 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[u8]>::index";
    style="filled";
    color=lightgray;
    node_315 [label="LOCALS\l0 = &[u8]\l1 = &[u8]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    Xe8b88bdd28569b08_0 -> Xe8b88bdd28569b08_1 [label="0"];
    Xe8b88bdd28569b08_0 [label="Call\l"];
    Xe8b88bdd28569b08_1 [label="Return\l"];
  }
  Xe8b88bdd28569b08_0 -> Xbf13fd323824b7e4_0 [label="mv(2),mv(1)"];
  subgraph cluster_316 {
    label="core::slice::index::<impl\n \ncore::ops::Index<core::op\ns::RangeFrom<usize>> \nfor \n[pinocchio::account_info:\n:AccountInfo]>::index";
    style="filled";
    color=lightgray;
    node_317 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo]\l1 = &[pinocchio::account_info::AccountInfo]\l2 = core::ops::RangeFrom<usize>\l", style="filled", color=palegreen3];
    X465c7d4710d81d1e_0 -> X465c7d4710d81d1e_1 [label="0"];
    X465c7d4710d81d1e_0 [label="Call\l"];
    X465c7d4710d81d1e_1 [label="Return\l"];
  }
  X465c7d4710d81d1e_0 -> Xa7ac216995a185b1_0 [label="mv(2),mv(1)"];
  subgraph cluster_318 {
    label="core::slice::memchr::memc\nhr";
    style="filled";
    color=lightgray;
    node_319 [label="LOCALS\l0 = core::option::Option<usize>\l1 = u8\l2 = &[u8]\l3 = bool\l4 = usize\l5 = usize\l6 = bool\l7 = usize\l8 = bool\l9 = u8\l10 = usize\l11 = usize\l12 = bool\l13 = usize\l", style="filled", color=palegreen3];
    Xbfa38cc438d7300d_0 -> Xbfa38cc438d7300d_2 [label="0"];
    Xbfa38cc438d7300d_0 -> Xbfa38cc438d7300d_1 [label="other"];
    Xbfa38cc438d7300d_0 [label="Storage Live _3\l4 <- PtrMetadata(cp(2))\l3 <- Lt(cp(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xbfa38cc438d7300d_1 -> Xbfa38cc438d7300d_5;
    Xbfa38cc438d7300d_1 [label="Storage Live _11\lStorage Live _12\lStorage Live _5\l5 <- Use(const ?_usize)\lGoto\l"];
    Xbfa38cc438d7300d_2 -> Xbfa38cc438d7300d_3 [label="0"];
    Xbfa38cc438d7300d_2 [label="Storage Dead _3\lCall\l"];
    Xbfa38cc438d7300d_3 [label="Return\l"];
    Xbfa38cc438d7300d_4 -> Xbfa38cc438d7300d_3;
    Xbfa38cc438d7300d_4 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _3\lGoto\l"];
    Xbfa38cc438d7300d_5 -> Xbfa38cc438d7300d_10 [label="0"];
    Xbfa38cc438d7300d_5 -> Xbfa38cc438d7300d_6 [label="other"];
    Xbfa38cc438d7300d_5 [label="Storage Live _6\lStorage Live _7\l7 <- Use(cp(5))\l6 <- Lt(mv(7), cp(4))\lSwitchInt mv(6)\l"];
    Xbfa38cc438d7300d_6 -> Xbfa38cc438d7300d_7;
    Xbfa38cc438d7300d_6 [label="Storage Dead _7\lStorage Live _8\lStorage Live _9\lStorage Live _10\l10 <- Use(cp(5))\l11 <- Len((*2))\l12 <- Lt(cp(10), cp(11))\lAssert mv(12) == true\l"];
    Xbfa38cc438d7300d_7 -> Xbfa38cc438d7300d_9 [label="0"];
    Xbfa38cc438d7300d_7 -> Xbfa38cc438d7300d_8 [label="other"];
    Xbfa38cc438d7300d_7 [label="9 <- Use(cp((*2)[_10]))\l8 <- Eq(mv(9), cp(1))\lSwitchInt mv(8)\l"];
    Xbfa38cc438d7300d_8 -> Xbfa38cc438d7300d_4;
    Xbfa38cc438d7300d_8 [label="Storage Dead _10\lStorage Dead _9\lStorage Live _13\l13 <- Use(cp(5))\l0 <- Adt{1} (mv(13))\lStorage Dead _13\lStorage Dead _8\lStorage Dead _6\lStorage Dead _5\lGoto\l"];
    Xbfa38cc438d7300d_9 -> Xbfa38cc438d7300d_5;
    Xbfa38cc438d7300d_9 [label="Storage Dead _10\lStorage Dead _9\lStorage Dead _8\l5 <- Add(cp(5), const ?_usize)\lStorage Dead _6\lGoto\l"];
    Xbfa38cc438d7300d_10 -> Xbfa38cc438d7300d_4;
    Xbfa38cc438d7300d_10 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(const core::option::Option<usize>)\lStorage Dead _5\lGoto\l"];
  }
  Xbfa38cc438d7300d_2 -> X11f225f18df60610_0 [label="mv(1),mv(2)"];
  subgraph cluster_320 {
    label="core::option::Option::<&p\ninocchio::account_info::A\nccountInfo>::ok_or::<pino\ncchio::program_error::Pro\ngramError>";
    style="filled";
    color=lightgray;
    node_321 [label="LOCALS\l0 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l1 = core::option::Option<&pinocchio::account_info::AccountInfo>\l2 = pinocchio::program_error::ProgramError\l3 = isize\l4 = &pinocchio::account_info::AccountInfo\l5 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_2 [label="0"];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_3 [label="1"];
    X27f21f54126ae4f5_0 -> X27f21f54126ae4f5_1 [label="other"];
    X27f21f54126ae4f5_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X27f21f54126ae4f5_1 [label="Unreachable\l"];
    X27f21f54126ae4f5_2 -> X27f21f54126ae4f5_4;
    X27f21f54126ae4f5_2 [label="Storage Live _5\l5 <- Use(mv(2))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X27f21f54126ae4f5_3 -> X27f21f54126ae4f5_4;
    X27f21f54126ae4f5_3 [label="4 <- Use(mv((1 as variant 1).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X27f21f54126ae4f5_4 [label="Return\l"];
  }
  subgraph cluster_322 {
    label="core::option::Option::<(&\nstr, \n&str)>::map_or::<bool, \n{closure@p-token/src/entr\nypoint.rs:1427:9: \n1427:24}>";
    style="filled";
    color=lightgray;
    node_323 [label="LOCALS\l0 = bool\l1 = core::option::Option<(&str, &str)>\l2 = bool\l3 = {closure@p-token/src/entrypoint.rs:1427:9: 1427:24}\l4 = isize\l5 = (&str, &str)\l6 = {closure@p-token/src/entrypoint.rs:1427:9: 1427:24}\l7 = ((&str, &str),)\l8 = bool\l", style="filled", color=palegreen3];
    X15bdb1a1fa13734e_0 -> X15bdb1a1fa13734e_2 [label="0"];
    X15bdb1a1fa13734e_0 -> X15bdb1a1fa13734e_3 [label="1"];
    X15bdb1a1fa13734e_0 -> X15bdb1a1fa13734e_1 [label="other"];
    X15bdb1a1fa13734e_0 [label="8 <- Use(const bool)\l4 <- Discriminant(1)\lSwitchInt mv(4)\l"];
    X15bdb1a1fa13734e_1 [label="Unreachable\l"];
    X15bdb1a1fa13734e_2 -> X15bdb1a1fa13734e_9 [label="Cleanup"];
    X15bdb1a1fa13734e_2 -> X15bdb1a1fa13734e_5;
    X15bdb1a1fa13734e_2 [label="8 <- Use(const bool)\l0 <- Use(mv(2))\lDrop 3\l"];
    X15bdb1a1fa13734e_3 -> X15bdb1a1fa13734e_9 [label="Cleanup"];
    X15bdb1a1fa13734e_3 -> X15bdb1a1fa13734e_4 [label="0"];
    X15bdb1a1fa13734e_3 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l6 <- Use(mv(3))\lStorage Live _7\l7 <- Tuple (cp(5))\lCall\l"];
    X15bdb1a1fa13734e_4 -> X15bdb1a1fa13734e_5 [label="0"];
    X15bdb1a1fa13734e_4 -> X15bdb1a1fa13734e_7 [label="other"];
    X15bdb1a1fa13734e_4 [label="Storage Dead _7\lStorage Dead _6\lSwitchInt cp(8)\l"];
    X15bdb1a1fa13734e_5 [label="Return\l"];
    X15bdb1a1fa13734e_6 [label="Resume\l"];
    X15bdb1a1fa13734e_7 -> X15bdb1a1fa13734e_5;
    X15bdb1a1fa13734e_7 [label="Drop 2\l"];
    X15bdb1a1fa13734e_8 -> X15bdb1a1fa13734e_6;
    X15bdb1a1fa13734e_8 [label="Drop 2\l"];
    X15bdb1a1fa13734e_9 -> X15bdb1a1fa13734e_6 [label="0"];
    X15bdb1a1fa13734e_9 -> X15bdb1a1fa13734e_8 [label="other"];
    X15bdb1a1fa13734e_9 [label="SwitchInt cp(8)\l"];
  }
  X15bdb1a1fa13734e_3 -> Xcad86353dd45ac7e_0 [label="mv(6),mv(7)"];
  subgraph cluster_324 {
    label="core::option::Option::<(&\nstr, \n&str)>::map_or::<bool, \n{closure@p-token/src/entr\nypoint.rs:1403:9: \n1403:20}>";
    style="filled";
    color=lightgray;
    node_325 [label="LOCALS\l0 = bool\l1 = core::option::Option<(&str, &str)>\l2 = bool\l3 = {closure@p-token/src/entrypoint.rs:1403:9: 1403:20}\l4 = isize\l5 = (&str, &str)\l6 = {closure@p-token/src/entrypoint.rs:1403:9: 1403:20}\l7 = ((&str, &str),)\l8 = bool\l", style="filled", color=palegreen3];
    X6fa8be28febd3a3e_0 -> X6fa8be28febd3a3e_2 [label="0"];
    X6fa8be28febd3a3e_0 -> X6fa8be28febd3a3e_3 [label="1"];
    X6fa8be28febd3a3e_0 -> X6fa8be28febd3a3e_1 [label="other"];
    X6fa8be28febd3a3e_0 [label="8 <- Use(const bool)\l4 <- Discriminant(1)\lSwitchInt mv(4)\l"];
    X6fa8be28febd3a3e_1 [label="Unreachable\l"];
    X6fa8be28febd3a3e_2 -> X6fa8be28febd3a3e_9 [label="Cleanup"];
    X6fa8be28febd3a3e_2 -> X6fa8be28febd3a3e_5;
    X6fa8be28febd3a3e_2 [label="8 <- Use(const bool)\l0 <- Use(mv(2))\lDrop 3\l"];
    X6fa8be28febd3a3e_3 -> X6fa8be28febd3a3e_9 [label="Cleanup"];
    X6fa8be28febd3a3e_3 -> X6fa8be28febd3a3e_4 [label="0"];
    X6fa8be28febd3a3e_3 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l6 <- Use(mv(3))\lStorage Live _7\l7 <- Tuple (cp(5))\lCall\l"];
    X6fa8be28febd3a3e_4 -> X6fa8be28febd3a3e_5 [label="0"];
    X6fa8be28febd3a3e_4 -> X6fa8be28febd3a3e_7 [label="other"];
    X6fa8be28febd3a3e_4 [label="Storage Dead _7\lStorage Dead _6\lSwitchInt cp(8)\l"];
    X6fa8be28febd3a3e_5 [label="Return\l"];
    X6fa8be28febd3a3e_6 [label="Resume\l"];
    X6fa8be28febd3a3e_7 -> X6fa8be28febd3a3e_5;
    X6fa8be28febd3a3e_7 [label="Drop 2\l"];
    X6fa8be28febd3a3e_8 -> X6fa8be28febd3a3e_6;
    X6fa8be28febd3a3e_8 [label="Drop 2\l"];
    X6fa8be28febd3a3e_9 -> X6fa8be28febd3a3e_6 [label="0"];
    X6fa8be28febd3a3e_9 -> X6fa8be28febd3a3e_8 [label="other"];
    X6fa8be28febd3a3e_9 [label="SwitchInt cp(8)\l"];
  }
  X6fa8be28febd3a3e_3 -> X8696a9ad384c1cfe_0 [label="mv(6),mv(7)"];
  subgraph cluster_326 {
    label="core::option::Option::<(&\nstr, \n&str)>::map_or::<bool, \n{closure@p-token/src/entr\nypoint.rs:1399:64: \n1399:75}>";
    style="filled";
    color=lightgray;
    node_327 [label="LOCALS\l0 = bool\l1 = core::option::Option<(&str, &str)>\l2 = bool\l3 = {closure@p-token/src/entrypoint.rs:1399:64: 1399:75}\l4 = isize\l5 = (&str, &str)\l6 = {closure@p-token/src/entrypoint.rs:1399:64: 1399:75}\l7 = ((&str, &str),)\l8 = bool\l", style="filled", color=palegreen3];
    X62232bb2a2bdeca5_0 -> X62232bb2a2bdeca5_2 [label="0"];
    X62232bb2a2bdeca5_0 -> X62232bb2a2bdeca5_3 [label="1"];
    X62232bb2a2bdeca5_0 -> X62232bb2a2bdeca5_1 [label="other"];
    X62232bb2a2bdeca5_0 [label="8 <- Use(const bool)\l4 <- Discriminant(1)\lSwitchInt mv(4)\l"];
    X62232bb2a2bdeca5_1 [label="Unreachable\l"];
    X62232bb2a2bdeca5_2 -> X62232bb2a2bdeca5_9 [label="Cleanup"];
    X62232bb2a2bdeca5_2 -> X62232bb2a2bdeca5_5;
    X62232bb2a2bdeca5_2 [label="8 <- Use(const bool)\l0 <- Use(mv(2))\lDrop 3\l"];
    X62232bb2a2bdeca5_3 -> X62232bb2a2bdeca5_9 [label="Cleanup"];
    X62232bb2a2bdeca5_3 -> X62232bb2a2bdeca5_4 [label="0"];
    X62232bb2a2bdeca5_3 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l6 <- Use(mv(3))\lStorage Live _7\l7 <- Tuple (cp(5))\lCall\l"];
    X62232bb2a2bdeca5_4 -> X62232bb2a2bdeca5_5 [label="0"];
    X62232bb2a2bdeca5_4 -> X62232bb2a2bdeca5_7 [label="other"];
    X62232bb2a2bdeca5_4 [label="Storage Dead _7\lStorage Dead _6\lSwitchInt cp(8)\l"];
    X62232bb2a2bdeca5_5 [label="Return\l"];
    X62232bb2a2bdeca5_6 [label="Resume\l"];
    X62232bb2a2bdeca5_7 -> X62232bb2a2bdeca5_5;
    X62232bb2a2bdeca5_7 [label="Drop 2\l"];
    X62232bb2a2bdeca5_8 -> X62232bb2a2bdeca5_6;
    X62232bb2a2bdeca5_8 [label="Drop 2\l"];
    X62232bb2a2bdeca5_9 -> X62232bb2a2bdeca5_6 [label="0"];
    X62232bb2a2bdeca5_9 -> X62232bb2a2bdeca5_8 [label="other"];
    X62232bb2a2bdeca5_9 [label="SwitchInt cp(8)\l"];
  }
  X62232bb2a2bdeca5_3 -> X507034ae9f8d1d43_0 [label="mv(6),mv(7)"];
  subgraph cluster_328 {
    label="core::option::Option::<co\nre::num::NonZero<usize>>:\n:map_or::<core::result::R\nesult<(), \ncore::num::NonZero<usize>\n>, \nfn(core::num::NonZero<usi\nze>) \n-> \ncore::result::Result<(), \ncore::num::NonZero<usize>\n> \n{core::result::Result::<(\n), \ncore::num::NonZero<usize>\n>::Err}>";
    style="filled";
    color=lightgray;
    node_329 [label="LOCALS\l0 = core::result::Result<(), core::num::NonZero<usize>>\l1 = core::option::Option<core::num::NonZero<usize>>\l2 = core::result::Result<(), core::num::NonZero<usize>>\l3 = fn(core::num::NonZero<usize>) -> core::result::Result<(), core::num::NonZero<usize>> {core::result::Result::<(), core::num::NonZero<usize>>::Err}\l4 = isize\l5 = core::num::NonZero<usize>\l6 = fn(core::num::NonZero<usize>) -> core::result::Result<(), core::num::NonZero<usize>> {core::result::Result::<(), core::num::NonZero<usize>>::Err}\l7 = (core::num::NonZero<usize>,)\l8 = bool\l", style="filled", color=palegreen3];
    Xff93dc2af7dd0032_0 -> Xff93dc2af7dd0032_2 [label="0"];
    Xff93dc2af7dd0032_0 -> Xff93dc2af7dd0032_3 [label="1"];
    Xff93dc2af7dd0032_0 -> Xff93dc2af7dd0032_1 [label="other"];
    Xff93dc2af7dd0032_0 [label="8 <- Use(const bool)\l4 <- Discriminant(1)\lSwitchInt mv(4)\l"];
    Xff93dc2af7dd0032_1 [label="Unreachable\l"];
    Xff93dc2af7dd0032_2 -> Xff93dc2af7dd0032_9 [label="Cleanup"];
    Xff93dc2af7dd0032_2 -> Xff93dc2af7dd0032_5;
    Xff93dc2af7dd0032_2 [label="8 <- Use(const bool)\l0 <- Use(mv(2))\lDrop 3\l"];
    Xff93dc2af7dd0032_3 -> Xff93dc2af7dd0032_9 [label="Cleanup"];
    Xff93dc2af7dd0032_3 -> Xff93dc2af7dd0032_4 [label="0"];
    Xff93dc2af7dd0032_3 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l6 <- Use(mv(3))\lStorage Live _7\l7 <- Tuple (cp(5))\lCall\l"];
    Xff93dc2af7dd0032_4 -> Xff93dc2af7dd0032_5 [label="0"];
    Xff93dc2af7dd0032_4 -> Xff93dc2af7dd0032_7 [label="other"];
    Xff93dc2af7dd0032_4 [label="Storage Dead _7\lStorage Dead _6\lSwitchInt cp(8)\l"];
    Xff93dc2af7dd0032_5 [label="Return\l"];
    Xff93dc2af7dd0032_6 [label="Resume\l"];
    Xff93dc2af7dd0032_7 -> Xff93dc2af7dd0032_5;
    Xff93dc2af7dd0032_7 [label="Drop 2\l"];
    Xff93dc2af7dd0032_8 -> Xff93dc2af7dd0032_6;
    Xff93dc2af7dd0032_8 [label="Drop 2\l"];
    Xff93dc2af7dd0032_9 -> Xff93dc2af7dd0032_6 [label="0"];
    Xff93dc2af7dd0032_9 -> Xff93dc2af7dd0032_8 [label="other"];
    Xff93dc2af7dd0032_9 [label="SwitchInt cp(8)\l"];
  }
  Xff93dc2af7dd0032_3 -> X932b861380de84fd_0 [label="mv(6),mv(7)"];
  subgraph cluster_330 {
    label="core::option::Option::<&s\ntr>::unwrap";
    style="filled";
    color=lightgray;
    node_331 [label="LOCALS\l0 = &str\l1 = core::option::Option<&str>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X214abf5ecbf39973_0 -> X214abf5ecbf39973_2 [label="0"];
    X214abf5ecbf39973_0 -> X214abf5ecbf39973_3 [label="1"];
    X214abf5ecbf39973_0 -> X214abf5ecbf39973_1 [label="other"];
    X214abf5ecbf39973_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X214abf5ecbf39973_1 [label="Unreachable\l"];
    X214abf5ecbf39973_2 [label="Call\l"];
    X214abf5ecbf39973_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X214abf5ecbf39973_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_332 {
    label="core::option::Option::<&[\npinocchio::account_info::\nAccountInfo; \n1]>::unwrap";
    style="filled";
    color=lightgray;
    node_333 [label="LOCALS\l0 = &[pinocchio::account_info::AccountInfo; 1]\l1 = core::option::Option<&[pinocchio::account_info::AccountInfo; 1]>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_2 [label="0"];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_3 [label="1"];
    X5d66149d59dd555d_0 -> X5d66149d59dd555d_1 [label="other"];
    X5d66149d59dd555d_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X5d66149d59dd555d_1 [label="Unreachable\l"];
    X5d66149d59dd555d_2 [label="Call\l"];
    X5d66149d59dd555d_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X5d66149d59dd555d_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_334 {
    label="core::option::Option::<ch\nar>::unwrap";
    style="filled";
    color=lightgray;
    node_335 [label="LOCALS\l0 = char\l1 = core::option::Option<char>\l2 = isize\l3 = !\l", style="filled", color=palegreen3];
    X6bf096f35ac69de9_0 -> X6bf096f35ac69de9_2 [label="0"];
    X6bf096f35ac69de9_0 -> X6bf096f35ac69de9_3 [label="1"];
    X6bf096f35ac69de9_0 -> X6bf096f35ac69de9_1 [label="other"];
    X6bf096f35ac69de9_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X6bf096f35ac69de9_1 [label="Unreachable\l"];
    X6bf096f35ac69de9_2 [label="Call\l"];
    X6bf096f35ac69de9_3 [label="0 <- Use(mv((1 as variant 1).0))\lReturn\l"];
  }
  X6bf096f35ac69de9_2 -> X9b498145f7dc0efa_0 [label=""];
  subgraph cluster_336 {
    label="core::option::Option::<&s\ntr>::is_some";
    style="filled";
    color=lightgray;
    node_337 [label="LOCALS\l0 = bool\l1 = &core::option::Option<&str>\l2 = isize\l", style="filled", color=palegreen3];
    Xb505b41144acaff7_0 -> Xb505b41144acaff7_2 [label="1"];
    Xb505b41144acaff7_0 -> Xb505b41144acaff7_1 [label="0"];
    Xb505b41144acaff7_0 -> Xb505b41144acaff7_4 [label="other"];
    Xb505b41144acaff7_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xb505b41144acaff7_1 -> Xb505b41144acaff7_3;
    Xb505b41144acaff7_1 [label="0 <- Use(const bool)\lGoto\l"];
    Xb505b41144acaff7_2 -> Xb505b41144acaff7_3;
    Xb505b41144acaff7_2 [label="0 <- Use(const bool)\lGoto\l"];
    Xb505b41144acaff7_3 [label="Return\l"];
    Xb505b41144acaff7_4 [label="Unreachable\l"];
  }
  subgraph cluster_338 {
    label="core::option::Option::<&s\ntr>::unwrap_or";
    style="filled";
    color=lightgray;
    node_339 [label="LOCALS\l0 = &str\l1 = core::option::Option<&str>\l2 = &str\l3 = isize\l4 = &str\l", style="filled", color=palegreen3];
    Xdad428174f5e039f_0 -> Xdad428174f5e039f_2 [label="0"];
    Xdad428174f5e039f_0 -> Xdad428174f5e039f_3 [label="1"];
    Xdad428174f5e039f_0 -> Xdad428174f5e039f_1 [label="other"];
    Xdad428174f5e039f_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xdad428174f5e039f_1 [label="Unreachable\l"];
    Xdad428174f5e039f_2 -> Xdad428174f5e039f_4;
    Xdad428174f5e039f_2 [label="0 <- Use(mv(2))\lGoto\l"];
    Xdad428174f5e039f_3 -> Xdad428174f5e039f_4;
    Xdad428174f5e039f_3 [label="Storage Live _4\l4 <- Use(mv((1 as variant 1).0))\l0 <- Use(mv(4))\lStorage Dead _4\lDrop 2\l"];
    Xdad428174f5e039f_4 [label="Return\l"];
  }
  subgraph cluster_340 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::inspect_e\nrr::<for<'a> \nfn(&'a \npinocchio::program_error:\n:ProgramError) \n{entrypoint::log_error}>";
    style="filled";
    color=lightgray;
    node_341 [label="LOCALS\l0 = core::result::Result<(), pinocchio::program_error::ProgramError>\l1 = core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l3 = isize\l4 = &pinocchio::program_error::ProgramError\l5 = ()\l6 = for<'a> fn(&'a pinocchio::program_error::ProgramError) {entrypoint::log_error}\l7 = (&pinocchio::program_error::ProgramError,)\l8 = bool\l9 = bool\l", style="filled", color=palegreen3];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_1 [label="1"];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_3 [label="0"];
    Xba531265f22fa7ac_0 -> Xba531265f22fa7ac_9 [label="other"];
    Xba531265f22fa7ac_0 [label="9 <- Use(const bool)\l8 <- Use(const bool)\l3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xba531265f22fa7ac_1 -> Xba531265f22fa7ac_8 [label="Cleanup"];
    Xba531265f22fa7ac_1 -> Xba531265f22fa7ac_2 [label="5"];
    Xba531265f22fa7ac_1 [label="4 <- & (1 as variant 1).0\lStorage Live _6\l6 <- Use(mv(2))\lStorage Live _7\l7 <- Tuple (cp(4))\lCall\l"];
    Xba531265f22fa7ac_2 -> Xba531265f22fa7ac_4;
    Xba531265f22fa7ac_2 [label="Storage Dead _7\lStorage Dead _6\l0 <- Use(mv(1))\lGoto\l"];
    Xba531265f22fa7ac_3 -> Xba531265f22fa7ac_4 [label="0"];
    Xba531265f22fa7ac_3 -> Xba531265f22fa7ac_6 [label="other"];
    Xba531265f22fa7ac_3 [label="9 <- Use(const bool)\l0 <- Use(mv(1))\lSwitchInt cp(8)\l"];
    Xba531265f22fa7ac_4 [label="Return\l"];
    Xba531265f22fa7ac_5 [label="Resume\l"];
    Xba531265f22fa7ac_6 -> Xba531265f22fa7ac_8 [label="Cleanup"];
    Xba531265f22fa7ac_6 -> Xba531265f22fa7ac_4;
    Xba531265f22fa7ac_6 [label="Drop 2\l"];
    Xba531265f22fa7ac_7 -> Xba531265f22fa7ac_5;
    Xba531265f22fa7ac_7 [label="Drop 1\l"];
    Xba531265f22fa7ac_8 -> Xba531265f22fa7ac_5 [label="0"];
    Xba531265f22fa7ac_8 -> Xba531265f22fa7ac_7 [label="other"];
    Xba531265f22fa7ac_8 [label="SwitchInt cp(9)\l"];
    Xba531265f22fa7ac_9 [label="Unreachable\l"];
  }
  Xba531265f22fa7ac_1 -> Xd7455b7937af9e68_0 [label="mv(6),mv(7)"];
  subgraph cluster_342 {
    label="core::result::Result::<()\n, \npinocchio::program_error:\n:ProgramError>::is_ok";
    style="filled";
    color=lightgray;
    node_343 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = isize\l", style="filled", color=palegreen3];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_2 [label="0"];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_1 [label="1"];
    X5bb54cf35e56a69b_0 -> X5bb54cf35e56a69b_4 [label="other"];
    X5bb54cf35e56a69b_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X5bb54cf35e56a69b_1 -> X5bb54cf35e56a69b_3;
    X5bb54cf35e56a69b_1 [label="0 <- Use(const bool)\lGoto\l"];
    X5bb54cf35e56a69b_2 -> X5bb54cf35e56a69b_3;
    X5bb54cf35e56a69b_2 [label="0 <- Use(const bool)\lGoto\l"];
    X5bb54cf35e56a69b_3 [label="Return\l"];
    X5bb54cf35e56a69b_4 [label="Unreachable\l"];
  }
  subgraph cluster_344 {
    label="core::result::Result::<u8\n, \ncore::num::TryFromIntErro\nr>::expect";
    style="filled";
    color=lightgray;
    node_345 [label="LOCALS\l0 = u8\l1 = core::result::Result<u8, core::num::TryFromIntError>\l2 = &str\l3 = isize\l4 = core::num::TryFromIntError\l5 = !\l6 = &dyn core::fmt::Debug\l7 = &core::num::TryFromIntError\l", style="filled", color=palegreen3];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_3 [label="0"];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_2 [label="1"];
    Xfc416ebf37809ed1_0 -> Xfc416ebf37809ed1_1 [label="other"];
    Xfc416ebf37809ed1_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xfc416ebf37809ed1_1 [label="Unreachable\l"];
    Xfc416ebf37809ed1_2 -> Xfc416ebf37809ed1_4 [label="Cleanup"];
    Xfc416ebf37809ed1_2 [label="Storage Live _4\l4 <- Use(mv((1 as variant 1).0))\lStorage Live _6\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    Xfc416ebf37809ed1_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    Xfc416ebf37809ed1_4 -> Xfc416ebf37809ed1_5;
    Xfc416ebf37809ed1_4 [label="Drop 4\l"];
    Xfc416ebf37809ed1_5 [label="Resume\l"];
  }
  Xfc416ebf37809ed1_2 -> Xdd778da4886cf626_0 [label="mv(2),mv(6)"];
  subgraph cluster_346 {
    label="core::result::Result::<&s\ntr, \ncore::str::Utf8Error>::is\n_err";
    style="filled";
    color=lightgray;
    node_347 [label="LOCALS\l0 = bool\l1 = &core::result::Result<&str, core::str::Utf8Error>\l2 = bool\l3 = isize\l", style="filled", color=palegreen3];
    X64871406d1d9af4_0 -> X64871406d1d9af4_3 [label="0"];
    X64871406d1d9af4_0 -> X64871406d1d9af4_2 [label="1"];
    X64871406d1d9af4_0 -> X64871406d1d9af4_4 [label="other"];
    X64871406d1d9af4_0 [label="Storage Live _2\lStorage Live _3\l3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X64871406d1d9af4_1 [label="Storage Dead _3\l0 <- Not(mv(2))\lStorage Dead _2\lReturn\l"];
    X64871406d1d9af4_2 -> X64871406d1d9af4_1;
    X64871406d1d9af4_2 [label="2 <- Use(const bool)\lGoto\l"];
    X64871406d1d9af4_3 -> X64871406d1d9af4_1;
    X64871406d1d9af4_3 [label="2 <- Use(const bool)\lGoto\l"];
    X64871406d1d9af4_4 [label="Unreachable\l"];
  }
  subgraph cluster_348 {
    label="core::result::Result::<bo\nol, \npinocchio::program_error:\n:ProgramError>::unwrap";
    style="filled";
    color=lightgray;
    node_349 [label="LOCALS\l0 = bool\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = pinocchio::program_error::ProgramError\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X4808404a084b92a1_0 -> X4808404a084b92a1_3 [label="0"];
    X4808404a084b92a1_0 -> X4808404a084b92a1_2 [label="1"];
    X4808404a084b92a1_0 -> X4808404a084b92a1_1 [label="other"];
    X4808404a084b92a1_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X4808404a084b92a1_1 [label="Unreachable\l"];
    X4808404a084b92a1_2 -> X4808404a084b92a1_4 [label="Cleanup"];
    X4808404a084b92a1_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X4808404a084b92a1_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X4808404a084b92a1_4 -> X4808404a084b92a1_5;
    X4808404a084b92a1_4 [label="Drop 3\l"];
    X4808404a084b92a1_5 [label="Resume\l"];
  }
  X4808404a084b92a1_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_350 {
    label="core::result::Result::<&s\ntr, \ncore::str::Utf8Error>::un\nwrap";
    style="filled";
    color=lightgray;
    node_351 [label="LOCALS\l0 = &str\l1 = core::result::Result<&str, core::str::Utf8Error>\l2 = isize\l3 = core::str::Utf8Error\l4 = !\l5 = &dyn core::fmt::Debug\l6 = &core::str::Utf8Error\l", style="filled", color=palegreen3];
    X8cc68936facb7d54_0 -> X8cc68936facb7d54_3 [label="0"];
    X8cc68936facb7d54_0 -> X8cc68936facb7d54_2 [label="1"];
    X8cc68936facb7d54_0 -> X8cc68936facb7d54_1 [label="other"];
    X8cc68936facb7d54_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X8cc68936facb7d54_1 [label="Unreachable\l"];
    X8cc68936facb7d54_2 -> X8cc68936facb7d54_4 [label="Cleanup"];
    X8cc68936facb7d54_2 [label="Storage Live _3\l3 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l6 <- & 3\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X8cc68936facb7d54_3 [label="0 <- Use(mv((1 as variant 0).0))\lReturn\l"];
    X8cc68936facb7d54_4 -> X8cc68936facb7d54_5;
    X8cc68936facb7d54_4 [label="Drop 3\l"];
    X8cc68936facb7d54_5 [label="Resume\l"];
  }
  X8cc68936facb7d54_2 -> Xdd778da4886cf626_0 [label="const &str,mv(5)"];
  subgraph cluster_352 {
    label="core::result::Result::<u6\n4, \ncore::num::ParseIntError>\n::map_err::<pinocchio::pr\nogram_error::ProgramError\n, \n{closure@p-token/src/proc\nessor/mod.rs:186:22: \n186:25}>";
    style="filled";
    color=lightgray;
    node_353 [label="LOCALS\l0 = core::result::Result<u64, pinocchio::program_error::ProgramError>\l1 = core::result::Result<u64, core::num::ParseIntError>\l2 = {closure@p-token/src/processor/mod.rs:186:22: 186:25}\l3 = isize\l4 = u64\l5 = core::num::ParseIntError\l6 = pinocchio::program_error::ProgramError\l7 = {closure@p-token/src/processor/mod.rs:186:22: 186:25}\l8 = (core::num::ParseIntError,)\l", style="filled", color=palegreen3];
    Xf2e8cae96d2c6064_0 -> Xf2e8cae96d2c6064_3 [label="0"];
    Xf2e8cae96d2c6064_0 -> Xf2e8cae96d2c6064_2 [label="1"];
    Xf2e8cae96d2c6064_0 -> Xf2e8cae96d2c6064_1 [label="other"];
    Xf2e8cae96d2c6064_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xf2e8cae96d2c6064_1 [label="Unreachable\l"];
    Xf2e8cae96d2c6064_2 -> Xf2e8cae96d2c6064_4 [label="6"];
    Xf2e8cae96d2c6064_2 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(mv(2))\lStorage Live _8\l8 <- Tuple (cp(5))\lCall\l"];
    Xf2e8cae96d2c6064_3 -> Xf2e8cae96d2c6064_5;
    Xf2e8cae96d2c6064_3 [label="4 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    Xf2e8cae96d2c6064_4 -> Xf2e8cae96d2c6064_5;
    Xf2e8cae96d2c6064_4 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    Xf2e8cae96d2c6064_5 [label="Return\l"];
  }
  Xf2e8cae96d2c6064_2 -> X84c61194b74d7a48_0 [label="mv(7),mv(8)"];
  subgraph cluster_354 {
    label="core::result::Result::<&s\ntr, \ncore::str::Utf8Error>::ma\np_err::<pinocchio_token_i\nnterface::error::TokenErr\nor, \n{closure@p-token/src/proc\nessor/ui_amount_to_amount\n.rs:18:57: \n18:65}>";
    style="filled";
    color=lightgray;
    node_355 [label="LOCALS\l0 = core::result::Result<&str, pinocchio_token_interface::error::TokenError>\l1 = core::result::Result<&str, core::str::Utf8Error>\l2 = {closure@p-token/src/processor/ui_amount_to_amount.rs:18:57: 18:65}\l3 = isize\l4 = &str\l5 = core::str::Utf8Error\l6 = pinocchio_token_interface::error::TokenError\l7 = {closure@p-token/src/processor/ui_amount_to_amount.rs:18:57: 18:65}\l8 = (core::str::Utf8Error,)\l", style="filled", color=palegreen3];
    X2c1adf250ccbd038_0 -> X2c1adf250ccbd038_3 [label="0"];
    X2c1adf250ccbd038_0 -> X2c1adf250ccbd038_2 [label="1"];
    X2c1adf250ccbd038_0 -> X2c1adf250ccbd038_1 [label="other"];
    X2c1adf250ccbd038_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X2c1adf250ccbd038_1 [label="Unreachable\l"];
    X2c1adf250ccbd038_2 -> X2c1adf250ccbd038_4 [label="6"];
    X2c1adf250ccbd038_2 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(mv(2))\lStorage Live _8\l8 <- Tuple (cp(5))\lCall\l"];
    X2c1adf250ccbd038_3 -> X2c1adf250ccbd038_5;
    X2c1adf250ccbd038_3 [label="4 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    X2c1adf250ccbd038_4 -> X2c1adf250ccbd038_5;
    X2c1adf250ccbd038_4 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    X2c1adf250ccbd038_5 [label="Return\l"];
  }
  X2c1adf250ccbd038_2 -> X104e2817d784ba75_0 [label="mv(7),mv(8)"];
  subgraph cluster_356 {
    label="core::result::Result::<&p\ninocchio_token_interface:\n:state::mint::Mint, \npinocchio::program_error:\n:ProgramError>::map_err::\n<pinocchio_token_interfac\ne::error::TokenError, \n{closure@p-token/src/proc\nessor/ui_amount_to_amount\n.rs:25:65: \n25:68}>";
    style="filled";
    color=lightgray;
    node_357 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@p-token/src/processor/ui_amount_to_amount.rs:25:65: 25:68}\l3 = isize\l4 = &pinocchio_token_interface::state::mint::Mint\l5 = pinocchio::program_error::ProgramError\l6 = pinocchio_token_interface::error::TokenError\l7 = {closure@p-token/src/processor/ui_amount_to_amount.rs:25:65: 25:68}\l8 = (pinocchio::program_error::ProgramError,)\l", style="filled", color=palegreen3];
    Xbc67a0983ea6832f_0 -> Xbc67a0983ea6832f_3 [label="0"];
    Xbc67a0983ea6832f_0 -> Xbc67a0983ea6832f_2 [label="1"];
    Xbc67a0983ea6832f_0 -> Xbc67a0983ea6832f_1 [label="other"];
    Xbc67a0983ea6832f_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    Xbc67a0983ea6832f_1 [label="Unreachable\l"];
    Xbc67a0983ea6832f_2 -> Xbc67a0983ea6832f_4 [label="6"];
    Xbc67a0983ea6832f_2 [label="5 <- Use(mv((1 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- Use(mv(2))\lStorage Live _8\l8 <- Tuple (cp(5))\lCall\l"];
    Xbc67a0983ea6832f_3 -> Xbc67a0983ea6832f_5;
    Xbc67a0983ea6832f_3 [label="4 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(4))\lDrop 2\l"];
    Xbc67a0983ea6832f_4 -> Xbc67a0983ea6832f_5;
    Xbc67a0983ea6832f_4 [label="Storage Dead _8\lStorage Dead _7\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
    Xbc67a0983ea6832f_5 [label="Return\l"];
  }
  Xbc67a0983ea6832f_2 -> X217b9d45c3463701_0 [label="mv(7),mv(8)"];
  subgraph cluster_358 {
    label="core::result::Result::<&p\ninocchio_token_interface:\n:state::mint::Mint, \npinocchio::program_error:\n:ProgramError>::and_then:\n:<&pinocchio_token_interf\nace::state::mint::Mint, \n{closure@pinocchio_token_\ninterface::state::load<pi\nnocchio_token_interface::\nstate::mint::Mint>::{clos\nure#0}}>";
    style="filled";
    color=lightgray;
    node_359 [label="LOCALS\l0 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio::program_error::ProgramError>\l2 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l3 = isize\l4 = &pinocchio_token_interface::state::mint::Mint\l5 = {closure@pinocchio_token_interface::state::load<pinocchio_token_interface::state::mint::Mint>::{closure#0}}\l6 = (&pinocchio_token_interface::state::mint::Mint,)\l7 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_3 [label="0"];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_2 [label="1"];
    X241dac1a0e8e19fa_0 -> X241dac1a0e8e19fa_1 [label="other"];
    X241dac1a0e8e19fa_0 [label="3 <- Discriminant(1)\lSwitchInt mv(3)\l"];
    X241dac1a0e8e19fa_1 [label="Unreachable\l"];
    X241dac1a0e8e19fa_2 -> X241dac1a0e8e19fa_5;
    X241dac1a0e8e19fa_2 [label="7 <- Use(mv((1 as variant 1).0))\l0 <- Adt{1} (cp(7))\lDrop 2\l"];
    X241dac1a0e8e19fa_3 -> X241dac1a0e8e19fa_4 [label="0"];
    X241dac1a0e8e19fa_3 [label="4 <- Use(mv((1 as variant 0).0))\lStorage Live _5\l5 <- Use(mv(2))\lStorage Live _6\l6 <- Tuple (cp(4))\lCall\l"];
    X241dac1a0e8e19fa_4 -> X241dac1a0e8e19fa_5;
    X241dac1a0e8e19fa_4 [label="Storage Dead _6\lStorage Dead _5\lGoto\l"];
    X241dac1a0e8e19fa_5 [label="Return\l"];
  }
  X241dac1a0e8e19fa_3 -> X709ca803b6bdae19_0 [label="mv(5),mv(6)"];
  subgraph cluster_360 {
    label="core::result::Result::<()\n, \ncore::num::NonZero<usize>\n>::Err";
    style="filled";
    color=lightgray;
    node_361 [label="LOCALS\l0 = core::result::Result<(), core::num::NonZero<usize>>\l1 = core::num::NonZero<usize>\l", style="filled", color=palegreen3];
    X717a8f85b8bb4886_0 [label="0 <- Adt{1} (mv(1))\lReturn\l"];
  }
  subgraph cluster_362 {
    label="core::panicking::assert_f\nailed::<core::result::Res\nult<(), \npinocchio::program_error:\n:ProgramError>, \ncore::result::Result<(), \npinocchio::program_error:\n:ProgramError>>";
    style="filled";
    color=lightgray;
    node_363 [label="LOCALS\l0 = !\l1 = core::panicking::AssertKind\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l4 = core::option::Option<core::fmt::Arguments<'_>>\l5 = &dyn core::fmt::Debug\l6 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l7 = &dyn core::fmt::Debug\l8 = &&core::result::Result<(), pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X9b376999e062dfdd_0 [label="Storage Live _5\l6 <- & 2\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lStorage Live _7\l8 <- & 3\l7 <- Cast-PointerCoercion(Unsize) cp(8)\lCall\l"];
  }
  X9b376999e062dfdd_0 -> X1eb9e8a223d962a5_0 [label="mv(1),mv(5),mv(7),mv(4)"];
  subgraph cluster_364 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::From<pinoc\nchio::program_error::Prog\nramError>>::from";
    style="filled";
    color=lightgray;
    node_365 [label="LOCALS\l0 = pinocchio::program_error::ProgramError\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xa0efa4cbcb423f13_0 [label="0 <- Use(mv(1))\lReturn\l"];
  }
  subgraph cluster_366 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::convert::Into<u64>>\n::into";
    style="filled";
    color=lightgray;
    node_367 [label="LOCALS\l0 = u64\l1 = pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X86d9ec07d37ae118_0 -> X86d9ec07d37ae118_1 [label="0"];
    X86d9ec07d37ae118_0 [label="Call\l"];
    X86d9ec07d37ae118_1 [label="Return\l"];
  }
  X86d9ec07d37ae118_0 -> X71e84b9ee31f72d5_0 [label="mv(1)"];
  subgraph cluster_368 {
    label="<char \nas \ncore::str::pattern::Patte\nrn>::is_prefix_of";
    style="filled";
    color=lightgray;
    node_369 [label="LOCALS\l0 = bool\l1 = char\l2 = &str\l3 = &str\l4 = &mut [u8]\l5 = &mut [u8; 4]\l6 = [u8; 4]\l7 = &mut [u8]\l8 = u32\l9 = *mut str\l10 = *mut [u8]\l11 = &[u8]\l12 = &[u8]\l", style="filled", color=palegreen3];
    Xfdbd73ac07cd7139_0 -> Xfdbd73ac07cd7139_1 [label="7"];
    Xfdbd73ac07cd7139_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _6\l6 <- Repeat const ?_u8\l5 <- &mut 6\l4 <- Cast-PointerCoercion(Unsize) cp(5)\lStorage Live _7\lStorage Live _8\l8 <- Cast-IntToInt cp(1)\lCall\l"];
    Xfdbd73ac07cd7139_1 -> Xfdbd73ac07cd7139_2 [label="0"];
    Xfdbd73ac07cd7139_1 [label="Storage Dead _8\lStorage Live _10\l10 <- &raw mut (*7)\l9 <- Cast-PtrToPtr mv(10)\lStorage Dead _10\lStorage Dead _7\l3 <- & (*9)\lStorage Dead _4\lStorage Live _11\lStorage Live _12\l11 <- Cast-Transmute cp(2)\l12 <- Cast-Transmute cp(3)\lCall\l"];
    Xfdbd73ac07cd7139_2 [label="Storage Dead _12\lStorage Dead _11\lStorage Dead _3\lStorage Dead _6\lReturn\l"];
  }
  Xfdbd73ac07cd7139_0 -> X99903dfa6b5cd43f_0 [label="mv(8),mv(4)"];
  Xfdbd73ac07cd7139_1 -> Xd26e23fc1a4f831c_0 [label="mv(11),mv(12)"];
  subgraph cluster_370 {
    label="<char \nas \ncore::str::pattern::Patte\nrn>::into_searcher";
    style="filled";
    color=lightgray;
    node_371 [label="LOCALS\l0 = core::str::pattern::CharSearcher<'_>\l1 = char\l2 = &str\l3 = [u8; 4]\l4 = u8\l5 = core::result::Result<u8, core::num::TryFromIntError>\l6 = usize\l7 = &str\l8 = &mut [u8]\l9 = &mut [u8; 4]\l10 = usize\l11 = [u8; 4]\l12 = &mut [u8]\l13 = u32\l14 = *mut str\l15 = *mut [u8]\l16 = &[u8]\l17 = bool\l18 = u8\l19 = &[u8]\l", style="filled", color=palegreen3];
    Xc18a98127535c7df_0 -> Xc18a98127535c7df_2 [label="12"];
    Xc18a98127535c7df_0 [label="Storage Live _3\l3 <- Repeat const ?_u8\lStorage Live _5\lStorage Live _6\lStorage Live _7\lStorage Live _8\l9 <- &mut 3\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lStorage Live _12\lStorage Live _13\l13 <- Cast-IntToInt cp(1)\lCall\l"];
    Xc18a98127535c7df_1 [label="Storage Dead _5\lStorage Live _10\lStorage Live _19\l19 <- Cast-Transmute cp(2)\l10 <- PtrMetadata(cp(19))\lStorage Dead _19\lStorage Live _11\l11 <- Use(cp(3))\l0 <- Adt{0} (cp(2), const ?_usize, mv(10), cp(1), cp(4), mv(11))\lStorage Dead _11\lStorage Dead _10\lStorage Dead _3\lReturn\l"];
    Xc18a98127535c7df_2 -> Xc18a98127535c7df_4 [label="0"];
    Xc18a98127535c7df_2 -> Xc18a98127535c7df_3 [label="other"];
    Xc18a98127535c7df_2 [label="Storage Dead _13\lStorage Live _15\l15 <- &raw mut (*12)\l14 <- Cast-PtrToPtr mv(15)\lStorage Dead _15\lStorage Dead _12\l7 <- & (*14)\lStorage Dead _8\lStorage Live _16\l16 <- Cast-Transmute cp(7)\l6 <- PtrMetadata(cp(16))\lStorage Dead _16\lStorage Dead _7\lStorage Live _17\l17 <- Gt(cp(6), const ?_usize)\lSwitchInt mv(17)\l"];
    Xc18a98127535c7df_3 -> Xc18a98127535c7df_5;
    Xc18a98127535c7df_3 [label="5 <- Use(const core::result::Result<u8, core::num::TryFromIntError>)\lGoto\l"];
    Xc18a98127535c7df_4 -> Xc18a98127535c7df_5;
    Xc18a98127535c7df_4 [label="Storage Live _18\l18 <- Cast-IntToInt cp(6)\l5 <- Adt{0} (mv(18))\lStorage Dead _18\lGoto\l"];
    Xc18a98127535c7df_5 -> Xc18a98127535c7df_1 [label="4"];
    Xc18a98127535c7df_5 [label="Storage Dead _17\lStorage Dead _6\lCall\l"];
  }
  Xc18a98127535c7df_0 -> X99903dfa6b5cd43f_0 [label="mv(13),mv(8)"];
  Xc18a98127535c7df_5 -> Xfc416ebf37809ed1_0 [label="mv(5),const &str"];
  subgraph cluster_372 {
    label="<char \nas \ncore::str::pattern::Patte\nrn>::strip_prefix_of";
    style="filled";
    color=lightgray;
    node_373 [label="LOCALS\l0 = core::option::Option<&str>\l1 = char\l2 = &str\l3 = &str\l4 = &mut [u8]\l5 = &mut [u8; 4]\l6 = [u8; 4]\l7 = &mut [u8]\l8 = u32\l9 = *mut str\l10 = *mut [u8]\l", style="filled", color=palegreen3];
    X99a1d4d809be4555_0 -> X99a1d4d809be4555_2 [label="7"];
    X99a1d4d809be4555_0 [label="Storage Live _3\lStorage Live _4\lStorage Live _6\l6 <- Repeat const ?_u8\l5 <- &mut 6\l4 <- Cast-PointerCoercion(Unsize) cp(5)\lStorage Live _7\lStorage Live _8\l8 <- Cast-IntToInt cp(1)\lCall\l"];
    X99a1d4d809be4555_1 [label="Storage Dead _3\lStorage Dead _6\lReturn\l"];
    X99a1d4d809be4555_2 -> X99a1d4d809be4555_1 [label="0"];
    X99a1d4d809be4555_2 [label="Storage Dead _8\lStorage Live _10\l10 <- &raw mut (*7)\l9 <- Cast-PtrToPtr mv(10)\lStorage Dead _10\lStorage Dead _7\l3 <- & (*9)\lStorage Dead _4\lCall\l"];
  }
  X99a1d4d809be4555_0 -> X99903dfa6b5cd43f_0 [label="mv(8),mv(4)"];
  X99a1d4d809be4555_2 -> X2aadeb51ed25a000_0 [label="mv(3),mv(2)"];
  subgraph cluster_374 {
    label="<{closure@p-token/src/ent\nrypoint.rs:1413:43: \n1413:52} \nas \ncore::str::pattern::Multi\nCharEq>::matches";
    style="filled";
    color=lightgray;
    node_375 [label="LOCALS\l0 = bool\l1 = &mut {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l2 = char\l3 = (char,)\l", style="filled", color=palegreen3];
    X70b3fb50cf0a2d20_0 -> X70b3fb50cf0a2d20_1 [label="0"];
    X70b3fb50cf0a2d20_0 [label="Storage Live _3\l3 <- Tuple (cp(2))\lCall\l"];
    X70b3fb50cf0a2d20_1 [label="Storage Dead _3\lReturn\l"];
  }
  X70b3fb50cf0a2d20_0 -> Xdf8cef9e30e66782_0 [label="mv(1),mv(3)"];
  subgraph cluster_376 {
    label="<u8 \nas \ncore::iter::Sum>::sum::<c\nore::iter::Map<core::arra\ny::IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}";
    style="filled";
    color=lightgray;
    node_377 [label="LOCALS\l0 = u8\l1 = &mut {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}\l2 = u8\l3 = u8\l4 = (u8, bool)\l", style="filled", color=palegreen3];
    X45ef6e6e4352c05b_0 -> X45ef6e6e4352c05b_1;
    X45ef6e6e4352c05b_0 [label="4 <- chkd-Add(cp(2), cp(3))\lAssert mv(4.1) == false\l"];
    X45ef6e6e4352c05b_1 [label="0 <- Use(mv(4.0))\lReturn\l"];
  }
  subgraph cluster_378 {
    label="<&str \nas \ncore::str::pattern::Patte\nrn>::strip_prefix_of";
    style="filled";
    color=lightgray;
    node_379 [label="LOCALS\l0 = core::option::Option<&str>\l1 = &str\l2 = &str\l3 = bool\l4 = &str\l5 = usize\l6 = &[u8]\l7 = &[u8]\l8 = *const str\l9 = *const str\l10 = usize\l11 = *const [u8]\l12 = bool\l13 = ()\l14 = usize\l15 = *const [u8]\l16 = *const u8\l17 = *const u8\l", style="filled", color=palegreen3];
    X2aadeb51ed25a000_0 -> X2aadeb51ed25a000_4 [label="3"];
    X2aadeb51ed25a000_0 [label="Storage Live _3\lStorage Live _6\l6 <- Cast-Transmute cp(2)\l7 <- Cast-Transmute cp(1)\lCall\l"];
    X2aadeb51ed25a000_1 -> X2aadeb51ed25a000_6 [label="0"];
    X2aadeb51ed25a000_1 -> X2aadeb51ed25a000_5 [label="other"];
    X2aadeb51ed25a000_1 [label="5 <- PtrMetadata(cp(7))\lStorage Live _8\lStorage Live _9\l9 <- &raw (*2)\lStorage Live _10\lStorage Live _11\l11 <- Cast-PtrToPtr cp(9)\l10 <- PtrMetadata(cp(2))\lStorage Live _14\lStorage Live _12\l12 <- UbChecks :: bool\lSwitchInt mv(12)\l"];
    X2aadeb51ed25a000_2 -> X2aadeb51ed25a000_3;
    X2aadeb51ed25a000_2 [label="0 <- Use(const core::option::Option<&str>)\lGoto\l"];
    X2aadeb51ed25a000_3 [label="Storage Dead _3\lReturn\l"];
    X2aadeb51ed25a000_4 -> X2aadeb51ed25a000_2 [label="0"];
    X2aadeb51ed25a000_4 -> X2aadeb51ed25a000_1 [label="other"];
    X2aadeb51ed25a000_4 [label="Storage Dead _6\lSwitchInt mv(3)\l"];
    X2aadeb51ed25a000_5 -> X2aadeb51ed25a000_6 [label="13"];
    X2aadeb51ed25a000_5 [label="Call\l"];
    X2aadeb51ed25a000_6 -> X2aadeb51ed25a000_3;
    X2aadeb51ed25a000_6 [label="Storage Dead _12\l14 <- SubUnchecked(cp(10), cp(5))\lStorage Live _15\lStorage Live _16\lStorage Live _17\l17 <- Cast-PtrToPtr cp(9)\l16 <- Offset(cp(17), cp(5))\lStorage Dead _17\l15 <- *([u8]) (cp(16), cp(14))\lStorage Dead _16\l8 <- Cast-PtrToPtr mv(15)\lStorage Dead _15\lStorage Dead _14\lStorage Dead _11\lStorage Dead _10\lStorage Dead _9\l4 <- & (*8)\lStorage Dead _8\l0 <- Adt{1} (cp(4))\lGoto\l"];
  }
  X2aadeb51ed25a000_0 -> Xd26e23fc1a4f831c_0 [label="mv(6),cp(7)"];
  X2aadeb51ed25a000_5 -> X371ee97037325b3b_0 [label="cp(5),cp(10),cp(10)"];
  subgraph cluster_380 {
    label="<usize \nas \ncore::iter::Sum>::sum::<c\nore::iter::Map<core::str:\n:Chars<'_>, \n{closure@<core::iter::Fil\nter<I, \nP> \nas \ncore::iter::Iterator>::co\nunt::to_usize<char, \n{closure@p-token/src/entr\nypoint.rs:1395:53: \n1395:57}>::{closure#0}}>>\n::{closure#0}";
    style="filled";
    color=lightgray;
    node_381 [label="LOCALS\l0 = usize\l1 = &mut {closure@<usize as core::iter::Sum>::sum<core::iter::Map<core::str::Chars<'_>, {closure@<core::iter::Filter<I, P> as core::iter::Iterator>::count::to_usize<char, {closure@p-token/src/entrypoint.rs:1395:53: 1395:57}>::{closure#0}}>>::{closure#0}}\l2 = usize\l3 = usize\l4 = (usize, bool)\l", style="filled", color=palegreen3];
    X3e47db7ce1d99ccb_0 -> X3e47db7ce1d99ccb_1;
    X3e47db7ce1d99ccb_0 [label="4 <- chkd-Add(cp(2), cp(3))\lAssert mv(4.1) == false\l"];
    X3e47db7ce1d99ccb_1 [label="0 <- Use(mv(4.0))\lReturn\l"];
  }
  subgraph cluster_382 {
    label="<core::str::Utf8Error \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_383 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::str::Utf8Error\l2 = &mut core::fmt::Formatter<'_>\l3 = &dyn core::fmt::Debug\l4 = &usize\l5 = &dyn core::fmt::Debug\l6 = &&core::option::Option<u8>\l7 = &core::option::Option<u8>\l", style="filled", color=palegreen3];
    X1cbda06579ce0cb4_0 -> X1cbda06579ce0cb4_1 [label="0"];
    X1cbda06579ce0cb4_0 [label="Storage Live _3\l4 <- & (*1).0\l3 <- Cast-PointerCoercion(Unsize) cp(4)\lStorage Live _5\lStorage Live _7\l7 <- & (*1).1\l6 <- & 7\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X1cbda06579ce0cb4_1 [label="Storage Dead _5\lStorage Dead _3\lStorage Dead _7\lReturn\l"];
  }
  X1cbda06579ce0cb4_0 -> Xe58365f7356c22e7_0 [label="mv(2),const &str,const &str,mv(3),const &str,mv(5)"];
  subgraph cluster_384 {
    label="<core::option::Option<u8>\n \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_385 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::option::Option<u8>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u8\l5 = &dyn core::fmt::Debug\l6 = &&u8\l", style="filled", color=palegreen3];
    X29b19158bf1b6ca8_0 -> X29b19158bf1b6ca8_3 [label="0"];
    X29b19158bf1b6ca8_0 -> X29b19158bf1b6ca8_2 [label="1"];
    X29b19158bf1b6ca8_0 -> X29b19158bf1b6ca8_1 [label="other"];
    X29b19158bf1b6ca8_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X29b19158bf1b6ca8_1 [label="Unreachable\l"];
    X29b19158bf1b6ca8_2 -> X29b19158bf1b6ca8_4 [label="0"];
    X29b19158bf1b6ca8_2 [label="Storage Live _4\l4 <- & ((*1) as variant 1).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    X29b19158bf1b6ca8_3 -> X29b19158bf1b6ca8_5 [label="0"];
    X29b19158bf1b6ca8_3 [label="Call\l"];
    X29b19158bf1b6ca8_4 -> X29b19158bf1b6ca8_5;
    X29b19158bf1b6ca8_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    X29b19158bf1b6ca8_5 [label="Return\l"];
  }
  X29b19158bf1b6ca8_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  X29b19158bf1b6ca8_3 -> Xb93f0288e0006b54_0 [label="mv(2),const &str"];
  subgraph cluster_386 {
    label="<u8 \nas \ncore::array::equality::Sp\necArrayEq<u8, \n32>>::spec_eq";
    style="filled";
    color=lightgray;
    node_387 [label="LOCALS\l0 = bool\l1 = &[u8; 32]\l2 = &[u8; 32]\l3 = &[u8; 32]\l", style="filled", color=palegreen3];
    X1ccfc07345856a22_0 -> X1ccfc07345856a22_1 [label="0"];
    X1ccfc07345856a22_0 [label="Storage Live _3\l3 <- Cast-Transmute cp(2)\lCall\l"];
    X1ccfc07345856a22_1 [label="Storage Dead _3\lReturn\l"];
  }
  X1ccfc07345856a22_0 -> X43ad75e732d0e131_0 [label="mv(1),mv(3)"];
  subgraph cluster_388 {
    label="<core::num::TryFromIntErr\nor \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_389 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::num::TryFromIntError\l2 = &mut core::fmt::Formatter<'_>\l3 = &dyn core::fmt::Debug\l4 = &&()\l5 = &()\l", style="filled", color=palegreen3];
    X65f16877edc1ff5_0 -> X65f16877edc1ff5_1 [label="0"];
    X65f16877edc1ff5_0 [label="Storage Live _3\lStorage Live _5\l5 <- & (*1).0\l4 <- & 5\l3 <- Cast-PointerCoercion(Unsize) cp(4)\lCall\l"];
    X65f16877edc1ff5_1 [label="Storage Dead _3\lStorage Dead _5\lReturn\l"];
  }
  X65f16877edc1ff5_0 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(3)"];
  subgraph cluster_390 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_391 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &()\l5 = &dyn core::fmt::Debug\l6 = &&()\l7 = &pinocchio::program_error::ProgramError\l8 = &dyn core::fmt::Debug\l9 = &&pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_3 [label="0"];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_2 [label="1"];
    Xab8fa31025adcf5b_0 -> Xab8fa31025adcf5b_1 [label="other"];
    Xab8fa31025adcf5b_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    Xab8fa31025adcf5b_1 [label="Unreachable\l"];
    Xab8fa31025adcf5b_2 -> Xab8fa31025adcf5b_5 [label="0"];
    Xab8fa31025adcf5b_2 [label="Storage Live _7\l7 <- & ((*1) as variant 1).0\lStorage Live _8\l9 <- & 7\l8 <- Cast-PointerCoercion(Unsize) cp(9)\lCall\l"];
    Xab8fa31025adcf5b_3 -> Xab8fa31025adcf5b_4 [label="0"];
    Xab8fa31025adcf5b_3 [label="Storage Live _4\l4 <- & ((*1) as variant 0).0\lStorage Live _5\l6 <- & 4\l5 <- Cast-PointerCoercion(Unsize) cp(6)\lCall\l"];
    Xab8fa31025adcf5b_4 -> Xab8fa31025adcf5b_6;
    Xab8fa31025adcf5b_4 [label="Storage Dead _5\lStorage Dead _4\lGoto\l"];
    Xab8fa31025adcf5b_5 -> Xab8fa31025adcf5b_6;
    Xab8fa31025adcf5b_5 [label="Storage Dead _8\lStorage Dead _7\lGoto\l"];
    Xab8fa31025adcf5b_6 [label="Return\l"];
  }
  Xab8fa31025adcf5b_2 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(8)"];
  Xab8fa31025adcf5b_3 -> X85724fedaf4a5444_0 [label="mv(2),const &str,mv(5)"];
  subgraph cluster_392 {
    label="<core::result::Result<(),\n \npinocchio::program_error:\n:ProgramError> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_393 [label="LOCALS\l0 = bool\l1 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l2 = &core::result::Result<(), pinocchio::program_error::ProgramError>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &&pinocchio::program_error::ProgramError\l16 = &&pinocchio::program_error::ProgramError\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X9e1a89bd60e7c0af_0 -> X9e1a89bd60e7c0af_2 [label="0"];
    X9e1a89bd60e7c0af_0 -> X9e1a89bd60e7c0af_1 [label="other"];
    X9e1a89bd60e7c0af_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_3 [label="0"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_4 [label="1"];
    X9e1a89bd60e7c0af_1 -> X9e1a89bd60e7c0af_8 [label="other"];
    X9e1a89bd60e7c0af_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X9e1a89bd60e7c0af_2 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_2 [label="0 <- Use(const bool)\lGoto\l"];
    X9e1a89bd60e7c0af_3 -> X9e1a89bd60e7c0af_7 [label="0"];
    X9e1a89bd60e7c0af_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X9e1a89bd60e7c0af_4 -> X9e1a89bd60e7c0af_6 [label="0"];
    X9e1a89bd60e7c0af_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X9e1a89bd60e7c0af_5 [label="Storage Dead _5\lReturn\l"];
    X9e1a89bd60e7c0af_6 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X9e1a89bd60e7c0af_7 -> X9e1a89bd60e7c0af_5;
    X9e1a89bd60e7c0af_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X9e1a89bd60e7c0af_8 [label="Unreachable\l"];
  }
  X9e1a89bd60e7c0af_3 -> Xe5dce0424c1e8e0f_0 [label="cp(9),cp(10)"];
  X9e1a89bd60e7c0af_4 -> X44c3ea7339825cac_0 [label="cp(13),cp(14)"];
  subgraph cluster_394 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::fmt::Debug>::fmt";
    style="filled";
    color=lightgray;
    node_395 [label="LOCALS\l0 = core::result::Result<(), core::fmt::Error>\l1 = &pinocchio::program_error::ProgramError\l2 = &mut core::fmt::Formatter<'_>\l3 = isize\l4 = &u32\l5 = &str\l6 = &dyn core::fmt::Debug\l7 = &&u32\l8 = &str\l9 = &str\l10 = &str\l11 = &str\l12 = &str\l13 = &str\l14 = &str\l15 = &str\l16 = &str\l17 = &str\l18 = &str\l19 = &str\l20 = &str\l21 = &str\l22 = &str\l23 = &str\l24 = &str\l25 = &str\l26 = &str\l27 = &str\l28 = &str\l29 = &str\l30 = &str\l31 = &str\l32 = &str\l", style="filled", color=palegreen3];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_27 [label="0"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_26 [label="1"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_25 [label="2"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_24 [label="3"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_23 [label="4"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_22 [label="5"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_21 [label="6"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_20 [label="7"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_19 [label="8"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_18 [label="9"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_17 [label="10"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_16 [label="11"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_15 [label="12"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_14 [label="13"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_13 [label="14"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_12 [label="15"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_11 [label="16"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_10 [label="17"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_9 [label="18"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_8 [label="19"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_7 [label="20"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_6 [label="21"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_5 [label="22"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_4 [label="23"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_3 [label="24"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_2 [label="25"];
    X2742b41be11e0ec6_0 -> X2742b41be11e0ec6_1 [label="other"];
    X2742b41be11e0ec6_0 [label="3 <- Discriminant((*1))\lSwitchInt mv(3)\l"];
    X2742b41be11e0ec6_1 [label="Unreachable\l"];
    X2742b41be11e0ec6_2 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_2 [label="32 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_3 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_3 [label="31 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_4 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_4 [label="30 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_5 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_5 [label="29 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_6 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_6 [label="28 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_7 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_7 [label="27 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_8 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_8 [label="26 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_9 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_9 [label="25 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_10 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_10 [label="24 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_11 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_11 [label="23 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_12 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_12 [label="22 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_13 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_13 [label="21 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_14 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_14 [label="20 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_15 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_15 [label="19 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_16 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_16 [label="18 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_17 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_17 [label="17 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_18 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_18 [label="16 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_19 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_19 [label="15 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_20 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_20 [label="14 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_21 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_21 [label="13 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_22 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_22 [label="12 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_23 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_23 [label="11 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_24 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_24 [label="10 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_25 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_25 [label="9 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_26 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_26 [label="8 <- Use(const &str)\lCall\l"];
    X2742b41be11e0ec6_27 -> X2742b41be11e0ec6_28 [label="0"];
    X2742b41be11e0ec6_27 [label="4 <- & ((*1) as variant 0).0\l5 <- Use(const &str)\l7 <- & 4\l6 <- Cast-PointerCoercion(Unsize) cp(7)\lCall\l"];
    X2742b41be11e0ec6_28 [label="Return\l"];
  }
  X2742b41be11e0ec6_2 -> Xb93f0288e0006b54_0 [label="cp(2),mv(32)"];
  X2742b41be11e0ec6_3 -> Xb93f0288e0006b54_0 [label="cp(2),mv(31)"];
  X2742b41be11e0ec6_4 -> Xb93f0288e0006b54_0 [label="cp(2),mv(30)"];
  X2742b41be11e0ec6_5 -> Xb93f0288e0006b54_0 [label="cp(2),mv(29)"];
  X2742b41be11e0ec6_6 -> Xb93f0288e0006b54_0 [label="cp(2),mv(28)"];
  X2742b41be11e0ec6_7 -> Xb93f0288e0006b54_0 [label="cp(2),mv(27)"];
  X2742b41be11e0ec6_8 -> Xb93f0288e0006b54_0 [label="cp(2),mv(26)"];
  X2742b41be11e0ec6_9 -> Xb93f0288e0006b54_0 [label="cp(2),mv(25)"];
  X2742b41be11e0ec6_10 -> Xb93f0288e0006b54_0 [label="cp(2),mv(24)"];
  X2742b41be11e0ec6_11 -> Xb93f0288e0006b54_0 [label="cp(2),mv(23)"];
  X2742b41be11e0ec6_12 -> Xb93f0288e0006b54_0 [label="cp(2),mv(22)"];
  X2742b41be11e0ec6_13 -> Xb93f0288e0006b54_0 [label="cp(2),mv(21)"];
  X2742b41be11e0ec6_14 -> Xb93f0288e0006b54_0 [label="cp(2),mv(20)"];
  X2742b41be11e0ec6_15 -> Xb93f0288e0006b54_0 [label="cp(2),mv(19)"];
  X2742b41be11e0ec6_16 -> Xb93f0288e0006b54_0 [label="cp(2),mv(18)"];
  X2742b41be11e0ec6_17 -> Xb93f0288e0006b54_0 [label="cp(2),mv(17)"];
  X2742b41be11e0ec6_18 -> Xb93f0288e0006b54_0 [label="cp(2),mv(16)"];
  X2742b41be11e0ec6_19 -> Xb93f0288e0006b54_0 [label="cp(2),mv(15)"];
  X2742b41be11e0ec6_20 -> Xb93f0288e0006b54_0 [label="cp(2),mv(14)"];
  X2742b41be11e0ec6_21 -> Xb93f0288e0006b54_0 [label="cp(2),mv(13)"];
  X2742b41be11e0ec6_22 -> Xb93f0288e0006b54_0 [label="cp(2),mv(12)"];
  X2742b41be11e0ec6_23 -> Xb93f0288e0006b54_0 [label="cp(2),mv(11)"];
  X2742b41be11e0ec6_24 -> Xb93f0288e0006b54_0 [label="cp(2),mv(10)"];
  X2742b41be11e0ec6_25 -> Xb93f0288e0006b54_0 [label="cp(2),mv(9)"];
  X2742b41be11e0ec6_26 -> Xb93f0288e0006b54_0 [label="cp(2),mv(8)"];
  X2742b41be11e0ec6_27 -> X85724fedaf4a5444_0 [label="cp(2),mv(5),mv(6)"];
  subgraph cluster_396 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nu8]>>::get_unchecked";
    style="filled";
    color=lightgray;
    node_397 [label="LOCALS\l0 = *const u8\l1 = usize\l2 = *const [u8]\l3 = bool\l4 = ()\l5 = usize\l6 = bool\l7 = usize\l8 = *const u8\l", style="filled", color=palegreen3];
    Xfb10f054466970ae_0 -> Xfb10f054466970ae_3 [label="0"];
    Xfb10f054466970ae_0 -> Xfb10f054466970ae_1 [label="other"];
    Xfb10f054466970ae_0 [label="Storage Live _3\l3 <- UbChecks :: bool\lSwitchInt mv(3)\l"];
    Xfb10f054466970ae_1 -> Xfb10f054466970ae_2 [label="4"];
    Xfb10f054466970ae_1 [label="Storage Live _5\l5 <- PtrMetadata(cp(2))\lCall\l"];
    Xfb10f054466970ae_2 -> Xfb10f054466970ae_3;
    Xfb10f054466970ae_2 [label="Storage Dead _5\lGoto\l"];
    Xfb10f054466970ae_3 [label="Storage Dead _3\lStorage Live _6\lStorage Live _7\l7 <- PtrMetadata(cp(2))\l6 <- Lt(cp(1), mv(7))\lStorage Dead _7\lIntr: Assume mv(6)\lStorage Dead _6\lStorage Live _8\l8 <- Cast-PtrToPtr cp(2)\l0 <- Offset(cp(8), cp(1))\lStorage Dead _8\lReturn\l"];
  }
  Xfb10f054466970ae_1 -> X69edc95c4972e1d8_0 [label="cp(1),mv(5)"];
  subgraph cluster_398 {
    label="<usize \nas \ncore::slice::SliceIndex<[\nT]>>::get_unchecked::prec\nondition_check";
    style="filled";
    color=lightgray;
    node_399 [label="LOCALS\l0 = ()\l1 = usize\l2 = usize\l3 = bool\l4 = !\l", style="filled", color=palegreen3];
    X69edc95c4972e1d8_0 -> X69edc95c4972e1d8_2 [label="0"];
    X69edc95c4972e1d8_0 -> X69edc95c4972e1d8_1 [label="other"];
    X69edc95c4972e1d8_0 [label="Storage Live _3\l3 <- Lt(cp(1), cp(2))\lSwitchInt mv(3)\l"];
    X69edc95c4972e1d8_1 [label="Storage Dead _3\lReturn\l"];
    X69edc95c4972e1d8_2 [label="Call\l"];
  }
  X69edc95c4972e1d8_2 -> Xcfb99dd5dbeb355e_0 [label="const &str"];
  subgraph cluster_400 {
    label="<core::result::Result<&pi\nnocchio_token_interface::\nstate::mint::Mint, \npinocchio_token_interface\n::error::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_401 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &pinocchio_token_interface::state::mint::Mint>\l1 = core::result::Result<&pinocchio_token_interface::state::mint::Mint, pinocchio_token_interface::error::TokenError>\l2 = isize\l3 = &pinocchio_token_interface::state::mint::Mint\l4 = pinocchio_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_3 [label="0"];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_2 [label="1"];
    Xe6c4906ed7b13b2b_0 -> Xe6c4906ed7b13b2b_1 [label="other"];
    Xe6c4906ed7b13b2b_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xe6c4906ed7b13b2b_1 [label="Unreachable\l"];
    Xe6c4906ed7b13b2b_2 -> Xe6c4906ed7b13b2b_4;
    Xe6c4906ed7b13b2b_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xe6c4906ed7b13b2b_3 -> Xe6c4906ed7b13b2b_4;
    Xe6c4906ed7b13b2b_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xe6c4906ed7b13b2b_4 [label="Return\l"];
  }
  subgraph cluster_402 {
    label="<core::result::Result<u64\n, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_403 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, u64>\l1 = core::result::Result<u64, pinocchio::program_error::ProgramError>\l2 = isize\l3 = u64\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    Xb18208f8c43f4cb1_0 -> Xb18208f8c43f4cb1_3 [label="0"];
    Xb18208f8c43f4cb1_0 -> Xb18208f8c43f4cb1_2 [label="1"];
    Xb18208f8c43f4cb1_0 -> Xb18208f8c43f4cb1_1 [label="other"];
    Xb18208f8c43f4cb1_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    Xb18208f8c43f4cb1_1 [label="Unreachable\l"];
    Xb18208f8c43f4cb1_2 -> Xb18208f8c43f4cb1_4;
    Xb18208f8c43f4cb1_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    Xb18208f8c43f4cb1_3 -> Xb18208f8c43f4cb1_4;
    Xb18208f8c43f4cb1_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    Xb18208f8c43f4cb1_4 [label="Return\l"];
  }
  subgraph cluster_404 {
    label="<core::result::Result<&st\nr, \npinocchio_token_interface\n::error::TokenError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_405 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>, &str>\l1 = core::result::Result<&str, pinocchio_token_interface::error::TokenError>\l2 = isize\l3 = &str\l4 = pinocchio_token_interface::error::TokenError\l5 = core::result::Result<core::convert::Infallible, pinocchio_token_interface::error::TokenError>\l", style="filled", color=palegreen3];
    X989908b6084b83e2_0 -> X989908b6084b83e2_3 [label="0"];
    X989908b6084b83e2_0 -> X989908b6084b83e2_2 [label="1"];
    X989908b6084b83e2_0 -> X989908b6084b83e2_1 [label="other"];
    X989908b6084b83e2_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X989908b6084b83e2_1 [label="Unreachable\l"];
    X989908b6084b83e2_2 -> X989908b6084b83e2_4;
    X989908b6084b83e2_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X989908b6084b83e2_3 -> X989908b6084b83e2_4;
    X989908b6084b83e2_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X989908b6084b83e2_4 [label="Return\l"];
  }
  subgraph cluster_406 {
    label="<core::result::Result<&pi\nnocchio::account_info::Ac\ncountInfo, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_407 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, &pinocchio::account_info::AccountInfo>\l1 = core::result::Result<&pinocchio::account_info::AccountInfo, pinocchio::program_error::ProgramError>\l2 = isize\l3 = &pinocchio::account_info::AccountInfo\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_3 [label="0"];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_2 [label="1"];
    X5872796c41a72d9e_0 -> X5872796c41a72d9e_1 [label="other"];
    X5872796c41a72d9e_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X5872796c41a72d9e_1 [label="Unreachable\l"];
    X5872796c41a72d9e_2 -> X5872796c41a72d9e_4;
    X5872796c41a72d9e_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X5872796c41a72d9e_3 -> X5872796c41a72d9e_4;
    X5872796c41a72d9e_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X5872796c41a72d9e_4 [label="Return\l"];
  }
  subgraph cluster_408 {
    label="<core::result::Result<boo\nl, \npinocchio::program_error:\n:ProgramError> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_409 [label="LOCALS\l0 = core::ops::ControlFlow<core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>, bool>\l1 = core::result::Result<bool, pinocchio::program_error::ProgramError>\l2 = isize\l3 = bool\l4 = pinocchio::program_error::ProgramError\l5 = core::result::Result<core::convert::Infallible, pinocchio::program_error::ProgramError>\l", style="filled", color=palegreen3];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_3 [label="0"];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_2 [label="1"];
    X22ee39b8b53b763c_0 -> X22ee39b8b53b763c_1 [label="other"];
    X22ee39b8b53b763c_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X22ee39b8b53b763c_1 [label="Unreachable\l"];
    X22ee39b8b53b763c_2 -> X22ee39b8b53b763c_4;
    X22ee39b8b53b763c_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X22ee39b8b53b763c_3 -> X22ee39b8b53b763c_4;
    X22ee39b8b53b763c_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X22ee39b8b53b763c_4 [label="Return\l"];
  }
  subgraph cluster_410 {
    label="<pinocchio::program_error\n::ProgramError \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_411 [label="LOCALS\l0 = bool\l1 = &pinocchio::program_error::ProgramError\l2 = &pinocchio::program_error::ProgramError\l3 = isize\l4 = isize\l5 = bool\l6 = (&pinocchio::program_error::ProgramError, &pinocchio::program_error::ProgramError)\l7 = isize\l8 = isize\l9 = &u32\l10 = &u32\l11 = &&u32\l12 = &&u32\l13 = &pinocchio::program_error::ProgramError\l14 = &pinocchio::program_error::ProgramError\l15 = &pinocchio::program_error::ProgramError\l16 = &pinocchio::program_error::ProgramError\l", style="filled", color=palegreen3];
    X44c3ea7339825cac_0 -> X44c3ea7339825cac_2 [label="0"];
    X44c3ea7339825cac_0 -> X44c3ea7339825cac_1 [label="other"];
    X44c3ea7339825cac_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X44c3ea7339825cac_1 -> X44c3ea7339825cac_4 [label="0"];
    X44c3ea7339825cac_1 -> X44c3ea7339825cac_3 [label="other"];
    X44c3ea7339825cac_1 [label="6 <- Tuple (cp(1), cp(2))\l13 <- CopyForDeref(6.0)\l8 <- Discriminant((*13))\lSwitchInt mv(8)\l"];
    X44c3ea7339825cac_2 -> X44c3ea7339825cac_6;
    X44c3ea7339825cac_2 [label="0 <- Use(const bool)\lGoto\l"];
    X44c3ea7339825cac_3 -> X44c3ea7339825cac_6;
    X44c3ea7339825cac_3 [label="0 <- Use(const bool)\lGoto\l"];
    X44c3ea7339825cac_4 -> X44c3ea7339825cac_5 [label="0"];
    X44c3ea7339825cac_4 -> X44c3ea7339825cac_3 [label="other"];
    X44c3ea7339825cac_4 [label="14 <- CopyForDeref(6.1)\l7 <- Discriminant((*14))\lSwitchInt mv(7)\l"];
    X44c3ea7339825cac_5 -> X44c3ea7339825cac_6 [label="0"];
    X44c3ea7339825cac_5 [label="15 <- CopyForDeref(6.0)\l9 <- & ((*15) as variant 0).0\l16 <- CopyForDeref(6.1)\l10 <- & ((*16) as variant 0).0\l11 <- & 9\l12 <- & 10\lCall\l"];
    X44c3ea7339825cac_6 [label="Return\l"];
  }
  X44c3ea7339825cac_5 -> X1bb3de031e0823b_0 [label="mv(11),mv(12)"];
  subgraph cluster_412 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::ad\nvance_by";
    style="filled";
    color=lightgray;
    node_413 [label="LOCALS\l0 = core::result::Result<(), core::num::NonZero<usize>>\l1 = &mut core::str::Chars<'_>\l2 = usize\l3 = bool\l4 = usize\l5 = core::slice::ArrayChunks<'_, u8, 32>\l6 = &[u8]\l7 = &core::slice::Iter<'_, u8>\l8 = usize\l9 = bool\l10 = usize\l11 = core::option::Option<&[u8; 32]>\l12 = &mut core::slice::ArrayChunks<'_, u8, 32>\l13 = isize\l14 = &[u8; 32]\l15 = [bool; 32]\l16 = core::ops::Range<usize>\l17 = core::option::Option<usize>\l18 = &mut core::ops::Range<usize>\l19 = usize\l20 = bool\l21 = u8\l22 = bool\l23 = usize\l24 = u8\l25 = core::array::IntoIter<bool, 32>\l26 = [bool; 32]\l27 = core::result::Result<(), core::num::NonZero<usize>>\l28 = &mut core::slice::Iter<'_, u8>\l29 = usize\l30 = bool\l31 = usize\l32 = &core::slice::Iter<'_, u8>\l33 = u8\l34 = &[u8]\l35 = &core::slice::Iter<'_, u8>\l36 = usize\l37 = bool\l38 = bool\l39 = core::result::Result<(), core::num::NonZero<usize>>\l40 = &mut core::slice::Iter<'_, u8>\l41 = bool\l42 = usize\l43 = bool\l44 = usize\l45 = &core::slice::Iter<'_, u8>\l46 = u8\l47 = &[u8]\l48 = &core::slice::Iter<'_, u8>\l49 = usize\l50 = bool\l51 = usize\l52 = core::result::Result<(), core::num::NonZero<usize>>\l53 = &mut core::slice::Iter<'_, u8>\l54 = core::option::Option<core::num::NonZero<usize>>\l55 = usize\l56 = &mut core::slice::Iter<'_, [u8; 32]>\l57 = bool\l58 = &usize\l59 = &usize\l60 = usize\l61 = usize\l62 = usize\l63 = usize\l64 = [core::mem::MaybeUninit<bool>; 32]\l65 = i8\l66 = isize\l67 = bool\l68 = ()\l69 = i8\l70 = isize\l71 = bool\l72 = ()\l73 = u8\l74 = &[u8; 256]\l75 = usize\l76 = bool\l77 = isize\l78 = bool\l79 = ()\l", style="filled", color=palegreen3];
    Xd663680a382da43_0 -> Xd663680a382da43_22 [label="0"];
    Xd663680a382da43_0 -> Xd663680a382da43_1 [label="other"];
    Xd663680a382da43_0 [label="Storage Live _3\lStorage Live _4\l4 <- Use(cp(2))\l3 <- Ge(mv(4), const ?_usize)\lSwitchInt mv(3)\l"];
    Xd663680a382da43_1 -> Xd663680a382da43_34 [label="6"];
    Xd663680a382da43_1 [label="Storage Dead _4\lStorage Live _5\lStorage Live _7\l7 <- & (*1).0\lCall\l"];
    Xd663680a382da43_2 -> Xd663680a382da43_3;
    Xd663680a382da43_2 [label="Storage Live _8\l8 <- Use(const ?_usize)\lGoto\l"];
    Xd663680a382da43_3 -> Xd663680a382da43_10 [label="0"];
    Xd663680a382da43_3 -> Xd663680a382da43_4 [label="other"];
    Xd663680a382da43_3 [label="Storage Live _9\lStorage Live _10\l10 <- Use(cp(2))\l9 <- Gt(mv(10), const ?_usize)\lSwitchInt mv(9)\l"];
    Xd663680a382da43_4 -> Xd663680a382da43_35 [label="11"];
    Xd663680a382da43_4 [label="Storage Dead _10\lStorage Live _11\lStorage Live _12\l12 <- &mut 5\lStorage Live _56\l56 <- &mut 5.0\lCall\l"];
    Xd663680a382da43_5 -> Xd663680a382da43_6;
    Xd663680a382da43_5 [label="Storage Live _14\l14 <- Use(cp((11 as variant 1).0))\l8 <- Add(cp(8), const ?_usize)\lStorage Live _15\l15 <- Repeat const bool\lStorage Live _16\l16 <- Use(const core::ops::Range<usize>)\lGoto\l"];
    Xd663680a382da43_6 -> Xd663680a382da43_38 [label="0"];
    Xd663680a382da43_6 -> Xd663680a382da43_36 [label="other"];
    Xd663680a382da43_6 [label="Storage Live _17\l18 <- &mut 16\lStorage Live _60\lStorage Live _57\lStorage Live _58\l58 <- & 16.0\lStorage Live _59\l59 <- & 16.1\lStorage Live _62\l62 <- Use(cp(16.0))\lStorage Live _63\l63 <- Use(cp(16.1))\l57 <- Lt(mv(62), mv(63))\lStorage Dead _63\lStorage Dead _62\lSwitchInt mv(57)\l"];
    Xd663680a382da43_7 [label="Unreachable\l"];
    Xd663680a382da43_8 -> Xd663680a382da43_9;
    Xd663680a382da43_8 [label="21 <- Use(cp((*14)[_19]))\lStorage Live _65\l65 <- Cast-IntToInt cp(21)\l20 <- Lt(mv(65), const ?_i8)\lStorage Dead _65\lStorage Dead _21\lAssert cp(22) == true\l"];
    Xd663680a382da43_9 -> Xd663680a382da43_6;
    Xd663680a382da43_9 [label="15[_19] <- Not(mv(20))\lStorage Dead _20\lStorage Dead _17\lGoto\l"];
    Xd663680a382da43_10 -> Xd663680a382da43_11;
    Xd663680a382da43_10 [label="Storage Dead _10\lGoto\l"];
    Xd663680a382da43_11 -> Xd663680a382da43_12 [label="27"];
    Xd663680a382da43_11 [label="Storage Dead _9\lStorage Dead _11\lStorage Live _27\lStorage Live _28\l28 <- &mut (*1).0\lStorage Live _29\l29 <- Use(cp(8))\lCall\l"];
    Xd663680a382da43_12 -> Xd663680a382da43_40 [label="0"];
    Xd663680a382da43_12 -> Xd663680a382da43_41 [label="1"];
    Xd663680a382da43_12 -> Xd663680a382da43_7 [label="other"];
    Xd663680a382da43_12 [label="Storage Dead _29\lStorage Dead _28\l66 <- Discriminant(27)\lSwitchInt cp(66)\l"];
    Xd663680a382da43_13 -> Xd663680a382da43_14 [label="31"];
    Xd663680a382da43_13 [label="Storage Live _30\lStorage Live _31\lStorage Live _32\l32 <- & (*1).0\lCall\l"];
    Xd663680a382da43_14 -> Xd663680a382da43_20 [label="0"];
    Xd663680a382da43_14 -> Xd663680a382da43_15 [label="other"];
    Xd663680a382da43_14 [label="Storage Dead _32\l30 <- Gt(mv(31), const ?_usize)\lSwitchInt mv(30)\l"];
    Xd663680a382da43_15 -> Xd663680a382da43_42 [label="34"];
    Xd663680a382da43_15 [label="Storage Dead _31\lStorage Live _34\lStorage Live _35\l35 <- & (*1).0\lCall\l"];
    Xd663680a382da43_16 -> Xd663680a382da43_18 [label="0"];
    Xd663680a382da43_16 -> Xd663680a382da43_17 [label="other"];
    Xd663680a382da43_16 [label="33 <- Use(cp((*34)[0]))\lStorage Dead _34\lStorage Live _38\lStorage Live _69\l69 <- Cast-IntToInt cp(33)\l38 <- Lt(mv(69), const ?_i8)\lStorage Dead _69\lSwitchInt mv(38)\l"];
    Xd663680a382da43_17 -> Xd663680a382da43_19 [label="39"];
    Xd663680a382da43_17 [label="Storage Dead _38\lStorage Live _39\lStorage Live _40\l40 <- &mut (*1).0\lCall\l"];
    Xd663680a382da43_18 -> Xd663680a382da43_21;
    Xd663680a382da43_18 [label="Storage Dead _38\lGoto\l"];
    Xd663680a382da43_19 -> Xd663680a382da43_43 [label="0"];
    Xd663680a382da43_19 -> Xd663680a382da43_44 [label="1"];
    Xd663680a382da43_19 -> Xd663680a382da43_7 [label="other"];
    Xd663680a382da43_19 [label="Storage Dead _40\l70 <- Discriminant(39)\lSwitchInt cp(70)\l"];
    Xd663680a382da43_20 -> Xd663680a382da43_21;
    Xd663680a382da43_20 [label="Storage Dead _31\lGoto\l"];
    Xd663680a382da43_21 -> Xd663680a382da43_23;
    Xd663680a382da43_21 [label="Storage Dead _30\lStorage Dead _8\lStorage Dead _5\lGoto\l"];
    Xd663680a382da43_22 -> Xd663680a382da43_23;
    Xd663680a382da43_22 [label="Storage Dead _4\lGoto\l"];
    Xd663680a382da43_23 -> Xd663680a382da43_24;
    Xd663680a382da43_23 [label="Storage Dead _3\lGoto\l"];
    Xd663680a382da43_24 -> Xd663680a382da43_31 [label="0"];
    Xd663680a382da43_24 -> Xd663680a382da43_25 [label="other"];
    Xd663680a382da43_24 [label="Storage Live _41\lStorage Live _42\l42 <- Use(cp(2))\l41 <- Gt(mv(42), const ?_usize)\lSwitchInt mv(41)\l"];
    Xd663680a382da43_25 -> Xd663680a382da43_26 [label="44"];
    Xd663680a382da43_25 [label="Storage Dead _42\lStorage Live _43\lStorage Live _44\lStorage Live _45\l45 <- & (*1).0\lCall\l"];
    Xd663680a382da43_26 -> Xd663680a382da43_30 [label="0"];
    Xd663680a382da43_26 -> Xd663680a382da43_27 [label="other"];
    Xd663680a382da43_26 [label="Storage Dead _45\l43 <- Gt(mv(44), const ?_usize)\lSwitchInt mv(43)\l"];
    Xd663680a382da43_27 -> Xd663680a382da43_45 [label="47"];
    Xd663680a382da43_27 [label="Storage Dead _44\l2 <- Sub(cp(2), const ?_usize)\lStorage Live _47\lStorage Live _48\l48 <- & (*1).0\lCall\l"];
    Xd663680a382da43_28 -> Xd663680a382da43_46;
    Xd663680a382da43_28 [label="46 <- Use(cp((*47)[0]))\lStorage Dead _47\lStorage Live _76\lStorage Live _73\lStorage Live _74\l74 <- Use(const &[u8; 256])\lStorage Live _75\l75 <- Cast-IntToInt cp(46)\l76 <- Lt(cp(75), const ?_usize)\lAssert mv(76) == true\l"];
    Xd663680a382da43_29 -> Xd663680a382da43_47 [label="0"];
    Xd663680a382da43_29 -> Xd663680a382da43_48 [label="1"];
    Xd663680a382da43_29 -> Xd663680a382da43_7 [label="other"];
    Xd663680a382da43_29 [label="Storage Dead _53\l77 <- Discriminant(52)\lSwitchInt cp(77)\l"];
    Xd663680a382da43_30 -> Xd663680a382da43_32;
    Xd663680a382da43_30 [label="Storage Dead _44\lGoto\l"];
    Xd663680a382da43_31 -> Xd663680a382da43_32;
    Xd663680a382da43_31 [label="Storage Dead _42\lGoto\l"];
    Xd663680a382da43_32 -> Xd663680a382da43_33 [label="0"];
    Xd663680a382da43_32 [label="Storage Dead _43\lStorage Dead _41\lStorage Live _54\lStorage Live _55\l55 <- Use(cp(2))\l54 <- Cast-Transmute cp(55)\lStorage Dead _55\lCall\l"];
    Xd663680a382da43_33 [label="Storage Dead _54\lReturn\l"];
    Xd663680a382da43_34 -> Xd663680a382da43_2 [label="5"];
    Xd663680a382da43_34 [label="Storage Dead _7\lCall\l"];
    Xd663680a382da43_35 -> Xd663680a382da43_5 [label="1"];
    Xd663680a382da43_35 -> Xd663680a382da43_11 [label="0"];
    Xd663680a382da43_35 -> Xd663680a382da43_7 [label="other"];
    Xd663680a382da43_35 [label="Storage Dead _56\lStorage Dead _12\l13 <- Discriminant(11)\lSwitchInt mv(13)\l"];
    Xd663680a382da43_36 -> Xd663680a382da43_37 [label="61"];
    Xd663680a382da43_36 [label="Storage Dead _59\lStorage Dead _58\l60 <- Use(cp(16.0))\lStorage Live _61\lCall\l"];
    Xd663680a382da43_37 -> Xd663680a382da43_8;
    Xd663680a382da43_37 [label="16.0 <- Use(mv(61))\lStorage Dead _61\l17 <- Adt{1} (cp(60))\lStorage Dead _57\lStorage Dead _60\l19 <- Use(cp((17 as variant 1).0))\lStorage Live _20\lStorage Live _21\l22 <- Lt(cp(19), const ?_usize)\lAssert cp(22) == true\l"];
    Xd663680a382da43_38 -> Xd663680a382da43_39 [label="24"];
    Xd663680a382da43_38 [label="Storage Dead _59\lStorage Dead _58\lStorage Dead _57\lStorage Dead _60\lStorage Dead _17\lStorage Dead _16\lStorage Live _23\lStorage Live _24\lStorage Live _26\l26 <- Use(cp(15))\lStorage Live _64\l64 <- Cast-Transmute cp(26)\l25 <- Adt{0} (cp(64), const core::ops::index_range::IndexRange)\lStorage Dead _64\lStorage Dead _26\lCall\l"];
    Xd663680a382da43_39 -> Xd663680a382da43_3;
    Xd663680a382da43_39 [label="23 <- Cast-IntToInt mv(24)\lStorage Dead _24\l2 <- Sub(cp(2), mv(23))\lStorage Dead _23\lStorage Dead _15\lStorage Dead _14\lStorage Dead _9\lStorage Dead _11\lGoto\l"];
    Xd663680a382da43_40 -> Xd663680a382da43_13;
    Xd663680a382da43_40 [label="Storage Dead _27\lGoto\l"];
    Xd663680a382da43_41 -> Xd663680a382da43_7 [label="68"];
    Xd663680a382da43_41 [label="Storage Live _67\l67 <- UbChecks :: bool\lIntr: Assume cp(67)\lCall\l"];
    Xd663680a382da43_42 -> Xd663680a382da43_16;
    Xd663680a382da43_42 [label="Storage Dead _35\l36 <- Len((*34))\l37 <- Lt(const ?_usize, cp(36))\lAssert mv(37) == true\l"];
    Xd663680a382da43_43 -> Xd663680a382da43_13;
    Xd663680a382da43_43 [label="Storage Dead _39\lStorage Dead _30\lGoto\l"];
    Xd663680a382da43_44 -> Xd663680a382da43_7 [label="72"];
    Xd663680a382da43_44 [label="Storage Live _71\l71 <- UbChecks :: bool\lIntr: Assume cp(71)\lCall\l"];
    Xd663680a382da43_45 -> Xd663680a382da43_28;
    Xd663680a382da43_45 [label="Storage Dead _48\l49 <- Len((*47))\l50 <- Lt(const ?_usize, cp(49))\lAssert mv(50) == true\l"];
    Xd663680a382da43_46 -> Xd663680a382da43_29 [label="52"];
    Xd663680a382da43_46 [label="73 <- Use(cp((*74)[_75]))\l51 <- Cast-IntToInt mv(73)\lStorage Dead _73\lStorage Dead _75\lStorage Dead _74\lStorage Dead _76\lStorage Live _52\lStorage Live _53\l53 <- &mut (*1).0\lCall\l"];
    Xd663680a382da43_47 -> Xd663680a382da43_24;
    Xd663680a382da43_47 [label="Storage Dead _52\lStorage Dead _43\lStorage Dead _41\lGoto\l"];
    Xd663680a382da43_48 -> Xd663680a382da43_7 [label="79"];
    Xd663680a382da43_48 [label="Storage Live _78\l78 <- UbChecks :: bool\lIntr: Assume cp(78)\lCall\l"];
  }
  Xd663680a382da43_1 -> X2000e4c8ac402ee9_0 [label="mv(7)"];
  Xd663680a382da43_4 -> Xe3afd114abae08f5_0 [label="mv(56)"];
  Xd663680a382da43_11 -> X1cd4d65abdca3323_0 [label="mv(28),mv(29)"];
  Xd663680a382da43_13 -> Xd05a555747cd5aa8_0 [label="mv(32)"];
  Xd663680a382da43_15 -> X2000e4c8ac402ee9_0 [label="mv(35)"];
  Xd663680a382da43_17 -> X1cd4d65abdca3323_0 [label="mv(40),const ?_usize"];
  Xd663680a382da43_25 -> Xd05a555747cd5aa8_0 [label="mv(45)"];
  Xd663680a382da43_27 -> X2000e4c8ac402ee9_0 [label="mv(48)"];
  Xd663680a382da43_32 -> Xff93dc2af7dd0032_0 [label="mv(54),const core::result::Result<(), core::num::NonZero<usize>>,const fn(core::num::NonZero<usize>) -> core::result::Result<(), core::num::NonZero<usize>> {core::result::Result::<(), core::num::NonZero<usize>>::Err}"];
  Xd663680a382da43_34 -> X6bd7b8031b9e70c1_0 [label="mv(6)"];
  Xd663680a382da43_36 -> Xdaf48124b17ea92_0 [label="cp(60),const ?_usize"];
  Xd663680a382da43_38 -> X29cdd66a6d1e94_0 [label="mv(25),const ?_u8,const {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}"];
  Xd663680a382da43_41 -> X33a001831920b814_0 [label=""];
  Xd663680a382da43_44 -> X33a001831920b814_0 [label=""];
  Xd663680a382da43_46 -> X1cd4d65abdca3323_0 [label="mv(53),mv(51)"];
  Xd663680a382da43_48 -> X33a001831920b814_0 [label=""];
  subgraph cluster_414 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}";
    style="filled";
    color=lightgray;
    node_415 [label="LOCALS\l0 = u8\l1 = &mut {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}\l2 = bool\l", style="filled", color=palegreen3];
    Xe8e315be92f02c14_0 [label="0 <- Cast-IntToInt cp(2)\lReturn\l"];
  }
  subgraph cluster_416 {
    label="<core::str::Chars<'_> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_417 [label="LOCALS\l0 = core::option::Option<char>\l1 = &mut core::str::Chars<'_>\l2 = core::option::Option<u32>\l3 = &mut core::slice::Iter<'_, u8>\l4 = isize\l5 = u32\l6 = char\l7 = bool\l8 = ()\l", style="filled", color=palegreen3];
    Xbbbb9871203f266f_0 -> Xbbbb9871203f266f_1 [label="2"];
    Xbbbb9871203f266f_0 [label="Storage Live _2\l3 <- &mut (*1).0\lCall\l"];
    Xbbbb9871203f266f_1 -> Xbbbb9871203f266f_4 [label="0"];
    Xbbbb9871203f266f_1 -> Xbbbb9871203f266f_5 [label="1"];
    Xbbbb9871203f266f_1 -> Xbbbb9871203f266f_3 [label="other"];
    Xbbbb9871203f266f_1 [label="Storage Live _4\l4 <- Discriminant(2)\lSwitchInt mv(4)\l"];
    Xbbbb9871203f266f_2 [label="Storage Dead _4\lStorage Dead _2\lReturn\l"];
    Xbbbb9871203f266f_3 [label="Unreachable\l"];
    Xbbbb9871203f266f_4 -> Xbbbb9871203f266f_2;
    Xbbbb9871203f266f_4 [label="0 <- Use(const core::option::Option<char>)\lGoto\l"];
    Xbbbb9871203f266f_5 -> Xbbbb9871203f266f_7 [label="0"];
    Xbbbb9871203f266f_5 -> Xbbbb9871203f266f_6 [label="other"];
    Xbbbb9871203f266f_5 [label="5 <- Use(mv((2 as variant 1).0))\lStorage Live _6\lStorage Live _7\l7 <- UbChecks :: bool\lSwitchInt mv(7)\l"];
    Xbbbb9871203f266f_6 -> Xbbbb9871203f266f_7 [label="8"];
    Xbbbb9871203f266f_6 [label="Call\l"];
    Xbbbb9871203f266f_7 -> Xbbbb9871203f266f_2;
    Xbbbb9871203f266f_7 [label="Storage Dead _7\l6 <- Cast-Transmute cp(5)\l0 <- Adt{1} (mv(6))\lStorage Dead _6\lGoto\l"];
  }
  Xbbbb9871203f266f_0 -> Xf810b0801103927_0 [label="mv(3)"];
  Xbbbb9871203f266f_6 -> Xeeb9aa05dcd0eaef_0 [label="cp(5)"];
  subgraph cluster_418 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Searc\nher<'_>>::next_match";
    style="filled";
    color=lightgray;
    node_419 [label="LOCALS\l0 = core::option::Option<(usize, usize)>\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = core::ops::ControlFlow<core::option::Option<core::convert::Infallible>, &[u8]>\l3 = core::option::Option<&[u8]>\l4 = &[u8]\l5 = usize\l6 = usize\l7 = &[u8]\l8 = u8\l9 = &[u8]\l10 = &[u8; 4]\l11 = usize\l12 = usize\l13 = core::option::Option<usize>\l14 = isize\l15 = usize\l16 = usize\l17 = bool\l18 = usize\l19 = usize\l20 = usize\l21 = usize\l22 = usize\l23 = core::option::Option<&[u8]>\l24 = &[u8]\l25 = usize\l26 = &[u8]\l27 = bool\l28 = &&[u8]\l29 = &&[u8]\l30 = &[u8]\l31 = &[u8]\l32 = &[u8; 4]\l33 = core::ops::Range<usize>\l34 = usize\l35 = (usize, usize)\l36 = usize\l37 = usize\l38 = &str\l39 = &str\l40 = bool\l41 = usize\l42 = &[u8]\l43 = *const [u8]\l44 = *const [u8]\l45 = bool\l46 = usize\l47 = *const u8\l48 = *const u8\l49 = &[u8]\l50 = u8\l51 = *const u8\l52 = *const [u8]\l53 = bool\l54 = ()\l55 = bool\l56 = *const u8\l57 = u8\l58 = u8\l59 = bool\l60 = usize\l61 = &[u8]\l62 = *const [u8]\l63 = *const [u8]\l64 = bool\l65 = usize\l66 = *const u8\l67 = *const u8\l68 = u8\l69 = &[u8]\l", style="filled", color=palegreen3];
    Xa28ec11a161e0c4_0 -> Xa28ec11a161e0c4_1;
    Xa28ec11a161e0c4_0 [label="Goto\l"];
    Xa28ec11a161e0c4_1 -> Xa28ec11a161e0c4_18 [label="0"];
    Xa28ec11a161e0c4_1 -> Xa28ec11a161e0c4_17 [label="other"];
    Xa28ec11a161e0c4_1 [label="Storage Live _2\lStorage Live _3\l38 <- Use(cp((*1).0))\l4 <- Cast-Transmute cp(38)\l5 <- Use(cp((*1).1))\l6 <- Use(cp((*1).2))\lStorage Live _42\lStorage Live _45\l45 <- Lt(cp(6), cp(5))\lSwitchInt mv(45)\l"];
    Xa28ec11a161e0c4_2 [label="Unreachable\l"];
    Xa28ec11a161e0c4_3 -> Xa28ec11a161e0c4_4 [label="1"];
    Xa28ec11a161e0c4_3 -> Xa28ec11a161e0c4_11 [label="0"];
    Xa28ec11a161e0c4_3 -> Xa28ec11a161e0c4_2 [label="other"];
    Xa28ec11a161e0c4_3 [label="14 <- Discriminant(13)\lSwitchInt mv(14)\l"];
    Xa28ec11a161e0c4_4 -> Xa28ec11a161e0c4_9 [label="0"];
    Xa28ec11a161e0c4_4 -> Xa28ec11a161e0c4_5 [label="other"];
    Xa28ec11a161e0c4_4 [label="15 <- Use(cp((13 as variant 1).0))\lStorage Live _16\l16 <- Add(cp(15), const ?_usize)\l(*1).1 <- Add(cp((*1).1), mv(16))\lStorage Dead _16\lStorage Live _17\lStorage Live _18\l18 <- Use(cp((*1).1))\lStorage Live _19\lStorage Live _57\l57 <- Use(cp((*1).4))\l19 <- Cast-IntToInt cp(57)\lStorage Dead _57\l17 <- Ge(mv(18), mv(19))\lSwitchInt mv(17)\l"];
    Xa28ec11a161e0c4_5 -> Xa28ec11a161e0c4_25 [label="0"];
    Xa28ec11a161e0c4_5 -> Xa28ec11a161e0c4_24 [label="other"];
    Xa28ec11a161e0c4_5 [label="Storage Dead _19\lStorage Dead _18\lStorage Live _21\l21 <- Use(cp((*1).1))\lStorage Live _22\lStorage Live _58\l58 <- Use(cp((*1).4))\l22 <- Cast-IntToInt cp(58)\lStorage Dead _58\l20 <- Sub(mv(21), mv(22))\lStorage Dead _22\lStorage Dead _21\lStorage Live _23\l39 <- Use(cp((*1).0))\l24 <- Cast-Transmute cp(39)\l25 <- Use(cp((*1).1))\lStorage Live _61\lStorage Live _64\l64 <- Lt(cp(25), cp(20))\lSwitchInt mv(64)\l"];
    Xa28ec11a161e0c4_6 -> Xa28ec11a161e0c4_12;
    Xa28ec11a161e0c4_6 [label="Storage Dead _30\lStorage Dead _29\lStorage Dead _28\lStorage Live _35\lStorage Live _36\l36 <- Use(cp((*1).1))\l35 <- Tuple (cp(20), mv(36))\lStorage Dead _36\l0 <- Adt{1} (mv(35))\lStorage Dead _35\lStorage Dead _27\lStorage Dead _23\lStorage Dead _17\lGoto\l"];
    Xa28ec11a161e0c4_7 -> Xa28ec11a161e0c4_8;
    Xa28ec11a161e0c4_7 [label="Storage Dead _30\lStorage Dead _29\lStorage Dead _28\lStorage Dead _27\lGoto\l"];
    Xa28ec11a161e0c4_8 -> Xa28ec11a161e0c4_10;
    Xa28ec11a161e0c4_8 [label="Storage Dead _23\lGoto\l"];
    Xa28ec11a161e0c4_9 -> Xa28ec11a161e0c4_10;
    Xa28ec11a161e0c4_9 [label="Storage Dead _19\lStorage Dead _18\lGoto\l"];
    Xa28ec11a161e0c4_10 -> Xa28ec11a161e0c4_1;
    Xa28ec11a161e0c4_10 [label="Storage Dead _17\lStorage Dead _13\lGoto\l"];
    Xa28ec11a161e0c4_11 -> Xa28ec11a161e0c4_12;
    Xa28ec11a161e0c4_11 [label="Storage Live _37\l37 <- Use(cp((*1).2))\l(*1).1 <- Use(mv(37))\lStorage Dead _37\l0 <- Adt{0} ()\lGoto\l"];
    Xa28ec11a161e0c4_12 -> Xa28ec11a161e0c4_13;
    Xa28ec11a161e0c4_12 [label="Storage Dead _13\lGoto\l"];
    Xa28ec11a161e0c4_13 [label="Return\l"];
    Xa28ec11a161e0c4_14 -> Xa28ec11a161e0c4_20 [label="0"];
    Xa28ec11a161e0c4_14 -> Xa28ec11a161e0c4_19 [label="other"];
    Xa28ec11a161e0c4_14 [label="Storage Dead _41\lStorage Live _43\lStorage Live _44\l44 <- &raw (*4)\lStorage Live _47\lStorage Live _48\l48 <- Cast-PtrToPtr cp(44)\l47 <- Offset(cp(48), cp(5))\lStorage Dead _48\l43 <- *([u8]) (cp(47), cp(46))\lStorage Dead _47\lStorage Dead _44\l42 <- & (*43)\l3 <- Adt{1} (cp(42))\lStorage Dead _43\lStorage Dead _40\lStorage Dead _42\lStorage Live _49\l49 <- Use(mv((3 as variant 1).0))\l2 <- Adt{0} (cp(49))\lStorage Dead _49\lStorage Dead _3\l7 <- Use(cp((2 as variant 0).0))\lStorage Dead _2\lStorage Live _10\l10 <- & (*1).5\l9 <- Cast-PointerCoercion(Unsize) mv(10)\lStorage Dead _10\lStorage Live _11\lStorage Live _12\lStorage Live _50\l50 <- Use(cp((*1).4))\l12 <- Cast-IntToInt cp(50)\lStorage Dead _50\l11 <- Sub(mv(12), const ?_usize)\lStorage Dead _12\lStorage Live _52\l52 <- &raw (*9)\lStorage Live _53\l53 <- UbChecks :: bool\lSwitchInt mv(53)\l"];
    Xa28ec11a161e0c4_15 -> Xa28ec11a161e0c4_16;
    Xa28ec11a161e0c4_15 [label="Storage Dead _41\lGoto\l"];
    Xa28ec11a161e0c4_16 -> Xa28ec11a161e0c4_13;
    Xa28ec11a161e0c4_16 [label="3 <- Use(const core::option::Option<&[u8]>)\lStorage Dead _40\lStorage Dead _42\lStorage Live _49\lStorage Dead _49\lStorage Dead _3\l0 <- Adt{0} ()\lStorage Dead _2\lGoto\l"];
    Xa28ec11a161e0c4_17 -> Xa28ec11a161e0c4_16;
    Xa28ec11a161e0c4_17 [label="Storage Dead _45\lGoto\l"];
    Xa28ec11a161e0c4_18 -> Xa28ec11a161e0c4_15 [label="0"];
    Xa28ec11a161e0c4_18 -> Xa28ec11a161e0c4_14 [label="other"];
    Xa28ec11a161e0c4_18 [label="46 <- SubUnchecked(cp(6), cp(5))\lStorage Dead _45\lStorage Live _40\lStorage Live _41\l41 <- PtrMetadata(cp(4))\l40 <- Le(cp(6), mv(41))\lSwitchInt mv(40)\l"];
    Xa28ec11a161e0c4_19 -> Xa28ec11a161e0c4_20 [label="54"];
    Xa28ec11a161e0c4_19 [label="Call\l"];
    Xa28ec11a161e0c4_20 -> Xa28ec11a161e0c4_3 [label="13"];
    Xa28ec11a161e0c4_20 [label="Storage Dead _53\lStorage Live _55\l55 <- Lt(cp(11), const ?_usize)\lIntr: Assume mv(55)\lStorage Dead _55\lStorage Live _56\l56 <- Cast-PtrToPtr cp(52)\l51 <- Offset(cp(56), cp(11))\lStorage Dead _56\lStorage Dead _52\lStorage Dead _11\l8 <- Use(cp((*51)))\lStorage Live _13\lCall\l"];
    Xa28ec11a161e0c4_21 -> Xa28ec11a161e0c4_26 [label="31"];
    Xa28ec11a161e0c4_21 [label="Storage Dead _60\lStorage Live _62\lStorage Live _63\l63 <- &raw (*24)\lStorage Live _66\lStorage Live _67\l67 <- Cast-PtrToPtr cp(63)\l66 <- Offset(cp(67), cp(20))\lStorage Dead _67\l62 <- *([u8]) (cp(66), cp(65))\lStorage Dead _66\lStorage Dead _63\l61 <- & (*62)\l23 <- Adt{1} (cp(61))\lStorage Dead _62\lStorage Dead _59\lStorage Dead _61\l26 <- Use(cp((23 as variant 1).0))\lStorage Live _27\lStorage Live _28\l28 <- & 26\lStorage Live _29\lStorage Live _30\lStorage Live _32\l32 <- & (*1).5\lStorage Live _33\lStorage Live _34\lStorage Live _68\l68 <- Use(cp((*1).4))\l34 <- Cast-IntToInt cp(68)\lStorage Dead _68\l33 <- Adt{0} (const ?_usize, mv(34))\lStorage Dead _34\lStorage Live _69\l69 <- Cast-PointerCoercion(Unsize) cp(32)\lCall\l"];
    Xa28ec11a161e0c4_22 -> Xa28ec11a161e0c4_23;
    Xa28ec11a161e0c4_22 [label="Storage Dead _60\lGoto\l"];
    Xa28ec11a161e0c4_23 -> Xa28ec11a161e0c4_8;
    Xa28ec11a161e0c4_23 [label="Storage Dead _59\lStorage Dead _61\lGoto\l"];
    Xa28ec11a161e0c4_24 -> Xa28ec11a161e0c4_23;
    Xa28ec11a161e0c4_24 [label="Storage Dead _64\lGoto\l"];
    Xa28ec11a161e0c4_25 -> Xa28ec11a161e0c4_22 [label="0"];
    Xa28ec11a161e0c4_25 -> Xa28ec11a161e0c4_21 [label="other"];
    Xa28ec11a161e0c4_25 [label="65 <- SubUnchecked(cp(25), cp(20))\lStorage Dead _64\lStorage Live _59\lStorage Live _60\l60 <- PtrMetadata(cp(24))\l59 <- Le(cp(25), mv(60))\lSwitchInt mv(59)\l"];
    Xa28ec11a161e0c4_26 -> Xa28ec11a161e0c4_27 [label="27"];
    Xa28ec11a161e0c4_26 [label="Storage Dead _69\lStorage Dead _33\lStorage Dead _32\l30 <- Use(cp(31))\l29 <- & 30\lCall\l"];
    Xa28ec11a161e0c4_27 -> Xa28ec11a161e0c4_7 [label="0"];
    Xa28ec11a161e0c4_27 -> Xa28ec11a161e0c4_6 [label="other"];
    Xa28ec11a161e0c4_27 [label="SwitchInt mv(27)\l"];
  }
  Xa28ec11a161e0c4_19 -> X69edc95c4972e1d8_0 [label="cp(11),const ?_usize"];
  Xa28ec11a161e0c4_20 -> Xbfa38cc438d7300d_0 [label="mv(8),mv(7)"];
  Xa28ec11a161e0c4_21 -> X386b02aeacd40e86_0 [label="mv(33),mv(69)"];
  Xa28ec11a161e0c4_26 -> X9d8f98d3704e8fd6_0 [label="cp(26),mv(31)"];
  subgraph cluster_420 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Searc\nher<'_>>::next";
    style="filled";
    color=lightgray;
    node_421 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = usize\l3 = &str\l4 = usize\l5 = core::str::Chars<'_>\l6 = usize\l7 = &core::slice::Iter<'_, u8>\l8 = core::option::Option<char>\l9 = &mut core::str::Chars<'_>\l10 = char\l11 = usize\l12 = usize\l13 = &core::slice::Iter<'_, u8>\l14 = bool\l15 = char\l16 = usize\l17 = usize\l18 = &str\l19 = *const str\l20 = *const str\l21 = *const [u8]\l22 = bool\l23 = ()\l24 = usize\l25 = usize\l26 = *const [u8]\l27 = *const u8\l28 = *const u8\l29 = core::slice::Iter<'_, u8>\l30 = &[u8]\l31 = usize\l32 = core::ptr::NonNull<u8>\l33 = core::ptr::NonNull<[u8]>\l34 = *const u8\l35 = *mut u8\l36 = *mut u8\l37 = *const [u8]\l38 = *const u8\l39 = core::option::Option<u32>\l40 = &mut core::slice::Iter<'_, u8>\l41 = isize\l42 = u32\l43 = char\l44 = ()\l", style="filled", color=palegreen3];
    X834dc2888d69dd6d_0 -> X834dc2888d69dd6d_9 [label="0"];
    X834dc2888d69dd6d_0 -> X834dc2888d69dd6d_7 [label="other"];
    X834dc2888d69dd6d_0 [label="2 <- Use(cp((*1).1))\l18 <- Use(cp((*1).0))\l4 <- Use(cp((*1).2))\lStorage Live _19\lStorage Live _20\l20 <- &raw (*18)\lStorage Live _21\lStorage Live _25\l21 <- Cast-PtrToPtr cp(20)\l22 <- UbChecks :: bool\lSwitchInt cp(22)\l"];
    X834dc2888d69dd6d_1 -> X834dc2888d69dd6d_10 [label="39"];
    X834dc2888d69dd6d_1 [label="Storage Dead _7\lStorage Live _8\lStorage Live _9\l9 <- &mut 5\lStorage Live _40\lStorage Live _42\lStorage Live _39\l40 <- &mut 5.0\lCall\l"];
    X834dc2888d69dd6d_2 -> X834dc2888d69dd6d_4 [label="0"];
    X834dc2888d69dd6d_2 -> X834dc2888d69dd6d_3 [label="other"];
    X834dc2888d69dd6d_2 [label="Storage Dead _13\l11 <- Sub(cp(6), mv(12))\lStorage Dead _12\l(*1).1 <- Add(cp((*1).1), mv(11))\lStorage Dead _11\lStorage Live _14\lStorage Live _15\l15 <- Use(cp((*1).3))\l14 <- Eq(cp(10), mv(15))\lSwitchInt mv(14)\l"];
    X834dc2888d69dd6d_3 -> X834dc2888d69dd6d_5;
    X834dc2888d69dd6d_3 [label="Storage Dead _15\lStorage Live _16\l16 <- Use(cp((*1).1))\l0 <- Adt{0} (cp(2), mv(16))\lStorage Dead _16\lGoto\l"];
    X834dc2888d69dd6d_4 -> X834dc2888d69dd6d_5;
    X834dc2888d69dd6d_4 [label="Storage Dead _15\lStorage Live _17\l17 <- Use(cp((*1).1))\l0 <- Adt{1} (cp(2), mv(17))\lStorage Dead _17\lGoto\l"];
    X834dc2888d69dd6d_5 -> X834dc2888d69dd6d_6;
    X834dc2888d69dd6d_5 [label="Storage Dead _14\lGoto\l"];
    X834dc2888d69dd6d_6 [label="Storage Dead _5\lStorage Dead _8\lReturn\l"];
    X834dc2888d69dd6d_7 -> X834dc2888d69dd6d_8 [label="23"];
    X834dc2888d69dd6d_7 [label="Storage Live _24\l24 <- PtrMetadata(cp(18))\lCall\l"];
    X834dc2888d69dd6d_8 -> X834dc2888d69dd6d_9;
    X834dc2888d69dd6d_8 [label="Storage Dead _24\lGoto\l"];
    X834dc2888d69dd6d_9 -> X834dc2888d69dd6d_1 [label="6"];
    X834dc2888d69dd6d_9 [label="25 <- SubUnchecked(cp(4), cp(2))\lStorage Live _26\lStorage Live _27\lStorage Live _28\l28 <- Cast-PtrToPtr cp(20)\l27 <- Offset(cp(28), cp(2))\lStorage Dead _28\l26 <- *([u8]) (cp(27), cp(25))\lStorage Dead _27\l19 <- Cast-PtrToPtr mv(26)\lStorage Dead _26\lStorage Dead _25\lStorage Dead _21\lStorage Dead _20\l3 <- & (*19)\lStorage Dead _19\lStorage Live _5\lStorage Live _30\lStorage Live _34\lStorage Live _29\l30 <- Cast-Transmute cp(3)\lStorage Live _31\lStorage Live _32\lStorage Live _37\lStorage Live _38\l31 <- PtrMetadata(cp(30))\lStorage Live _33\l37 <- &raw (*30)\l33 <- Adt{0} (cp(37))\l38 <- Cast-PtrToPtr cp(37)\l32 <- Adt{0} (cp(38))\lStorage Dead _33\lStorage Live _35\lStorage Live _36\l36 <- Cast-PtrToPtr cp(37)\l35 <- Offset(cp(36), cp(31))\lStorage Dead _36\l34 <- Cast-PtrToPtr mv(35)\lStorage Dead _35\l29 <- Adt{0} (cp(32), cp(34), const core::marker::PhantomData<&u8>)\lStorage Dead _38\lStorage Dead _37\lStorage Dead _32\lStorage Dead _31\l5 <- Adt{0} (mv(29))\lStorage Dead _29\lStorage Dead _34\lStorage Dead _30\lStorage Live _7\l7 <- & 5.0\lCall\l"];
    X834dc2888d69dd6d_10 -> X834dc2888d69dd6d_12 [label="0"];
    X834dc2888d69dd6d_10 -> X834dc2888d69dd6d_13 [label="1"];
    X834dc2888d69dd6d_10 -> X834dc2888d69dd6d_11 [label="other"];
    X834dc2888d69dd6d_10 [label="Storage Live _41\l41 <- Discriminant(39)\lSwitchInt mv(41)\l"];
    X834dc2888d69dd6d_11 [label="Unreachable\l"];
    X834dc2888d69dd6d_12 -> X834dc2888d69dd6d_6;
    X834dc2888d69dd6d_12 [label="Storage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l0 <- Adt{2} ()\lGoto\l"];
    X834dc2888d69dd6d_13 -> X834dc2888d69dd6d_15 [label="0"];
    X834dc2888d69dd6d_13 -> X834dc2888d69dd6d_14 [label="other"];
    X834dc2888d69dd6d_13 [label="42 <- Use(mv((39 as variant 1).0))\lStorage Live _43\lSwitchInt cp(22)\l"];
    X834dc2888d69dd6d_14 -> X834dc2888d69dd6d_15 [label="44"];
    X834dc2888d69dd6d_14 [label="Call\l"];
    X834dc2888d69dd6d_15 -> X834dc2888d69dd6d_2 [label="12"];
    X834dc2888d69dd6d_15 [label="43 <- Cast-Transmute cp(42)\l8 <- Adt{1} (mv(43))\lStorage Dead _43\lStorage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l10 <- Use(cp((8 as variant 1).0))\lStorage Live _11\lStorage Live _12\lStorage Live _13\l13 <- & 5.0\lCall\l"];
  }
  X834dc2888d69dd6d_1 -> Xf810b0801103927_0 [label="mv(40)"];
  X834dc2888d69dd6d_7 -> X371ee97037325b3b_0 [label="cp(2),cp(4),mv(24)"];
  X834dc2888d69dd6d_9 -> Xd05a555747cd5aa8_0 [label="mv(7)"];
  X834dc2888d69dd6d_14 -> Xeeb9aa05dcd0eaef_0 [label="cp(42)"];
  X834dc2888d69dd6d_15 -> Xd05a555747cd5aa8_0 [label="mv(13)"];
  subgraph cluster_422 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Searc\nher<'_>>::haystack";
    style="filled";
    color=lightgray;
    node_423 [label="LOCALS\l0 = &str\l1 = &core::str::pattern::CharSearcher<'_>\l", style="filled", color=palegreen3];
    X1832b8a07e259c1e_0 [label="0 <- Use(cp((*1).0))\lReturn\l"];
  }
  subgraph cluster_424 {
    label="<core::array::IntoIter<bo\nol, \n32> \nas \ncore::ops::Drop>::drop";
    style="filled";
    color=lightgray;
    node_425 [label="LOCALS\l0 = ()\l1 = &mut core::array::IntoIter<bool, 32>\l2 = *mut [bool]\l3 = &mut [bool]\l", style="filled", color=palegreen3];
    X1598c2e61cef364e_0 -> X1598c2e61cef364e_1 [label="3"];
    X1598c2e61cef364e_0 [label="Storage Live _2\lStorage Live _3\lCall\l"];
    X1598c2e61cef364e_1 -> X1598c2e61cef364e_2 [label="0"];
    X1598c2e61cef364e_1 [label="2 <- &raw mut (*3)\lCall\l"];
    X1598c2e61cef364e_2 [label="Storage Dead _2\lStorage Dead _3\lReturn\l"];
  }
  X1598c2e61cef364e_0 -> X1dba23ab093668c2_0 [label="mv(1)"];
  X1598c2e61cef364e_1 -> X8b0ac2e54b9a91_0 [label="mv(2)"];
  subgraph cluster_426 {
    label="<core::str::CharIndices<'\n_> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_427 [label="LOCALS\l0 = core::option::Option<(usize, char)>\l1 = &mut core::str::CharIndices<'_>\l2 = usize\l3 = &core::slice::Iter<'_, u8>\l4 = core::option::Option<char>\l5 = &mut core::str::Chars<'_>\l6 = char\l7 = usize\l8 = usize\l9 = &core::slice::Iter<'_, u8>\l10 = usize\l11 = (usize, char)\l12 = core::option::Option<u32>\l13 = &mut core::slice::Iter<'_, u8>\l14 = isize\l15 = u32\l16 = char\l17 = bool\l18 = ()\l", style="filled", color=palegreen3];
    X97d148e109cc66b9_0 -> X97d148e109cc66b9_1 [label="2"];
    X97d148e109cc66b9_0 [label="Storage Live _3\l3 <- & (*1).1.0\lCall\l"];
    X97d148e109cc66b9_1 -> X97d148e109cc66b9_5 [label="12"];
    X97d148e109cc66b9_1 [label="Storage Dead _3\lStorage Live _4\lStorage Live _5\l5 <- &mut (*1).1\lStorage Live _13\lStorage Live _15\lStorage Live _12\l13 <- &mut (*1).1.0\lCall\l"];
    X97d148e109cc66b9_2 [label="Unreachable\l"];
    X97d148e109cc66b9_3 -> X97d148e109cc66b9_4;
    X97d148e109cc66b9_3 [label="Storage Dead _9\lStorage Live _10\l10 <- Sub(cp(2), cp(8))\l(*1).0 <- Add(cp((*1).0), mv(10))\lStorage Dead _10\lStorage Live _11\l11 <- Tuple (cp(7), cp(6))\l0 <- Adt{1} (mv(11))\lStorage Dead _11\lGoto\l"];
    X97d148e109cc66b9_4 [label="Storage Dead _4\lReturn\l"];
    X97d148e109cc66b9_5 -> X97d148e109cc66b9_6 [label="0"];
    X97d148e109cc66b9_5 -> X97d148e109cc66b9_7 [label="1"];
    X97d148e109cc66b9_5 -> X97d148e109cc66b9_2 [label="other"];
    X97d148e109cc66b9_5 [label="Storage Live _14\l14 <- Discriminant(12)\lSwitchInt mv(14)\l"];
    X97d148e109cc66b9_6 -> X97d148e109cc66b9_4;
    X97d148e109cc66b9_6 [label="Storage Dead _14\lStorage Dead _12\lStorage Dead _15\lStorage Dead _13\lStorage Dead _5\l0 <- Use(const core::option::Option<(usize, char)>)\lGoto\l"];
    X97d148e109cc66b9_7 -> X97d148e109cc66b9_9 [label="0"];
    X97d148e109cc66b9_7 -> X97d148e109cc66b9_8 [label="other"];
    X97d148e109cc66b9_7 [label="15 <- Use(mv((12 as variant 1).0))\lStorage Live _16\lStorage Live _17\l17 <- UbChecks :: bool\lSwitchInt mv(17)\l"];
    X97d148e109cc66b9_8 -> X97d148e109cc66b9_9 [label="18"];
    X97d148e109cc66b9_8 [label="Call\l"];
    X97d148e109cc66b9_9 -> X97d148e109cc66b9_3 [label="8"];
    X97d148e109cc66b9_9 [label="Storage Dead _17\l16 <- Cast-Transmute cp(15)\l4 <- Adt{1} (mv(16))\lStorage Dead _16\lStorage Dead _14\lStorage Dead _12\lStorage Dead _15\lStorage Dead _13\lStorage Dead _5\l6 <- Use(cp((4 as variant 1).0))\l7 <- Use(cp((*1).0))\lStorage Live _9\l9 <- & (*1).1.0\lCall\l"];
  }
  X97d148e109cc66b9_0 -> Xd05a555747cd5aa8_0 [label="mv(3)"];
  X97d148e109cc66b9_1 -> Xf810b0801103927_0 [label="mv(13)"];
  X97d148e109cc66b9_8 -> Xeeb9aa05dcd0eaef_0 [label="cp(15)"];
  X97d148e109cc66b9_9 -> Xd05a555747cd5aa8_0 [label="mv(9)"];
  subgraph cluster_428 {
    label="<core::str::pattern::Char\nSearcher<'_> \nas \ncore::str::pattern::Rever\nseSearcher<'_>>::next_bac\nk";
    style="filled";
    color=lightgray;
    node_429 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::CharSearcher<'_>\l2 = usize\l3 = &str\l4 = usize\l5 = core::str::Chars<'_>\l6 = usize\l7 = &core::slice::Iter<'_, u8>\l8 = core::option::Option<char>\l9 = &mut core::str::Chars<'_>\l10 = char\l11 = usize\l12 = usize\l13 = &core::slice::Iter<'_, u8>\l14 = bool\l15 = char\l16 = usize\l17 = usize\l18 = &str\l19 = *const str\l20 = *const str\l21 = *const [u8]\l22 = bool\l23 = ()\l24 = usize\l25 = usize\l26 = *const [u8]\l27 = *const u8\l28 = *const u8\l29 = core::slice::Iter<'_, u8>\l30 = &[u8]\l31 = usize\l32 = core::ptr::NonNull<u8>\l33 = core::ptr::NonNull<[u8]>\l34 = *const u8\l35 = *mut u8\l36 = *mut u8\l37 = *const [u8]\l38 = *const u8\l39 = core::option::Option<u32>\l40 = &mut core::slice::Iter<'_, u8>\l41 = isize\l42 = u32\l43 = char\l44 = ()\l", style="filled", color=palegreen3];
    Xa12778c1e9fbfec3_0 -> Xa12778c1e9fbfec3_9 [label="0"];
    Xa12778c1e9fbfec3_0 -> Xa12778c1e9fbfec3_7 [label="other"];
    Xa12778c1e9fbfec3_0 [label="2 <- Use(cp((*1).2))\l18 <- Use(cp((*1).0))\l4 <- Use(cp((*1).1))\lStorage Live _19\lStorage Live _20\l20 <- &raw (*18)\lStorage Live _21\lStorage Live _25\l21 <- Cast-PtrToPtr cp(20)\l22 <- UbChecks :: bool\lSwitchInt cp(22)\l"];
    Xa12778c1e9fbfec3_1 -> Xa12778c1e9fbfec3_10 [label="39"];
    Xa12778c1e9fbfec3_1 [label="Storage Dead _7\lStorage Live _8\lStorage Live _9\l9 <- &mut 5\lStorage Live _40\lStorage Live _42\lStorage Live _39\l40 <- &mut 5.0\lCall\l"];
    Xa12778c1e9fbfec3_2 -> Xa12778c1e9fbfec3_4 [label="0"];
    Xa12778c1e9fbfec3_2 -> Xa12778c1e9fbfec3_3 [label="other"];
    Xa12778c1e9fbfec3_2 [label="Storage Dead _13\l11 <- Sub(cp(6), mv(12))\lStorage Dead _12\l(*1).2 <- Sub(cp((*1).2), mv(11))\lStorage Dead _11\lStorage Live _14\lStorage Live _15\l15 <- Use(cp((*1).3))\l14 <- Eq(cp(10), mv(15))\lSwitchInt mv(14)\l"];
    Xa12778c1e9fbfec3_3 -> Xa12778c1e9fbfec3_5;
    Xa12778c1e9fbfec3_3 [label="Storage Dead _15\lStorage Live _16\l16 <- Use(cp((*1).2))\l0 <- Adt{0} (mv(16), cp(2))\lStorage Dead _16\lGoto\l"];
    Xa12778c1e9fbfec3_4 -> Xa12778c1e9fbfec3_5;
    Xa12778c1e9fbfec3_4 [label="Storage Dead _15\lStorage Live _17\l17 <- Use(cp((*1).2))\l0 <- Adt{1} (mv(17), cp(2))\lStorage Dead _17\lGoto\l"];
    Xa12778c1e9fbfec3_5 -> Xa12778c1e9fbfec3_6;
    Xa12778c1e9fbfec3_5 [label="Storage Dead _14\lGoto\l"];
    Xa12778c1e9fbfec3_6 [label="Storage Dead _5\lStorage Dead _8\lReturn\l"];
    Xa12778c1e9fbfec3_7 -> Xa12778c1e9fbfec3_8 [label="23"];
    Xa12778c1e9fbfec3_7 [label="Storage Live _24\l24 <- PtrMetadata(cp(18))\lCall\l"];
    Xa12778c1e9fbfec3_8 -> Xa12778c1e9fbfec3_9;
    Xa12778c1e9fbfec3_8 [label="Storage Dead _24\lGoto\l"];
    Xa12778c1e9fbfec3_9 -> Xa12778c1e9fbfec3_1 [label="6"];
    Xa12778c1e9fbfec3_9 [label="25 <- SubUnchecked(cp(2), cp(4))\lStorage Live _26\lStorage Live _27\lStorage Live _28\l28 <- Cast-PtrToPtr cp(20)\l27 <- Offset(cp(28), cp(4))\lStorage Dead _28\l26 <- *([u8]) (cp(27), cp(25))\lStorage Dead _27\l19 <- Cast-PtrToPtr mv(26)\lStorage Dead _26\lStorage Dead _25\lStorage Dead _21\lStorage Dead _20\l3 <- & (*19)\lStorage Dead _19\lStorage Live _5\lStorage Live _30\lStorage Live _34\lStorage Live _29\l30 <- Cast-Transmute cp(3)\lStorage Live _31\lStorage Live _32\lStorage Live _37\lStorage Live _38\l31 <- PtrMetadata(cp(30))\lStorage Live _33\l37 <- &raw (*30)\l33 <- Adt{0} (cp(37))\l38 <- Cast-PtrToPtr cp(37)\l32 <- Adt{0} (cp(38))\lStorage Dead _33\lStorage Live _35\lStorage Live _36\l36 <- Cast-PtrToPtr cp(37)\l35 <- Offset(cp(36), cp(31))\lStorage Dead _36\l34 <- Cast-PtrToPtr mv(35)\lStorage Dead _35\l29 <- Adt{0} (cp(32), cp(34), const core::marker::PhantomData<&u8>)\lStorage Dead _38\lStorage Dead _37\lStorage Dead _32\lStorage Dead _31\l5 <- Adt{0} (mv(29))\lStorage Dead _29\lStorage Dead _34\lStorage Dead _30\lStorage Live _7\l7 <- & 5.0\lCall\l"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_12 [label="0"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_13 [label="1"];
    Xa12778c1e9fbfec3_10 -> Xa12778c1e9fbfec3_11 [label="other"];
    Xa12778c1e9fbfec3_10 [label="Storage Live _41\l41 <- Discriminant(39)\lSwitchInt mv(41)\l"];
    Xa12778c1e9fbfec3_11 [label="Unreachable\l"];
    Xa12778c1e9fbfec3_12 -> Xa12778c1e9fbfec3_6;
    Xa12778c1e9fbfec3_12 [label="Storage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l0 <- Adt{2} ()\lGoto\l"];
    Xa12778c1e9fbfec3_13 -> Xa12778c1e9fbfec3_15 [label="0"];
    Xa12778c1e9fbfec3_13 -> Xa12778c1e9fbfec3_14 [label="other"];
    Xa12778c1e9fbfec3_13 [label="42 <- Use(mv((39 as variant 1).0))\lStorage Live _43\lSwitchInt cp(22)\l"];
    Xa12778c1e9fbfec3_14 -> Xa12778c1e9fbfec3_15 [label="44"];
    Xa12778c1e9fbfec3_14 [label="Call\l"];
    Xa12778c1e9fbfec3_15 -> Xa12778c1e9fbfec3_2 [label="12"];
    Xa12778c1e9fbfec3_15 [label="43 <- Cast-Transmute cp(42)\l8 <- Adt{1} (mv(43))\lStorage Dead _43\lStorage Dead _41\lStorage Dead _39\lStorage Dead _42\lStorage Dead _40\lStorage Dead _9\l10 <- Use(cp((8 as variant 1).0))\lStorage Live _11\lStorage Live _12\lStorage Live _13\l13 <- & 5.0\lCall\l"];
  }
  Xa12778c1e9fbfec3_1 -> X514f89d19e2bc1b0_0 [label="mv(40)"];
  Xa12778c1e9fbfec3_7 -> X371ee97037325b3b_0 [label="cp(4),cp(2),mv(24)"];
  Xa12778c1e9fbfec3_9 -> Xd05a555747cd5aa8_0 [label="mv(7)"];
  Xa12778c1e9fbfec3_14 -> Xeeb9aa05dcd0eaef_0 [label="cp(42)"];
  Xa12778c1e9fbfec3_15 -> Xd05a555747cd5aa8_0 [label="mv(13)"];
  subgraph cluster_430 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::cmp::PartialEq>::eq";
    style="filled";
    color=lightgray;
    node_431 [label="LOCALS\l0 = bool\l1 = &core::ops::ControlFlow<()>\l2 = &core::ops::ControlFlow<()>\l3 = isize\l4 = isize\l5 = bool\l6 = isize\l7 = isize\l8 = isize\l9 = &()\l10 = &()\l11 = &&()\l12 = &&()\l13 = &()\l14 = &()\l15 = &&()\l16 = &&()\l17 = bool\l18 = bool\l", style="filled", color=palegreen3];
    X43e1d3a9fc1a8e12_0 -> X43e1d3a9fc1a8e12_2 [label="0"];
    X43e1d3a9fc1a8e12_0 -> X43e1d3a9fc1a8e12_1 [label="other"];
    X43e1d3a9fc1a8e12_0 [label="3 <- Discriminant((*1))\l4 <- Discriminant((*2))\lStorage Live _5\l5 <- Eq(cp(3), cp(4))\lSwitchInt mv(5)\l"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_3 [label="0"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_4 [label="1"];
    X43e1d3a9fc1a8e12_1 -> X43e1d3a9fc1a8e12_8 [label="other"];
    X43e1d3a9fc1a8e12_1 [label="8 <- Discriminant((*1))\lSwitchInt mv(8)\l"];
    X43e1d3a9fc1a8e12_2 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_2 [label="0 <- Use(const bool)\lGoto\l"];
    X43e1d3a9fc1a8e12_3 -> X43e1d3a9fc1a8e12_7 [label="0"];
    X43e1d3a9fc1a8e12_3 [label="6 <- Discriminant((*2))\l18 <- Eq(cp(6), const ?_isize)\lIntr: Assume mv(18)\l9 <- & ((*1) as variant 0).0\l10 <- & ((*2) as variant 0).0\lStorage Live _11\l11 <- & 9\lStorage Live _12\l12 <- & 10\lCall\l"];
    X43e1d3a9fc1a8e12_4 -> X43e1d3a9fc1a8e12_6 [label="0"];
    X43e1d3a9fc1a8e12_4 [label="7 <- Discriminant((*2))\l17 <- Eq(cp(7), const ?_isize)\lIntr: Assume mv(17)\l13 <- & ((*1) as variant 1).0\l14 <- & ((*2) as variant 1).0\lStorage Live _15\l15 <- & 13\lStorage Live _16\l16 <- & 14\lCall\l"];
    X43e1d3a9fc1a8e12_5 [label="Storage Dead _5\lReturn\l"];
    X43e1d3a9fc1a8e12_6 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_6 [label="Storage Dead _16\lStorage Dead _15\lGoto\l"];
    X43e1d3a9fc1a8e12_7 -> X43e1d3a9fc1a8e12_5;
    X43e1d3a9fc1a8e12_7 [label="Storage Dead _12\lStorage Dead _11\lGoto\l"];
    X43e1d3a9fc1a8e12_8 [label="Unreachable\l"];
  }
  X43e1d3a9fc1a8e12_3 -> Xe5dce0424c1e8e0f_0 [label="cp(9),cp(10)"];
  X43e1d3a9fc1a8e12_4 -> Xe5dce0424c1e8e0f_0 [label="cp(13),cp(14)"];
  subgraph cluster_432 {
    label="<core::str::Split<'_, \nchar> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_433 [label="LOCALS\l0 = core::option::Option<&str>\l1 = &mut core::str::Split<'_, char>\l2 = &mut core::str::iter::SplitInternal<'_, char>\l", style="filled", color=palegreen3];
    X161ecc8db4bd8cc7_0 -> X161ecc8db4bd8cc7_1 [label="0"];
    X161ecc8db4bd8cc7_0 [label="Storage Live _2\l2 <- &mut (*1).0\lCall\l"];
    X161ecc8db4bd8cc7_1 [label="Storage Dead _2\lReturn\l"];
  }
  X161ecc8db4bd8cc7_0 -> X572991eb5fbc0f28_0 [label="mv(2)"];
  subgraph cluster_434 {
    label="<pinocchio::program_error\n::ProgramError \nas \npinocchio::program_error:\n:ToStr>::to_str::<pinocch\nio_token_interface::error\n::TokenError>";
    style="filled";
    color=lightgray;
    node_435 [label="LOCALS\l0 = &str\l1 = &pinocchio::program_error::ProgramError\l2 = isize\l3 = &u32\l4 = core::result::Result<pinocchio_token_interface::error::TokenError, pinocchio::program_error::ProgramError>\l5 = u32\l6 = isize\l7 = pinocchio_token_interface::error::TokenError\l8 = &pinocchio_token_interface::error::TokenError\l9 = bool\l10 = isize\l11 = isize\l", style="filled", color=palegreen3];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_27 [label="0"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_26 [label="1"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_25 [label="2"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_24 [label="3"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_23 [label="4"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_22 [label="5"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_21 [label="6"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_20 [label="7"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_19 [label="8"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_18 [label="9"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_17 [label="10"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_16 [label="11"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_15 [label="12"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_14 [label="13"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_13 [label="14"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_12 [label="15"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_11 [label="16"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_10 [label="17"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_9 [label="18"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_8 [label="19"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_7 [label="20"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_6 [label="21"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_5 [label="22"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_4 [label="23"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_3 [label="24"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_2 [label="25"];
    Xa3178b9ab8d38373_0 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_0 [label="9 <- Use(const bool)\l2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    Xa3178b9ab8d38373_1 [label="Unreachable\l"];
    Xa3178b9ab8d38373_2 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_2 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_3 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_3 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_4 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_4 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_5 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_5 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_6 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_6 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_7 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_7 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_8 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_8 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_9 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_9 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_10 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_10 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_11 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_11 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_12 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_12 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_13 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_13 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_14 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_14 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_15 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_15 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_16 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_16 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_17 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_17 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_18 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_18 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_19 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_19 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_20 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_20 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_21 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_21 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_22 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_22 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_23 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_23 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_24 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_24 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_25 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_25 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_26 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_26 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_27 -> Xa3178b9ab8d38373_28 [label="4"];
    Xa3178b9ab8d38373_27 [label="3 <- & ((*1) as variant 0).0\l5 <- Use(cp((*3)))\l9 <- Use(const bool)\lCall\l"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_29 [label="0"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_31 [label="1"];
    Xa3178b9ab8d38373_28 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_28 [label="6 <- Discriminant(4)\lSwitchInt mv(6)\l"];
    Xa3178b9ab8d38373_29 -> Xa3178b9ab8d38373_33 [label="Cleanup"];
    Xa3178b9ab8d38373_29 -> Xa3178b9ab8d38373_30 [label="0"];
    Xa3178b9ab8d38373_29 [label="9 <- Use(const bool)\l7 <- Use(mv((4 as variant 0).0))\l8 <- & 7\lCall\l"];
    Xa3178b9ab8d38373_30 -> Xa3178b9ab8d38373_41 [label="Cleanup"];
    Xa3178b9ab8d38373_30 -> Xa3178b9ab8d38373_39;
    Xa3178b9ab8d38373_30 [label="Drop 7\l"];
    Xa3178b9ab8d38373_31 -> Xa3178b9ab8d38373_39;
    Xa3178b9ab8d38373_31 [label="0 <- Use(const &str)\lGoto\l"];
    Xa3178b9ab8d38373_32 [label="Return\l"];
    Xa3178b9ab8d38373_33 -> Xa3178b9ab8d38373_41;
    Xa3178b9ab8d38373_33 [label="Drop 7\l"];
    Xa3178b9ab8d38373_34 [label="Resume\l"];
    Xa3178b9ab8d38373_35 -> Xa3178b9ab8d38373_32;
    Xa3178b9ab8d38373_35 [label="9 <- Use(const bool)\lGoto\l"];
    Xa3178b9ab8d38373_36 -> Xa3178b9ab8d38373_35 [label="0"];
    Xa3178b9ab8d38373_36 -> Xa3178b9ab8d38373_37 [label="other"];
    Xa3178b9ab8d38373_36 [label="SwitchInt cp(9)\l"];
    Xa3178b9ab8d38373_37 -> Xa3178b9ab8d38373_35;
    Xa3178b9ab8d38373_37 [label="Drop (4 as variant 0).0\l"];
    Xa3178b9ab8d38373_38 -> Xa3178b9ab8d38373_35;
    Xa3178b9ab8d38373_38 [label="Drop 4\l"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_36 [label="0"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_38 [label="1"];
    Xa3178b9ab8d38373_39 -> Xa3178b9ab8d38373_1 [label="other"];
    Xa3178b9ab8d38373_39 [label="10 <- Discriminant(4)\lSwitchInt mv(10)\l"];
    Xa3178b9ab8d38373_40 -> Xa3178b9ab8d38373_34;
    Xa3178b9ab8d38373_40 [label="Drop 4\l"];
    Xa3178b9ab8d38373_41 -> Xa3178b9ab8d38373_34 [label="0"];
    Xa3178b9ab8d38373_41 -> Xa3178b9ab8d38373_40 [label="other"];
    Xa3178b9ab8d38373_41 [label="11 <- Discriminant(4)\lSwitchInt mv(11)\l"];
  }
  Xa3178b9ab8d38373_27 -> X9972a2e514221fba_0 [label="mv(5)"];
  Xa3178b9ab8d38373_29 -> X4c2fb00b98bd7925_0 [label="mv(8)"];
  subgraph cluster_436 {
    label="<core::slice::Iter<'_, \nu8> \nas \ncore::iter::Iterator>::ad\nvance_by";
    style="filled";
    color=lightgray;
    node_437 [label="LOCALS\l0 = core::result::Result<(), core::num::NonZero<usize>>\l1 = &mut core::slice::Iter<'_, u8>\l2 = usize\l3 = usize\l4 = usize\l5 = usize\l6 = *const u8\l7 = core::ptr::NonNull<u8>\l8 = *const core::ptr::NonNull<u8>\l9 = *const *const u8\l10 = core::ptr::NonNull<u8>\l11 = core::ptr::NonNull<u8>\l12 = core::option::Option<core::num::NonZero<usize>>\l13 = usize\l14 = *const u8\l15 = *const u8\l16 = bool\l17 = ()\l18 = *const ()\l19 = *const ()\l20 = usize\l21 = bool\l22 = bool\l23 = !\l24 = *mut usize\l25 = *mut *const u8\l26 = usize\l27 = usize\l28 = *mut core::ptr::NonNull<u8>\l29 = *mut *const u8\l30 = core::ptr::NonNull<u8>\l31 = core::ptr::NonNull<u8>\l32 = *const u8\l33 = *const u8\l", style="filled", color=palegreen3];
    X1cd4d65abdca3323_0 -> X1cd4d65abdca3323_2 [label="0"];
    X1cd4d65abdca3323_0 -> X1cd4d65abdca3323_1 [label="other"];
    X1cd4d65abdca3323_0 [label="Storage Live _4\lSwitchInt const bool\l"];
    X1cd4d65abdca3323_1 -> X1cd4d65abdca3323_3;
    X1cd4d65abdca3323_1 [label="6 <- Use(cp((*1).1))\l5 <- Cast-Transmute cp(6)\l4 <- Use(cp(5))\lGoto\l"];
    X1cd4d65abdca3323_2 -> X1cd4d65abdca3323_8 [label="0"];
    X1cd4d65abdca3323_2 -> X1cd4d65abdca3323_6 [label="other"];
    X1cd4d65abdca3323_2 [label="Storage Live _8\lStorage Live _9\l9 <- &raw (*1).1\l8 <- Cast-PtrToPtr cp(9)\lStorage Dead _9\l7 <- Use(cp((*8)))\lStorage Dead _8\lStorage Live _10\l10 <- Use(cp((*1).0))\lStorage Live _14\l14 <- Use(cp(7.0))\lStorage Live _15\l15 <- Use(cp(10.0))\lStorage Live _20\lStorage Live _16\l16 <- UbChecks :: bool\lSwitchInt mv(16)\l"];
    X1cd4d65abdca3323_3 -> X1cd4d65abdca3323_12 [label="3"];
    X1cd4d65abdca3323_3 [label="Call\l"];
    X1cd4d65abdca3323_4 [label="Storage Dead _12\lReturn\l"];
    X1cd4d65abdca3323_5 -> X1cd4d65abdca3323_3;
    X1cd4d65abdca3323_5 [label="Storage Dead _20\lStorage Dead _15\lStorage Dead _14\lStorage Dead _10\lGoto\l"];
    X1cd4d65abdca3323_6 -> X1cd4d65abdca3323_7 [label="17"];
    X1cd4d65abdca3323_6 [label="Storage Live _18\l18 <- Cast-PtrToPtr cp(14)\lStorage Live _19\l19 <- Cast-PtrToPtr cp(15)\lCall\l"];
    X1cd4d65abdca3323_7 -> X1cd4d65abdca3323_8;
    X1cd4d65abdca3323_7 [label="Storage Dead _19\lStorage Dead _18\lGoto\l"];
    X1cd4d65abdca3323_8 -> X1cd4d65abdca3323_11 [label="0"];
    X1cd4d65abdca3323_8 -> X1cd4d65abdca3323_9 [label="other"];
    X1cd4d65abdca3323_8 [label="Storage Dead _16\l20 <- SizeOf :: u8\lStorage Live _21\l21 <- Lt(const ?_usize, cp(20))\lSwitchInt mv(21)\l"];
    X1cd4d65abdca3323_9 -> X1cd4d65abdca3323_11 [label="0"];
    X1cd4d65abdca3323_9 -> X1cd4d65abdca3323_10 [label="other"];
    X1cd4d65abdca3323_9 [label="Storage Live _22\l22 <- Le(cp(20), const ?_usize)\lSwitchInt mv(22)\l"];
    X1cd4d65abdca3323_10 -> X1cd4d65abdca3323_5 [label="4"];
    X1cd4d65abdca3323_10 [label="Storage Dead _22\lStorage Dead _21\lCall\l"];
    X1cd4d65abdca3323_11 [label="Call\l"];
    X1cd4d65abdca3323_12 -> X1cd4d65abdca3323_15 [label="0"];
    X1cd4d65abdca3323_12 -> X1cd4d65abdca3323_14 [label="other"];
    X1cd4d65abdca3323_12 [label="Storage Dead _4\lStorage Live _11\lStorage Live _24\l11 <- Use(cp((*1).0))\lSwitchInt const bool\l"];
    X1cd4d65abdca3323_13 -> X1cd4d65abdca3323_4 [label="0"];
    X1cd4d65abdca3323_13 [label="Storage Dead _24\lStorage Dead _11\lStorage Live _12\lStorage Live _13\l13 <- Sub(cp(2), cp(3))\l12 <- Cast-Transmute cp(13)\lStorage Dead _13\lCall\l"];
    X1cd4d65abdca3323_14 -> X1cd4d65abdca3323_13;
    X1cd4d65abdca3323_14 [label="Storage Live _25\l25 <- &raw mut (*1).1\l24 <- Cast-PtrToPtr cp(25)\lStorage Dead _25\lStorage Live _26\lStorage Live _27\l27 <- Use(cp((*24)))\l26 <- SubUnchecked(mv(27), cp(3))\lStorage Dead _27\l(*24) <- Use(mv(26))\lStorage Dead _26\lGoto\l"];
    X1cd4d65abdca3323_15 -> X1cd4d65abdca3323_13;
    X1cd4d65abdca3323_15 [label="Storage Live _28\lStorage Live _29\l29 <- &raw mut (*1).1\l28 <- Cast-PtrToPtr cp(29)\lStorage Dead _29\lStorage Live _30\lStorage Live _31\l31 <- Use(cp((*1).0))\lStorage Live _32\lStorage Live _33\l33 <- Use(cp(31.0))\l32 <- Offset(mv(33), cp(3))\lStorage Dead _33\l30 <- Adt{0} (mv(32))\lStorage Dead _32\lStorage Dead _31\l(*1).0 <- Use(mv(30))\lStorage Dead _30\lStorage Dead _28\lGoto\l"];
  }
  X1cd4d65abdca3323_3 -> Xf85b79c5bd16f087_0 [label="mv(4),cp(2),const for<'a, 'b> fn(&'a usize, &'b usize) -> core::cmp::Ordering {<usize as core::cmp::Ord>::cmp}"];
  X1cd4d65abdca3323_6 -> Xfccd6b940db3d5e8_0 [label="mv(18),mv(19)"];
  X1cd4d65abdca3323_10 -> Xfd88df1009b24094_0 [label="mv(14),mv(15)"];
  X1cd4d65abdca3323_11 -> Xac08878333d72e42_0 [label="const &str"];
  X1cd4d65abdca3323_13 -> Xff93dc2af7dd0032_0 [label="mv(12),const core::result::Result<(), core::num::NonZero<usize>>,const fn(core::num::NonZero<usize>) -> core::result::Result<(), core::num::NonZero<usize>> {core::result::Result::<(), core::num::NonZero<usize>>::Err}"];
  subgraph cluster_438 {
    label="<core::slice::Iter<'_, \n[u8; \n32]> \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_439 [label="LOCALS\l0 = core::option::Option<&[u8; 32]>\l1 = &mut core::slice::Iter<'_, [u8; 32]>\l2 = bool\l3 = usize\l4 = *const [u8; 32]\l5 = core::ptr::NonNull<[u8; 32]>\l6 = *const core::ptr::NonNull<[u8; 32]>\l7 = *const *const [u8; 32]\l8 = &core::ptr::NonNull<[u8; 32]>\l9 = &core::ptr::NonNull<[u8; 32]>\l10 = &[u8; 32]\l11 = core::ptr::NonNull<[u8; 32]>\l12 = *const [u8; 32]\l13 = *const [u8; 32]\l14 = &core::ptr::NonNull<[u8; 32]>\l15 = core::ptr::NonNull<[u8; 32]>\l16 = *mut usize\l17 = *mut *const [u8; 32]\l18 = usize\l19 = usize\l20 = *mut core::ptr::NonNull<[u8; 32]>\l21 = *mut *const [u8; 32]\l22 = core::ptr::NonNull<[u8; 32]>\l23 = core::ptr::NonNull<[u8; 32]>\l24 = *const [u8; 32]\l25 = *const [u8; 32]\l26 = *mut [u8; 32]\l27 = *const [u8; 32]\l", style="filled", color=palegreen3];
    Xe3afd114abae08f5_0 -> Xe3afd114abae08f5_2 [label="0"];
    Xe3afd114abae08f5_0 -> Xe3afd114abae08f5_1 [label="other"];
    Xe3afd114abae08f5_0 [label="Storage Live _2\lSwitchInt const bool\l"];
    Xe3afd114abae08f5_1 -> Xe3afd114abae08f5_3;
    Xe3afd114abae08f5_1 [label="4 <- Use(cp((*1).1))\l3 <- Cast-Transmute cp(4)\l2 <- Eq(cp(3), const ?_usize)\lGoto\l"];
    Xe3afd114abae08f5_2 -> Xe3afd114abae08f5_3;
    Xe3afd114abae08f5_2 [label="Storage Live _6\lStorage Live _7\l7 <- &raw (*1).1\l6 <- Cast-PtrToPtr cp(7)\lStorage Dead _7\l5 <- Use(cp((*6)))\lStorage Dead _6\lStorage Live _8\l8 <- & (*1).0\lStorage Live _9\l9 <- & 5\lStorage Live _12\lStorage Live _13\lStorage Live _11\l11 <- Use(cp((*1).0))\l12 <- Use(cp(11.0))\lStorage Dead _11\l13 <- Use(cp(5.0))\l2 <- Eq(cp(12), cp(13))\lStorage Dead _13\lStorage Dead _12\lStorage Dead _9\lStorage Dead _8\lGoto\l"];
    Xe3afd114abae08f5_3 -> Xe3afd114abae08f5_5 [label="0"];
    Xe3afd114abae08f5_3 -> Xe3afd114abae08f5_4 [label="other"];
    Xe3afd114abae08f5_3 [label="SwitchInt mv(2)\l"];
    Xe3afd114abae08f5_4 -> Xe3afd114abae08f5_6;
    Xe3afd114abae08f5_4 [label="0 <- Use(const core::option::Option<&[u8; 32]>)\lGoto\l"];
    Xe3afd114abae08f5_5 -> Xe3afd114abae08f5_9 [label="0"];
    Xe3afd114abae08f5_5 -> Xe3afd114abae08f5_8 [label="other"];
    Xe3afd114abae08f5_5 [label="Storage Live _15\lStorage Live _14\lStorage Live _16\l15 <- Use(cp((*1).0))\lSwitchInt const bool\l"];
    Xe3afd114abae08f5_6 [label="Storage Dead _2\lReturn\l"];
    Xe3afd114abae08f5_7 -> Xe3afd114abae08f5_6;
    Xe3afd114abae08f5_7 [label="Storage Dead _16\l14 <- & 15\lStorage Live _27\lStorage Live _26\l27 <- Use(cp(15.0))\l26 <- Cast-PtrToPtr cp(27)\lStorage Dead _26\l10 <- & (*27)\lStorage Dead _27\lStorage Dead _14\lStorage Dead _15\l0 <- Adt{1} (cp(10))\lGoto\l"];
    Xe3afd114abae08f5_8 -> Xe3afd114abae08f5_7;
    Xe3afd114abae08f5_8 [label="Storage Live _17\l17 <- &raw mut (*1).1\l16 <- Cast-PtrToPtr cp(17)\lStorage Dead _17\lStorage Live _18\lStorage Live _19\l19 <- Use(cp((*16)))\l18 <- SubUnchecked(mv(19), const ?_usize)\lStorage Dead _19\l(*16) <- Use(mv(18))\lStorage Dead _18\lGoto\l"];
    Xe3afd114abae08f5_9 -> Xe3afd114abae08f5_7;
    Xe3afd114abae08f5_9 [label="Storage Live _20\lStorage Live _21\l21 <- &raw mut (*1).1\l20 <- Cast-PtrToPtr cp(21)\lStorage Dead _21\lStorage Live _22\lStorage Live _23\l23 <- Use(cp((*1).0))\lStorage Live _24\lStorage Live _25\l25 <- Use(cp(23.0))\l24 <- Offset(mv(25), const ?_usize)\lStorage Dead _25\l22 <- Adt{0} (mv(24))\lStorage Dead _24\lStorage Dead _23\l(*1).0 <- Use(mv(22))\lStorage Dead _22\lStorage Dead _20\lGoto\l"];
  }
  subgraph cluster_440 {
    label="<core::ops::index_range::\nIndexRange \nas \ncore::iter::Iterator>::ne\nxt";
    style="filled";
    color=lightgray;
    node_441 [label="LOCALS\l0 = core::option::Option<usize>\l1 = &mut core::ops::index_range::IndexRange\l2 = bool\l3 = usize\l4 = &&mut core::ops::index_range::IndexRange\l5 = usize\l6 = usize\l7 = usize\l8 = usize\l9 = bool\l10 = ()\l", style="filled", color=palegreen3];
    Xa984d43e58a62b84_0 -> Xa984d43e58a62b84_2 [label="0"];
    Xa984d43e58a62b84_0 -> Xa984d43e58a62b84_1 [label="other"];
    Xa984d43e58a62b84_0 [label="Storage Live _2\lStorage Live _3\lStorage Live _4\l4 <- & 1\lStorage Live _6\l6 <- Use(cp((*1).1))\lStorage Live _7\l7 <- Use(cp((*1).0))\l3 <- SubUnchecked(mv(6), mv(7))\lStorage Dead _7\lStorage Dead _6\lStorage Dead _4\l2 <- Gt(mv(3), const ?_usize)\lSwitchInt mv(2)\l"];
    Xa984d43e58a62b84_1 -> Xa984d43e58a62b84_5 [label="0"];
    Xa984d43e58a62b84_1 -> Xa984d43e58a62b84_4 [label="other"];
    Xa984d43e58a62b84_1 [label="Storage Dead _3\lStorage Live _5\l5 <- Use(cp((*1).0))\lStorage Live _8\lStorage Live _9\l9 <- UbChecks :: bool\lSwitchInt mv(9)\l"];
    Xa984d43e58a62b84_2 -> Xa984d43e58a62b84_3;
    Xa984d43e58a62b84_2 [label="Storage Dead _3\l0 <- Use(const core::option::Option<usize>)\lGoto\l"];
    Xa984d43e58a62b84_3 [label="Storage Dead _2\lReturn\l"];
    Xa984d43e58a62b84_4 -> Xa984d43e58a62b84_5 [label="10"];
    Xa984d43e58a62b84_4 [label="Call\l"];
    Xa984d43e58a62b84_5 -> Xa984d43e58a62b84_3;
    Xa984d43e58a62b84_5 [label="Storage Dead _9\l8 <- AddUnchecked(cp(5), const ?_usize)\l(*1).0 <- Use(mv(8))\lStorage Dead _8\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
  }
  Xa984d43e58a62b84_4 -> X83d527cca8322d39_0 [label="cp(5),const ?_usize"];
  subgraph cluster_442 {
    label="<core::ops::try_trait::Ne\nverShortCircuit<u8> \nas \ncore::ops::Try>::from_out\nput";
    style="filled";
    color=lightgray;
    node_443 [label="LOCALS\l0 = core::ops::try_trait::NeverShortCircuit<u8>\l1 = u8\l", style="filled", color=palegreen3];
    X5558a9c5e2f702e3_0 [label="0 <- Adt{0} (cp(1))\lReturn\l"];
  }
  subgraph cluster_444 {
    label="<core::ops::try_trait::Ne\nverShortCircuit<u8> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_445 [label="LOCALS\l0 = core::ops::ControlFlow<core::ops::try_trait::NeverShortCircuitResidual, u8>\l1 = core::ops::try_trait::NeverShortCircuit<u8>\l2 = u8\l", style="filled", color=palegreen3];
    X488d4ef79e3074a1_0 [label="Storage Live _2\l2 <- Use(mv(1.0))\l0 <- Adt{0} (mv(2))\lStorage Dead _2\lReturn\l"];
  }
  subgraph cluster_446 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::Try>::from_out\nput";
    style="filled";
    color=lightgray;
    node_447 [label="LOCALS\l0 = core::ops::ControlFlow<()>\l1 = ()\l", style="filled", color=palegreen3];
    X28203ac4004097e4_0 [label="0 <- Adt{0} (cp(1))\lReturn\l"];
  }
  subgraph cluster_448 {
    label="<core::ops::ControlFlow<(\n)> \nas \ncore::ops::Try>::branch";
    style="filled";
    color=lightgray;
    node_449 [label="LOCALS\l0 = core::ops::ControlFlow<core::ops::ControlFlow<(), core::convert::Infallible>>\l1 = core::ops::ControlFlow<()>\l2 = isize\l3 = ()\l4 = ()\l5 = core::ops::ControlFlow<(), core::convert::Infallible>\l", style="filled", color=palegreen3];
    X520c4c982105df50_0 -> X520c4c982105df50_3 [label="0"];
    X520c4c982105df50_0 -> X520c4c982105df50_2 [label="1"];
    X520c4c982105df50_0 -> X520c4c982105df50_1 [label="other"];
    X520c4c982105df50_0 [label="2 <- Discriminant(1)\lSwitchInt mv(2)\l"];
    X520c4c982105df50_1 [label="Unreachable\l"];
    X520c4c982105df50_2 -> X520c4c982105df50_4;
    X520c4c982105df50_2 [label="4 <- Use(mv((1 as variant 1).0))\lStorage Live _5\l5 <- Adt{1} (cp(4))\l0 <- Adt{1} (mv(5))\lStorage Dead _5\lGoto\l"];
    X520c4c982105df50_3 -> X520c4c982105df50_4;
    X520c4c982105df50_3 [label="3 <- Use(mv((1 as variant 0).0))\l0 <- Adt{0} (cp(3))\lGoto\l"];
    X520c4c982105df50_4 [label="Return\l"];
  }
  subgraph cluster_450 {
    label="<core::str::pattern::Mult\niCharEqPattern<{closure@p\n-token/src/entrypoint.rs:\n1413:43: \n1413:52}> \nas \ncore::str::pattern::Patte\nrn>::into_searcher";
    style="filled";
    color=lightgray;
    node_451 [label="LOCALS\l0 = core::str::pattern::MultiCharEqSearcher<'_, {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l1 = core::str::pattern::MultiCharEqPattern<{closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l2 = &str\l3 = {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l4 = core::str::CharIndices<'_>\l5 = core::str::Chars<'_>\l", style="filled", color=palegreen3];
    Xce410a6aef4e2b80_0 -> Xce410a6aef4e2b80_1 [label="Cleanup"];
    Xce410a6aef4e2b80_0 -> Xce410a6aef4e2b80_3 [label="5"];
    Xce410a6aef4e2b80_0 [label="Storage Live _3\l3 <- Use(mv(1.0))\lStorage Live _4\lStorage Live _5\lCall\l"];
    Xce410a6aef4e2b80_1 -> Xce410a6aef4e2b80_2;
    Xce410a6aef4e2b80_1 [label="Drop 3\l"];
    Xce410a6aef4e2b80_2 [label="Resume\l"];
    Xce410a6aef4e2b80_3 [label="4 <- Adt{0} (const ?_usize, mv(5))\lStorage Dead _5\l0 <- Adt{0} (mv(3), cp(2), mv(4))\lStorage Dead _4\lStorage Dead _3\lReturn\l"];
  }
  Xce410a6aef4e2b80_0 -> X4a1a662fe4c6cd2b_0 [label="cp(2)"];
  subgraph cluster_452 {
    label="<pinocchio_token_interfac\ne::error::TokenError \nas \npinocchio::program_error:\n:ToStr>::to_str::<pinocch\nio_token_interface::error\n::TokenError>";
    style="filled";
    color=lightgray;
    node_453 [label="LOCALS\l0 = &str\l1 = &pinocchio_token_interface::error::TokenError\l2 = isize\l", style="filled", color=palegreen3];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_21 [label="0"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_20 [label="1"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_19 [label="2"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_18 [label="3"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_17 [label="4"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_16 [label="5"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_15 [label="6"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_14 [label="7"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_13 [label="8"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_12 [label="9"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_11 [label="10"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_10 [label="11"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_9 [label="12"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_8 [label="13"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_7 [label="14"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_6 [label="15"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_5 [label="16"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_4 [label="17"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_3 [label="18"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_2 [label="19"];
    X4c2fb00b98bd7925_0 -> X4c2fb00b98bd7925_1 [label="other"];
    X4c2fb00b98bd7925_0 [label="2 <- Discriminant((*1))\lSwitchInt mv(2)\l"];
    X4c2fb00b98bd7925_1 [label="Unreachable\l"];
    X4c2fb00b98bd7925_2 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_2 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_3 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_3 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_4 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_4 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_5 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_5 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_6 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_6 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_7 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_7 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_8 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_8 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_9 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_9 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_10 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_10 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_11 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_11 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_12 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_12 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_13 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_13 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_14 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_14 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_15 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_15 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_16 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_16 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_17 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_17 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_18 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_18 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_19 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_19 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_20 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_20 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_21 -> X4c2fb00b98bd7925_22;
    X4c2fb00b98bd7925_21 [label="0 <- Use(const &str)\lGoto\l"];
    X4c2fb00b98bd7925_22 [label="Return\l"];
  }
  subgraph cluster_454 {
    label="<core::str::pattern::Mult\niCharEqSearcher<'_, \n{closure@p-token/src/entr\nypoint.rs:1413:43: \n1413:52}> \nas \ncore::str::pattern::Searc\nher<'_>>::next";
    style="filled";
    color=lightgray;
    node_455 [label="LOCALS\l0 = core::str::pattern::SearchStep\l1 = &mut core::str::pattern::MultiCharEqSearcher<'_, {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}>\l2 = &mut core::str::CharIndices<'_>\l3 = usize\l4 = &core::slice::Iter<'_, u8>\l5 = core::option::Option<(usize, char)>\l6 = isize\l7 = usize\l8 = char\l9 = usize\l10 = &core::slice::Iter<'_, u8>\l11 = usize\l12 = bool\l13 = &mut {closure@p-token/src/entrypoint.rs:1413:43: 1413:52}\l14 = usize\l15 = usize\l", style="filled", color=palegreen3];
    X5aba2fb7a5ac2830_0 -> X5aba2fb7a5ac2830_1 [label="3"];
    X5aba2fb7a5ac2830_0 [label="2 <- &mut (*1).2\lStorage Live _4\l4 <- & (*2).1.0\lCall\l"];
    X5aba2fb7a5ac2830_1 -> X5aba2fb7a5ac2830_2 [label="5"];
    X5aba2fb7a5ac2830_1 [label="Storage Dead _4\lStorage Live _5\lCall\l"];
    X5aba2fb7a5ac2830_2 -> X5aba2fb7a5ac2830_3 [label="1"];
    X5aba2fb7a5ac2830_2 -> X5aba2fb7a5ac2830_8 [label="0"];
    X5aba2fb7a5ac2830_2 -> X5aba2fb7a5ac2830_11 [label="other"];
    X5aba2fb7a5ac2830_2 [label="6 <- Discriminant(5)\lSwitchInt mv(6)\l"];
    X5aba2fb7a5ac2830_3 -> X5aba2fb7a5ac2830_4 [label="9"];
    X5aba2fb7a5ac2830_3 [label="7 <- Use(cp((5 as variant 1).0.0))\l8 <- Use(cp((5 as variant 1).0.1))\lStorage Live _10\l10 <- & (*2).1.0\lCall\l"];
    X5aba2fb7a5ac2830_4 -> X5aba2fb7a5ac2830_5 [label="12"];
    X5aba2fb7a5ac2830_4 [label="Storage Dead _10\l11 <- Sub(cp(3), cp(9))\lStorage Live _12\lStorage Live _13\l13 <- &mut (*1).0\lCall\l"];
    X5aba2fb7a5ac2830_5 -> X5aba2fb7a5ac2830_7 [label="0"];
    X5aba2fb7a5ac2830_5 -> X5aba2fb7a5ac2830_6 [label="other"];
    X5aba2fb7a5ac2830_5 [label="SwitchInt mv(12)\l"];
    X5aba2fb7a5ac2830_6 -> X5aba2fb7a5ac2830_9;
    X5aba2fb7a5ac2830_6 [label="Storage Dead _13\lStorage Live _14\l14 <- Add(cp(7), cp(11))\l0 <- Adt{0} (cp(7), mv(14))\lStorage Dead _14\lGoto\l"];
    X5aba2fb7a5ac2830_7 -> X5aba2fb7a5ac2830_9;
    X5aba2fb7a5ac2830_7 [label="Storage Dead _13\lStorage Live _15\l15 <- Add(cp(7), cp(11))\l0 <- Adt{1} (cp(7), mv(15))\lStorage Dead _15\lGoto\l"];
    X5aba2fb7a5ac2830_8 -> X5aba2fb7a5ac2830_10;
    X5aba2fb7a5ac2830_8 [label="Storage Dead _5\l0 <- Adt{2} ()\lGoto\l"];
    X5aba2fb7a5ac2830_9 -> X5aba2fb7a5ac2830_10;
    X5aba2fb7a5ac2830_9 [label="Storage Dead _12\lStorage Dead _5\lGoto\l"];
    X5aba2fb7a5ac2830_10 [label="Return\l"];
    X5aba2fb7a5ac2830_11 [label="Unreachable\l"];
  }
  X5aba2fb7a5ac2830_0 -> Xd05a555747cd5aa8_0 [label="mv(4)"];
  X5aba2fb7a5ac2830_1 -> X97d148e109cc66b9_0 [label="cp(2)"];
  X5aba2fb7a5ac2830_3 -> Xd05a555747cd5aa8_0 [label="mv(10)"];
  X5aba2fb7a5ac2830_4 -> X70b3fb50cf0a2d20_0 [label="mv(13),mv(8)"];
  subgraph cluster_456 {
    label="<core::array::IntoIter<bo\nol, \n32> \nas \ncore::iter::Iterator>::fo\nld::<u8, \n{closure@core::iter::adap\nters::map::map_fold<bool,\n \nu8, \nu8, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}, \n{closure@<u8 \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::array:\n:IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}}>::{closure#\n0}}>";
    style="filled";
    color=lightgray;
    node_457 [label="LOCALS\l0 = u8\l1 = core::array::IntoIter<bool, 32>\l2 = u8\l3 = {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}\l4 = &mut [core::mem::MaybeUninit<bool>; 32]\l5 = core::iter::ByRefSized<'_, core::ops::index_range::IndexRange>\l6 = &mut core::ops::index_range::IndexRange\l7 = {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}\l8 = &mut {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}\l9 = &[core::mem::MaybeUninit<bool>; 32]\l10 = core::ops::try_trait::NeverShortCircuit<u8>\l11 = {closure@core::ops::try_trait::NeverShortCircuit<u8>::wrap_mut_2<u8, usize, {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}>::{closure#0}}\l", style="filled", color=palegreen3];
    X29cdd66a6d1e94_0 -> X29cdd66a6d1e94_3 [label="Cleanup"];
    X29cdd66a6d1e94_0 -> X29cdd66a6d1e94_6 [label="10"];
    X29cdd66a6d1e94_0 [label="Storage Live _4\l4 <- &mut 1.0\lStorage Live _5\l6 <- &mut 1.1\l5 <- Adt{0} (cp(6))\lStorage Live _7\lStorage Live _8\l8 <- &mut 3\lStorage Live _9\l9 <- & 1.0\l7 <- Closure (mv(8), mv(9))\lStorage Dead _9\lStorage Dead _8\lStorage Live _10\lStorage Live _11\l11 <- Closure (cp(7))\lCall\l"];
    X29cdd66a6d1e94_1 -> X29cdd66a6d1e94_2;
    X29cdd66a6d1e94_1 [label="Drop 1\l"];
    X29cdd66a6d1e94_2 [label="Return\l"];
    X29cdd66a6d1e94_3 -> X29cdd66a6d1e94_4;
    X29cdd66a6d1e94_3 [label="Drop 3\l"];
    X29cdd66a6d1e94_4 -> X29cdd66a6d1e94_5;
    X29cdd66a6d1e94_4 [label="Drop 1\l"];
    X29cdd66a6d1e94_5 [label="Resume\l"];
    X29cdd66a6d1e94_6 -> X29cdd66a6d1e94_4 [label="Cleanup"];
    X29cdd66a6d1e94_6 -> X29cdd66a6d1e94_1;
    X29cdd66a6d1e94_6 [label="Storage Dead _11\l0 <- Use(mv(10.0))\lStorage Dead _10\lStorage Dead _7\lStorage Dead _5\lStorage Dead _4\lDrop 3\l"];
  }
  X29cdd66a6d1e94_0 -> Xb464dde21e0c8607_0 [label="mv(6),mv(2),mv(11)"];
  subgraph cluster_458 {
    label="<core::array::IntoIter<bo\nol, \n32> \nas \ncore::iter::Iterator>::fo\nld::<u8, \n{closure@core::iter::adap\nters::map::map_fold<bool,\n \nu8, \nu8, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}, \n{closure@<u8 \nas \ncore::iter::Sum>::sum<cor\ne::iter::Map<core::array:\n:IntoIter<bool, \n32>, \n{closure@<core::str::Char\ns<'_> \nas \ncore::iter::Iterator>::ad\nvance_by::{closure#0}}>>:\n:{closure#0}}>::{closure#\n0}}>::{closure#0}";
    style="filled";
    color=lightgray;
    node_459 [label="LOCALS\l0 = u8\l1 = &mut {closure@<core::array::IntoIter<bool, 32> as core::iter::Iterator>::fold<u8, {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}>::{closure#0}}\l2 = u8\l3 = usize\l4 = (u8, bool)\l5 = bool\l6 = &[core::mem::MaybeUninit<bool>]\l7 = &mut {closure@core::iter::adapters::map::map_fold<bool, u8, u8, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}, {closure@<u8 as core::iter::Sum>::sum<core::iter::Map<core::array::IntoIter<bool, 32>, {closure@<core::str::Chars<'_> as core::iter::Iterator>::advance_by::{closure#0}}>>::{closure#0}}>::{closure#0}}\l8 = &[core::mem::MaybeUninit<bool>; 32]\l9 = *const core::mem::MaybeUninit<bool>\l10 = *const [core::mem::MaybeUninit<bool>]\l11 = bool\l12 = ()\l13 = bool\l14 = *const core::mem::MaybeUninit<bool>\l15 = ()\l16 = *const bool\l", style="filled", color=palegreen3];
    Xcc72308673f5c273_0 -> Xcc72308673f5c273_3 [label="0"];
    Xcc72308673f5c273_0 -> Xcc72308673f5c273_2 [label="other"];
    Xcc72308673f5c273_0 [label="7 <- Use(cp((*1).0))\lStorage Live _4\lStorage Live _5\l8 <- Use(cp((*1).1))\l6 <- Cast-PointerCoercion(Unsize) cp(8)\lStorage Live _10\l10 <- &raw (*6)\lStorage Live _11\l11 <- UbChecks :: bool\lSwitchInt mv(11)\l"];
    Xcc72308673f5c273_1 [label="Storage Dead _5\lStorage Dead _4\lReturn\l"];
    Xcc72308673f5c273_2 -> Xcc72308673f5c273_3 [label="12"];
    Xcc72308673f5c273_2 [label="Call\l"];
    Xcc72308673f5c273_3 -> Xcc72308673f5c273_4 [label="15"];
    Xcc72308673f5c273_3 [label="Storage Dead _11\lStorage Live _13\l13 <- Lt(cp(3), const ?_usize)\lIntr: Assume mv(13)\lStorage Dead _13\lStorage Live _14\l14 <- Cast-PtrToPtr cp(10)\l9 <- Offset(cp(14), cp(3))\lStorage Dead _14\lStorage Dead _10\lCall\l"];
    Xcc72308673f5c273_4 -> Xcc72308673f5c273_1 [label="0"];
    Xcc72308673f5c273_4 [label="Storage Live _16\l16 <- Cast-PtrToPtr cp(9)\l5 <- Use(cp((*16)))\lStorage Dead _16\l4 <- Tuple (mv(2), mv(5))\lCall\l"];
  }
  Xcc72308673f5c273_2 -> X69edc95c4972e1d8_0 [label="cp(3),const ?_usize"];
  Xcc72308673f5c273_3 -> X83c8e82412404978_0 [label=""];
  Xcc72308673f5c273_4 -> Xb73166558f92a8e2_0 [label="mv(7),mv(4)"];
  subgraph cluster_460 {
    label="pinocchio::entrypoint::de\nserialize::<254>";
    style="filled";
    color=lightgray;
    node_461 [label="LOCALS\l0 = (&[u8; 32], usize, &[u8])\l1 = *mut u8\l2 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l3 = usize\l4 = u64\l5 = *const u64\l6 = *mut u8\l7 = *mut u8\l8 = *mut u8\l9 = usize\l10 = bool\l11 = usize\l12 = *mut pinocchio::account_info::AccountInfo\l13 = *mut core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l14 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l15 = *mut pinocchio::account_info::AccountInfo\l16 = *mut pinocchio::account_info::Account\l17 = *mut u8\l18 = ()\l19 = *mut pinocchio::account_info::AccountInfo\l20 = pinocchio::account_info::AccountInfo\l21 = *mut u8\l22 = *mut u8\l23 = usize\l24 = usize\l25 = (usize, bool)\l26 = *mut u8\l27 = *mut u8\l28 = usize\l29 = u64\l30 = usize\l31 = usize\l32 = usize\l33 = *mut u8\l34 = usize\l35 = (usize, bool)\l36 = (usize, bool)\l37 = usize\l38 = usize\l39 = (usize, bool)\l40 = bool\l41 = usize\l42 = usize\l43 = bool\l44 = usize\l45 = usize\l46 = usize\l47 = usize\l48 = (usize, bool)\l49 = usize\l50 = usize\l51 = *mut pinocchio::account_info::AccountInfo\l52 = *mut pinocchio::account_info::AccountInfo\l53 = *mut pinocchio::account_info::Account\l54 = *mut u8\l55 = *mut u8\l56 = *mut u8\l57 = usize\l58 = bool\l59 = u8\l60 = ()\l61 = *mut pinocchio::account_info::AccountInfo\l62 = *const pinocchio::account_info::AccountInfo\l63 = u8\l64 = ()\l65 = *mut pinocchio::account_info::AccountInfo\l66 = pinocchio::account_info::AccountInfo\l67 = *mut u8\l68 = *mut u8\l69 = *mut u8\l70 = *mut u8\l71 = usize\l72 = u64\l73 = usize\l74 = usize\l75 = usize\l76 = *mut u8\l77 = usize\l78 = (usize, bool)\l79 = (usize, bool)\l80 = usize\l81 = usize\l82 = (usize, bool)\l83 = bool\l84 = usize\l85 = *mut pinocchio::account_info::AccountInfo\l86 = *mut pinocchio::account_info::AccountInfo\l87 = *mut pinocchio::account_info::Account\l88 = *mut u8\l89 = *mut u8\l90 = *mut u8\l91 = usize\l92 = bool\l93 = u8\l94 = ()\l95 = *mut pinocchio::account_info::AccountInfo\l96 = *const pinocchio::account_info::AccountInfo\l97 = u8\l98 = ()\l99 = *mut pinocchio::account_info::AccountInfo\l100 = pinocchio::account_info::AccountInfo\l101 = *mut u8\l102 = *mut u8\l103 = *mut u8\l104 = *mut u8\l105 = usize\l106 = u64\l107 = usize\l108 = usize\l109 = usize\l110 = *mut u8\l111 = usize\l112 = (usize, bool)\l113 = (usize, bool)\l114 = usize\l115 = usize\l116 = (usize, bool)\l117 = *mut pinocchio::account_info::AccountInfo\l118 = *mut pinocchio::account_info::AccountInfo\l119 = *mut pinocchio::account_info::Account\l120 = *mut u8\l121 = *mut u8\l122 = *mut u8\l123 = usize\l124 = bool\l125 = u8\l126 = ()\l127 = *mut pinocchio::account_info::AccountInfo\l128 = *const pinocchio::account_info::AccountInfo\l129 = u8\l130 = ()\l131 = *mut pinocchio::account_info::AccountInfo\l132 = pinocchio::account_info::AccountInfo\l133 = *mut u8\l134 = *mut u8\l135 = *mut u8\l136 = *mut u8\l137 = usize\l138 = u64\l139 = usize\l140 = usize\l141 = usize\l142 = *mut u8\l143 = usize\l144 = (usize, bool)\l145 = (usize, bool)\l146 = usize\l147 = usize\l148 = (usize, bool)\l149 = *mut pinocchio::account_info::AccountInfo\l150 = *mut pinocchio::account_info::AccountInfo\l151 = *mut pinocchio::account_info::Account\l152 = *mut u8\l153 = *mut u8\l154 = *mut u8\l155 = usize\l156 = bool\l157 = u8\l158 = ()\l159 = *mut pinocchio::account_info::AccountInfo\l160 = *const pinocchio::account_info::AccountInfo\l161 = u8\l162 = ()\l163 = *mut pinocchio::account_info::AccountInfo\l164 = pinocchio::account_info::AccountInfo\l165 = *mut u8\l166 = *mut u8\l167 = *mut u8\l168 = *mut u8\l169 = usize\l170 = u64\l171 = usize\l172 = usize\l173 = usize\l174 = *mut u8\l175 = usize\l176 = (usize, bool)\l177 = (usize, bool)\l178 = usize\l179 = usize\l180 = (usize, bool)\l181 = *mut pinocchio::account_info::AccountInfo\l182 = *mut pinocchio::account_info::AccountInfo\l183 = *mut pinocchio::account_info::Account\l184 = *mut u8\l185 = *mut u8\l186 = *mut u8\l187 = usize\l188 = bool\l189 = u8\l190 = ()\l191 = *mut pinocchio::account_info::AccountInfo\l192 = *const pinocchio::account_info::AccountInfo\l193 = u8\l194 = ()\l195 = *mut pinocchio::account_info::AccountInfo\l196 = pinocchio::account_info::AccountInfo\l197 = *mut u8\l198 = *mut u8\l199 = *mut u8\l200 = *mut u8\l201 = usize\l202 = u64\l203 = usize\l204 = usize\l205 = usize\l206 = *mut u8\l207 = usize\l208 = (usize, bool)\l209 = (usize, bool)\l210 = usize\l211 = usize\l212 = (usize, bool)\l213 = *mut pinocchio::account_info::AccountInfo\l214 = *mut pinocchio::account_info::AccountInfo\l215 = *mut pinocchio::account_info::Account\l216 = *mut u8\l217 = *mut u8\l218 = *mut u8\l219 = usize\l220 = bool\l221 = u8\l222 = ()\l223 = *mut pinocchio::account_info::AccountInfo\l224 = *const pinocchio::account_info::AccountInfo\l225 = u8\l226 = ()\l227 = *mut pinocchio::account_info::AccountInfo\l228 = pinocchio::account_info::AccountInfo\l229 = *mut u8\l230 = *mut u8\l231 = *mut u8\l232 = *mut u8\l233 = usize\l234 = u64\l235 = usize\l236 = usize\l237 = usize\l238 = *mut u8\l239 = usize\l240 = (usize, bool)\l241 = (usize, bool)\l242 = usize\l243 = usize\l244 = (usize, bool)\l245 = (usize, bool)\l246 = *mut pinocchio::account_info::AccountInfo\l247 = *mut pinocchio::account_info::AccountInfo\l248 = *mut pinocchio::account_info::Account\l249 = *mut u8\l250 = *mut u8\l251 = *mut u8\l252 = usize\l253 = bool\l254 = u8\l255 = ()\l256 = *mut pinocchio::account_info::AccountInfo\l257 = *const pinocchio::account_info::AccountInfo\l258 = u8\l259 = ()\l260 = *mut pinocchio::account_info::AccountInfo\l261 = pinocchio::account_info::AccountInfo\l262 = *mut u8\l263 = *mut u8\l264 = *mut u8\l265 = *mut u8\l266 = usize\l267 = u64\l268 = usize\l269 = usize\l270 = usize\l271 = *mut u8\l272 = usize\l273 = (usize, bool)\l274 = (usize, bool)\l275 = usize\l276 = usize\l277 = (usize, bool)\l278 = *mut pinocchio::account_info::AccountInfo\l279 = *mut pinocchio::account_info::AccountInfo\l280 = *mut pinocchio::account_info::Account\l281 = *mut u8\l282 = *mut u8\l283 = *mut u8\l284 = usize\l285 = bool\l286 = u8\l287 = ()\l288 = *mut pinocchio::account_info::AccountInfo\l289 = *const pinocchio::account_info::AccountInfo\l290 = u8\l291 = ()\l292 = *mut pinocchio::account_info::AccountInfo\l293 = pinocchio::account_info::AccountInfo\l294 = *mut u8\l295 = *mut u8\l296 = *mut u8\l297 = *mut u8\l298 = usize\l299 = u64\l300 = usize\l301 = usize\l302 = usize\l303 = *mut u8\l304 = usize\l305 = (usize, bool)\l306 = (usize, bool)\l307 = usize\l308 = usize\l309 = (usize, bool)\l310 = *mut pinocchio::account_info::AccountInfo\l311 = *mut pinocchio::account_info::AccountInfo\l312 = *mut pinocchio::account_info::Account\l313 = *mut u8\l314 = *mut u8\l315 = *mut u8\l316 = usize\l317 = bool\l318 = u8\l319 = ()\l320 = *mut pinocchio::account_info::AccountInfo\l321 = *const pinocchio::account_info::AccountInfo\l322 = u8\l323 = ()\l324 = *mut pinocchio::account_info::AccountInfo\l325 = pinocchio::account_info::AccountInfo\l326 = *mut u8\l327 = *mut u8\l328 = *mut u8\l329 = *mut u8\l330 = usize\l331 = u64\l332 = usize\l333 = usize\l334 = usize\l335 = *mut u8\l336 = usize\l337 = (usize, bool)\l338 = (usize, bool)\l339 = usize\l340 = usize\l341 = (usize, bool)\l342 = *mut pinocchio::account_info::AccountInfo\l343 = *mut pinocchio::account_info::AccountInfo\l344 = *mut pinocchio::account_info::Account\l345 = *mut u8\l346 = *mut u8\l347 = *mut u8\l348 = usize\l349 = bool\l350 = u8\l351 = ()\l352 = *mut pinocchio::account_info::AccountInfo\l353 = *const pinocchio::account_info::AccountInfo\l354 = u8\l355 = ()\l356 = *mut pinocchio::account_info::AccountInfo\l357 = pinocchio::account_info::AccountInfo\l358 = *mut u8\l359 = *mut u8\l360 = *mut u8\l361 = *mut u8\l362 = usize\l363 = u64\l364 = usize\l365 = usize\l366 = usize\l367 = *mut u8\l368 = usize\l369 = (usize, bool)\l370 = (usize, bool)\l371 = usize\l372 = usize\l373 = (usize, bool)\l374 = *mut pinocchio::account_info::AccountInfo\l375 = *mut pinocchio::account_info::AccountInfo\l376 = *mut pinocchio::account_info::Account\l377 = *mut u8\l378 = *mut u8\l379 = *mut u8\l380 = usize\l381 = bool\l382 = u8\l383 = ()\l384 = *mut pinocchio::account_info::AccountInfo\l385 = *const pinocchio::account_info::AccountInfo\l386 = u8\l387 = ()\l388 = *mut pinocchio::account_info::AccountInfo\l389 = pinocchio::account_info::AccountInfo\l390 = *mut u8\l391 = *mut u8\l392 = *mut u8\l393 = *mut u8\l394 = usize\l395 = u64\l396 = usize\l397 = usize\l398 = usize\l399 = *mut u8\l400 = usize\l401 = (usize, bool)\l402 = (usize, bool)\l403 = usize\l404 = usize\l405 = (usize, bool)\l406 = *mut pinocchio::account_info::AccountInfo\l407 = *mut pinocchio::account_info::AccountInfo\l408 = *mut pinocchio::account_info::Account\l409 = *mut u8\l410 = *mut u8\l411 = *mut u8\l412 = usize\l413 = bool\l414 = u8\l415 = ()\l416 = *mut pinocchio::account_info::AccountInfo\l417 = *const pinocchio::account_info::AccountInfo\l418 = u8\l419 = ()\l420 = *mut pinocchio::account_info::AccountInfo\l421 = pinocchio::account_info::AccountInfo\l422 = *mut u8\l423 = *mut u8\l424 = *mut u8\l425 = *mut u8\l426 = usize\l427 = u64\l428 = usize\l429 = usize\l430 = usize\l431 = *mut u8\l432 = usize\l433 = (usize, bool)\l434 = (usize, bool)\l435 = usize\l436 = usize\l437 = (usize, bool)\l438 = *mut pinocchio::account_info::AccountInfo\l439 = *mut pinocchio::account_info::AccountInfo\l440 = *mut pinocchio::account_info::Account\l441 = *mut u8\l442 = *mut u8\l443 = *mut u8\l444 = usize\l445 = bool\l446 = u8\l447 = ()\l448 = *mut pinocchio::account_info::AccountInfo\l449 = *const pinocchio::account_info::AccountInfo\l450 = u8\l451 = ()\l452 = *mut pinocchio::account_info::AccountInfo\l453 = pinocchio::account_info::AccountInfo\l454 = *mut u8\l455 = *mut u8\l456 = *mut u8\l457 = *mut u8\l458 = usize\l459 = u64\l460 = usize\l461 = usize\l462 = usize\l463 = *mut u8\l464 = usize\l465 = (usize, bool)\l466 = (usize, bool)\l467 = usize\l468 = usize\l469 = (usize, bool)\l470 = *mut pinocchio::account_info::AccountInfo\l471 = *mut pinocchio::account_info::AccountInfo\l472 = *mut pinocchio::account_info::Account\l473 = *mut u8\l474 = *mut u8\l475 = *mut u8\l476 = usize\l477 = bool\l478 = u8\l479 = ()\l480 = *mut pinocchio::account_info::AccountInfo\l481 = *const pinocchio::account_info::AccountInfo\l482 = u8\l483 = ()\l484 = *mut pinocchio::account_info::AccountInfo\l485 = pinocchio::account_info::AccountInfo\l486 = *mut u8\l487 = *mut u8\l488 = *mut u8\l489 = *mut u8\l490 = usize\l491 = u64\l492 = usize\l493 = usize\l494 = usize\l495 = *mut u8\l496 = usize\l497 = (usize, bool)\l498 = (usize, bool)\l499 = usize\l500 = usize\l501 = (usize, bool)\l502 = *mut pinocchio::account_info::AccountInfo\l503 = *mut pinocchio::account_info::AccountInfo\l504 = *mut pinocchio::account_info::Account\l505 = *mut u8\l506 = *mut u8\l507 = *mut u8\l508 = usize\l509 = bool\l510 = u8\l511 = ()\l512 = *mut pinocchio::account_info::AccountInfo\l513 = *const pinocchio::account_info::AccountInfo\l514 = u8\l515 = ()\l516 = *mut pinocchio::account_info::AccountInfo\l517 = pinocchio::account_info::AccountInfo\l518 = *mut u8\l519 = *mut u8\l520 = *mut u8\l521 = *mut u8\l522 = usize\l523 = u64\l524 = usize\l525 = usize\l526 = usize\l527 = *mut u8\l528 = usize\l529 = (usize, bool)\l530 = (usize, bool)\l531 = usize\l532 = usize\l533 = (usize, bool)\l534 = *mut pinocchio::account_info::AccountInfo\l535 = *mut pinocchio::account_info::AccountInfo\l536 = *mut pinocchio::account_info::Account\l537 = *mut u8\l538 = *mut u8\l539 = *mut u8\l540 = usize\l541 = bool\l542 = u8\l543 = ()\l544 = *mut pinocchio::account_info::AccountInfo\l545 = *const pinocchio::account_info::AccountInfo\l546 = u8\l547 = ()\l548 = *mut pinocchio::account_info::AccountInfo\l549 = pinocchio::account_info::AccountInfo\l550 = *mut u8\l551 = *mut u8\l552 = *mut u8\l553 = *mut u8\l554 = usize\l555 = u64\l556 = usize\l557 = usize\l558 = usize\l559 = *mut u8\l560 = usize\l561 = (usize, bool)\l562 = (usize, bool)\l563 = usize\l564 = usize\l565 = (usize, bool)\l566 = !\l567 = bool\l568 = bool\l569 = usize\l570 = (usize, bool)\l571 = *mut pinocchio::account_info::Account\l572 = *mut u8\l573 = *mut u8\l574 = *mut u8\l575 = usize\l576 = bool\l577 = u8\l578 = *mut u8\l579 = *mut u8\l580 = *mut u8\l581 = *mut u8\l582 = usize\l583 = u64\l584 = usize\l585 = usize\l586 = usize\l587 = *mut u8\l588 = usize\l589 = (usize, bool)\l590 = (usize, bool)\l591 = usize\l592 = usize\l593 = (usize, bool)\l594 = usize\l595 = u64\l596 = *const u64\l597 = *mut u8\l598 = *mut u8\l599 = *mut u8\l600 = usize\l601 = &[u8]\l602 = *const u8\l603 = *mut u8\l604 = *mut u8\l605 = *mut u8\l606 = &[u8; 32]\l607 = *const [u8; 32]\l608 = usize\l", style="filled", color=palegreen3];
    X1d843d9d8698d3c4_0 -> X1d843d9d8698d3c4_1 [label="9"];
    X1d843d9d8698d3c4_0 [label="6 <- Use(cp(1))\l5 <- Cast-PtrToPtr mv(6)\l4 <- Use(cp((*5)))\l3 <- Cast-IntToInt mv(4)\l8 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_1 -> X1d843d9d8698d3c4_2 [label="7"];
    X1d843d9d8698d3c4_1 [label="Call\l"];
    X1d843d9d8698d3c4_2 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_2 -> X1d843d9d8698d3c4_3 [label="other"];
    X1d843d9d8698d3c4_2 [label="1 <- Use(mv(7))\l11 <- Use(cp(3))\l10 <- Gt(mv(11), const ?_usize)\lSwitchInt mv(10)\l"];
    X1d843d9d8698d3c4_3 -> X1d843d9d8698d3c4_4 [label="13"];
    X1d843d9d8698d3c4_3 [label="14 <- Cast-PointerCoercion(Unsize) cp(2)\lCall\l"];
    X1d843d9d8698d3c4_4 -> X1d843d9d8698d3c4_5 [label="18"];
    X1d843d9d8698d3c4_4 [label="12 <- Cast-PtrToPtr mv(13)\l15 <- Use(cp(12))\l17 <- Use(cp(1))\l16 <- Cast-PtrToPtr mv(17)\l19 <- Use(cp(12))\l20 <- Adt{0} (cp(16))\lCall\l"];
    X1d843d9d8698d3c4_5 -> X1d843d9d8698d3c4_6 [label="24"];
    X1d843d9d8698d3c4_5 [label="22 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_6 -> X1d843d9d8698d3c4_7;
    X1d843d9d8698d3c4_6 [label="25 <- chkd-Add(const ?_usize, cp(24))\lAssert mv(25.1) == false\l"];
    X1d843d9d8698d3c4_7 -> X1d843d9d8698d3c4_8 [label="21"];
    X1d843d9d8698d3c4_7 [label="23 <- Use(mv(25.0))\lCall\l"];
    X1d843d9d8698d3c4_8 -> X1d843d9d8698d3c4_9 [label="26"];
    X1d843d9d8698d3c4_8 [label="1 <- Use(mv(21))\l27 <- Use(cp(1))\l29 <- Use(cp((*16).8))\l28 <- Cast-IntToInt mv(29)\lCall\l"];
    X1d843d9d8698d3c4_9 -> X1d843d9d8698d3c4_10;
    X1d843d9d8698d3c4_9 [label="1 <- Use(mv(26))\l33 <- Use(cp(1))\l32 <- Cast-PointerExposeAddress mv(33)\l35 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(35.1) == false\l"];
    X1d843d9d8698d3c4_10 -> X1d843d9d8698d3c4_11;
    X1d843d9d8698d3c4_10 [label="34 <- Use(mv(35.0))\l36 <- chkd-Add(cp(32), cp(34))\lAssert mv(36.1) == false\l"];
    X1d843d9d8698d3c4_11 -> X1d843d9d8698d3c4_12;
    X1d843d9d8698d3c4_11 [label="31 <- Use(mv(36.0))\l39 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(39.1) == false\l"];
    X1d843d9d8698d3c4_12 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_12 -> X1d843d9d8698d3c4_13 [label="other"];
    X1d843d9d8698d3c4_12 [label="38 <- Use(mv(39.0))\l37 <- Not(mv(38))\l30 <- BitAnd(mv(31), mv(37))\l1 <- Cast-PointerWithExposedProvenance mv(30)\l41 <- Use(cp(3))\l40 <- Gt(mv(41), const ?_usize)\lSwitchInt mv(40)\l"];
    X1d843d9d8698d3c4_13 -> X1d843d9d8698d3c4_15 [label="0"];
    X1d843d9d8698d3c4_13 -> X1d843d9d8698d3c4_14 [label="other"];
    X1d843d9d8698d3c4_13 [label="43 <- Lt(const ?_usize, const ?_usize)\lSwitchInt mv(43)\l"];
    X1d843d9d8698d3c4_14 -> X1d843d9d8698d3c4_16 [label="42"];
    X1d843d9d8698d3c4_14 [label="44 <- Use(cp(3))\lCall\l"];
    X1d843d9d8698d3c4_15 -> X1d843d9d8698d3c4_16;
    X1d843d9d8698d3c4_15 [label="42 <- Use(cp(3))\lGoto\l"];
    X1d843d9d8698d3c4_16 -> X1d843d9d8698d3c4_17;
    X1d843d9d8698d3c4_16 [label="46 <- Use(cp(3))\l47 <- Use(cp(42))\l48 <- chkd-Sub(cp(46), cp(47))\lAssert mv(48.1) == false\l"];
    X1d843d9d8698d3c4_17 -> X1d843d9d8698d3c4_18 [label="2"];
    X1d843d9d8698d3c4_17 -> X1d843d9d8698d3c4_30 [label="other"];
    X1d843d9d8698d3c4_17 [label="45 <- Use(mv(48.0))\l49 <- Use(cp(42))\l3 <- Use(mv(49))\l50 <- Use(cp(42))\lSwitchInt mv(50)\l"];
    X1d843d9d8698d3c4_18 -> X1d843d9d8698d3c4_19 [label="51"];
    X1d843d9d8698d3c4_18 [label="52 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_19 -> X1d843d9d8698d3c4_20 [label="57"];
    X1d843d9d8698d3c4_19 [label="12 <- Use(mv(51))\l54 <- Use(cp(1))\l53 <- Cast-PtrToPtr mv(54)\l56 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_20 -> X1d843d9d8698d3c4_21 [label="55"];
    X1d843d9d8698d3c4_20 [label="Call\l"];
    X1d843d9d8698d3c4_21 -> X1d843d9d8698d3c4_23 [label="0"];
    X1d843d9d8698d3c4_21 -> X1d843d9d8698d3c4_22 [label="other"];
    X1d843d9d8698d3c4_21 [label="1 <- Use(mv(55))\l59 <- Use(cp((*53).0))\l58 <- Ne(mv(59), const ?_u8)\lSwitchInt mv(58)\l"];
    X1d843d9d8698d3c4_22 -> X1d843d9d8698d3c4_215 [label="60"];
    X1d843d9d8698d3c4_22 [label="61 <- Use(cp(12))\l62 <- Cast-PtrToPtr cp(15)\l63 <- Use(cp((*53).0))\lCall\l"];
    X1d843d9d8698d3c4_23 -> X1d843d9d8698d3c4_24 [label="64"];
    X1d843d9d8698d3c4_23 [label="65 <- Use(cp(12))\l66 <- Adt{0} (cp(53))\lCall\l"];
    X1d843d9d8698d3c4_24 -> X1d843d9d8698d3c4_25 [label="67"];
    X1d843d9d8698d3c4_24 [label="68 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_25 -> X1d843d9d8698d3c4_26 [label="69"];
    X1d843d9d8698d3c4_25 [label="1 <- Use(mv(67))\l70 <- Use(cp(1))\l72 <- Use(cp((*53).8))\l71 <- Cast-IntToInt mv(72)\lCall\l"];
    X1d843d9d8698d3c4_26 -> X1d843d9d8698d3c4_27;
    X1d843d9d8698d3c4_26 [label="1 <- Use(mv(69))\l76 <- Use(cp(1))\l75 <- Cast-PointerExposeAddress mv(76)\l78 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(78.1) == false\l"];
    X1d843d9d8698d3c4_27 -> X1d843d9d8698d3c4_28;
    X1d843d9d8698d3c4_27 [label="77 <- Use(mv(78.0))\l79 <- chkd-Add(cp(75), cp(77))\lAssert mv(79.1) == false\l"];
    X1d843d9d8698d3c4_28 -> X1d843d9d8698d3c4_29;
    X1d843d9d8698d3c4_28 [label="74 <- Use(mv(79.0))\l82 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(82.1) == false\l"];
    X1d843d9d8698d3c4_29 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_29 [label="81 <- Use(mv(82.0))\l80 <- Not(mv(81))\l73 <- BitAnd(mv(74), mv(80))\l1 <- Cast-PointerWithExposedProvenance mv(73)\lGoto\l"];
    X1d843d9d8698d3c4_30 -> X1d843d9d8698d3c4_93 [label="0"];
    X1d843d9d8698d3c4_30 -> X1d843d9d8698d3c4_31 [label="other"];
    X1d843d9d8698d3c4_30 [label="84 <- Use(cp(42))\l83 <- Gt(mv(84), const ?_usize)\lSwitchInt mv(83)\l"];
    X1d843d9d8698d3c4_31 -> X1d843d9d8698d3c4_32 [label="85"];
    X1d843d9d8698d3c4_31 [label="86 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_32 -> X1d843d9d8698d3c4_33 [label="91"];
    X1d843d9d8698d3c4_32 [label="12 <- Use(mv(85))\l88 <- Use(cp(1))\l87 <- Cast-PtrToPtr mv(88)\l90 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_33 -> X1d843d9d8698d3c4_34 [label="89"];
    X1d843d9d8698d3c4_33 [label="Call\l"];
    X1d843d9d8698d3c4_34 -> X1d843d9d8698d3c4_36 [label="0"];
    X1d843d9d8698d3c4_34 -> X1d843d9d8698d3c4_35 [label="other"];
    X1d843d9d8698d3c4_34 [label="1 <- Use(mv(89))\l93 <- Use(cp((*87).0))\l92 <- Ne(mv(93), const ?_u8)\lSwitchInt mv(92)\l"];
    X1d843d9d8698d3c4_35 -> X1d843d9d8698d3c4_43 [label="94"];
    X1d843d9d8698d3c4_35 [label="95 <- Use(cp(12))\l96 <- Cast-PtrToPtr cp(15)\l97 <- Use(cp((*87).0))\lCall\l"];
    X1d843d9d8698d3c4_36 -> X1d843d9d8698d3c4_37 [label="98"];
    X1d843d9d8698d3c4_36 [label="99 <- Use(cp(12))\l100 <- Adt{0} (cp(87))\lCall\l"];
    X1d843d9d8698d3c4_37 -> X1d843d9d8698d3c4_38 [label="101"];
    X1d843d9d8698d3c4_37 [label="102 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_38 -> X1d843d9d8698d3c4_39 [label="103"];
    X1d843d9d8698d3c4_38 [label="1 <- Use(mv(101))\l104 <- Use(cp(1))\l106 <- Use(cp((*87).8))\l105 <- Cast-IntToInt mv(106)\lCall\l"];
    X1d843d9d8698d3c4_39 -> X1d843d9d8698d3c4_40;
    X1d843d9d8698d3c4_39 [label="1 <- Use(mv(103))\l110 <- Use(cp(1))\l109 <- Cast-PointerExposeAddress mv(110)\l112 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(112.1) == false\l"];
    X1d843d9d8698d3c4_40 -> X1d843d9d8698d3c4_41;
    X1d843d9d8698d3c4_40 [label="111 <- Use(mv(112.0))\l113 <- chkd-Add(cp(109), cp(111))\lAssert mv(113.1) == false\l"];
    X1d843d9d8698d3c4_41 -> X1d843d9d8698d3c4_42;
    X1d843d9d8698d3c4_41 [label="108 <- Use(mv(113.0))\l116 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(116.1) == false\l"];
    X1d843d9d8698d3c4_42 -> X1d843d9d8698d3c4_43;
    X1d843d9d8698d3c4_42 [label="115 <- Use(mv(116.0))\l114 <- Not(mv(115))\l107 <- BitAnd(mv(108), mv(114))\l1 <- Cast-PointerWithExposedProvenance mv(107)\lGoto\l"];
    X1d843d9d8698d3c4_43 -> X1d843d9d8698d3c4_44 [label="117"];
    X1d843d9d8698d3c4_43 [label="118 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_44 -> X1d843d9d8698d3c4_45 [label="123"];
    X1d843d9d8698d3c4_44 [label="12 <- Use(mv(117))\l120 <- Use(cp(1))\l119 <- Cast-PtrToPtr mv(120)\l122 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_45 -> X1d843d9d8698d3c4_46 [label="121"];
    X1d843d9d8698d3c4_45 [label="Call\l"];
    X1d843d9d8698d3c4_46 -> X1d843d9d8698d3c4_48 [label="0"];
    X1d843d9d8698d3c4_46 -> X1d843d9d8698d3c4_47 [label="other"];
    X1d843d9d8698d3c4_46 [label="1 <- Use(mv(121))\l125 <- Use(cp((*119).0))\l124 <- Ne(mv(125), const ?_u8)\lSwitchInt mv(124)\l"];
    X1d843d9d8698d3c4_47 -> X1d843d9d8698d3c4_55 [label="126"];
    X1d843d9d8698d3c4_47 [label="127 <- Use(cp(12))\l128 <- Cast-PtrToPtr cp(15)\l129 <- Use(cp((*119).0))\lCall\l"];
    X1d843d9d8698d3c4_48 -> X1d843d9d8698d3c4_49 [label="130"];
    X1d843d9d8698d3c4_48 [label="131 <- Use(cp(12))\l132 <- Adt{0} (cp(119))\lCall\l"];
    X1d843d9d8698d3c4_49 -> X1d843d9d8698d3c4_50 [label="133"];
    X1d843d9d8698d3c4_49 [label="134 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_50 -> X1d843d9d8698d3c4_51 [label="135"];
    X1d843d9d8698d3c4_50 [label="1 <- Use(mv(133))\l136 <- Use(cp(1))\l138 <- Use(cp((*119).8))\l137 <- Cast-IntToInt mv(138)\lCall\l"];
    X1d843d9d8698d3c4_51 -> X1d843d9d8698d3c4_52;
    X1d843d9d8698d3c4_51 [label="1 <- Use(mv(135))\l142 <- Use(cp(1))\l141 <- Cast-PointerExposeAddress mv(142)\l144 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(144.1) == false\l"];
    X1d843d9d8698d3c4_52 -> X1d843d9d8698d3c4_53;
    X1d843d9d8698d3c4_52 [label="143 <- Use(mv(144.0))\l145 <- chkd-Add(cp(141), cp(143))\lAssert mv(145.1) == false\l"];
    X1d843d9d8698d3c4_53 -> X1d843d9d8698d3c4_54;
    X1d843d9d8698d3c4_53 [label="140 <- Use(mv(145.0))\l148 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(148.1) == false\l"];
    X1d843d9d8698d3c4_54 -> X1d843d9d8698d3c4_55;
    X1d843d9d8698d3c4_54 [label="147 <- Use(mv(148.0))\l146 <- Not(mv(147))\l139 <- BitAnd(mv(140), mv(146))\l1 <- Cast-PointerWithExposedProvenance mv(139)\lGoto\l"];
    X1d843d9d8698d3c4_55 -> X1d843d9d8698d3c4_56 [label="149"];
    X1d843d9d8698d3c4_55 [label="150 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_56 -> X1d843d9d8698d3c4_57 [label="155"];
    X1d843d9d8698d3c4_56 [label="12 <- Use(mv(149))\l152 <- Use(cp(1))\l151 <- Cast-PtrToPtr mv(152)\l154 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_57 -> X1d843d9d8698d3c4_58 [label="153"];
    X1d843d9d8698d3c4_57 [label="Call\l"];
    X1d843d9d8698d3c4_58 -> X1d843d9d8698d3c4_60 [label="0"];
    X1d843d9d8698d3c4_58 -> X1d843d9d8698d3c4_59 [label="other"];
    X1d843d9d8698d3c4_58 [label="1 <- Use(mv(153))\l157 <- Use(cp((*151).0))\l156 <- Ne(mv(157), const ?_u8)\lSwitchInt mv(156)\l"];
    X1d843d9d8698d3c4_59 -> X1d843d9d8698d3c4_67 [label="158"];
    X1d843d9d8698d3c4_59 [label="159 <- Use(cp(12))\l160 <- Cast-PtrToPtr cp(15)\l161 <- Use(cp((*151).0))\lCall\l"];
    X1d843d9d8698d3c4_60 -> X1d843d9d8698d3c4_61 [label="162"];
    X1d843d9d8698d3c4_60 [label="163 <- Use(cp(12))\l164 <- Adt{0} (cp(151))\lCall\l"];
    X1d843d9d8698d3c4_61 -> X1d843d9d8698d3c4_62 [label="165"];
    X1d843d9d8698d3c4_61 [label="166 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_62 -> X1d843d9d8698d3c4_63 [label="167"];
    X1d843d9d8698d3c4_62 [label="1 <- Use(mv(165))\l168 <- Use(cp(1))\l170 <- Use(cp((*151).8))\l169 <- Cast-IntToInt mv(170)\lCall\l"];
    X1d843d9d8698d3c4_63 -> X1d843d9d8698d3c4_64;
    X1d843d9d8698d3c4_63 [label="1 <- Use(mv(167))\l174 <- Use(cp(1))\l173 <- Cast-PointerExposeAddress mv(174)\l176 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(176.1) == false\l"];
    X1d843d9d8698d3c4_64 -> X1d843d9d8698d3c4_65;
    X1d843d9d8698d3c4_64 [label="175 <- Use(mv(176.0))\l177 <- chkd-Add(cp(173), cp(175))\lAssert mv(177.1) == false\l"];
    X1d843d9d8698d3c4_65 -> X1d843d9d8698d3c4_66;
    X1d843d9d8698d3c4_65 [label="172 <- Use(mv(177.0))\l180 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(180.1) == false\l"];
    X1d843d9d8698d3c4_66 -> X1d843d9d8698d3c4_67;
    X1d843d9d8698d3c4_66 [label="179 <- Use(mv(180.0))\l178 <- Not(mv(179))\l171 <- BitAnd(mv(172), mv(178))\l1 <- Cast-PointerWithExposedProvenance mv(171)\lGoto\l"];
    X1d843d9d8698d3c4_67 -> X1d843d9d8698d3c4_68 [label="181"];
    X1d843d9d8698d3c4_67 [label="182 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_68 -> X1d843d9d8698d3c4_69 [label="187"];
    X1d843d9d8698d3c4_68 [label="12 <- Use(mv(181))\l184 <- Use(cp(1))\l183 <- Cast-PtrToPtr mv(184)\l186 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_69 -> X1d843d9d8698d3c4_70 [label="185"];
    X1d843d9d8698d3c4_69 [label="Call\l"];
    X1d843d9d8698d3c4_70 -> X1d843d9d8698d3c4_72 [label="0"];
    X1d843d9d8698d3c4_70 -> X1d843d9d8698d3c4_71 [label="other"];
    X1d843d9d8698d3c4_70 [label="1 <- Use(mv(185))\l189 <- Use(cp((*183).0))\l188 <- Ne(mv(189), const ?_u8)\lSwitchInt mv(188)\l"];
    X1d843d9d8698d3c4_71 -> X1d843d9d8698d3c4_79 [label="190"];
    X1d843d9d8698d3c4_71 [label="191 <- Use(cp(12))\l192 <- Cast-PtrToPtr cp(15)\l193 <- Use(cp((*183).0))\lCall\l"];
    X1d843d9d8698d3c4_72 -> X1d843d9d8698d3c4_73 [label="194"];
    X1d843d9d8698d3c4_72 [label="195 <- Use(cp(12))\l196 <- Adt{0} (cp(183))\lCall\l"];
    X1d843d9d8698d3c4_73 -> X1d843d9d8698d3c4_74 [label="197"];
    X1d843d9d8698d3c4_73 [label="198 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_74 -> X1d843d9d8698d3c4_75 [label="199"];
    X1d843d9d8698d3c4_74 [label="1 <- Use(mv(197))\l200 <- Use(cp(1))\l202 <- Use(cp((*183).8))\l201 <- Cast-IntToInt mv(202)\lCall\l"];
    X1d843d9d8698d3c4_75 -> X1d843d9d8698d3c4_76;
    X1d843d9d8698d3c4_75 [label="1 <- Use(mv(199))\l206 <- Use(cp(1))\l205 <- Cast-PointerExposeAddress mv(206)\l208 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(208.1) == false\l"];
    X1d843d9d8698d3c4_76 -> X1d843d9d8698d3c4_77;
    X1d843d9d8698d3c4_76 [label="207 <- Use(mv(208.0))\l209 <- chkd-Add(cp(205), cp(207))\lAssert mv(209.1) == false\l"];
    X1d843d9d8698d3c4_77 -> X1d843d9d8698d3c4_78;
    X1d843d9d8698d3c4_77 [label="204 <- Use(mv(209.0))\l212 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(212.1) == false\l"];
    X1d843d9d8698d3c4_78 -> X1d843d9d8698d3c4_79;
    X1d843d9d8698d3c4_78 [label="211 <- Use(mv(212.0))\l210 <- Not(mv(211))\l203 <- BitAnd(mv(204), mv(210))\l1 <- Cast-PointerWithExposedProvenance mv(203)\lGoto\l"];
    X1d843d9d8698d3c4_79 -> X1d843d9d8698d3c4_80 [label="213"];
    X1d843d9d8698d3c4_79 [label="214 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_80 -> X1d843d9d8698d3c4_81 [label="219"];
    X1d843d9d8698d3c4_80 [label="12 <- Use(mv(213))\l216 <- Use(cp(1))\l215 <- Cast-PtrToPtr mv(216)\l218 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_81 -> X1d843d9d8698d3c4_82 [label="217"];
    X1d843d9d8698d3c4_81 [label="Call\l"];
    X1d843d9d8698d3c4_82 -> X1d843d9d8698d3c4_84 [label="0"];
    X1d843d9d8698d3c4_82 -> X1d843d9d8698d3c4_83 [label="other"];
    X1d843d9d8698d3c4_82 [label="1 <- Use(mv(217))\l221 <- Use(cp((*215).0))\l220 <- Ne(mv(221), const ?_u8)\lSwitchInt mv(220)\l"];
    X1d843d9d8698d3c4_83 -> X1d843d9d8698d3c4_91 [label="222"];
    X1d843d9d8698d3c4_83 [label="223 <- Use(cp(12))\l224 <- Cast-PtrToPtr cp(15)\l225 <- Use(cp((*215).0))\lCall\l"];
    X1d843d9d8698d3c4_84 -> X1d843d9d8698d3c4_85 [label="226"];
    X1d843d9d8698d3c4_84 [label="227 <- Use(cp(12))\l228 <- Adt{0} (cp(215))\lCall\l"];
    X1d843d9d8698d3c4_85 -> X1d843d9d8698d3c4_86 [label="229"];
    X1d843d9d8698d3c4_85 [label="230 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_86 -> X1d843d9d8698d3c4_87 [label="231"];
    X1d843d9d8698d3c4_86 [label="1 <- Use(mv(229))\l232 <- Use(cp(1))\l234 <- Use(cp((*215).8))\l233 <- Cast-IntToInt mv(234)\lCall\l"];
    X1d843d9d8698d3c4_87 -> X1d843d9d8698d3c4_88;
    X1d843d9d8698d3c4_87 [label="1 <- Use(mv(231))\l238 <- Use(cp(1))\l237 <- Cast-PointerExposeAddress mv(238)\l240 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(240.1) == false\l"];
    X1d843d9d8698d3c4_88 -> X1d843d9d8698d3c4_89;
    X1d843d9d8698d3c4_88 [label="239 <- Use(mv(240.0))\l241 <- chkd-Add(cp(237), cp(239))\lAssert mv(241.1) == false\l"];
    X1d843d9d8698d3c4_89 -> X1d843d9d8698d3c4_90;
    X1d843d9d8698d3c4_89 [label="236 <- Use(mv(241.0))\l244 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(244.1) == false\l"];
    X1d843d9d8698d3c4_90 -> X1d843d9d8698d3c4_91;
    X1d843d9d8698d3c4_90 [label="243 <- Use(mv(244.0))\l242 <- Not(mv(243))\l235 <- BitAnd(mv(236), mv(242))\l1 <- Cast-PointerWithExposedProvenance mv(235)\lGoto\l"];
    X1d843d9d8698d3c4_91 -> X1d843d9d8698d3c4_92;
    X1d843d9d8698d3c4_91 [label="245 <- chkd-Sub(cp(42), const ?_usize)\lAssert mv(245.1) == false\l"];
    X1d843d9d8698d3c4_92 -> X1d843d9d8698d3c4_30;
    X1d843d9d8698d3c4_92 [label="42 <- Use(mv(245.0))\lGoto\l"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_98 [label="5"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_97 [label="4"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_96 [label="3"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_95 [label="2"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_215 [label="1"];
    X1d843d9d8698d3c4_93 -> X1d843d9d8698d3c4_94 [label="other"];
    X1d843d9d8698d3c4_93 [label="SwitchInt cp(42)\l"];
    X1d843d9d8698d3c4_94 [label="Call\l"];
    X1d843d9d8698d3c4_95 -> X1d843d9d8698d3c4_204 [label="534"];
    X1d843d9d8698d3c4_95 [label="535 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_96 -> X1d843d9d8698d3c4_181 [label="470"];
    X1d843d9d8698d3c4_96 [label="471 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_97 -> X1d843d9d8698d3c4_146 [label="374"];
    X1d843d9d8698d3c4_97 [label="375 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_98 -> X1d843d9d8698d3c4_99 [label="246"];
    X1d843d9d8698d3c4_98 [label="247 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_99 -> X1d843d9d8698d3c4_100 [label="252"];
    X1d843d9d8698d3c4_99 [label="12 <- Use(mv(246))\l249 <- Use(cp(1))\l248 <- Cast-PtrToPtr mv(249)\l251 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_100 -> X1d843d9d8698d3c4_101 [label="250"];
    X1d843d9d8698d3c4_100 [label="Call\l"];
    X1d843d9d8698d3c4_101 -> X1d843d9d8698d3c4_103 [label="0"];
    X1d843d9d8698d3c4_101 -> X1d843d9d8698d3c4_102 [label="other"];
    X1d843d9d8698d3c4_101 [label="1 <- Use(mv(250))\l254 <- Use(cp((*248).0))\l253 <- Ne(mv(254), const ?_u8)\lSwitchInt mv(253)\l"];
    X1d843d9d8698d3c4_102 -> X1d843d9d8698d3c4_110 [label="255"];
    X1d843d9d8698d3c4_102 [label="256 <- Use(cp(12))\l257 <- Cast-PtrToPtr cp(15)\l258 <- Use(cp((*248).0))\lCall\l"];
    X1d843d9d8698d3c4_103 -> X1d843d9d8698d3c4_104 [label="259"];
    X1d843d9d8698d3c4_103 [label="260 <- Use(cp(12))\l261 <- Adt{0} (cp(248))\lCall\l"];
    X1d843d9d8698d3c4_104 -> X1d843d9d8698d3c4_105 [label="262"];
    X1d843d9d8698d3c4_104 [label="263 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_105 -> X1d843d9d8698d3c4_106 [label="264"];
    X1d843d9d8698d3c4_105 [label="1 <- Use(mv(262))\l265 <- Use(cp(1))\l267 <- Use(cp((*248).8))\l266 <- Cast-IntToInt mv(267)\lCall\l"];
    X1d843d9d8698d3c4_106 -> X1d843d9d8698d3c4_107;
    X1d843d9d8698d3c4_106 [label="1 <- Use(mv(264))\l271 <- Use(cp(1))\l270 <- Cast-PointerExposeAddress mv(271)\l273 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(273.1) == false\l"];
    X1d843d9d8698d3c4_107 -> X1d843d9d8698d3c4_108;
    X1d843d9d8698d3c4_107 [label="272 <- Use(mv(273.0))\l274 <- chkd-Add(cp(270), cp(272))\lAssert mv(274.1) == false\l"];
    X1d843d9d8698d3c4_108 -> X1d843d9d8698d3c4_109;
    X1d843d9d8698d3c4_108 [label="269 <- Use(mv(274.0))\l277 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(277.1) == false\l"];
    X1d843d9d8698d3c4_109 -> X1d843d9d8698d3c4_110;
    X1d843d9d8698d3c4_109 [label="276 <- Use(mv(277.0))\l275 <- Not(mv(276))\l268 <- BitAnd(mv(269), mv(275))\l1 <- Cast-PointerWithExposedProvenance mv(268)\lGoto\l"];
    X1d843d9d8698d3c4_110 -> X1d843d9d8698d3c4_111 [label="278"];
    X1d843d9d8698d3c4_110 [label="279 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_111 -> X1d843d9d8698d3c4_112 [label="284"];
    X1d843d9d8698d3c4_111 [label="12 <- Use(mv(278))\l281 <- Use(cp(1))\l280 <- Cast-PtrToPtr mv(281)\l283 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_112 -> X1d843d9d8698d3c4_113 [label="282"];
    X1d843d9d8698d3c4_112 [label="Call\l"];
    X1d843d9d8698d3c4_113 -> X1d843d9d8698d3c4_115 [label="0"];
    X1d843d9d8698d3c4_113 -> X1d843d9d8698d3c4_114 [label="other"];
    X1d843d9d8698d3c4_113 [label="1 <- Use(mv(282))\l286 <- Use(cp((*280).0))\l285 <- Ne(mv(286), const ?_u8)\lSwitchInt mv(285)\l"];
    X1d843d9d8698d3c4_114 -> X1d843d9d8698d3c4_122 [label="287"];
    X1d843d9d8698d3c4_114 [label="288 <- Use(cp(12))\l289 <- Cast-PtrToPtr cp(15)\l290 <- Use(cp((*280).0))\lCall\l"];
    X1d843d9d8698d3c4_115 -> X1d843d9d8698d3c4_116 [label="291"];
    X1d843d9d8698d3c4_115 [label="292 <- Use(cp(12))\l293 <- Adt{0} (cp(280))\lCall\l"];
    X1d843d9d8698d3c4_116 -> X1d843d9d8698d3c4_117 [label="294"];
    X1d843d9d8698d3c4_116 [label="295 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_117 -> X1d843d9d8698d3c4_118 [label="296"];
    X1d843d9d8698d3c4_117 [label="1 <- Use(mv(294))\l297 <- Use(cp(1))\l299 <- Use(cp((*280).8))\l298 <- Cast-IntToInt mv(299)\lCall\l"];
    X1d843d9d8698d3c4_118 -> X1d843d9d8698d3c4_119;
    X1d843d9d8698d3c4_118 [label="1 <- Use(mv(296))\l303 <- Use(cp(1))\l302 <- Cast-PointerExposeAddress mv(303)\l305 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(305.1) == false\l"];
    X1d843d9d8698d3c4_119 -> X1d843d9d8698d3c4_120;
    X1d843d9d8698d3c4_119 [label="304 <- Use(mv(305.0))\l306 <- chkd-Add(cp(302), cp(304))\lAssert mv(306.1) == false\l"];
    X1d843d9d8698d3c4_120 -> X1d843d9d8698d3c4_121;
    X1d843d9d8698d3c4_120 [label="301 <- Use(mv(306.0))\l309 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(309.1) == false\l"];
    X1d843d9d8698d3c4_121 -> X1d843d9d8698d3c4_122;
    X1d843d9d8698d3c4_121 [label="308 <- Use(mv(309.0))\l307 <- Not(mv(308))\l300 <- BitAnd(mv(301), mv(307))\l1 <- Cast-PointerWithExposedProvenance mv(300)\lGoto\l"];
    X1d843d9d8698d3c4_122 -> X1d843d9d8698d3c4_123 [label="310"];
    X1d843d9d8698d3c4_122 [label="311 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_123 -> X1d843d9d8698d3c4_124 [label="316"];
    X1d843d9d8698d3c4_123 [label="12 <- Use(mv(310))\l313 <- Use(cp(1))\l312 <- Cast-PtrToPtr mv(313)\l315 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_124 -> X1d843d9d8698d3c4_125 [label="314"];
    X1d843d9d8698d3c4_124 [label="Call\l"];
    X1d843d9d8698d3c4_125 -> X1d843d9d8698d3c4_127 [label="0"];
    X1d843d9d8698d3c4_125 -> X1d843d9d8698d3c4_126 [label="other"];
    X1d843d9d8698d3c4_125 [label="1 <- Use(mv(314))\l318 <- Use(cp((*312).0))\l317 <- Ne(mv(318), const ?_u8)\lSwitchInt mv(317)\l"];
    X1d843d9d8698d3c4_126 -> X1d843d9d8698d3c4_134 [label="319"];
    X1d843d9d8698d3c4_126 [label="320 <- Use(cp(12))\l321 <- Cast-PtrToPtr cp(15)\l322 <- Use(cp((*312).0))\lCall\l"];
    X1d843d9d8698d3c4_127 -> X1d843d9d8698d3c4_128 [label="323"];
    X1d843d9d8698d3c4_127 [label="324 <- Use(cp(12))\l325 <- Adt{0} (cp(312))\lCall\l"];
    X1d843d9d8698d3c4_128 -> X1d843d9d8698d3c4_129 [label="326"];
    X1d843d9d8698d3c4_128 [label="327 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_129 -> X1d843d9d8698d3c4_130 [label="328"];
    X1d843d9d8698d3c4_129 [label="1 <- Use(mv(326))\l329 <- Use(cp(1))\l331 <- Use(cp((*312).8))\l330 <- Cast-IntToInt mv(331)\lCall\l"];
    X1d843d9d8698d3c4_130 -> X1d843d9d8698d3c4_131;
    X1d843d9d8698d3c4_130 [label="1 <- Use(mv(328))\l335 <- Use(cp(1))\l334 <- Cast-PointerExposeAddress mv(335)\l337 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(337.1) == false\l"];
    X1d843d9d8698d3c4_131 -> X1d843d9d8698d3c4_132;
    X1d843d9d8698d3c4_131 [label="336 <- Use(mv(337.0))\l338 <- chkd-Add(cp(334), cp(336))\lAssert mv(338.1) == false\l"];
    X1d843d9d8698d3c4_132 -> X1d843d9d8698d3c4_133;
    X1d843d9d8698d3c4_132 [label="333 <- Use(mv(338.0))\l341 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(341.1) == false\l"];
    X1d843d9d8698d3c4_133 -> X1d843d9d8698d3c4_134;
    X1d843d9d8698d3c4_133 [label="340 <- Use(mv(341.0))\l339 <- Not(mv(340))\l332 <- BitAnd(mv(333), mv(339))\l1 <- Cast-PointerWithExposedProvenance mv(332)\lGoto\l"];
    X1d843d9d8698d3c4_134 -> X1d843d9d8698d3c4_135 [label="342"];
    X1d843d9d8698d3c4_134 [label="343 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_135 -> X1d843d9d8698d3c4_136 [label="348"];
    X1d843d9d8698d3c4_135 [label="12 <- Use(mv(342))\l345 <- Use(cp(1))\l344 <- Cast-PtrToPtr mv(345)\l347 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_136 -> X1d843d9d8698d3c4_137 [label="346"];
    X1d843d9d8698d3c4_136 [label="Call\l"];
    X1d843d9d8698d3c4_137 -> X1d843d9d8698d3c4_139 [label="0"];
    X1d843d9d8698d3c4_137 -> X1d843d9d8698d3c4_138 [label="other"];
    X1d843d9d8698d3c4_137 [label="1 <- Use(mv(346))\l350 <- Use(cp((*344).0))\l349 <- Ne(mv(350), const ?_u8)\lSwitchInt mv(349)\l"];
    X1d843d9d8698d3c4_138 -> X1d843d9d8698d3c4_215 [label="351"];
    X1d843d9d8698d3c4_138 [label="352 <- Use(cp(12))\l353 <- Cast-PtrToPtr cp(15)\l354 <- Use(cp((*344).0))\lCall\l"];
    X1d843d9d8698d3c4_139 -> X1d843d9d8698d3c4_140 [label="355"];
    X1d843d9d8698d3c4_139 [label="356 <- Use(cp(12))\l357 <- Adt{0} (cp(344))\lCall\l"];
    X1d843d9d8698d3c4_140 -> X1d843d9d8698d3c4_141 [label="358"];
    X1d843d9d8698d3c4_140 [label="359 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_141 -> X1d843d9d8698d3c4_142 [label="360"];
    X1d843d9d8698d3c4_141 [label="1 <- Use(mv(358))\l361 <- Use(cp(1))\l363 <- Use(cp((*344).8))\l362 <- Cast-IntToInt mv(363)\lCall\l"];
    X1d843d9d8698d3c4_142 -> X1d843d9d8698d3c4_143;
    X1d843d9d8698d3c4_142 [label="1 <- Use(mv(360))\l367 <- Use(cp(1))\l366 <- Cast-PointerExposeAddress mv(367)\l369 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(369.1) == false\l"];
    X1d843d9d8698d3c4_143 -> X1d843d9d8698d3c4_144;
    X1d843d9d8698d3c4_143 [label="368 <- Use(mv(369.0))\l370 <- chkd-Add(cp(366), cp(368))\lAssert mv(370.1) == false\l"];
    X1d843d9d8698d3c4_144 -> X1d843d9d8698d3c4_145;
    X1d843d9d8698d3c4_144 [label="365 <- Use(mv(370.0))\l373 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(373.1) == false\l"];
    X1d843d9d8698d3c4_145 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_145 [label="372 <- Use(mv(373.0))\l371 <- Not(mv(372))\l364 <- BitAnd(mv(365), mv(371))\l1 <- Cast-PointerWithExposedProvenance mv(364)\lGoto\l"];
    X1d843d9d8698d3c4_146 -> X1d843d9d8698d3c4_147 [label="380"];
    X1d843d9d8698d3c4_146 [label="12 <- Use(mv(374))\l377 <- Use(cp(1))\l376 <- Cast-PtrToPtr mv(377)\l379 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_147 -> X1d843d9d8698d3c4_148 [label="378"];
    X1d843d9d8698d3c4_147 [label="Call\l"];
    X1d843d9d8698d3c4_148 -> X1d843d9d8698d3c4_150 [label="0"];
    X1d843d9d8698d3c4_148 -> X1d843d9d8698d3c4_149 [label="other"];
    X1d843d9d8698d3c4_148 [label="1 <- Use(mv(378))\l382 <- Use(cp((*376).0))\l381 <- Ne(mv(382), const ?_u8)\lSwitchInt mv(381)\l"];
    X1d843d9d8698d3c4_149 -> X1d843d9d8698d3c4_157 [label="383"];
    X1d843d9d8698d3c4_149 [label="384 <- Use(cp(12))\l385 <- Cast-PtrToPtr cp(15)\l386 <- Use(cp((*376).0))\lCall\l"];
    X1d843d9d8698d3c4_150 -> X1d843d9d8698d3c4_151 [label="387"];
    X1d843d9d8698d3c4_150 [label="388 <- Use(cp(12))\l389 <- Adt{0} (cp(376))\lCall\l"];
    X1d843d9d8698d3c4_151 -> X1d843d9d8698d3c4_152 [label="390"];
    X1d843d9d8698d3c4_151 [label="391 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_152 -> X1d843d9d8698d3c4_153 [label="392"];
    X1d843d9d8698d3c4_152 [label="1 <- Use(mv(390))\l393 <- Use(cp(1))\l395 <- Use(cp((*376).8))\l394 <- Cast-IntToInt mv(395)\lCall\l"];
    X1d843d9d8698d3c4_153 -> X1d843d9d8698d3c4_154;
    X1d843d9d8698d3c4_153 [label="1 <- Use(mv(392))\l399 <- Use(cp(1))\l398 <- Cast-PointerExposeAddress mv(399)\l401 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(401.1) == false\l"];
    X1d843d9d8698d3c4_154 -> X1d843d9d8698d3c4_155;
    X1d843d9d8698d3c4_154 [label="400 <- Use(mv(401.0))\l402 <- chkd-Add(cp(398), cp(400))\lAssert mv(402.1) == false\l"];
    X1d843d9d8698d3c4_155 -> X1d843d9d8698d3c4_156;
    X1d843d9d8698d3c4_155 [label="397 <- Use(mv(402.0))\l405 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(405.1) == false\l"];
    X1d843d9d8698d3c4_156 -> X1d843d9d8698d3c4_157;
    X1d843d9d8698d3c4_156 [label="404 <- Use(mv(405.0))\l403 <- Not(mv(404))\l396 <- BitAnd(mv(397), mv(403))\l1 <- Cast-PointerWithExposedProvenance mv(396)\lGoto\l"];
    X1d843d9d8698d3c4_157 -> X1d843d9d8698d3c4_158 [label="406"];
    X1d843d9d8698d3c4_157 [label="407 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_158 -> X1d843d9d8698d3c4_159 [label="412"];
    X1d843d9d8698d3c4_158 [label="12 <- Use(mv(406))\l409 <- Use(cp(1))\l408 <- Cast-PtrToPtr mv(409)\l411 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_159 -> X1d843d9d8698d3c4_160 [label="410"];
    X1d843d9d8698d3c4_159 [label="Call\l"];
    X1d843d9d8698d3c4_160 -> X1d843d9d8698d3c4_162 [label="0"];
    X1d843d9d8698d3c4_160 -> X1d843d9d8698d3c4_161 [label="other"];
    X1d843d9d8698d3c4_160 [label="1 <- Use(mv(410))\l414 <- Use(cp((*408).0))\l413 <- Ne(mv(414), const ?_u8)\lSwitchInt mv(413)\l"];
    X1d843d9d8698d3c4_161 -> X1d843d9d8698d3c4_169 [label="415"];
    X1d843d9d8698d3c4_161 [label="416 <- Use(cp(12))\l417 <- Cast-PtrToPtr cp(15)\l418 <- Use(cp((*408).0))\lCall\l"];
    X1d843d9d8698d3c4_162 -> X1d843d9d8698d3c4_163 [label="419"];
    X1d843d9d8698d3c4_162 [label="420 <- Use(cp(12))\l421 <- Adt{0} (cp(408))\lCall\l"];
    X1d843d9d8698d3c4_163 -> X1d843d9d8698d3c4_164 [label="422"];
    X1d843d9d8698d3c4_163 [label="423 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_164 -> X1d843d9d8698d3c4_165 [label="424"];
    X1d843d9d8698d3c4_164 [label="1 <- Use(mv(422))\l425 <- Use(cp(1))\l427 <- Use(cp((*408).8))\l426 <- Cast-IntToInt mv(427)\lCall\l"];
    X1d843d9d8698d3c4_165 -> X1d843d9d8698d3c4_166;
    X1d843d9d8698d3c4_165 [label="1 <- Use(mv(424))\l431 <- Use(cp(1))\l430 <- Cast-PointerExposeAddress mv(431)\l433 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(433.1) == false\l"];
    X1d843d9d8698d3c4_166 -> X1d843d9d8698d3c4_167;
    X1d843d9d8698d3c4_166 [label="432 <- Use(mv(433.0))\l434 <- chkd-Add(cp(430), cp(432))\lAssert mv(434.1) == false\l"];
    X1d843d9d8698d3c4_167 -> X1d843d9d8698d3c4_168;
    X1d843d9d8698d3c4_167 [label="429 <- Use(mv(434.0))\l437 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(437.1) == false\l"];
    X1d843d9d8698d3c4_168 -> X1d843d9d8698d3c4_169;
    X1d843d9d8698d3c4_168 [label="436 <- Use(mv(437.0))\l435 <- Not(mv(436))\l428 <- BitAnd(mv(429), mv(435))\l1 <- Cast-PointerWithExposedProvenance mv(428)\lGoto\l"];
    X1d843d9d8698d3c4_169 -> X1d843d9d8698d3c4_170 [label="438"];
    X1d843d9d8698d3c4_169 [label="439 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_170 -> X1d843d9d8698d3c4_171 [label="444"];
    X1d843d9d8698d3c4_170 [label="12 <- Use(mv(438))\l441 <- Use(cp(1))\l440 <- Cast-PtrToPtr mv(441)\l443 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_171 -> X1d843d9d8698d3c4_172 [label="442"];
    X1d843d9d8698d3c4_171 [label="Call\l"];
    X1d843d9d8698d3c4_172 -> X1d843d9d8698d3c4_174 [label="0"];
    X1d843d9d8698d3c4_172 -> X1d843d9d8698d3c4_173 [label="other"];
    X1d843d9d8698d3c4_172 [label="1 <- Use(mv(442))\l446 <- Use(cp((*440).0))\l445 <- Ne(mv(446), const ?_u8)\lSwitchInt mv(445)\l"];
    X1d843d9d8698d3c4_173 -> X1d843d9d8698d3c4_215 [label="447"];
    X1d843d9d8698d3c4_173 [label="448 <- Use(cp(12))\l449 <- Cast-PtrToPtr cp(15)\l450 <- Use(cp((*440).0))\lCall\l"];
    X1d843d9d8698d3c4_174 -> X1d843d9d8698d3c4_175 [label="451"];
    X1d843d9d8698d3c4_174 [label="452 <- Use(cp(12))\l453 <- Adt{0} (cp(440))\lCall\l"];
    X1d843d9d8698d3c4_175 -> X1d843d9d8698d3c4_176 [label="454"];
    X1d843d9d8698d3c4_175 [label="455 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_176 -> X1d843d9d8698d3c4_177 [label="456"];
    X1d843d9d8698d3c4_176 [label="1 <- Use(mv(454))\l457 <- Use(cp(1))\l459 <- Use(cp((*440).8))\l458 <- Cast-IntToInt mv(459)\lCall\l"];
    X1d843d9d8698d3c4_177 -> X1d843d9d8698d3c4_178;
    X1d843d9d8698d3c4_177 [label="1 <- Use(mv(456))\l463 <- Use(cp(1))\l462 <- Cast-PointerExposeAddress mv(463)\l465 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(465.1) == false\l"];
    X1d843d9d8698d3c4_178 -> X1d843d9d8698d3c4_179;
    X1d843d9d8698d3c4_178 [label="464 <- Use(mv(465.0))\l466 <- chkd-Add(cp(462), cp(464))\lAssert mv(466.1) == false\l"];
    X1d843d9d8698d3c4_179 -> X1d843d9d8698d3c4_180;
    X1d843d9d8698d3c4_179 [label="461 <- Use(mv(466.0))\l469 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(469.1) == false\l"];
    X1d843d9d8698d3c4_180 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_180 [label="468 <- Use(mv(469.0))\l467 <- Not(mv(468))\l460 <- BitAnd(mv(461), mv(467))\l1 <- Cast-PointerWithExposedProvenance mv(460)\lGoto\l"];
    X1d843d9d8698d3c4_181 -> X1d843d9d8698d3c4_182 [label="476"];
    X1d843d9d8698d3c4_181 [label="12 <- Use(mv(470))\l473 <- Use(cp(1))\l472 <- Cast-PtrToPtr mv(473)\l475 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_182 -> X1d843d9d8698d3c4_183 [label="474"];
    X1d843d9d8698d3c4_182 [label="Call\l"];
    X1d843d9d8698d3c4_183 -> X1d843d9d8698d3c4_185 [label="0"];
    X1d843d9d8698d3c4_183 -> X1d843d9d8698d3c4_184 [label="other"];
    X1d843d9d8698d3c4_183 [label="1 <- Use(mv(474))\l478 <- Use(cp((*472).0))\l477 <- Ne(mv(478), const ?_u8)\lSwitchInt mv(477)\l"];
    X1d843d9d8698d3c4_184 -> X1d843d9d8698d3c4_192 [label="479"];
    X1d843d9d8698d3c4_184 [label="480 <- Use(cp(12))\l481 <- Cast-PtrToPtr cp(15)\l482 <- Use(cp((*472).0))\lCall\l"];
    X1d843d9d8698d3c4_185 -> X1d843d9d8698d3c4_186 [label="483"];
    X1d843d9d8698d3c4_185 [label="484 <- Use(cp(12))\l485 <- Adt{0} (cp(472))\lCall\l"];
    X1d843d9d8698d3c4_186 -> X1d843d9d8698d3c4_187 [label="486"];
    X1d843d9d8698d3c4_186 [label="487 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_187 -> X1d843d9d8698d3c4_188 [label="488"];
    X1d843d9d8698d3c4_187 [label="1 <- Use(mv(486))\l489 <- Use(cp(1))\l491 <- Use(cp((*472).8))\l490 <- Cast-IntToInt mv(491)\lCall\l"];
    X1d843d9d8698d3c4_188 -> X1d843d9d8698d3c4_189;
    X1d843d9d8698d3c4_188 [label="1 <- Use(mv(488))\l495 <- Use(cp(1))\l494 <- Cast-PointerExposeAddress mv(495)\l497 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(497.1) == false\l"];
    X1d843d9d8698d3c4_189 -> X1d843d9d8698d3c4_190;
    X1d843d9d8698d3c4_189 [label="496 <- Use(mv(497.0))\l498 <- chkd-Add(cp(494), cp(496))\lAssert mv(498.1) == false\l"];
    X1d843d9d8698d3c4_190 -> X1d843d9d8698d3c4_191;
    X1d843d9d8698d3c4_190 [label="493 <- Use(mv(498.0))\l501 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(501.1) == false\l"];
    X1d843d9d8698d3c4_191 -> X1d843d9d8698d3c4_192;
    X1d843d9d8698d3c4_191 [label="500 <- Use(mv(501.0))\l499 <- Not(mv(500))\l492 <- BitAnd(mv(493), mv(499))\l1 <- Cast-PointerWithExposedProvenance mv(492)\lGoto\l"];
    X1d843d9d8698d3c4_192 -> X1d843d9d8698d3c4_193 [label="502"];
    X1d843d9d8698d3c4_192 [label="503 <- Use(cp(12))\lCall\l"];
    X1d843d9d8698d3c4_193 -> X1d843d9d8698d3c4_194 [label="508"];
    X1d843d9d8698d3c4_193 [label="12 <- Use(mv(502))\l505 <- Use(cp(1))\l504 <- Cast-PtrToPtr mv(505)\l507 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_194 -> X1d843d9d8698d3c4_195 [label="506"];
    X1d843d9d8698d3c4_194 [label="Call\l"];
    X1d843d9d8698d3c4_195 -> X1d843d9d8698d3c4_197 [label="0"];
    X1d843d9d8698d3c4_195 -> X1d843d9d8698d3c4_196 [label="other"];
    X1d843d9d8698d3c4_195 [label="1 <- Use(mv(506))\l510 <- Use(cp((*504).0))\l509 <- Ne(mv(510), const ?_u8)\lSwitchInt mv(509)\l"];
    X1d843d9d8698d3c4_196 -> X1d843d9d8698d3c4_215 [label="511"];
    X1d843d9d8698d3c4_196 [label="512 <- Use(cp(12))\l513 <- Cast-PtrToPtr cp(15)\l514 <- Use(cp((*504).0))\lCall\l"];
    X1d843d9d8698d3c4_197 -> X1d843d9d8698d3c4_198 [label="515"];
    X1d843d9d8698d3c4_197 [label="516 <- Use(cp(12))\l517 <- Adt{0} (cp(504))\lCall\l"];
    X1d843d9d8698d3c4_198 -> X1d843d9d8698d3c4_199 [label="518"];
    X1d843d9d8698d3c4_198 [label="519 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_199 -> X1d843d9d8698d3c4_200 [label="520"];
    X1d843d9d8698d3c4_199 [label="1 <- Use(mv(518))\l521 <- Use(cp(1))\l523 <- Use(cp((*504).8))\l522 <- Cast-IntToInt mv(523)\lCall\l"];
    X1d843d9d8698d3c4_200 -> X1d843d9d8698d3c4_201;
    X1d843d9d8698d3c4_200 [label="1 <- Use(mv(520))\l527 <- Use(cp(1))\l526 <- Cast-PointerExposeAddress mv(527)\l529 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(529.1) == false\l"];
    X1d843d9d8698d3c4_201 -> X1d843d9d8698d3c4_202;
    X1d843d9d8698d3c4_201 [label="528 <- Use(mv(529.0))\l530 <- chkd-Add(cp(526), cp(528))\lAssert mv(530.1) == false\l"];
    X1d843d9d8698d3c4_202 -> X1d843d9d8698d3c4_203;
    X1d843d9d8698d3c4_202 [label="525 <- Use(mv(530.0))\l533 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(533.1) == false\l"];
    X1d843d9d8698d3c4_203 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_203 [label="532 <- Use(mv(533.0))\l531 <- Not(mv(532))\l524 <- BitAnd(mv(525), mv(531))\l1 <- Cast-PointerWithExposedProvenance mv(524)\lGoto\l"];
    X1d843d9d8698d3c4_204 -> X1d843d9d8698d3c4_205 [label="540"];
    X1d843d9d8698d3c4_204 [label="12 <- Use(mv(534))\l537 <- Use(cp(1))\l536 <- Cast-PtrToPtr mv(537)\l539 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_205 -> X1d843d9d8698d3c4_206 [label="538"];
    X1d843d9d8698d3c4_205 [label="Call\l"];
    X1d843d9d8698d3c4_206 -> X1d843d9d8698d3c4_208 [label="0"];
    X1d843d9d8698d3c4_206 -> X1d843d9d8698d3c4_207 [label="other"];
    X1d843d9d8698d3c4_206 [label="1 <- Use(mv(538))\l542 <- Use(cp((*536).0))\l541 <- Ne(mv(542), const ?_u8)\lSwitchInt mv(541)\l"];
    X1d843d9d8698d3c4_207 -> X1d843d9d8698d3c4_215 [label="543"];
    X1d843d9d8698d3c4_207 [label="544 <- Use(cp(12))\l545 <- Cast-PtrToPtr cp(15)\l546 <- Use(cp((*536).0))\lCall\l"];
    X1d843d9d8698d3c4_208 -> X1d843d9d8698d3c4_209 [label="547"];
    X1d843d9d8698d3c4_208 [label="548 <- Use(cp(12))\l549 <- Adt{0} (cp(536))\lCall\l"];
    X1d843d9d8698d3c4_209 -> X1d843d9d8698d3c4_210 [label="550"];
    X1d843d9d8698d3c4_209 [label="551 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_210 -> X1d843d9d8698d3c4_211 [label="552"];
    X1d843d9d8698d3c4_210 [label="1 <- Use(mv(550))\l553 <- Use(cp(1))\l555 <- Use(cp((*536).8))\l554 <- Cast-IntToInt mv(555)\lCall\l"];
    X1d843d9d8698d3c4_211 -> X1d843d9d8698d3c4_212;
    X1d843d9d8698d3c4_211 [label="1 <- Use(mv(552))\l559 <- Use(cp(1))\l558 <- Cast-PointerExposeAddress mv(559)\l561 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(561.1) == false\l"];
    X1d843d9d8698d3c4_212 -> X1d843d9d8698d3c4_213;
    X1d843d9d8698d3c4_212 [label="560 <- Use(mv(561.0))\l562 <- chkd-Add(cp(558), cp(560))\lAssert mv(562.1) == false\l"];
    X1d843d9d8698d3c4_213 -> X1d843d9d8698d3c4_214;
    X1d843d9d8698d3c4_213 [label="557 <- Use(mv(562.0))\l565 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(565.1) == false\l"];
    X1d843d9d8698d3c4_214 -> X1d843d9d8698d3c4_215;
    X1d843d9d8698d3c4_214 [label="564 <- Use(mv(565.0))\l563 <- Not(mv(564))\l556 <- BitAnd(mv(557), mv(563))\l1 <- Cast-PointerWithExposedProvenance mv(556)\lGoto\l"];
    X1d843d9d8698d3c4_215 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_215 -> X1d843d9d8698d3c4_216 [label="other"];
    X1d843d9d8698d3c4_215 [label="567 <- Lt(const ?_usize, const ?_usize)\lSwitchInt mv(567)\l"];
    X1d843d9d8698d3c4_216 -> X1d843d9d8698d3c4_227 [label="0"];
    X1d843d9d8698d3c4_216 -> X1d843d9d8698d3c4_217 [label="other"];
    X1d843d9d8698d3c4_216 [label="569 <- Use(cp(45))\l568 <- Gt(mv(569), const ?_usize)\lSwitchInt mv(568)\l"];
    X1d843d9d8698d3c4_217 -> X1d843d9d8698d3c4_218;
    X1d843d9d8698d3c4_217 [label="570 <- chkd-Sub(cp(45), const ?_usize)\lAssert mv(570.1) == false\l"];
    X1d843d9d8698d3c4_218 -> X1d843d9d8698d3c4_219 [label="575"];
    X1d843d9d8698d3c4_218 [label="45 <- Use(mv(570.0))\l572 <- Use(cp(1))\l571 <- Cast-PtrToPtr mv(572)\l574 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_219 -> X1d843d9d8698d3c4_220 [label="573"];
    X1d843d9d8698d3c4_219 [label="Call\l"];
    X1d843d9d8698d3c4_220 -> X1d843d9d8698d3c4_216 [label="0"];
    X1d843d9d8698d3c4_220 -> X1d843d9d8698d3c4_221 [label="other"];
    X1d843d9d8698d3c4_220 [label="1 <- Use(mv(573))\l577 <- Use(cp((*571).0))\l576 <- Eq(mv(577), const ?_u8)\lSwitchInt mv(576)\l"];
    X1d843d9d8698d3c4_221 -> X1d843d9d8698d3c4_222 [label="578"];
    X1d843d9d8698d3c4_221 [label="579 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_222 -> X1d843d9d8698d3c4_223 [label="580"];
    X1d843d9d8698d3c4_222 [label="1 <- Use(mv(578))\l581 <- Use(cp(1))\l583 <- Use(cp((*571).8))\l582 <- Cast-IntToInt mv(583)\lCall\l"];
    X1d843d9d8698d3c4_223 -> X1d843d9d8698d3c4_224;
    X1d843d9d8698d3c4_223 [label="1 <- Use(mv(580))\l587 <- Use(cp(1))\l586 <- Cast-PointerExposeAddress mv(587)\l589 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(589.1) == false\l"];
    X1d843d9d8698d3c4_224 -> X1d843d9d8698d3c4_225;
    X1d843d9d8698d3c4_224 [label="588 <- Use(mv(589.0))\l590 <- chkd-Add(cp(586), cp(588))\lAssert mv(590.1) == false\l"];
    X1d843d9d8698d3c4_225 -> X1d843d9d8698d3c4_226;
    X1d843d9d8698d3c4_225 [label="585 <- Use(mv(590.0))\l593 <- chkd-Sub(const ?_usize, const ?_usize)\lAssert mv(593.1) == false\l"];
    X1d843d9d8698d3c4_226 -> X1d843d9d8698d3c4_216;
    X1d843d9d8698d3c4_226 [label="592 <- Use(mv(593.0))\l591 <- Not(mv(592))\l584 <- BitAnd(mv(585), mv(591))\l1 <- Cast-PointerWithExposedProvenance mv(584)\lGoto\l"];
    X1d843d9d8698d3c4_227 -> X1d843d9d8698d3c4_228 [label="600"];
    X1d843d9d8698d3c4_227 [label="597 <- Use(cp(1))\l596 <- Cast-PtrToPtr mv(597)\l595 <- Use(cp((*596)))\l594 <- Cast-IntToInt mv(595)\l599 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_228 -> X1d843d9d8698d3c4_229 [label="598"];
    X1d843d9d8698d3c4_228 [label="Call\l"];
    X1d843d9d8698d3c4_229 -> X1d843d9d8698d3c4_230 [label="601"];
    X1d843d9d8698d3c4_229 [label="1 <- Use(mv(598))\l603 <- Use(cp(1))\l602 <- Cast-PtrToPtr mv(603)\lCall\l"];
    X1d843d9d8698d3c4_230 -> X1d843d9d8698d3c4_231 [label="604"];
    X1d843d9d8698d3c4_230 [label="605 <- Use(cp(1))\lCall\l"];
    X1d843d9d8698d3c4_231 [label="607 <- Cast-PtrToPtr cp(604)\l606 <- & (*607)\l608 <- Use(cp(3))\l0 <- Tuple (cp(606), mv(608), cp(601))\lReturn\l"];
  }
  X1d843d9d8698d3c4_0 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_1 -> X99398f9f14483c90_0 [label="mv(8),mv(9)"];
  X1d843d9d8698d3c4_3 -> X227aea0ec470d5ba_0 [label="mv(14)"];
  X1d843d9d8698d3c4_4 -> X9344cfdf8f55fc21_0 [label="mv(19),mv(20)"];
  X1d843d9d8698d3c4_5 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_7 -> X99398f9f14483c90_0 [label="mv(22),mv(23)"];
  X1d843d9d8698d3c4_8 -> X99398f9f14483c90_0 [label="mv(27),mv(28)"];
  X1d843d9d8698d3c4_14 -> Xe9140f1d0f7f9eb4_0 [label="mv(44),const ?_usize"];
  X1d843d9d8698d3c4_18 -> X921508901878e521_0 [label="mv(52),const ?_usize"];
  X1d843d9d8698d3c4_19 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_20 -> X99398f9f14483c90_0 [label="mv(56),mv(57)"];
  X1d843d9d8698d3c4_22 -> X619a8aacd3bae7ca_0 [label="mv(61),mv(62),mv(63)"];
  X1d843d9d8698d3c4_23 -> X9344cfdf8f55fc21_0 [label="mv(65),mv(66)"];
  X1d843d9d8698d3c4_24 -> X99398f9f14483c90_0 [label="mv(68),const ?_usize"];
  X1d843d9d8698d3c4_25 -> X99398f9f14483c90_0 [label="mv(70),mv(71)"];
  X1d843d9d8698d3c4_31 -> X921508901878e521_0 [label="mv(86),const ?_usize"];
  X1d843d9d8698d3c4_32 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_33 -> X99398f9f14483c90_0 [label="mv(90),mv(91)"];
  X1d843d9d8698d3c4_35 -> X619a8aacd3bae7ca_0 [label="mv(95),mv(96),mv(97)"];
  X1d843d9d8698d3c4_36 -> X9344cfdf8f55fc21_0 [label="mv(99),mv(100)"];
  X1d843d9d8698d3c4_37 -> X99398f9f14483c90_0 [label="mv(102),const ?_usize"];
  X1d843d9d8698d3c4_38 -> X99398f9f14483c90_0 [label="mv(104),mv(105)"];
  X1d843d9d8698d3c4_43 -> X921508901878e521_0 [label="mv(118),const ?_usize"];
  X1d843d9d8698d3c4_44 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_45 -> X99398f9f14483c90_0 [label="mv(122),mv(123)"];
  X1d843d9d8698d3c4_47 -> X619a8aacd3bae7ca_0 [label="mv(127),mv(128),mv(129)"];
  X1d843d9d8698d3c4_48 -> X9344cfdf8f55fc21_0 [label="mv(131),mv(132)"];
  X1d843d9d8698d3c4_49 -> X99398f9f14483c90_0 [label="mv(134),const ?_usize"];
  X1d843d9d8698d3c4_50 -> X99398f9f14483c90_0 [label="mv(136),mv(137)"];
  X1d843d9d8698d3c4_55 -> X921508901878e521_0 [label="mv(150),const ?_usize"];
  X1d843d9d8698d3c4_56 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_57 -> X99398f9f14483c90_0 [label="mv(154),mv(155)"];
  X1d843d9d8698d3c4_59 -> X619a8aacd3bae7ca_0 [label="mv(159),mv(160),mv(161)"];
  X1d843d9d8698d3c4_60 -> X9344cfdf8f55fc21_0 [label="mv(163),mv(164)"];
  X1d843d9d8698d3c4_61 -> X99398f9f14483c90_0 [label="mv(166),const ?_usize"];
  X1d843d9d8698d3c4_62 -> X99398f9f14483c90_0 [label="mv(168),mv(169)"];
  X1d843d9d8698d3c4_67 -> X921508901878e521_0 [label="mv(182),const ?_usize"];
  X1d843d9d8698d3c4_68 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_69 -> X99398f9f14483c90_0 [label="mv(186),mv(187)"];
  X1d843d9d8698d3c4_71 -> X619a8aacd3bae7ca_0 [label="mv(191),mv(192),mv(193)"];
  X1d843d9d8698d3c4_72 -> X9344cfdf8f55fc21_0 [label="mv(195),mv(196)"];
  X1d843d9d8698d3c4_73 -> X99398f9f14483c90_0 [label="mv(198),const ?_usize"];
  X1d843d9d8698d3c4_74 -> X99398f9f14483c90_0 [label="mv(200),mv(201)"];
  X1d843d9d8698d3c4_79 -> X921508901878e521_0 [label="mv(214),const ?_usize"];
  X1d843d9d8698d3c4_80 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_81 -> X99398f9f14483c90_0 [label="mv(218),mv(219)"];
  X1d843d9d8698d3c4_83 -> X619a8aacd3bae7ca_0 [label="mv(223),mv(224),mv(225)"];
  X1d843d9d8698d3c4_84 -> X9344cfdf8f55fc21_0 [label="mv(227),mv(228)"];
  X1d843d9d8698d3c4_85 -> X99398f9f14483c90_0 [label="mv(230),const ?_usize"];
  X1d843d9d8698d3c4_86 -> X99398f9f14483c90_0 [label="mv(232),mv(233)"];
  X1d843d9d8698d3c4_94 -> X8452db9b8b2010e2_0 [label=""];
  X1d843d9d8698d3c4_95 -> X921508901878e521_0 [label="mv(535),const ?_usize"];
  X1d843d9d8698d3c4_96 -> X921508901878e521_0 [label="mv(471),const ?_usize"];
  X1d843d9d8698d3c4_97 -> X921508901878e521_0 [label="mv(375),const ?_usize"];
  X1d843d9d8698d3c4_98 -> X921508901878e521_0 [label="mv(247),const ?_usize"];
  X1d843d9d8698d3c4_99 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_100 -> X99398f9f14483c90_0 [label="mv(251),mv(252)"];
  X1d843d9d8698d3c4_102 -> X619a8aacd3bae7ca_0 [label="mv(256),mv(257),mv(258)"];
  X1d843d9d8698d3c4_103 -> X9344cfdf8f55fc21_0 [label="mv(260),mv(261)"];
  X1d843d9d8698d3c4_104 -> X99398f9f14483c90_0 [label="mv(263),const ?_usize"];
  X1d843d9d8698d3c4_105 -> X99398f9f14483c90_0 [label="mv(265),mv(266)"];
  X1d843d9d8698d3c4_110 -> X921508901878e521_0 [label="mv(279),const ?_usize"];
  X1d843d9d8698d3c4_111 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_112 -> X99398f9f14483c90_0 [label="mv(283),mv(284)"];
  X1d843d9d8698d3c4_114 -> X619a8aacd3bae7ca_0 [label="mv(288),mv(289),mv(290)"];
  X1d843d9d8698d3c4_115 -> X9344cfdf8f55fc21_0 [label="mv(292),mv(293)"];
  X1d843d9d8698d3c4_116 -> X99398f9f14483c90_0 [label="mv(295),const ?_usize"];
  X1d843d9d8698d3c4_117 -> X99398f9f14483c90_0 [label="mv(297),mv(298)"];
  X1d843d9d8698d3c4_122 -> X921508901878e521_0 [label="mv(311),const ?_usize"];
  X1d843d9d8698d3c4_123 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_124 -> X99398f9f14483c90_0 [label="mv(315),mv(316)"];
  X1d843d9d8698d3c4_126 -> X619a8aacd3bae7ca_0 [label="mv(320),mv(321),mv(322)"];
  X1d843d9d8698d3c4_127 -> X9344cfdf8f55fc21_0 [label="mv(324),mv(325)"];
  X1d843d9d8698d3c4_128 -> X99398f9f14483c90_0 [label="mv(327),const ?_usize"];
  X1d843d9d8698d3c4_129 -> X99398f9f14483c90_0 [label="mv(329),mv(330)"];
  X1d843d9d8698d3c4_134 -> X921508901878e521_0 [label="mv(343),const ?_usize"];
  X1d843d9d8698d3c4_135 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_136 -> X99398f9f14483c90_0 [label="mv(347),mv(348)"];
  X1d843d9d8698d3c4_138 -> X619a8aacd3bae7ca_0 [label="mv(352),mv(353),mv(354)"];
  X1d843d9d8698d3c4_139 -> X9344cfdf8f55fc21_0 [label="mv(356),mv(357)"];
  X1d843d9d8698d3c4_140 -> X99398f9f14483c90_0 [label="mv(359),const ?_usize"];
  X1d843d9d8698d3c4_141 -> X99398f9f14483c90_0 [label="mv(361),mv(362)"];
  X1d843d9d8698d3c4_146 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_147 -> X99398f9f14483c90_0 [label="mv(379),mv(380)"];
  X1d843d9d8698d3c4_149 -> X619a8aacd3bae7ca_0 [label="mv(384),mv(385),mv(386)"];
  X1d843d9d8698d3c4_150 -> X9344cfdf8f55fc21_0 [label="mv(388),mv(389)"];
  X1d843d9d8698d3c4_151 -> X99398f9f14483c90_0 [label="mv(391),const ?_usize"];
  X1d843d9d8698d3c4_152 -> X99398f9f14483c90_0 [label="mv(393),mv(394)"];
  X1d843d9d8698d3c4_157 -> X921508901878e521_0 [label="mv(407),const ?_usize"];
  X1d843d9d8698d3c4_158 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_159 -> X99398f9f14483c90_0 [label="mv(411),mv(412)"];
  X1d843d9d8698d3c4_161 -> X619a8aacd3bae7ca_0 [label="mv(416),mv(417),mv(418)"];
  X1d843d9d8698d3c4_162 -> X9344cfdf8f55fc21_0 [label="mv(420),mv(421)"];
  X1d843d9d8698d3c4_163 -> X99398f9f14483c90_0 [label="mv(423),const ?_usize"];
  X1d843d9d8698d3c4_164 -> X99398f9f14483c90_0 [label="mv(425),mv(426)"];
  X1d843d9d8698d3c4_169 -> X921508901878e521_0 [label="mv(439),const ?_usize"];
  X1d843d9d8698d3c4_170 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_171 -> X99398f9f14483c90_0 [label="mv(443),mv(444)"];
  X1d843d9d8698d3c4_173 -> X619a8aacd3bae7ca_0 [label="mv(448),mv(449),mv(450)"];
  X1d843d9d8698d3c4_174 -> X9344cfdf8f55fc21_0 [label="mv(452),mv(453)"];
  X1d843d9d8698d3c4_175 -> X99398f9f14483c90_0 [label="mv(455),const ?_usize"];
  X1d843d9d8698d3c4_176 -> X99398f9f14483c90_0 [label="mv(457),mv(458)"];
  X1d843d9d8698d3c4_181 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_182 -> X99398f9f14483c90_0 [label="mv(475),mv(476)"];
  X1d843d9d8698d3c4_184 -> X619a8aacd3bae7ca_0 [label="mv(480),mv(481),mv(482)"];
  X1d843d9d8698d3c4_185 -> X9344cfdf8f55fc21_0 [label="mv(484),mv(485)"];
  X1d843d9d8698d3c4_186 -> X99398f9f14483c90_0 [label="mv(487),const ?_usize"];
  X1d843d9d8698d3c4_187 -> X99398f9f14483c90_0 [label="mv(489),mv(490)"];
  X1d843d9d8698d3c4_192 -> X921508901878e521_0 [label="mv(503),const ?_usize"];
  X1d843d9d8698d3c4_193 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_194 -> X99398f9f14483c90_0 [label="mv(507),mv(508)"];
  X1d843d9d8698d3c4_196 -> X619a8aacd3bae7ca_0 [label="mv(512),mv(513),mv(514)"];
  X1d843d9d8698d3c4_197 -> X9344cfdf8f55fc21_0 [label="mv(516),mv(517)"];
  X1d843d9d8698d3c4_198 -> X99398f9f14483c90_0 [label="mv(519),const ?_usize"];
  X1d843d9d8698d3c4_199 -> X99398f9f14483c90_0 [label="mv(521),mv(522)"];
  X1d843d9d8698d3c4_204 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_205 -> X99398f9f14483c90_0 [label="mv(539),mv(540)"];
  X1d843d9d8698d3c4_207 -> X619a8aacd3bae7ca_0 [label="mv(544),mv(545),mv(546)"];
  X1d843d9d8698d3c4_208 -> X9344cfdf8f55fc21_0 [label="mv(548),mv(549)"];
  X1d843d9d8698d3c4_209 -> X99398f9f14483c90_0 [label="mv(551),const ?_usize"];
  X1d843d9d8698d3c4_210 -> X99398f9f14483c90_0 [label="mv(553),mv(554)"];
  X1d843d9d8698d3c4_218 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_219 -> X99398f9f14483c90_0 [label="mv(574),mv(575)"];
  X1d843d9d8698d3c4_221 -> X99398f9f14483c90_0 [label="mv(579),const ?_usize"];
  X1d843d9d8698d3c4_222 -> X99398f9f14483c90_0 [label="mv(581),mv(582)"];
  X1d843d9d8698d3c4_227 -> X31bb347943910dd2_0 [label=""];
  X1d843d9d8698d3c4_228 -> X99398f9f14483c90_0 [label="mv(599),mv(600)"];
  X1d843d9d8698d3c4_229 -> X2bbf04117b29714a_0 [label="mv(602),cp(594)"];
  X1d843d9d8698d3c4_230 -> X99398f9f14483c90_0 [label="mv(605),cp(594)"];
  subgraph cluster_462 {
    label="pinocchio::entrypoint::cl\none_account_info";
    style="filled";
    color=lightgray;
    node_463 [label="LOCALS\l0 = ()\l1 = *mut pinocchio::account_info::AccountInfo\l2 = *const pinocchio::account_info::AccountInfo\l3 = u8\l4 = ()\l5 = pinocchio::account_info::AccountInfo\l6 = *mut pinocchio::account_info::Account\l7 = *const pinocchio::account_info::AccountInfo\l8 = usize\l", style="filled", color=palegreen3];
    X619a8aacd3bae7ca_0 -> X619a8aacd3bae7ca_1 [label="7"];
    X619a8aacd3bae7ca_0 [label="8 <- Cast-IntToInt cp(3)\lCall\l"];
    X619a8aacd3bae7ca_1 -> X619a8aacd3bae7ca_2 [label="4"];
    X619a8aacd3bae7ca_1 [label="6 <- Use(cp((*7).0))\l5 <- Adt{0} (mv(6))\lCall\l"];
    X619a8aacd3bae7ca_2 [label="Return\l"];
  }
  X619a8aacd3bae7ca_0 -> X2a511a2fc7bfad7f_0 [label="cp(2),mv(8)"];
  X619a8aacd3bae7ca_1 -> X9344cfdf8f55fc21_0 [label="cp(1),mv(5)"];
  subgraph cluster_464 {
    label="pinocchio::account_info::\nAccountInfo::is_owned_by";
    style="filled";
    color=lightgray;
    node_465 [label="LOCALS\l0 = bool\l1 = &pinocchio::account_info::AccountInfo\l2 = &[u8; 32]\l3 = &&[u8; 32]\l4 = &[u8; 32]\l5 = &&[u8; 32]\l", style="filled", color=palegreen3];
    X59e9e813b3803772_0 -> X59e9e813b3803772_1 [label="4"];
    X59e9e813b3803772_0 [label="Call\l"];
    X59e9e813b3803772_1 -> X59e9e813b3803772_2 [label="0"];
    X59e9e813b3803772_1 [label="3 <- & 4\l5 <- & 2\lCall\l"];
    X59e9e813b3803772_2 [label="Return\l"];
  }
  X59e9e813b3803772_0 -> Xdc861846860b6105_0 [label="cp(1)"];
  X59e9e813b3803772_1 -> X7d20e7238026070b_0 [label="mv(3),mv(5)"];
  subgraph cluster_466 {
    label="pinocchio::account_info::\nAccountInfo::borrow_data_\nunchecked";
    style="filled";
    color=lightgray;
    node_467 [label="LOCALS\l0 = &[u8]\l1 = &pinocchio::account_info::AccountInfo\l2 = *const u8\l3 = *mut u8\l4 = usize\l", style="filled", color=palegreen3];
    X18b054a9564b373a_0 -> X18b054a9564b373a_1 [label="3"];
    X18b054a9564b373a_0 [label="Call\l"];
    X18b054a9564b373a_1 -> X18b054a9564b373a_2 [label="4"];
    X18b054a9564b373a_1 [label="2 <- Cast-PtrToPtr mv(3)\lCall\l"];
    X18b054a9564b373a_2 -> X18b054a9564b373a_3 [label="0"];
    X18b054a9564b373a_2 [label="Call\l"];
    X18b054a9564b373a_3 [label="Return\l"];
  }
  X18b054a9564b373a_0 -> X589d41d6375532a6_0 [label="cp(1)"];
  X18b054a9564b373a_1 -> Xc4d065469025948c_0 [label="cp(1)"];
  X18b054a9564b373a_2 -> X2bbf04117b29714a_0 [label="mv(2),mv(4)"];
  subgraph cluster_468 {
    label="pinocchio::account_info::\nAccountInfo::owner";
    style="filled";
    color=lightgray;
    node_469 [label="LOCALS\l0 = &[u8; 32]\l1 = &pinocchio::account_info::AccountInfo\l2 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xdc861846860b6105_0 [label="2 <- CopyForDeref((*1).0)\l0 <- & (*2).6\lReturn\l"];
  }
  subgraph cluster_470 {
    label="pinocchio::account_info::\nAccountInfo::data_len";
    style="filled";
    color=lightgray;
    node_471 [label="LOCALS\l0 = usize\l1 = &pinocchio::account_info::AccountInfo\l2 = u64\l3 = *mut pinocchio::account_info::Account\l", style="filled", color=palegreen3];
    Xc4d065469025948c_0 [label="3 <- CopyForDeref((*1).0)\l2 <- Use(cp((*3).8))\l0 <- Cast-IntToInt mv(2)\lReturn\l"];
  }
  subgraph cluster_472 {
    label="pinocchio::cpi::set_retur\nn_data";
    style="filled";
    color=lightgray;
    node_473 [label="LOCALS\l0 = ()\l1 = &[u8]\l2 = &[u8]\l", style="filled", color=palegreen3];
    Xf3bdd71fa9654efd_0 -> Xf3bdd71fa9654efd_1 [label="2"];
    Xf3bdd71fa9654efd_0 [label="Call\l"];
    Xf3bdd71fa9654efd_1 [label="Return\l"];
  }
  Xf3bdd71fa9654efd_0 -> X780f31d308d65371_0 [label="cp(1)"];
  subgraph cluster_474 {
    label="pinocchio::log::sol_log";
    style="filled";
    color=lightgray;
    node_475 [label="LOCALS\l0 = ()\l1 = &str\l2 = &str\l", style="filled", color=palegreen3];
    Xf793977e1a6d5f00_0 -> Xf793977e1a6d5f00_1 [label="2"];
    Xf793977e1a6d5f00_0 [label="Call\l"];
    Xf793977e1a6d5f00_1 [label="Return\l"];
  }
  Xf793977e1a6d5f00_0 -> Xfa60cf51be3f9fb1_0 [label="cp(1)"];
  subgraph cluster_476 {
    label="entrypoint::entrypoint";
    style="filled";
    color=lightgray;
    node_477 [label="LOCALS\l0 = u64\l1 = *mut u8\l2 = [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l3 = &[u8; 32]\l4 = usize\l5 = &[u8]\l6 = (&[u8; 32], usize, &[u8])\l7 = &mut [core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l8 = core::result::Result<(), pinocchio::program_error::ProgramError>\l9 = &&[u8; 32]\l10 = &[pinocchio::account_info::AccountInfo]\l11 = *const pinocchio::account_info::AccountInfo\l12 = *const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l13 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>]\l14 = &[core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>; 254]\l15 = &&[u8]\l16 = isize\l17 = pinocchio::program_error::ProgramError\l18 = &[u8; 32]\l19 = &[u8]\l", style="filled", color=palegreen3];
    X35727d23baa70bc_0 -> X35727d23baa70bc_1 [label="6"];
    X35727d23baa70bc_0 [label="2 <- Repeat const core::mem::MaybeUninit<pinocchio::account_info::AccountInfo>\l7 <- &mut 2\lCall\l"];
    X35727d23baa70bc_1 -> X35727d23baa70bc_2 [label="12"];
    X35727d23baa70bc_1 [label="3 <- Use(cp(6.0))\l4 <- Use(cp(6.1))\l5 <- Use(cp(6.2))\l9 <- & 3\l18 <- CopyForDeref((*9))\l14 <- & 2\l13 <- Cast-PointerCoercion(Unsize) mv(14)\lCall\l"];
    X35727d23baa70bc_2 -> X35727d23baa70bc_3 [label="10"];
    X35727d23baa70bc_2 [label="11 <- Cast-PtrToPtr mv(12)\lCall\l"];
    X35727d23baa70bc_3 -> X35727d23baa70bc_4 [label="8"];
    X35727d23baa70bc_3 [label="15 <- & 5\l19 <- CopyForDeref((*15))\lCall\l"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_7 [label="0"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_6 [label="1"];
    X35727d23baa70bc_4 -> X35727d23baa70bc_5 [label="other"];
    X35727d23baa70bc_4 [label="16 <- Discriminant(8)\lSwitchInt mv(16)\l"];
    X35727d23baa70bc_5 [label="Unreachable\l"];
    X35727d23baa70bc_6 -> X35727d23baa70bc_9 [label="0"];
    X35727d23baa70bc_6 [label="17 <- Use(mv((8 as variant 1).0))\lCall\l"];
    X35727d23baa70bc_7 -> X35727d23baa70bc_8;
    X35727d23baa70bc_7 [label="0 <- Use(const ?_u64)\lGoto\l"];
    X35727d23baa70bc_8 [label="Return\l"];
    X35727d23baa70bc_9 -> X35727d23baa70bc_8;
    X35727d23baa70bc_9 [label="Goto\l"];
  }
  X35727d23baa70bc_0 -> X1d843d9d8698d3c4_0 [label="cp(1),cp(7)"];
  X35727d23baa70bc_1 -> X2eb64500281ee9c3_0 [label="mv(13)"];
  X35727d23baa70bc_2 -> X3ef89f86f6c5d4d6_0 [label="cp(11),cp(4)"];
  X35727d23baa70bc_3 -> X6c5f82dfbe192777_0 [label="cp(18),cp(10),cp(19)"];
  X35727d23baa70bc_6 -> X86d9ec07d37ae118_0 [label="mv(17)"];
}
